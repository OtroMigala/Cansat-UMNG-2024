
pruebabmp3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a938  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005cc  0800aa48  0800aa48  0000ba48  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b014  0800b014  0000d1d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800b014  0800b014  0000c014  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b01c  0800b01c  0000d1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b01c  0800b01c  0000c01c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b020  0800b020  0000c020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  0800b024  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000838  200001d8  0800b1fc  0000d1d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000a10  0800b1fc  0000da10  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000d1d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cd60  00000000  00000000  0000d201  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002295  00000000  00000000  00019f61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b60  00000000  00000000  0001c1f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008d6  00000000  00000000  0001cd58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018898  00000000  00000000  0001d62e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f28e  00000000  00000000  00035ec6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000876bc  00000000  00000000  00045154  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cc810  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000477c  00000000  00000000  000cc854  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  000d0fd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d8 	.word	0x200001d8
 800012c:	00000000 	.word	0x00000000
 8000130:	0800aa30 	.word	0x0800aa30

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001dc 	.word	0x200001dc
 800014c:	0800aa30 	.word	0x0800aa30

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	@ 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000dd6:	2afd      	cmp	r2, #253	@ 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	@ 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	@ 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	@ 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__aeabi_f2iz>:
 8001024:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001028:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 800102c:	d30f      	bcc.n	800104e <__aeabi_f2iz+0x2a>
 800102e:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8001032:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001036:	d90d      	bls.n	8001054 <__aeabi_f2iz+0x30>
 8001038:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800103c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001040:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8001044:	fa23 f002 	lsr.w	r0, r3, r2
 8001048:	bf18      	it	ne
 800104a:	4240      	negne	r0, r0
 800104c:	4770      	bx	lr
 800104e:	f04f 0000 	mov.w	r0, #0
 8001052:	4770      	bx	lr
 8001054:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001058:	d101      	bne.n	800105e <__aeabi_f2iz+0x3a>
 800105a:	0242      	lsls	r2, r0, #9
 800105c:	d105      	bne.n	800106a <__aeabi_f2iz+0x46>
 800105e:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8001062:	bf08      	it	eq
 8001064:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8001068:	4770      	bx	lr
 800106a:	f04f 0000 	mov.w	r0, #0
 800106e:	4770      	bx	lr

08001070 <__aeabi_ldivmod>:
 8001070:	b97b      	cbnz	r3, 8001092 <__aeabi_ldivmod+0x22>
 8001072:	b972      	cbnz	r2, 8001092 <__aeabi_ldivmod+0x22>
 8001074:	2900      	cmp	r1, #0
 8001076:	bfbe      	ittt	lt
 8001078:	2000      	movlt	r0, #0
 800107a:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 800107e:	e006      	blt.n	800108e <__aeabi_ldivmod+0x1e>
 8001080:	bf08      	it	eq
 8001082:	2800      	cmpeq	r0, #0
 8001084:	bf1c      	itt	ne
 8001086:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 800108a:	f04f 30ff 	movne.w	r0, #4294967295
 800108e:	f000 b9d1 	b.w	8001434 <__aeabi_idiv0>
 8001092:	f1ad 0c08 	sub.w	ip, sp, #8
 8001096:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800109a:	2900      	cmp	r1, #0
 800109c:	db09      	blt.n	80010b2 <__aeabi_ldivmod+0x42>
 800109e:	2b00      	cmp	r3, #0
 80010a0:	db1a      	blt.n	80010d8 <__aeabi_ldivmod+0x68>
 80010a2:	f000 f86b 	bl	800117c <__udivmoddi4>
 80010a6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80010aa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80010ae:	b004      	add	sp, #16
 80010b0:	4770      	bx	lr
 80010b2:	4240      	negs	r0, r0
 80010b4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	db1b      	blt.n	80010f4 <__aeabi_ldivmod+0x84>
 80010bc:	f000 f85e 	bl	800117c <__udivmoddi4>
 80010c0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80010c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80010c8:	b004      	add	sp, #16
 80010ca:	4240      	negs	r0, r0
 80010cc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80010d0:	4252      	negs	r2, r2
 80010d2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80010d6:	4770      	bx	lr
 80010d8:	4252      	negs	r2, r2
 80010da:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80010de:	f000 f84d 	bl	800117c <__udivmoddi4>
 80010e2:	f8dd e004 	ldr.w	lr, [sp, #4]
 80010e6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80010ea:	b004      	add	sp, #16
 80010ec:	4240      	negs	r0, r0
 80010ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80010f2:	4770      	bx	lr
 80010f4:	4252      	negs	r2, r2
 80010f6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80010fa:	f000 f83f 	bl	800117c <__udivmoddi4>
 80010fe:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001102:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001106:	b004      	add	sp, #16
 8001108:	4252      	negs	r2, r2
 800110a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800110e:	4770      	bx	lr

08001110 <__aeabi_d2lz>:
 8001110:	b538      	push	{r3, r4, r5, lr}
 8001112:	2200      	movs	r2, #0
 8001114:	2300      	movs	r3, #0
 8001116:	4604      	mov	r4, r0
 8001118:	460d      	mov	r5, r1
 800111a:	f7ff fc4f 	bl	80009bc <__aeabi_dcmplt>
 800111e:	b928      	cbnz	r0, 800112c <__aeabi_d2lz+0x1c>
 8001120:	4620      	mov	r0, r4
 8001122:	4629      	mov	r1, r5
 8001124:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001128:	f000 b80a 	b.w	8001140 <__aeabi_d2ulz>
 800112c:	4620      	mov	r0, r4
 800112e:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8001132:	f000 f805 	bl	8001140 <__aeabi_d2ulz>
 8001136:	4240      	negs	r0, r0
 8001138:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800113c:	bd38      	pop	{r3, r4, r5, pc}
 800113e:	bf00      	nop

08001140 <__aeabi_d2ulz>:
 8001140:	b5d0      	push	{r4, r6, r7, lr}
 8001142:	2200      	movs	r2, #0
 8001144:	4b0b      	ldr	r3, [pc, #44]	@ (8001174 <__aeabi_d2ulz+0x34>)
 8001146:	4606      	mov	r6, r0
 8001148:	460f      	mov	r7, r1
 800114a:	f7ff f9c5 	bl	80004d8 <__aeabi_dmul>
 800114e:	f7ff fc9b 	bl	8000a88 <__aeabi_d2uiz>
 8001152:	4604      	mov	r4, r0
 8001154:	f7ff f946 	bl	80003e4 <__aeabi_ui2d>
 8001158:	2200      	movs	r2, #0
 800115a:	4b07      	ldr	r3, [pc, #28]	@ (8001178 <__aeabi_d2ulz+0x38>)
 800115c:	f7ff f9bc 	bl	80004d8 <__aeabi_dmul>
 8001160:	4602      	mov	r2, r0
 8001162:	460b      	mov	r3, r1
 8001164:	4630      	mov	r0, r6
 8001166:	4639      	mov	r1, r7
 8001168:	f7fe fffe 	bl	8000168 <__aeabi_dsub>
 800116c:	f7ff fc8c 	bl	8000a88 <__aeabi_d2uiz>
 8001170:	4621      	mov	r1, r4
 8001172:	bdd0      	pop	{r4, r6, r7, pc}
 8001174:	3df00000 	.word	0x3df00000
 8001178:	41f00000 	.word	0x41f00000

0800117c <__udivmoddi4>:
 800117c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001180:	9d08      	ldr	r5, [sp, #32]
 8001182:	460c      	mov	r4, r1
 8001184:	2b00      	cmp	r3, #0
 8001186:	d14e      	bne.n	8001226 <__udivmoddi4+0xaa>
 8001188:	4694      	mov	ip, r2
 800118a:	458c      	cmp	ip, r1
 800118c:	4686      	mov	lr, r0
 800118e:	fab2 f282 	clz	r2, r2
 8001192:	d962      	bls.n	800125a <__udivmoddi4+0xde>
 8001194:	b14a      	cbz	r2, 80011aa <__udivmoddi4+0x2e>
 8001196:	f1c2 0320 	rsb	r3, r2, #32
 800119a:	4091      	lsls	r1, r2
 800119c:	fa20 f303 	lsr.w	r3, r0, r3
 80011a0:	fa0c fc02 	lsl.w	ip, ip, r2
 80011a4:	4319      	orrs	r1, r3
 80011a6:	fa00 fe02 	lsl.w	lr, r0, r2
 80011aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80011ae:	fbb1 f4f7 	udiv	r4, r1, r7
 80011b2:	fb07 1114 	mls	r1, r7, r4, r1
 80011b6:	fa1f f68c 	uxth.w	r6, ip
 80011ba:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80011be:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80011c2:	fb04 f106 	mul.w	r1, r4, r6
 80011c6:	4299      	cmp	r1, r3
 80011c8:	d90a      	bls.n	80011e0 <__udivmoddi4+0x64>
 80011ca:	eb1c 0303 	adds.w	r3, ip, r3
 80011ce:	f104 30ff 	add.w	r0, r4, #4294967295
 80011d2:	f080 8110 	bcs.w	80013f6 <__udivmoddi4+0x27a>
 80011d6:	4299      	cmp	r1, r3
 80011d8:	f240 810d 	bls.w	80013f6 <__udivmoddi4+0x27a>
 80011dc:	3c02      	subs	r4, #2
 80011de:	4463      	add	r3, ip
 80011e0:	1a59      	subs	r1, r3, r1
 80011e2:	fbb1 f0f7 	udiv	r0, r1, r7
 80011e6:	fb07 1110 	mls	r1, r7, r0, r1
 80011ea:	fb00 f606 	mul.w	r6, r0, r6
 80011ee:	fa1f f38e 	uxth.w	r3, lr
 80011f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80011f6:	429e      	cmp	r6, r3
 80011f8:	d90a      	bls.n	8001210 <__udivmoddi4+0x94>
 80011fa:	eb1c 0303 	adds.w	r3, ip, r3
 80011fe:	f100 31ff 	add.w	r1, r0, #4294967295
 8001202:	f080 80fa 	bcs.w	80013fa <__udivmoddi4+0x27e>
 8001206:	429e      	cmp	r6, r3
 8001208:	f240 80f7 	bls.w	80013fa <__udivmoddi4+0x27e>
 800120c:	4463      	add	r3, ip
 800120e:	3802      	subs	r0, #2
 8001210:	2100      	movs	r1, #0
 8001212:	1b9b      	subs	r3, r3, r6
 8001214:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8001218:	b11d      	cbz	r5, 8001222 <__udivmoddi4+0xa6>
 800121a:	40d3      	lsrs	r3, r2
 800121c:	2200      	movs	r2, #0
 800121e:	e9c5 3200 	strd	r3, r2, [r5]
 8001222:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001226:	428b      	cmp	r3, r1
 8001228:	d905      	bls.n	8001236 <__udivmoddi4+0xba>
 800122a:	b10d      	cbz	r5, 8001230 <__udivmoddi4+0xb4>
 800122c:	e9c5 0100 	strd	r0, r1, [r5]
 8001230:	2100      	movs	r1, #0
 8001232:	4608      	mov	r0, r1
 8001234:	e7f5      	b.n	8001222 <__udivmoddi4+0xa6>
 8001236:	fab3 f183 	clz	r1, r3
 800123a:	2900      	cmp	r1, #0
 800123c:	d146      	bne.n	80012cc <__udivmoddi4+0x150>
 800123e:	42a3      	cmp	r3, r4
 8001240:	d302      	bcc.n	8001248 <__udivmoddi4+0xcc>
 8001242:	4290      	cmp	r0, r2
 8001244:	f0c0 80ee 	bcc.w	8001424 <__udivmoddi4+0x2a8>
 8001248:	1a86      	subs	r6, r0, r2
 800124a:	eb64 0303 	sbc.w	r3, r4, r3
 800124e:	2001      	movs	r0, #1
 8001250:	2d00      	cmp	r5, #0
 8001252:	d0e6      	beq.n	8001222 <__udivmoddi4+0xa6>
 8001254:	e9c5 6300 	strd	r6, r3, [r5]
 8001258:	e7e3      	b.n	8001222 <__udivmoddi4+0xa6>
 800125a:	2a00      	cmp	r2, #0
 800125c:	f040 808f 	bne.w	800137e <__udivmoddi4+0x202>
 8001260:	eba1 040c 	sub.w	r4, r1, ip
 8001264:	2101      	movs	r1, #1
 8001266:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800126a:	fa1f f78c 	uxth.w	r7, ip
 800126e:	fbb4 f6f8 	udiv	r6, r4, r8
 8001272:	fb08 4416 	mls	r4, r8, r6, r4
 8001276:	fb07 f006 	mul.w	r0, r7, r6
 800127a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800127e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8001282:	4298      	cmp	r0, r3
 8001284:	d908      	bls.n	8001298 <__udivmoddi4+0x11c>
 8001286:	eb1c 0303 	adds.w	r3, ip, r3
 800128a:	f106 34ff 	add.w	r4, r6, #4294967295
 800128e:	d202      	bcs.n	8001296 <__udivmoddi4+0x11a>
 8001290:	4298      	cmp	r0, r3
 8001292:	f200 80cb 	bhi.w	800142c <__udivmoddi4+0x2b0>
 8001296:	4626      	mov	r6, r4
 8001298:	1a1c      	subs	r4, r3, r0
 800129a:	fbb4 f0f8 	udiv	r0, r4, r8
 800129e:	fb08 4410 	mls	r4, r8, r0, r4
 80012a2:	fb00 f707 	mul.w	r7, r0, r7
 80012a6:	fa1f f38e 	uxth.w	r3, lr
 80012aa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80012ae:	429f      	cmp	r7, r3
 80012b0:	d908      	bls.n	80012c4 <__udivmoddi4+0x148>
 80012b2:	eb1c 0303 	adds.w	r3, ip, r3
 80012b6:	f100 34ff 	add.w	r4, r0, #4294967295
 80012ba:	d202      	bcs.n	80012c2 <__udivmoddi4+0x146>
 80012bc:	429f      	cmp	r7, r3
 80012be:	f200 80ae 	bhi.w	800141e <__udivmoddi4+0x2a2>
 80012c2:	4620      	mov	r0, r4
 80012c4:	1bdb      	subs	r3, r3, r7
 80012c6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80012ca:	e7a5      	b.n	8001218 <__udivmoddi4+0x9c>
 80012cc:	f1c1 0720 	rsb	r7, r1, #32
 80012d0:	408b      	lsls	r3, r1
 80012d2:	fa22 fc07 	lsr.w	ip, r2, r7
 80012d6:	ea4c 0c03 	orr.w	ip, ip, r3
 80012da:	fa24 f607 	lsr.w	r6, r4, r7
 80012de:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80012e2:	fbb6 f8f9 	udiv	r8, r6, r9
 80012e6:	fa1f fe8c 	uxth.w	lr, ip
 80012ea:	fb09 6618 	mls	r6, r9, r8, r6
 80012ee:	fa20 f307 	lsr.w	r3, r0, r7
 80012f2:	408c      	lsls	r4, r1
 80012f4:	fa00 fa01 	lsl.w	sl, r0, r1
 80012f8:	fb08 f00e 	mul.w	r0, r8, lr
 80012fc:	431c      	orrs	r4, r3
 80012fe:	0c23      	lsrs	r3, r4, #16
 8001300:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8001304:	4298      	cmp	r0, r3
 8001306:	fa02 f201 	lsl.w	r2, r2, r1
 800130a:	d90a      	bls.n	8001322 <__udivmoddi4+0x1a6>
 800130c:	eb1c 0303 	adds.w	r3, ip, r3
 8001310:	f108 36ff 	add.w	r6, r8, #4294967295
 8001314:	f080 8081 	bcs.w	800141a <__udivmoddi4+0x29e>
 8001318:	4298      	cmp	r0, r3
 800131a:	d97e      	bls.n	800141a <__udivmoddi4+0x29e>
 800131c:	f1a8 0802 	sub.w	r8, r8, #2
 8001320:	4463      	add	r3, ip
 8001322:	1a1e      	subs	r6, r3, r0
 8001324:	fbb6 f3f9 	udiv	r3, r6, r9
 8001328:	fb09 6613 	mls	r6, r9, r3, r6
 800132c:	fb03 fe0e 	mul.w	lr, r3, lr
 8001330:	b2a4      	uxth	r4, r4
 8001332:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 8001336:	45a6      	cmp	lr, r4
 8001338:	d908      	bls.n	800134c <__udivmoddi4+0x1d0>
 800133a:	eb1c 0404 	adds.w	r4, ip, r4
 800133e:	f103 30ff 	add.w	r0, r3, #4294967295
 8001342:	d266      	bcs.n	8001412 <__udivmoddi4+0x296>
 8001344:	45a6      	cmp	lr, r4
 8001346:	d964      	bls.n	8001412 <__udivmoddi4+0x296>
 8001348:	3b02      	subs	r3, #2
 800134a:	4464      	add	r4, ip
 800134c:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8001350:	fba0 8302 	umull	r8, r3, r0, r2
 8001354:	eba4 040e 	sub.w	r4, r4, lr
 8001358:	429c      	cmp	r4, r3
 800135a:	46c6      	mov	lr, r8
 800135c:	461e      	mov	r6, r3
 800135e:	d350      	bcc.n	8001402 <__udivmoddi4+0x286>
 8001360:	d04d      	beq.n	80013fe <__udivmoddi4+0x282>
 8001362:	b155      	cbz	r5, 800137a <__udivmoddi4+0x1fe>
 8001364:	ebba 030e 	subs.w	r3, sl, lr
 8001368:	eb64 0406 	sbc.w	r4, r4, r6
 800136c:	fa04 f707 	lsl.w	r7, r4, r7
 8001370:	40cb      	lsrs	r3, r1
 8001372:	431f      	orrs	r7, r3
 8001374:	40cc      	lsrs	r4, r1
 8001376:	e9c5 7400 	strd	r7, r4, [r5]
 800137a:	2100      	movs	r1, #0
 800137c:	e751      	b.n	8001222 <__udivmoddi4+0xa6>
 800137e:	fa0c fc02 	lsl.w	ip, ip, r2
 8001382:	f1c2 0320 	rsb	r3, r2, #32
 8001386:	40d9      	lsrs	r1, r3
 8001388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800138c:	fa20 f303 	lsr.w	r3, r0, r3
 8001390:	fa00 fe02 	lsl.w	lr, r0, r2
 8001394:	fbb1 f0f8 	udiv	r0, r1, r8
 8001398:	fb08 1110 	mls	r1, r8, r0, r1
 800139c:	4094      	lsls	r4, r2
 800139e:	431c      	orrs	r4, r3
 80013a0:	fa1f f78c 	uxth.w	r7, ip
 80013a4:	0c23      	lsrs	r3, r4, #16
 80013a6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80013aa:	fb00 f107 	mul.w	r1, r0, r7
 80013ae:	4299      	cmp	r1, r3
 80013b0:	d908      	bls.n	80013c4 <__udivmoddi4+0x248>
 80013b2:	eb1c 0303 	adds.w	r3, ip, r3
 80013b6:	f100 36ff 	add.w	r6, r0, #4294967295
 80013ba:	d22c      	bcs.n	8001416 <__udivmoddi4+0x29a>
 80013bc:	4299      	cmp	r1, r3
 80013be:	d92a      	bls.n	8001416 <__udivmoddi4+0x29a>
 80013c0:	3802      	subs	r0, #2
 80013c2:	4463      	add	r3, ip
 80013c4:	1a5b      	subs	r3, r3, r1
 80013c6:	fbb3 f1f8 	udiv	r1, r3, r8
 80013ca:	fb08 3311 	mls	r3, r8, r1, r3
 80013ce:	b2a4      	uxth	r4, r4
 80013d0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80013d4:	fb01 f307 	mul.w	r3, r1, r7
 80013d8:	42a3      	cmp	r3, r4
 80013da:	d908      	bls.n	80013ee <__udivmoddi4+0x272>
 80013dc:	eb1c 0404 	adds.w	r4, ip, r4
 80013e0:	f101 36ff 	add.w	r6, r1, #4294967295
 80013e4:	d213      	bcs.n	800140e <__udivmoddi4+0x292>
 80013e6:	42a3      	cmp	r3, r4
 80013e8:	d911      	bls.n	800140e <__udivmoddi4+0x292>
 80013ea:	3902      	subs	r1, #2
 80013ec:	4464      	add	r4, ip
 80013ee:	1ae4      	subs	r4, r4, r3
 80013f0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80013f4:	e73b      	b.n	800126e <__udivmoddi4+0xf2>
 80013f6:	4604      	mov	r4, r0
 80013f8:	e6f2      	b.n	80011e0 <__udivmoddi4+0x64>
 80013fa:	4608      	mov	r0, r1
 80013fc:	e708      	b.n	8001210 <__udivmoddi4+0x94>
 80013fe:	45c2      	cmp	sl, r8
 8001400:	d2af      	bcs.n	8001362 <__udivmoddi4+0x1e6>
 8001402:	ebb8 0e02 	subs.w	lr, r8, r2
 8001406:	eb63 060c 	sbc.w	r6, r3, ip
 800140a:	3801      	subs	r0, #1
 800140c:	e7a9      	b.n	8001362 <__udivmoddi4+0x1e6>
 800140e:	4631      	mov	r1, r6
 8001410:	e7ed      	b.n	80013ee <__udivmoddi4+0x272>
 8001412:	4603      	mov	r3, r0
 8001414:	e79a      	b.n	800134c <__udivmoddi4+0x1d0>
 8001416:	4630      	mov	r0, r6
 8001418:	e7d4      	b.n	80013c4 <__udivmoddi4+0x248>
 800141a:	46b0      	mov	r8, r6
 800141c:	e781      	b.n	8001322 <__udivmoddi4+0x1a6>
 800141e:	4463      	add	r3, ip
 8001420:	3802      	subs	r0, #2
 8001422:	e74f      	b.n	80012c4 <__udivmoddi4+0x148>
 8001424:	4606      	mov	r6, r0
 8001426:	4623      	mov	r3, r4
 8001428:	4608      	mov	r0, r1
 800142a:	e711      	b.n	8001250 <__udivmoddi4+0xd4>
 800142c:	3e02      	subs	r6, #2
 800142e:	4463      	add	r3, ip
 8001430:	e732      	b.n	8001298 <__udivmoddi4+0x11c>
 8001432:	bf00      	nop

08001434 <__aeabi_idiv0>:
 8001434:	4770      	bx	lr
 8001436:	bf00      	nop

08001438 <bmp280_init_default_params>:

#define BMP280_RESET_VALUE     0xB6



void bmp280_init_default_params(bmp280_params_t *params) {
 8001438:	b480      	push	{r7}
 800143a:	b083      	sub	sp, #12
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
	params->mode = BMP280_MODE_NORMAL;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	2203      	movs	r2, #3
 8001444:	701a      	strb	r2, [r3, #0]
	params->filter = BMP280_FILTER_OFF;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	2200      	movs	r2, #0
 800144a:	705a      	strb	r2, [r3, #1]
	params->oversampling_pressure = BMP280_STANDARD;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	2203      	movs	r2, #3
 8001450:	709a      	strb	r2, [r3, #2]
	params->oversampling_temperature = BMP280_STANDARD;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	2203      	movs	r2, #3
 8001456:	70da      	strb	r2, [r3, #3]
	params->oversampling_humidity = BMP280_STANDARD;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	2203      	movs	r2, #3
 800145c:	711a      	strb	r2, [r3, #4]
	params->standby = BMP280_STANDBY_250;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	2203      	movs	r2, #3
 8001462:	715a      	strb	r2, [r3, #5]
}
 8001464:	bf00      	nop
 8001466:	370c      	adds	r7, #12
 8001468:	46bd      	mov	sp, r7
 800146a:	bc80      	pop	{r7}
 800146c:	4770      	bx	lr

0800146e <read_register16>:

static bool read_register16(BMP280_HandleTypedef *dev, uint8_t addr, uint16_t *value) {
 800146e:	b580      	push	{r7, lr}
 8001470:	b08a      	sub	sp, #40	@ 0x28
 8001472:	af04      	add	r7, sp, #16
 8001474:	60f8      	str	r0, [r7, #12]
 8001476:	460b      	mov	r3, r1
 8001478:	607a      	str	r2, [r7, #4]
 800147a:	72fb      	strb	r3, [r7, #11]
	uint16_t tx_buff;
	uint8_t rx_buff[2];
	tx_buff = (dev->addr << 1);
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8001480:	005b      	lsls	r3, r3, #1
 8001482:	82fb      	strh	r3, [r7, #22]

	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, rx_buff, 2, 5000)
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8001488:	7afb      	ldrb	r3, [r7, #11]
 800148a:	b29a      	uxth	r2, r3
 800148c:	8af9      	ldrh	r1, [r7, #22]
 800148e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001492:	9302      	str	r3, [sp, #8]
 8001494:	2302      	movs	r3, #2
 8001496:	9301      	str	r3, [sp, #4]
 8001498:	f107 0314 	add.w	r3, r7, #20
 800149c:	9300      	str	r3, [sp, #0]
 800149e:	2301      	movs	r3, #1
 80014a0:	f002 fc9a 	bl	8003dd8 <HAL_I2C_Mem_Read>
 80014a4:	4603      	mov	r3, r0
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d10b      	bne.n	80014c2 <read_register16+0x54>
			== HAL_OK) {
		*value = (uint16_t) ((rx_buff[1] << 8) | rx_buff[0]);
 80014aa:	7d7b      	ldrb	r3, [r7, #21]
 80014ac:	021b      	lsls	r3, r3, #8
 80014ae:	b21a      	sxth	r2, r3
 80014b0:	7d3b      	ldrb	r3, [r7, #20]
 80014b2:	b21b      	sxth	r3, r3
 80014b4:	4313      	orrs	r3, r2
 80014b6:	b21b      	sxth	r3, r3
 80014b8:	b29a      	uxth	r2, r3
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	801a      	strh	r2, [r3, #0]
		return true;
 80014be:	2301      	movs	r3, #1
 80014c0:	e000      	b.n	80014c4 <read_register16+0x56>
	} else
		return false;
 80014c2:	2300      	movs	r3, #0

}
 80014c4:	4618      	mov	r0, r3
 80014c6:	3718      	adds	r7, #24
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}

080014cc <read_data>:

static inline int read_data(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t *value,
		uint8_t len) {
 80014cc:	b590      	push	{r4, r7, lr}
 80014ce:	b08b      	sub	sp, #44	@ 0x2c
 80014d0:	af04      	add	r7, sp, #16
 80014d2:	60f8      	str	r0, [r7, #12]
 80014d4:	607a      	str	r2, [r7, #4]
 80014d6:	461a      	mov	r2, r3
 80014d8:	460b      	mov	r3, r1
 80014da:	72fb      	strb	r3, [r7, #11]
 80014dc:	4613      	mov	r3, r2
 80014de:	72bb      	strb	r3, [r7, #10]
	uint16_t tx_buff;
	tx_buff = (dev->addr << 1);
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80014e4:	005b      	lsls	r3, r3, #1
 80014e6:	82fb      	strh	r3, [r7, #22]
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 80014ec:	7afb      	ldrb	r3, [r7, #11]
 80014ee:	b29a      	uxth	r2, r3
 80014f0:	7abb      	ldrb	r3, [r7, #10]
 80014f2:	b29b      	uxth	r3, r3
 80014f4:	8af9      	ldrh	r1, [r7, #22]
 80014f6:	f241 3488 	movw	r4, #5000	@ 0x1388
 80014fa:	9402      	str	r4, [sp, #8]
 80014fc:	9301      	str	r3, [sp, #4]
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	9300      	str	r3, [sp, #0]
 8001502:	2301      	movs	r3, #1
 8001504:	f002 fc68 	bl	8003dd8 <HAL_I2C_Mem_Read>
 8001508:	4603      	mov	r3, r0
 800150a:	2b00      	cmp	r3, #0
 800150c:	d101      	bne.n	8001512 <read_data+0x46>
		return 0;
 800150e:	2300      	movs	r3, #0
 8001510:	e000      	b.n	8001514 <read_data+0x48>
	else
		return 1;
 8001512:	2301      	movs	r3, #1

}
 8001514:	4618      	mov	r0, r3
 8001516:	371c      	adds	r7, #28
 8001518:	46bd      	mov	sp, r7
 800151a:	bd90      	pop	{r4, r7, pc}

0800151c <read_calibration_data>:

static bool read_calibration_data(BMP280_HandleTypedef *dev) {
 800151c:	b580      	push	{r7, lr}
 800151e:	b082      	sub	sp, #8
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]

	if (read_register16(dev, 0x88, &dev->dig_T1)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	461a      	mov	r2, r3
 8001528:	2188      	movs	r1, #136	@ 0x88
 800152a:	6878      	ldr	r0, [r7, #4]
 800152c:	f7ff ff9f 	bl	800146e <read_register16>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	d06f      	beq.n	8001616 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8a, (uint16_t *) &dev->dig_T2)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	3302      	adds	r3, #2
 800153a:	461a      	mov	r2, r3
 800153c:	218a      	movs	r1, #138	@ 0x8a
 800153e:	6878      	ldr	r0, [r7, #4]
 8001540:	f7ff ff95 	bl	800146e <read_register16>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	d065      	beq.n	8001616 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8c, (uint16_t *) &dev->dig_T3)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	3304      	adds	r3, #4
 800154e:	461a      	mov	r2, r3
 8001550:	218c      	movs	r1, #140	@ 0x8c
 8001552:	6878      	ldr	r0, [r7, #4]
 8001554:	f7ff ff8b 	bl	800146e <read_register16>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d05b      	beq.n	8001616 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8e, &dev->dig_P1)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	3306      	adds	r3, #6
 8001562:	461a      	mov	r2, r3
 8001564:	218e      	movs	r1, #142	@ 0x8e
 8001566:	6878      	ldr	r0, [r7, #4]
 8001568:	f7ff ff81 	bl	800146e <read_register16>
 800156c:	4603      	mov	r3, r0
 800156e:	2b00      	cmp	r3, #0
 8001570:	d051      	beq.n	8001616 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x90, (uint16_t *) &dev->dig_P2)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	3308      	adds	r3, #8
 8001576:	461a      	mov	r2, r3
 8001578:	2190      	movs	r1, #144	@ 0x90
 800157a:	6878      	ldr	r0, [r7, #4]
 800157c:	f7ff ff77 	bl	800146e <read_register16>
 8001580:	4603      	mov	r3, r0
 8001582:	2b00      	cmp	r3, #0
 8001584:	d047      	beq.n	8001616 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x92, (uint16_t *) &dev->dig_P3)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	330a      	adds	r3, #10
 800158a:	461a      	mov	r2, r3
 800158c:	2192      	movs	r1, #146	@ 0x92
 800158e:	6878      	ldr	r0, [r7, #4]
 8001590:	f7ff ff6d 	bl	800146e <read_register16>
 8001594:	4603      	mov	r3, r0
 8001596:	2b00      	cmp	r3, #0
 8001598:	d03d      	beq.n	8001616 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x94, (uint16_t *) &dev->dig_P4)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	330c      	adds	r3, #12
 800159e:	461a      	mov	r2, r3
 80015a0:	2194      	movs	r1, #148	@ 0x94
 80015a2:	6878      	ldr	r0, [r7, #4]
 80015a4:	f7ff ff63 	bl	800146e <read_register16>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d033      	beq.n	8001616 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x96, (uint16_t *) &dev->dig_P5)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	330e      	adds	r3, #14
 80015b2:	461a      	mov	r2, r3
 80015b4:	2196      	movs	r1, #150	@ 0x96
 80015b6:	6878      	ldr	r0, [r7, #4]
 80015b8:	f7ff ff59 	bl	800146e <read_register16>
 80015bc:	4603      	mov	r3, r0
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d029      	beq.n	8001616 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x98, (uint16_t *) &dev->dig_P6)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	3310      	adds	r3, #16
 80015c6:	461a      	mov	r2, r3
 80015c8:	2198      	movs	r1, #152	@ 0x98
 80015ca:	6878      	ldr	r0, [r7, #4]
 80015cc:	f7ff ff4f 	bl	800146e <read_register16>
 80015d0:	4603      	mov	r3, r0
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d01f      	beq.n	8001616 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9a, (uint16_t *) &dev->dig_P7)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	3312      	adds	r3, #18
 80015da:	461a      	mov	r2, r3
 80015dc:	219a      	movs	r1, #154	@ 0x9a
 80015de:	6878      	ldr	r0, [r7, #4]
 80015e0:	f7ff ff45 	bl	800146e <read_register16>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d015      	beq.n	8001616 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9c, (uint16_t *) &dev->dig_P8)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	3314      	adds	r3, #20
 80015ee:	461a      	mov	r2, r3
 80015f0:	219c      	movs	r1, #156	@ 0x9c
 80015f2:	6878      	ldr	r0, [r7, #4]
 80015f4:	f7ff ff3b 	bl	800146e <read_register16>
 80015f8:	4603      	mov	r3, r0
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d00b      	beq.n	8001616 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9e,
					(uint16_t *) &dev->dig_P9)) {
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	3316      	adds	r3, #22
			&& read_register16(dev, 0x9e,
 8001602:	461a      	mov	r2, r3
 8001604:	219e      	movs	r1, #158	@ 0x9e
 8001606:	6878      	ldr	r0, [r7, #4]
 8001608:	f7ff ff31 	bl	800146e <read_register16>
 800160c:	4603      	mov	r3, r0
 800160e:	2b00      	cmp	r3, #0
 8001610:	d001      	beq.n	8001616 <read_calibration_data+0xfa>

		return true;
 8001612:	2301      	movs	r3, #1
 8001614:	e000      	b.n	8001618 <read_calibration_data+0xfc>
	}

	return false;
 8001616:	2300      	movs	r3, #0
}
 8001618:	4618      	mov	r0, r3
 800161a:	3708      	adds	r7, #8
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}

08001620 <read_hum_calibration_data>:

static bool read_hum_calibration_data(BMP280_HandleTypedef *dev) {
 8001620:	b580      	push	{r7, lr}
 8001622:	b084      	sub	sp, #16
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
	uint16_t h4, h5;

	if (!read_data(dev, 0xa1, &dev->dig_H1, 1)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	f103 0218 	add.w	r2, r3, #24
 800162e:	2301      	movs	r3, #1
 8001630:	21a1      	movs	r1, #161	@ 0xa1
 8001632:	6878      	ldr	r0, [r7, #4]
 8001634:	f7ff ff4a 	bl	80014cc <read_data>
 8001638:	4603      	mov	r3, r0
 800163a:	2b00      	cmp	r3, #0
 800163c:	d14b      	bne.n	80016d6 <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe1, (uint16_t *) &dev->dig_H2)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	331a      	adds	r3, #26
 8001642:	461a      	mov	r2, r3
 8001644:	21e1      	movs	r1, #225	@ 0xe1
 8001646:	6878      	ldr	r0, [r7, #4]
 8001648:	f7ff ff11 	bl	800146e <read_register16>
 800164c:	4603      	mov	r3, r0
 800164e:	2b00      	cmp	r3, #0
 8001650:	d041      	beq.n	80016d6 <read_hum_calibration_data+0xb6>
			&& !read_data(dev, 0xe3, &dev->dig_H3, 1)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	f103 021c 	add.w	r2, r3, #28
 8001658:	2301      	movs	r3, #1
 800165a:	21e3      	movs	r1, #227	@ 0xe3
 800165c:	6878      	ldr	r0, [r7, #4]
 800165e:	f7ff ff35 	bl	80014cc <read_data>
 8001662:	4603      	mov	r3, r0
 8001664:	2b00      	cmp	r3, #0
 8001666:	d136      	bne.n	80016d6 <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe4, &h4)
 8001668:	f107 030e 	add.w	r3, r7, #14
 800166c:	461a      	mov	r2, r3
 800166e:	21e4      	movs	r1, #228	@ 0xe4
 8001670:	6878      	ldr	r0, [r7, #4]
 8001672:	f7ff fefc 	bl	800146e <read_register16>
 8001676:	4603      	mov	r3, r0
 8001678:	2b00      	cmp	r3, #0
 800167a:	d02c      	beq.n	80016d6 <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe5, &h5)
 800167c:	f107 030c 	add.w	r3, r7, #12
 8001680:	461a      	mov	r2, r3
 8001682:	21e5      	movs	r1, #229	@ 0xe5
 8001684:	6878      	ldr	r0, [r7, #4]
 8001686:	f7ff fef2 	bl	800146e <read_register16>
 800168a:	4603      	mov	r3, r0
 800168c:	2b00      	cmp	r3, #0
 800168e:	d022      	beq.n	80016d6 <read_hum_calibration_data+0xb6>
			&& !read_data(dev, 0xe7, (uint8_t *) &dev->dig_H6, 1)) {
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	f103 0222 	add.w	r2, r3, #34	@ 0x22
 8001696:	2301      	movs	r3, #1
 8001698:	21e7      	movs	r1, #231	@ 0xe7
 800169a:	6878      	ldr	r0, [r7, #4]
 800169c:	f7ff ff16 	bl	80014cc <read_data>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d117      	bne.n	80016d6 <read_hum_calibration_data+0xb6>
		dev->dig_H4 = (h4 & 0x00ff) << 4 | (h4 & 0x0f00) >> 8;
 80016a6:	89fb      	ldrh	r3, [r7, #14]
 80016a8:	011b      	lsls	r3, r3, #4
 80016aa:	b21b      	sxth	r3, r3
 80016ac:	f403 637f 	and.w	r3, r3, #4080	@ 0xff0
 80016b0:	b21a      	sxth	r2, r3
 80016b2:	89fb      	ldrh	r3, [r7, #14]
 80016b4:	121b      	asrs	r3, r3, #8
 80016b6:	b21b      	sxth	r3, r3
 80016b8:	f003 030f 	and.w	r3, r3, #15
 80016bc:	b21b      	sxth	r3, r3
 80016be:	4313      	orrs	r3, r2
 80016c0:	b21a      	sxth	r2, r3
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	83da      	strh	r2, [r3, #30]
		dev->dig_H5 = h5 >> 4;
 80016c6:	89bb      	ldrh	r3, [r7, #12]
 80016c8:	091b      	lsrs	r3, r3, #4
 80016ca:	b29b      	uxth	r3, r3
 80016cc:	b21a      	sxth	r2, r3
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	841a      	strh	r2, [r3, #32]

		return true;
 80016d2:	2301      	movs	r3, #1
 80016d4:	e000      	b.n	80016d8 <read_hum_calibration_data+0xb8>
	}

	return false;
 80016d6:	2300      	movs	r3, #0
}
 80016d8:	4618      	mov	r0, r3
 80016da:	3710      	adds	r7, #16
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd80      	pop	{r7, pc}

080016e0 <write_register8>:

static int write_register8(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t value) {
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b088      	sub	sp, #32
 80016e4:	af04      	add	r7, sp, #16
 80016e6:	6078      	str	r0, [r7, #4]
 80016e8:	460b      	mov	r3, r1
 80016ea:	70fb      	strb	r3, [r7, #3]
 80016ec:	4613      	mov	r3, r2
 80016ee:	70bb      	strb	r3, [r7, #2]
	uint16_t tx_buff;

	tx_buff = (dev->addr << 1);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80016f4:	005b      	lsls	r3, r3, #1
 80016f6:	81fb      	strh	r3, [r7, #14]

	if (HAL_I2C_Mem_Write(dev->i2c, tx_buff, addr, 1, &value, 1, 10000) == HAL_OK)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 80016fc:	78fb      	ldrb	r3, [r7, #3]
 80016fe:	b29a      	uxth	r2, r3
 8001700:	89f9      	ldrh	r1, [r7, #14]
 8001702:	f242 7310 	movw	r3, #10000	@ 0x2710
 8001706:	9302      	str	r3, [sp, #8]
 8001708:	2301      	movs	r3, #1
 800170a:	9301      	str	r3, [sp, #4]
 800170c:	1cbb      	adds	r3, r7, #2
 800170e:	9300      	str	r3, [sp, #0]
 8001710:	2301      	movs	r3, #1
 8001712:	f002 fa67 	bl	8003be4 <HAL_I2C_Mem_Write>
 8001716:	4603      	mov	r3, r0
 8001718:	2b00      	cmp	r3, #0
 800171a:	d101      	bne.n	8001720 <write_register8+0x40>
		return false;
 800171c:	2300      	movs	r3, #0
 800171e:	e000      	b.n	8001722 <write_register8+0x42>
	else
		return true;
 8001720:	2301      	movs	r3, #1
}
 8001722:	4618      	mov	r0, r3
 8001724:	3710      	adds	r7, #16
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}

0800172a <bmp280_init>:

bool bmp280_init(BMP280_HandleTypedef *dev, bmp280_params_t *params) {
 800172a:	b580      	push	{r7, lr}
 800172c:	b084      	sub	sp, #16
 800172e:	af00      	add	r7, sp, #0
 8001730:	6078      	str	r0, [r7, #4]
 8001732:	6039      	str	r1, [r7, #0]

	if (dev->addr != BMP280_I2C_ADDRESS_0
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8001738:	2b76      	cmp	r3, #118	@ 0x76
 800173a:	d005      	beq.n	8001748 <bmp280_init+0x1e>
			&& dev->addr != BMP280_I2C_ADDRESS_1) {
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8001740:	2b77      	cmp	r3, #119	@ 0x77
 8001742:	d001      	beq.n	8001748 <bmp280_init+0x1e>

		return false;
 8001744:	2300      	movs	r3, #0
 8001746:	e099      	b.n	800187c <bmp280_init+0x152>
	}

	if (read_data(dev, BMP280_REG_ID, &dev->id, 1)) {
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800174e:	2301      	movs	r3, #1
 8001750:	21d0      	movs	r1, #208	@ 0xd0
 8001752:	6878      	ldr	r0, [r7, #4]
 8001754:	f7ff feba 	bl	80014cc <read_data>
 8001758:	4603      	mov	r3, r0
 800175a:	2b00      	cmp	r3, #0
 800175c:	d001      	beq.n	8001762 <bmp280_init+0x38>
		return false;
 800175e:	2300      	movs	r3, #0
 8001760:	e08c      	b.n	800187c <bmp280_init+0x152>
	}

	if (dev->id != BMP280_CHIP_ID && dev->id != BME280_CHIP_ID) {
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8001768:	2b58      	cmp	r3, #88	@ 0x58
 800176a:	d006      	beq.n	800177a <bmp280_init+0x50>
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8001772:	2b60      	cmp	r3, #96	@ 0x60
 8001774:	d001      	beq.n	800177a <bmp280_init+0x50>

		return false;
 8001776:	2300      	movs	r3, #0
 8001778:	e080      	b.n	800187c <bmp280_init+0x152>
	}

	// Soft reset.
	if (write_register8(dev, BMP280_REG_RESET, BMP280_RESET_VALUE)) {
 800177a:	22b6      	movs	r2, #182	@ 0xb6
 800177c:	21e0      	movs	r1, #224	@ 0xe0
 800177e:	6878      	ldr	r0, [r7, #4]
 8001780:	f7ff ffae 	bl	80016e0 <write_register8>
 8001784:	4603      	mov	r3, r0
 8001786:	2b00      	cmp	r3, #0
 8001788:	d001      	beq.n	800178e <bmp280_init+0x64>
		return false;
 800178a:	2300      	movs	r3, #0
 800178c:	e076      	b.n	800187c <bmp280_init+0x152>
	}

	// Wait until finished copying over the NVP data.
	while (1) {
		uint8_t status;
		if (!read_data(dev, BMP280_REG_STATUS, &status, 1)
 800178e:	f107 020c 	add.w	r2, r7, #12
 8001792:	2301      	movs	r3, #1
 8001794:	21f3      	movs	r1, #243	@ 0xf3
 8001796:	6878      	ldr	r0, [r7, #4]
 8001798:	f7ff fe98 	bl	80014cc <read_data>
 800179c:	4603      	mov	r3, r0
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d1f5      	bne.n	800178e <bmp280_init+0x64>
				&& (status & 1) == 0)
 80017a2:	7b3b      	ldrb	r3, [r7, #12]
 80017a4:	f003 0301 	and.w	r3, r3, #1
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d1f0      	bne.n	800178e <bmp280_init+0x64>
			break;
	}

	if (!read_calibration_data(dev)) {
 80017ac:	6878      	ldr	r0, [r7, #4]
 80017ae:	f7ff feb5 	bl	800151c <read_calibration_data>
 80017b2:	4603      	mov	r3, r0
 80017b4:	f083 0301 	eor.w	r3, r3, #1
 80017b8:	b2db      	uxtb	r3, r3
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d100      	bne.n	80017c0 <bmp280_init+0x96>
 80017be:	e001      	b.n	80017c4 <bmp280_init+0x9a>
		return false;
 80017c0:	2300      	movs	r3, #0
 80017c2:	e05b      	b.n	800187c <bmp280_init+0x152>
	}

	if (dev->id == BME280_CHIP_ID && !read_hum_calibration_data(dev)) {
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80017ca:	2b60      	cmp	r3, #96	@ 0x60
 80017cc:	d10a      	bne.n	80017e4 <bmp280_init+0xba>
 80017ce:	6878      	ldr	r0, [r7, #4]
 80017d0:	f7ff ff26 	bl	8001620 <read_hum_calibration_data>
 80017d4:	4603      	mov	r3, r0
 80017d6:	f083 0301 	eor.w	r3, r3, #1
 80017da:	b2db      	uxtb	r3, r3
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d001      	beq.n	80017e4 <bmp280_init+0xba>
		return false;
 80017e0:	2300      	movs	r3, #0
 80017e2:	e04b      	b.n	800187c <bmp280_init+0x152>
	}

	uint8_t config = (params->standby << 5) | (params->filter << 2);
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	795b      	ldrb	r3, [r3, #5]
 80017e8:	015b      	lsls	r3, r3, #5
 80017ea:	b25a      	sxtb	r2, r3
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	785b      	ldrb	r3, [r3, #1]
 80017f0:	009b      	lsls	r3, r3, #2
 80017f2:	b25b      	sxtb	r3, r3
 80017f4:	4313      	orrs	r3, r2
 80017f6:	b25b      	sxtb	r3, r3
 80017f8:	73fb      	strb	r3, [r7, #15]
	if (write_register8(dev, BMP280_REG_CONFIG, config)) {
 80017fa:	7bfb      	ldrb	r3, [r7, #15]
 80017fc:	461a      	mov	r2, r3
 80017fe:	21f5      	movs	r1, #245	@ 0xf5
 8001800:	6878      	ldr	r0, [r7, #4]
 8001802:	f7ff ff6d 	bl	80016e0 <write_register8>
 8001806:	4603      	mov	r3, r0
 8001808:	2b00      	cmp	r3, #0
 800180a:	d001      	beq.n	8001810 <bmp280_init+0xe6>
		return false;
 800180c:	2300      	movs	r3, #0
 800180e:	e035      	b.n	800187c <bmp280_init+0x152>
	}

	if (params->mode == BMP280_MODE_FORCED) {
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	781b      	ldrb	r3, [r3, #0]
 8001814:	2b01      	cmp	r3, #1
 8001816:	d102      	bne.n	800181e <bmp280_init+0xf4>
		params->mode = BMP280_MODE_SLEEP;  // initial mode for forced is sleep
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	2200      	movs	r2, #0
 800181c:	701a      	strb	r2, [r3, #0]
	}

	uint8_t ctrl = (params->oversampling_temperature << 5)
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	78db      	ldrb	r3, [r3, #3]
 8001822:	015b      	lsls	r3, r3, #5
			| (params->oversampling_pressure << 2) | (params->mode);
 8001824:	b25a      	sxtb	r2, r3
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	789b      	ldrb	r3, [r3, #2]
 800182a:	009b      	lsls	r3, r3, #2
 800182c:	b25b      	sxtb	r3, r3
 800182e:	4313      	orrs	r3, r2
 8001830:	b25a      	sxtb	r2, r3
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	781b      	ldrb	r3, [r3, #0]
 8001836:	b25b      	sxtb	r3, r3
 8001838:	4313      	orrs	r3, r2
 800183a:	b25b      	sxtb	r3, r3
	uint8_t ctrl = (params->oversampling_temperature << 5)
 800183c:	73bb      	strb	r3, [r7, #14]

	if (dev->id == BME280_CHIP_ID) {
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8001844:	2b60      	cmp	r3, #96	@ 0x60
 8001846:	d10d      	bne.n	8001864 <bmp280_init+0x13a>
		// Write crtl hum reg first, only active after write to BMP280_REG_CTRL.
		uint8_t ctrl_hum = params->oversampling_humidity;
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	791b      	ldrb	r3, [r3, #4]
 800184c:	737b      	strb	r3, [r7, #13]
		if (write_register8(dev, BMP280_REG_CTRL_HUM, ctrl_hum)) {
 800184e:	7b7b      	ldrb	r3, [r7, #13]
 8001850:	461a      	mov	r2, r3
 8001852:	21f2      	movs	r1, #242	@ 0xf2
 8001854:	6878      	ldr	r0, [r7, #4]
 8001856:	f7ff ff43 	bl	80016e0 <write_register8>
 800185a:	4603      	mov	r3, r0
 800185c:	2b00      	cmp	r3, #0
 800185e:	d001      	beq.n	8001864 <bmp280_init+0x13a>
			return false;
 8001860:	2300      	movs	r3, #0
 8001862:	e00b      	b.n	800187c <bmp280_init+0x152>
		}
	}

	if (write_register8(dev, BMP280_REG_CTRL, ctrl)) {
 8001864:	7bbb      	ldrb	r3, [r7, #14]
 8001866:	461a      	mov	r2, r3
 8001868:	21f4      	movs	r1, #244	@ 0xf4
 800186a:	6878      	ldr	r0, [r7, #4]
 800186c:	f7ff ff38 	bl	80016e0 <write_register8>
 8001870:	4603      	mov	r3, r0
 8001872:	2b00      	cmp	r3, #0
 8001874:	d001      	beq.n	800187a <bmp280_init+0x150>
		return false;
 8001876:	2300      	movs	r3, #0
 8001878:	e000      	b.n	800187c <bmp280_init+0x152>
	}

	return true;
 800187a:	2301      	movs	r3, #1
}
 800187c:	4618      	mov	r0, r3
 800187e:	3710      	adds	r7, #16
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}

08001884 <compensate_temperature>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in degrees Celsius.
 */
static inline int32_t compensate_temperature(BMP280_HandleTypedef *dev, int32_t adc_temp,
		int32_t *fine_temp) {
 8001884:	b480      	push	{r7}
 8001886:	b087      	sub	sp, #28
 8001888:	af00      	add	r7, sp, #0
 800188a:	60f8      	str	r0, [r7, #12]
 800188c:	60b9      	str	r1, [r7, #8]
 800188e:	607a      	str	r2, [r7, #4]
	int32_t var1, var2;

	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 8001890:	68bb      	ldr	r3, [r7, #8]
 8001892:	10da      	asrs	r2, r3, #3
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	881b      	ldrh	r3, [r3, #0]
 8001898:	005b      	lsls	r3, r3, #1
 800189a:	1ad3      	subs	r3, r2, r3
			* (int32_t) dev->dig_T2) >> 11;
 800189c:	68fa      	ldr	r2, [r7, #12]
 800189e:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 80018a2:	fb02 f303 	mul.w	r3, r2, r3
	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 80018a6:	12db      	asrs	r3, r3, #11
 80018a8:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 80018aa:	68bb      	ldr	r3, [r7, #8]
 80018ac:	111b      	asrs	r3, r3, #4
 80018ae:	68fa      	ldr	r2, [r7, #12]
 80018b0:	8812      	ldrh	r2, [r2, #0]
 80018b2:	1a9b      	subs	r3, r3, r2
			* ((adc_temp >> 4) - (int32_t) dev->dig_T1)) >> 12)
 80018b4:	68ba      	ldr	r2, [r7, #8]
 80018b6:	1112      	asrs	r2, r2, #4
 80018b8:	68f9      	ldr	r1, [r7, #12]
 80018ba:	8809      	ldrh	r1, [r1, #0]
 80018bc:	1a52      	subs	r2, r2, r1
 80018be:	fb02 f303 	mul.w	r3, r2, r3
 80018c2:	131b      	asrs	r3, r3, #12
			* (int32_t) dev->dig_T3) >> 14;
 80018c4:	68fa      	ldr	r2, [r7, #12]
 80018c6:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 80018ca:	fb02 f303 	mul.w	r3, r2, r3
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 80018ce:	139b      	asrs	r3, r3, #14
 80018d0:	613b      	str	r3, [r7, #16]

	*fine_temp = var1 + var2;
 80018d2:	697a      	ldr	r2, [r7, #20]
 80018d4:	693b      	ldr	r3, [r7, #16]
 80018d6:	441a      	add	r2, r3
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	601a      	str	r2, [r3, #0]
	return (*fine_temp * 5 + 128) >> 8;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681a      	ldr	r2, [r3, #0]
 80018e0:	4613      	mov	r3, r2
 80018e2:	009b      	lsls	r3, r3, #2
 80018e4:	4413      	add	r3, r2
 80018e6:	3380      	adds	r3, #128	@ 0x80
 80018e8:	121b      	asrs	r3, r3, #8
}
 80018ea:	4618      	mov	r0, r3
 80018ec:	371c      	adds	r7, #28
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bc80      	pop	{r7}
 80018f2:	4770      	bx	lr

080018f4 <compensate_pressure>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_pressure(BMP280_HandleTypedef *dev, int32_t adc_press,
		int32_t fine_temp) {
 80018f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80018f8:	b0cc      	sub	sp, #304	@ 0x130
 80018fa:	af00      	add	r7, sp, #0
 80018fc:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
 8001900:	f8c7 1110 	str.w	r1, [r7, #272]	@ 0x110
 8001904:	f8c7 210c 	str.w	r2, [r7, #268]	@ 0x10c
	int64_t var1, var2, p;

	var1 = (int64_t) fine_temp - 128000;
 8001908:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800190c:	17da      	asrs	r2, r3, #31
 800190e:	461c      	mov	r4, r3
 8001910:	4615      	mov	r5, r2
 8001912:	f5b4 3afa 	subs.w	sl, r4, #128000	@ 0x1f400
 8001916:	f145 3bff 	adc.w	fp, r5, #4294967295
 800191a:	e9c7 ab4a 	strd	sl, fp, [r7, #296]	@ 0x128
	var2 = var1 * var1 * (int64_t) dev->dig_P6;
 800191e:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 8001922:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001926:	fb03 f102 	mul.w	r1, r3, r2
 800192a:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 800192e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001932:	fb02 f303 	mul.w	r3, r2, r3
 8001936:	18ca      	adds	r2, r1, r3
 8001938:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800193c:	fba3 8903 	umull	r8, r9, r3, r3
 8001940:	eb02 0309 	add.w	r3, r2, r9
 8001944:	4699      	mov	r9, r3
 8001946:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800194a:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800194e:	b21b      	sxth	r3, r3
 8001950:	17da      	asrs	r2, r3, #31
 8001952:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8001956:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800195a:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 800195e:	4603      	mov	r3, r0
 8001960:	fb03 f209 	mul.w	r2, r3, r9
 8001964:	460b      	mov	r3, r1
 8001966:	fb08 f303 	mul.w	r3, r8, r3
 800196a:	4413      	add	r3, r2
 800196c:	4602      	mov	r2, r0
 800196e:	fba8 2102 	umull	r2, r1, r8, r2
 8001972:	f8c7 10c4 	str.w	r1, [r7, #196]	@ 0xc4
 8001976:	f8c7 20c0 	str.w	r2, [r7, #192]	@ 0xc0
 800197a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800197e:	4413      	add	r3, r2
 8001980:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8001984:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	@ 0xc0
 8001988:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
 800198c:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	var2 = var2 + ((var1 * (int64_t) dev->dig_P5) << 17);
 8001990:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001994:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001998:	b21b      	sxth	r3, r3
 800199a:	17da      	asrs	r2, r3, #31
 800199c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80019a0:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 80019a4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80019a8:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	@ 0xb0
 80019ac:	462a      	mov	r2, r5
 80019ae:	fb02 f203 	mul.w	r2, r2, r3
 80019b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80019b6:	4621      	mov	r1, r4
 80019b8:	fb01 f303 	mul.w	r3, r1, r3
 80019bc:	441a      	add	r2, r3
 80019be:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80019c2:	4621      	mov	r1, r4
 80019c4:	fba3 3101 	umull	r3, r1, r3, r1
 80019c8:	f8c7 1104 	str.w	r1, [r7, #260]	@ 0x104
 80019cc:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80019d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80019d4:	18d3      	adds	r3, r2, r3
 80019d6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80019da:	f04f 0000 	mov.w	r0, #0
 80019de:	f04f 0100 	mov.w	r1, #0
 80019e2:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	@ 0x100
 80019e6:	462b      	mov	r3, r5
 80019e8:	0459      	lsls	r1, r3, #17
 80019ea:	4622      	mov	r2, r4
 80019ec:	ea41 31d2 	orr.w	r1, r1, r2, lsr #15
 80019f0:	4623      	mov	r3, r4
 80019f2:	0458      	lsls	r0, r3, #17
 80019f4:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 80019f8:	1814      	adds	r4, r2, r0
 80019fa:	643c      	str	r4, [r7, #64]	@ 0x40
 80019fc:	414b      	adcs	r3, r1
 80019fe:	647b      	str	r3, [r7, #68]	@ 0x44
 8001a00:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 8001a04:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	var2 = var2 + (((int64_t) dev->dig_P4) << 35);
 8001a08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001a0c:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001a10:	b21b      	sxth	r3, r3
 8001a12:	17da      	asrs	r2, r3, #31
 8001a14:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8001a18:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8001a1c:	f04f 0000 	mov.w	r0, #0
 8001a20:	f04f 0100 	mov.w	r1, #0
 8001a24:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001a28:	00d9      	lsls	r1, r3, #3
 8001a2a:	2000      	movs	r0, #0
 8001a2c:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001a30:	1814      	adds	r4, r2, r0
 8001a32:	63bc      	str	r4, [r7, #56]	@ 0x38
 8001a34:	414b      	adcs	r3, r1
 8001a36:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001a38:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 8001a3c:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 8001a40:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 8001a44:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001a48:	fb03 f102 	mul.w	r1, r3, r2
 8001a4c:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 8001a50:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001a54:	fb02 f303 	mul.w	r3, r2, r3
 8001a58:	18ca      	adds	r2, r1, r3
 8001a5a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001a5e:	fba3 3103 	umull	r3, r1, r3, r3
 8001a62:	f8c7 10fc 	str.w	r1, [r7, #252]	@ 0xfc
 8001a66:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8001a6a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001a6e:	18d3      	adds	r3, r2, r3
 8001a70:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8001a74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001a78:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001a7c:	b21b      	sxth	r3, r3
 8001a7e:	17da      	asrs	r2, r3, #31
 8001a80:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8001a84:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8001a88:	e9d7 343e 	ldrd	r3, r4, [r7, #248]	@ 0xf8
 8001a8c:	4622      	mov	r2, r4
 8001a8e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8001a92:	4641      	mov	r1, r8
 8001a94:	fb01 f202 	mul.w	r2, r1, r2
 8001a98:	464d      	mov	r5, r9
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	4621      	mov	r1, r4
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	fb03 f305 	mul.w	r3, r3, r5
 8001aa4:	4413      	add	r3, r2
 8001aa6:	4602      	mov	r2, r0
 8001aa8:	4641      	mov	r1, r8
 8001aaa:	fba2 2101 	umull	r2, r1, r2, r1
 8001aae:	f8c7 10f4 	str.w	r1, [r7, #244]	@ 0xf4
 8001ab2:	f8c7 20f0 	str.w	r2, [r7, #240]	@ 0xf0
 8001ab6:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 8001aba:	4413      	add	r3, r2
 8001abc:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8001ac0:	f04f 0000 	mov.w	r0, #0
 8001ac4:	f04f 0100 	mov.w	r1, #0
 8001ac8:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	@ 0xf0
 8001acc:	4623      	mov	r3, r4
 8001ace:	0a18      	lsrs	r0, r3, #8
 8001ad0:	462a      	mov	r2, r5
 8001ad2:	ea40 6002 	orr.w	r0, r0, r2, lsl #24
 8001ad6:	462b      	mov	r3, r5
 8001ad8:	1219      	asrs	r1, r3, #8
			+ ((var1 * (int64_t) dev->dig_P2) << 12);
 8001ada:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001ade:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001ae2:	b21b      	sxth	r3, r3
 8001ae4:	17da      	asrs	r2, r3, #31
 8001ae6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001aea:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8001aee:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001af2:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	@ 0x98
 8001af6:	464a      	mov	r2, r9
 8001af8:	fb02 f203 	mul.w	r2, r2, r3
 8001afc:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001b00:	4644      	mov	r4, r8
 8001b02:	fb04 f303 	mul.w	r3, r4, r3
 8001b06:	441a      	add	r2, r3
 8001b08:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001b0c:	4644      	mov	r4, r8
 8001b0e:	fba3 3404 	umull	r3, r4, r3, r4
 8001b12:	f8c7 40ec 	str.w	r4, [r7, #236]	@ 0xec
 8001b16:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8001b1a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8001b1e:	18d3      	adds	r3, r2, r3
 8001b20:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8001b24:	f04f 0200 	mov.w	r2, #0
 8001b28:	f04f 0300 	mov.w	r3, #0
 8001b2c:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	@ 0xe8
 8001b30:	464c      	mov	r4, r9
 8001b32:	0323      	lsls	r3, r4, #12
 8001b34:	46c4      	mov	ip, r8
 8001b36:	ea43 531c 	orr.w	r3, r3, ip, lsr #20
 8001b3a:	4644      	mov	r4, r8
 8001b3c:	0322      	lsls	r2, r4, #12
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 8001b3e:	1884      	adds	r4, r0, r2
 8001b40:	633c      	str	r4, [r7, #48]	@ 0x30
 8001b42:	eb41 0303 	adc.w	r3, r1, r3
 8001b46:	637b      	str	r3, [r7, #52]	@ 0x34
 8001b48:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 8001b4c:	e9c7 344a 	strd	r3, r4, [r7, #296]	@ 0x128
	var1 = (((int64_t) 1 << 47) + var1) * ((int64_t) dev->dig_P1) >> 33;
 8001b50:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 8001b54:	f503 4100 	add.w	r1, r3, #32768	@ 0x8000
 8001b58:	f8c7 1094 	str.w	r1, [r7, #148]	@ 0x94
 8001b5c:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 8001b60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001b64:	88db      	ldrh	r3, [r3, #6]
 8001b66:	b29b      	uxth	r3, r3
 8001b68:	2200      	movs	r2, #0
 8001b6a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001b6e:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001b72:	e9d7 3424 	ldrd	r3, r4, [r7, #144]	@ 0x90
 8001b76:	4622      	mov	r2, r4
 8001b78:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8001b7c:	4641      	mov	r1, r8
 8001b7e:	fb01 f202 	mul.w	r2, r1, r2
 8001b82:	464d      	mov	r5, r9
 8001b84:	4618      	mov	r0, r3
 8001b86:	4621      	mov	r1, r4
 8001b88:	4603      	mov	r3, r0
 8001b8a:	fb03 f305 	mul.w	r3, r3, r5
 8001b8e:	4413      	add	r3, r2
 8001b90:	4602      	mov	r2, r0
 8001b92:	4641      	mov	r1, r8
 8001b94:	fba2 2101 	umull	r2, r1, r2, r1
 8001b98:	f8c7 10e4 	str.w	r1, [r7, #228]	@ 0xe4
 8001b9c:	f8c7 20e0 	str.w	r2, [r7, #224]	@ 0xe0
 8001ba0:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8001ba4:	4413      	add	r3, r2
 8001ba6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8001baa:	f04f 0200 	mov.w	r2, #0
 8001bae:	f04f 0300 	mov.w	r3, #0
 8001bb2:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	@ 0xe0
 8001bb6:	4629      	mov	r1, r5
 8001bb8:	104a      	asrs	r2, r1, #1
 8001bba:	4629      	mov	r1, r5
 8001bbc:	17cb      	asrs	r3, r1, #31
 8001bbe:	e9c7 234a 	strd	r2, r3, [r7, #296]	@ 0x128

	if (var1 == 0) {
 8001bc2:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 8001bc6:	4313      	orrs	r3, r2
 8001bc8:	d101      	bne.n	8001bce <compensate_pressure+0x2da>
		return 0;  // avoid exception caused by division by zero
 8001bca:	2300      	movs	r3, #0
 8001bcc:	e146      	b.n	8001e5c <compensate_pressure+0x568>
	}

	p = 1048576 - adc_press;
 8001bce:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001bd2:	f5c3 1380 	rsb	r3, r3, #1048576	@ 0x100000
 8001bd6:	17da      	asrs	r2, r3, #31
 8001bd8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001bda:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001bdc:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 8001be0:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	p = (((p << 31) - var2) * 3125) / var1;
 8001be4:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001be8:	105b      	asrs	r3, r3, #1
 8001bea:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8001bee:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001bf2:	07db      	lsls	r3, r3, #31
 8001bf4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001bf8:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001bfc:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8001c00:	4604      	mov	r4, r0
 8001c02:	1aa4      	subs	r4, r4, r2
 8001c04:	67bc      	str	r4, [r7, #120]	@ 0x78
 8001c06:	eb61 0303 	sbc.w	r3, r1, r3
 8001c0a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001c0c:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8001c10:	4622      	mov	r2, r4
 8001c12:	462b      	mov	r3, r5
 8001c14:	1891      	adds	r1, r2, r2
 8001c16:	6239      	str	r1, [r7, #32]
 8001c18:	415b      	adcs	r3, r3
 8001c1a:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c1c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001c20:	4621      	mov	r1, r4
 8001c22:	1851      	adds	r1, r2, r1
 8001c24:	61b9      	str	r1, [r7, #24]
 8001c26:	4629      	mov	r1, r5
 8001c28:	414b      	adcs	r3, r1
 8001c2a:	61fb      	str	r3, [r7, #28]
 8001c2c:	f04f 0200 	mov.w	r2, #0
 8001c30:	f04f 0300 	mov.w	r3, #0
 8001c34:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8001c38:	4649      	mov	r1, r9
 8001c3a:	018b      	lsls	r3, r1, #6
 8001c3c:	4641      	mov	r1, r8
 8001c3e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001c42:	4641      	mov	r1, r8
 8001c44:	018a      	lsls	r2, r1, #6
 8001c46:	4641      	mov	r1, r8
 8001c48:	1889      	adds	r1, r1, r2
 8001c4a:	6139      	str	r1, [r7, #16]
 8001c4c:	4649      	mov	r1, r9
 8001c4e:	eb43 0101 	adc.w	r1, r3, r1
 8001c52:	6179      	str	r1, [r7, #20]
 8001c54:	f04f 0200 	mov.w	r2, #0
 8001c58:	f04f 0300 	mov.w	r3, #0
 8001c5c:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8001c60:	4649      	mov	r1, r9
 8001c62:	008b      	lsls	r3, r1, #2
 8001c64:	46c4      	mov	ip, r8
 8001c66:	ea43 739c 	orr.w	r3, r3, ip, lsr #30
 8001c6a:	4641      	mov	r1, r8
 8001c6c:	008a      	lsls	r2, r1, #2
 8001c6e:	4610      	mov	r0, r2
 8001c70:	4619      	mov	r1, r3
 8001c72:	4603      	mov	r3, r0
 8001c74:	4622      	mov	r2, r4
 8001c76:	189b      	adds	r3, r3, r2
 8001c78:	60bb      	str	r3, [r7, #8]
 8001c7a:	460b      	mov	r3, r1
 8001c7c:	462a      	mov	r2, r5
 8001c7e:	eb42 0303 	adc.w	r3, r2, r3
 8001c82:	60fb      	str	r3, [r7, #12]
 8001c84:	f04f 0200 	mov.w	r2, #0
 8001c88:	f04f 0300 	mov.w	r3, #0
 8001c8c:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8001c90:	4649      	mov	r1, r9
 8001c92:	008b      	lsls	r3, r1, #2
 8001c94:	46c4      	mov	ip, r8
 8001c96:	ea43 739c 	orr.w	r3, r3, ip, lsr #30
 8001c9a:	4641      	mov	r1, r8
 8001c9c:	008a      	lsls	r2, r1, #2
 8001c9e:	4610      	mov	r0, r2
 8001ca0:	4619      	mov	r1, r3
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	4622      	mov	r2, r4
 8001ca6:	189b      	adds	r3, r3, r2
 8001ca8:	673b      	str	r3, [r7, #112]	@ 0x70
 8001caa:	462b      	mov	r3, r5
 8001cac:	460a      	mov	r2, r1
 8001cae:	eb42 0303 	adc.w	r3, r2, r3
 8001cb2:	677b      	str	r3, [r7, #116]	@ 0x74
 8001cb4:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 8001cb8:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8001cbc:	f7ff f9d8 	bl	8001070 <__aeabi_ldivmod>
 8001cc0:	4602      	mov	r2, r0
 8001cc2:	460b      	mov	r3, r1
 8001cc4:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
	var1 = ((int64_t) dev->dig_P9 * (p >> 13) * (p >> 13)) >> 25;
 8001cc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001ccc:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8001cd0:	b21b      	sxth	r3, r3
 8001cd2:	17da      	asrs	r2, r3, #31
 8001cd4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001cd6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001cd8:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001cdc:	f04f 0000 	mov.w	r0, #0
 8001ce0:	f04f 0100 	mov.w	r1, #0
 8001ce4:	0b50      	lsrs	r0, r2, #13
 8001ce6:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001cea:	1359      	asrs	r1, r3, #13
 8001cec:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	@ 0x68
 8001cf0:	462b      	mov	r3, r5
 8001cf2:	fb00 f203 	mul.w	r2, r0, r3
 8001cf6:	4623      	mov	r3, r4
 8001cf8:	fb03 f301 	mul.w	r3, r3, r1
 8001cfc:	4413      	add	r3, r2
 8001cfe:	4622      	mov	r2, r4
 8001d00:	fba2 2100 	umull	r2, r1, r2, r0
 8001d04:	f8c7 10dc 	str.w	r1, [r7, #220]	@ 0xdc
 8001d08:	f8c7 20d8 	str.w	r2, [r7, #216]	@ 0xd8
 8001d0c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8001d10:	4413      	add	r3, r2
 8001d12:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8001d16:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001d1a:	f04f 0000 	mov.w	r0, #0
 8001d1e:	f04f 0100 	mov.w	r1, #0
 8001d22:	0b50      	lsrs	r0, r2, #13
 8001d24:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001d28:	1359      	asrs	r1, r3, #13
 8001d2a:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 8001d2e:	462b      	mov	r3, r5
 8001d30:	fb00 f203 	mul.w	r2, r0, r3
 8001d34:	4623      	mov	r3, r4
 8001d36:	fb03 f301 	mul.w	r3, r3, r1
 8001d3a:	4413      	add	r3, r2
 8001d3c:	4622      	mov	r2, r4
 8001d3e:	fba2 2100 	umull	r2, r1, r2, r0
 8001d42:	f8c7 10d4 	str.w	r1, [r7, #212]	@ 0xd4
 8001d46:	f8c7 20d0 	str.w	r2, [r7, #208]	@ 0xd0
 8001d4a:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8001d4e:	4413      	add	r3, r2
 8001d50:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8001d54:	f04f 0200 	mov.w	r2, #0
 8001d58:	f04f 0300 	mov.w	r3, #0
 8001d5c:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	@ 0xd0
 8001d60:	4621      	mov	r1, r4
 8001d62:	0e4a      	lsrs	r2, r1, #25
 8001d64:	4620      	mov	r0, r4
 8001d66:	4629      	mov	r1, r5
 8001d68:	460c      	mov	r4, r1
 8001d6a:	ea42 12c4 	orr.w	r2, r2, r4, lsl #7
 8001d6e:	164b      	asrs	r3, r1, #25
 8001d70:	e9c7 234a 	strd	r2, r3, [r7, #296]	@ 0x128
	var2 = ((int64_t) dev->dig_P8 * p) >> 19;
 8001d74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001d78:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001d7c:	b21b      	sxth	r3, r3
 8001d7e:	17da      	asrs	r2, r3, #31
 8001d80:	663b      	str	r3, [r7, #96]	@ 0x60
 8001d82:	667a      	str	r2, [r7, #100]	@ 0x64
 8001d84:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001d88:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8001d8c:	462a      	mov	r2, r5
 8001d8e:	fb02 f203 	mul.w	r2, r2, r3
 8001d92:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8001d96:	4621      	mov	r1, r4
 8001d98:	fb01 f303 	mul.w	r3, r1, r3
 8001d9c:	4413      	add	r3, r2
 8001d9e:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8001da2:	4621      	mov	r1, r4
 8001da4:	fba2 2101 	umull	r2, r1, r2, r1
 8001da8:	f8c7 10cc 	str.w	r1, [r7, #204]	@ 0xcc
 8001dac:	f8c7 20c8 	str.w	r2, [r7, #200]	@ 0xc8
 8001db0:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 8001db4:	4413      	add	r3, r2
 8001db6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8001dba:	f04f 0200 	mov.w	r2, #0
 8001dbe:	f04f 0300 	mov.w	r3, #0
 8001dc2:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	@ 0xc8
 8001dc6:	4621      	mov	r1, r4
 8001dc8:	0cca      	lsrs	r2, r1, #19
 8001dca:	4620      	mov	r0, r4
 8001dcc:	4629      	mov	r1, r5
 8001dce:	460c      	mov	r4, r1
 8001dd0:	ea42 3244 	orr.w	r2, r2, r4, lsl #13
 8001dd4:	14cb      	asrs	r3, r1, #19
 8001dd6:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120

	p = ((p + var1 + var2) >> 8) + ((int64_t) dev->dig_P7 << 4);
 8001dda:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	@ 0x118
 8001dde:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 8001de2:	1884      	adds	r4, r0, r2
 8001de4:	65bc      	str	r4, [r7, #88]	@ 0x58
 8001de6:	eb41 0303 	adc.w	r3, r1, r3
 8001dea:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001dec:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001df0:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 8001df4:	4621      	mov	r1, r4
 8001df6:	1889      	adds	r1, r1, r2
 8001df8:	6539      	str	r1, [r7, #80]	@ 0x50
 8001dfa:	4629      	mov	r1, r5
 8001dfc:	eb43 0101 	adc.w	r1, r3, r1
 8001e00:	6579      	str	r1, [r7, #84]	@ 0x54
 8001e02:	f04f 0000 	mov.w	r0, #0
 8001e06:	f04f 0100 	mov.w	r1, #0
 8001e0a:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 8001e0e:	4623      	mov	r3, r4
 8001e10:	0a18      	lsrs	r0, r3, #8
 8001e12:	462a      	mov	r2, r5
 8001e14:	ea40 6002 	orr.w	r0, r0, r2, lsl #24
 8001e18:	462b      	mov	r3, r5
 8001e1a:	1219      	asrs	r1, r3, #8
 8001e1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001e20:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001e24:	b21b      	sxth	r3, r3
 8001e26:	17da      	asrs	r2, r3, #31
 8001e28:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001e2a:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8001e2c:	f04f 0200 	mov.w	r2, #0
 8001e30:	f04f 0300 	mov.w	r3, #0
 8001e34:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	@ 0x48
 8001e38:	464c      	mov	r4, r9
 8001e3a:	0123      	lsls	r3, r4, #4
 8001e3c:	46c4      	mov	ip, r8
 8001e3e:	ea43 731c 	orr.w	r3, r3, ip, lsr #28
 8001e42:	4644      	mov	r4, r8
 8001e44:	0122      	lsls	r2, r4, #4
 8001e46:	1884      	adds	r4, r0, r2
 8001e48:	603c      	str	r4, [r7, #0]
 8001e4a:	eb41 0303 	adc.w	r3, r1, r3
 8001e4e:	607b      	str	r3, [r7, #4]
 8001e50:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001e54:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	return p;
 8001e58:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
}
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8001e62:	46bd      	mov	sp, r7
 8001e64:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08001e68 <compensate_humidity>:
 * Compensation algorithm is taken from BME280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_humidity(BMP280_HandleTypedef *dev, int32_t adc_hum,
		int32_t fine_temp) {
 8001e68:	b480      	push	{r7}
 8001e6a:	b087      	sub	sp, #28
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	60f8      	str	r0, [r7, #12]
 8001e70:	60b9      	str	r1, [r7, #8]
 8001e72:	607a      	str	r2, [r7, #4]
	int32_t v_x1_u32r;

	v_x1_u32r = fine_temp - (int32_t) 76800;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	f5a3 3396 	sub.w	r3, r3, #76800	@ 0x12c00
 8001e7a:	617b      	str	r3, [r7, #20]
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 8001e7c:	68bb      	ldr	r3, [r7, #8]
 8001e7e:	039a      	lsls	r2, r3, #14
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8001e86:	051b      	lsls	r3, r3, #20
 8001e88:	1ad2      	subs	r2, r2, r3
			- ((int32_t) dev->dig_H5 * v_x1_u32r)) + (int32_t) 16384) >> 15)
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001e90:	4619      	mov	r1, r3
 8001e92:	697b      	ldr	r3, [r7, #20]
 8001e94:	fb01 f303 	mul.w	r3, r1, r3
 8001e98:	1ad3      	subs	r3, r2, r3
 8001e9a:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8001e9e:	13db      	asrs	r3, r3, #15
			* (((((((v_x1_u32r * (int32_t) dev->dig_H6) >> 10)
 8001ea0:	68fa      	ldr	r2, [r7, #12]
 8001ea2:	f992 2022 	ldrsb.w	r2, [r2, #34]	@ 0x22
 8001ea6:	4611      	mov	r1, r2
 8001ea8:	697a      	ldr	r2, [r7, #20]
 8001eaa:	fb01 f202 	mul.w	r2, r1, r2
 8001eae:	1292      	asrs	r2, r2, #10
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 8001eb0:	68f9      	ldr	r1, [r7, #12]
 8001eb2:	7f09      	ldrb	r1, [r1, #28]
 8001eb4:	4608      	mov	r0, r1
 8001eb6:	6979      	ldr	r1, [r7, #20]
 8001eb8:	fb00 f101 	mul.w	r1, r0, r1
 8001ebc:	12c9      	asrs	r1, r1, #11
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 8001ebe:	f501 4100 	add.w	r1, r1, #32768	@ 0x8000
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 8001ec2:	fb01 f202 	mul.w	r2, r1, r2
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 8001ec6:	1292      	asrs	r2, r2, #10
 8001ec8:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
					* (int32_t) dev->dig_H2 + 8192) >> 14);
 8001ecc:	68f9      	ldr	r1, [r7, #12]
 8001ece:	f9b1 101a 	ldrsh.w	r1, [r1, #26]
 8001ed2:	fb01 f202 	mul.w	r2, r1, r2
 8001ed6:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 8001eda:	1392      	asrs	r2, r2, #14
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 8001edc:	fb02 f303 	mul.w	r3, r2, r3
 8001ee0:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r
			- (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7)
 8001ee2:	697b      	ldr	r3, [r7, #20]
 8001ee4:	13db      	asrs	r3, r3, #15
 8001ee6:	697a      	ldr	r2, [r7, #20]
 8001ee8:	13d2      	asrs	r2, r2, #15
 8001eea:	fb02 f303 	mul.w	r3, r2, r3
 8001eee:	11db      	asrs	r3, r3, #7
					* (int32_t) dev->dig_H1) >> 4);
 8001ef0:	68fa      	ldr	r2, [r7, #12]
 8001ef2:	7e12      	ldrb	r2, [r2, #24]
 8001ef4:	fb02 f303 	mul.w	r3, r2, r3
 8001ef8:	111b      	asrs	r3, r3, #4
	v_x1_u32r = v_x1_u32r
 8001efa:	697a      	ldr	r2, [r7, #20]
 8001efc:	1ad3      	subs	r3, r2, r3
 8001efe:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r < 0 ? 0 : v_x1_u32r;
 8001f00:	697b      	ldr	r3, [r7, #20]
 8001f02:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8001f06:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r;
 8001f08:	697b      	ldr	r3, [r7, #20]
 8001f0a:	f1b3 5fc8 	cmp.w	r3, #419430400	@ 0x19000000
 8001f0e:	bfa8      	it	ge
 8001f10:	f04f 53c8 	movge.w	r3, #419430400	@ 0x19000000
 8001f14:	617b      	str	r3, [r7, #20]
	return v_x1_u32r >> 12;
 8001f16:	697b      	ldr	r3, [r7, #20]
 8001f18:	131b      	asrs	r3, r3, #12
}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	371c      	adds	r7, #28
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bc80      	pop	{r7}
 8001f22:	4770      	bx	lr

08001f24 <bmp280_read_fixed>:

bool bmp280_read_fixed(BMP280_HandleTypedef *dev, int32_t *temperature, uint32_t *pressure,
		uint32_t *humidity) {
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b08c      	sub	sp, #48	@ 0x30
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	60f8      	str	r0, [r7, #12]
 8001f2c:	60b9      	str	r1, [r7, #8]
 8001f2e:	607a      	str	r2, [r7, #4]
 8001f30:	603b      	str	r3, [r7, #0]
	int32_t adc_pressure;
	int32_t adc_temp;
	uint8_t data[8];

	// Only the BME280 supports reading the humidity.
	if (dev->id != BME280_CHIP_ID) {
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8001f38:	2b60      	cmp	r3, #96	@ 0x60
 8001f3a:	d007      	beq.n	8001f4c <bmp280_read_fixed+0x28>
		if (humidity)
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d002      	beq.n	8001f48 <bmp280_read_fixed+0x24>
			*humidity = 0;
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	2200      	movs	r2, #0
 8001f46:	601a      	str	r2, [r3, #0]
		humidity = NULL;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	603b      	str	r3, [r7, #0]
	}

	// Need to read in one sequence to ensure they match.
	size_t size = humidity ? 8 : 6;
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d001      	beq.n	8001f56 <bmp280_read_fixed+0x32>
 8001f52:	2308      	movs	r3, #8
 8001f54:	e000      	b.n	8001f58 <bmp280_read_fixed+0x34>
 8001f56:	2306      	movs	r3, #6
 8001f58:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (read_data(dev, 0xf7, data, size)) {
 8001f5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f5c:	b2db      	uxtb	r3, r3
 8001f5e:	f107 0218 	add.w	r2, r7, #24
 8001f62:	21f7      	movs	r1, #247	@ 0xf7
 8001f64:	68f8      	ldr	r0, [r7, #12]
 8001f66:	f7ff fab1 	bl	80014cc <read_data>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d001      	beq.n	8001f74 <bmp280_read_fixed+0x50>
		return false;
 8001f70:	2300      	movs	r3, #0
 8001f72:	e038      	b.n	8001fe6 <bmp280_read_fixed+0xc2>
	}

	adc_pressure = data[0] << 12 | data[1] << 4 | data[2] >> 4;
 8001f74:	7e3b      	ldrb	r3, [r7, #24]
 8001f76:	031a      	lsls	r2, r3, #12
 8001f78:	7e7b      	ldrb	r3, [r7, #25]
 8001f7a:	011b      	lsls	r3, r3, #4
 8001f7c:	4313      	orrs	r3, r2
 8001f7e:	7eba      	ldrb	r2, [r7, #26]
 8001f80:	0912      	lsrs	r2, r2, #4
 8001f82:	b2d2      	uxtb	r2, r2
 8001f84:	4313      	orrs	r3, r2
 8001f86:	62bb      	str	r3, [r7, #40]	@ 0x28
	adc_temp = data[3] << 12 | data[4] << 4 | data[5] >> 4;
 8001f88:	7efb      	ldrb	r3, [r7, #27]
 8001f8a:	031a      	lsls	r2, r3, #12
 8001f8c:	7f3b      	ldrb	r3, [r7, #28]
 8001f8e:	011b      	lsls	r3, r3, #4
 8001f90:	4313      	orrs	r3, r2
 8001f92:	7f7a      	ldrb	r2, [r7, #29]
 8001f94:	0912      	lsrs	r2, r2, #4
 8001f96:	b2d2      	uxtb	r2, r2
 8001f98:	4313      	orrs	r3, r2
 8001f9a:	627b      	str	r3, [r7, #36]	@ 0x24

	int32_t fine_temp;
	*temperature = compensate_temperature(dev, adc_temp, &fine_temp);
 8001f9c:	f107 0314 	add.w	r3, r7, #20
 8001fa0:	461a      	mov	r2, r3
 8001fa2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001fa4:	68f8      	ldr	r0, [r7, #12]
 8001fa6:	f7ff fc6d 	bl	8001884 <compensate_temperature>
 8001faa:	4602      	mov	r2, r0
 8001fac:	68bb      	ldr	r3, [r7, #8]
 8001fae:	601a      	str	r2, [r3, #0]
	*pressure = compensate_pressure(dev, adc_pressure, fine_temp);
 8001fb0:	697b      	ldr	r3, [r7, #20]
 8001fb2:	461a      	mov	r2, r3
 8001fb4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001fb6:	68f8      	ldr	r0, [r7, #12]
 8001fb8:	f7ff fc9c 	bl	80018f4 <compensate_pressure>
 8001fbc:	4602      	mov	r2, r0
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	601a      	str	r2, [r3, #0]

	if (humidity) {
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d00d      	beq.n	8001fe4 <bmp280_read_fixed+0xc0>
		int32_t adc_humidity = data[6] << 8 | data[7];
 8001fc8:	7fbb      	ldrb	r3, [r7, #30]
 8001fca:	021b      	lsls	r3, r3, #8
 8001fcc:	7ffa      	ldrb	r2, [r7, #31]
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	623b      	str	r3, [r7, #32]
		*humidity = compensate_humidity(dev, adc_humidity, fine_temp);
 8001fd2:	697b      	ldr	r3, [r7, #20]
 8001fd4:	461a      	mov	r2, r3
 8001fd6:	6a39      	ldr	r1, [r7, #32]
 8001fd8:	68f8      	ldr	r0, [r7, #12]
 8001fda:	f7ff ff45 	bl	8001e68 <compensate_humidity>
 8001fde:	4602      	mov	r2, r0
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	601a      	str	r2, [r3, #0]
	}

	return true;
 8001fe4:	2301      	movs	r3, #1
}
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	3730      	adds	r7, #48	@ 0x30
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}
	...

08001ff0 <bmp280_read_float>:

bool bmp280_read_float(BMP280_HandleTypedef *dev, float *temperature, float *pressure,
		float *humidity) {
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b088      	sub	sp, #32
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	60f8      	str	r0, [r7, #12]
 8001ff8:	60b9      	str	r1, [r7, #8]
 8001ffa:	607a      	str	r2, [r7, #4]
 8001ffc:	603b      	str	r3, [r7, #0]
	int32_t fixed_temperature;
	uint32_t fixed_pressure;
	uint32_t fixed_humidity;
	if (bmp280_read_fixed(dev, &fixed_temperature, &fixed_pressure,
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	2b00      	cmp	r3, #0
 8002002:	d002      	beq.n	800200a <bmp280_read_float+0x1a>
 8002004:	f107 0314 	add.w	r3, r7, #20
 8002008:	e000      	b.n	800200c <bmp280_read_float+0x1c>
 800200a:	2300      	movs	r3, #0
 800200c:	f107 0218 	add.w	r2, r7, #24
 8002010:	f107 011c 	add.w	r1, r7, #28
 8002014:	68f8      	ldr	r0, [r7, #12]
 8002016:	f7ff ff85 	bl	8001f24 <bmp280_read_fixed>
 800201a:	4603      	mov	r3, r0
 800201c:	2b00      	cmp	r3, #0
 800201e:	d02d      	beq.n	800207c <bmp280_read_float+0x8c>
			humidity ? &fixed_humidity : NULL)) {
		*temperature = (float) fixed_temperature / 100;
 8002020:	69fb      	ldr	r3, [r7, #28]
 8002022:	4618      	mov	r0, r3
 8002024:	f7fe fe5a 	bl	8000cdc <__aeabi_i2f>
 8002028:	4603      	mov	r3, r0
 800202a:	4917      	ldr	r1, [pc, #92]	@ (8002088 <bmp280_read_float+0x98>)
 800202c:	4618      	mov	r0, r3
 800202e:	f7fe ff5d 	bl	8000eec <__aeabi_fdiv>
 8002032:	4603      	mov	r3, r0
 8002034:	461a      	mov	r2, r3
 8002036:	68bb      	ldr	r3, [r7, #8]
 8002038:	601a      	str	r2, [r3, #0]
		*pressure = (float) fixed_pressure / 256;
 800203a:	69bb      	ldr	r3, [r7, #24]
 800203c:	4618      	mov	r0, r3
 800203e:	f7fe fe49 	bl	8000cd4 <__aeabi_ui2f>
 8002042:	4603      	mov	r3, r0
 8002044:	f04f 4187 	mov.w	r1, #1132462080	@ 0x43800000
 8002048:	4618      	mov	r0, r3
 800204a:	f7fe ff4f 	bl	8000eec <__aeabi_fdiv>
 800204e:	4603      	mov	r3, r0
 8002050:	461a      	mov	r2, r3
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	601a      	str	r2, [r3, #0]
		if (humidity)
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	2b00      	cmp	r3, #0
 800205a:	d00d      	beq.n	8002078 <bmp280_read_float+0x88>
			*humidity = (float) fixed_humidity / 1024;
 800205c:	697b      	ldr	r3, [r7, #20]
 800205e:	4618      	mov	r0, r3
 8002060:	f7fe fe38 	bl	8000cd4 <__aeabi_ui2f>
 8002064:	4603      	mov	r3, r0
 8002066:	f04f 4189 	mov.w	r1, #1149239296	@ 0x44800000
 800206a:	4618      	mov	r0, r3
 800206c:	f7fe ff3e 	bl	8000eec <__aeabi_fdiv>
 8002070:	4603      	mov	r3, r0
 8002072:	461a      	mov	r2, r3
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	601a      	str	r2, [r3, #0]
		return true;
 8002078:	2301      	movs	r3, #1
 800207a:	e000      	b.n	800207e <bmp280_read_float+0x8e>
	}

	return false;
 800207c:	2300      	movs	r3, #0
}
 800207e:	4618      	mov	r0, r3
 8002080:	3720      	adds	r7, #32
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}
 8002086:	bf00      	nop
 8002088:	42c80000 	.word	0x42c80000

0800208c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800208c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002090:	f5ad 7d49 	sub.w	sp, sp, #804	@ 0x324
 8002094:	af20      	add	r7, sp, #128	@ 0x80
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002096:	f000 ff5b 	bl	8002f50 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800209a:	f000 f953 	bl	8002344 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800209e:	f000 fa61 	bl	8002564 <MX_GPIO_Init>
  MX_DMA_Init();
 80020a2:	f000 fa41 	bl	8002528 <MX_DMA_Init>
  MX_I2C1_Init();
 80020a6:	f000 f993 	bl	80023d0 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80020aa:	f000 f9bf 	bl	800242c <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 80020ae:	f000 fa11 	bl	80024d4 <MX_USART3_UART_Init>
  MX_USART2_UART_Init();
 80020b2:	f000 f9e5 	bl	8002480 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_DMA(&huart2, (uint8_t*)gpsBuffer, GPS_BUFFER_SIZE);
 80020b6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80020ba:	4990      	ldr	r1, [pc, #576]	@ (80022fc <main+0x270>)
 80020bc:	4890      	ldr	r0, [pc, #576]	@ (8002300 <main+0x274>)
 80020be:	f003 f98a 	bl	80053d6 <HAL_UART_Receive_DMA>
  lastTransmissionTime = 0 ;
 80020c2:	4b90      	ldr	r3, [pc, #576]	@ (8002304 <main+0x278>)
 80020c4:	2200      	movs	r2, #0
 80020c6:	601a      	str	r2, [r3, #0]

  //En estas lineas pasan cosas raras, aquí es donde se inicializa el dispositivo
  	  	bmp280_init_default_params(&bmp280.params);
 80020c8:	488f      	ldr	r0, [pc, #572]	@ (8002308 <main+0x27c>)
 80020ca:	f7ff f9b5 	bl	8001438 <bmp280_init_default_params>
    	bmp280.addr = BMP280_I2C_ADDRESS_0;
 80020ce:	4b8f      	ldr	r3, [pc, #572]	@ (800230c <main+0x280>)
 80020d0:	2276      	movs	r2, #118	@ 0x76
 80020d2:	849a      	strh	r2, [r3, #36]	@ 0x24
    	bmp280.i2c = &hi2c1;
 80020d4:	4b8d      	ldr	r3, [pc, #564]	@ (800230c <main+0x280>)
 80020d6:	4a8e      	ldr	r2, [pc, #568]	@ (8002310 <main+0x284>)
 80020d8:	629a      	str	r2, [r3, #40]	@ 0x28


    	while (!bmp280_init(&bmp280, &bmp280.params)) {
 80020da:	e007      	b.n	80020ec <main+0x60>
    	    sprintf((char *)Data, "BMP280 initialization failed\n");
 80020dc:	498d      	ldr	r1, [pc, #564]	@ (8002314 <main+0x288>)
 80020de:	488e      	ldr	r0, [pc, #568]	@ (8002318 <main+0x28c>)
 80020e0:	f004 fc3c 	bl	800695c <siprintf>
    	    //uartx_write_text(&huart1, Data);
    	    HAL_Delay(1000);
 80020e4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80020e8:	f000 ff94 	bl	8003014 <HAL_Delay>
    	while (!bmp280_init(&bmp280, &bmp280.params)) {
 80020ec:	4986      	ldr	r1, [pc, #536]	@ (8002308 <main+0x27c>)
 80020ee:	4887      	ldr	r0, [pc, #540]	@ (800230c <main+0x280>)
 80020f0:	f7ff fb1b 	bl	800172a <bmp280_init>
 80020f4:	4603      	mov	r3, r0
 80020f6:	f083 0301 	eor.w	r3, r3, #1
 80020fa:	b2db      	uxtb	r3, r3
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d1ed      	bne.n	80020dc <main+0x50>
    	}
	bool bme280p = bmp280.id == BMP280_CHIP_ID;
 8002100:	4b82      	ldr	r3, [pc, #520]	@ (800230c <main+0x280>)
 8002102:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8002106:	2b58      	cmp	r3, #88	@ 0x58
 8002108:	bf0c      	ite	eq
 800210a:	2301      	moveq	r3, #1
 800210c:	2300      	movne	r3, #0
 800210e:	f887 329f 	strb.w	r3, [r7, #671]	@ 0x29f
	sprintf((char *)Data, "BMP280: found %s\n", bme280p ? "BME280" : "BMP280");
 8002112:	f897 329f 	ldrb.w	r3, [r7, #671]	@ 0x29f
 8002116:	2b00      	cmp	r3, #0
 8002118:	d001      	beq.n	800211e <main+0x92>
 800211a:	4b80      	ldr	r3, [pc, #512]	@ (800231c <main+0x290>)
 800211c:	e000      	b.n	8002120 <main+0x94>
 800211e:	4b80      	ldr	r3, [pc, #512]	@ (8002320 <main+0x294>)
 8002120:	461a      	mov	r2, r3
 8002122:	4980      	ldr	r1, [pc, #512]	@ (8002324 <main+0x298>)
 8002124:	487c      	ldr	r0, [pc, #496]	@ (8002318 <main+0x28c>)
 8002126:	f004 fc19 	bl	800695c <siprintf>
	uartx_write_text(&huart1, Data);
 800212a:	497b      	ldr	r1, [pc, #492]	@ (8002318 <main+0x28c>)
 800212c:	487e      	ldr	r0, [pc, #504]	@ (8002328 <main+0x29c>)
 800212e:	f000 fed2 	bl	8002ed6 <uartx_write_text>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	 while (1)
	 {
	   uint32_t currentTime = HAL_GetTick();
 8002132:	f000 ff65 	bl	8003000 <HAL_GetTick>
 8002136:	f8c7 0298 	str.w	r0, [r7, #664]	@ 0x298
	   process_gps_data();
 800213a:	f000 fa41 	bl	80025c0 <process_gps_data>

	   if (currentTime - lastTransmissionTime >= 1000)  // 1000 ms = 1 segundo
 800213e:	4b71      	ldr	r3, [pc, #452]	@ (8002304 <main+0x278>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f8d7 2298 	ldr.w	r2, [r7, #664]	@ 0x298
 8002146:	1ad3      	subs	r3, r2, r3
 8002148:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800214c:	d3f1      	bcc.n	8002132 <main+0xa6>
	     // Leer datos del GPS


	     // Leer datos del BMP280
	     float temperature, pressure, humidity;
	     bmp280_read_float(&bmp280, &temperature, &pressure, &humidity);
 800214e:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8002152:	f507 7223 	add.w	r2, r7, #652	@ 0x28c
 8002156:	f507 7124 	add.w	r1, r7, #656	@ 0x290
 800215a:	486c      	ldr	r0, [pc, #432]	@ (800230c <main+0x280>)
 800215c:	f7ff ff48 	bl	8001ff0 <bmp280_read_float>

	     // Leer datos del MPU9250
	     float accelData[3], gyroData[3], magData[3];
	     MPU9250_ReadAccel(&hi2c1, accelData);
 8002160:	f507 731f 	add.w	r3, r7, #636	@ 0x27c
 8002164:	4619      	mov	r1, r3
 8002166:	486a      	ldr	r0, [pc, #424]	@ (8002310 <main+0x284>)
 8002168:	f000 fb5a 	bl	8002820 <MPU9250_ReadAccel>
	     MPU9250_ReadGyro(&hi2c1, gyroData);
 800216c:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 8002170:	4619      	mov	r1, r3
 8002172:	4867      	ldr	r0, [pc, #412]	@ (8002310 <main+0x284>)
 8002174:	f000 fbac 	bl	80028d0 <MPU9250_ReadGyro>
	     MPU9250_ReadMag(&hi2c1, magData);
 8002178:	f507 7319 	add.w	r3, r7, #612	@ 0x264
 800217c:	4619      	mov	r1, r3
 800217e:	4864      	ldr	r0, [pc, #400]	@ (8002310 <main+0x284>)
 8002180:	f000 fc00 	bl	8002984 <MPU9250_ReadMag>

	     // Formar el mensaje con todos los datos
	     char buffer[512];
	     int len = snprintf(buffer, sizeof(buffer),
 8002184:	4b69      	ldr	r3, [pc, #420]	@ (800232c <main+0x2a0>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800218a:	4b69      	ldr	r3, [pc, #420]	@ (8002330 <main+0x2a4>)
 800218c:	681e      	ldr	r6, [r3, #0]
 800218e:	4b69      	ldr	r3, [pc, #420]	@ (8002334 <main+0x2a8>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4618      	mov	r0, r3
 8002194:	f7fe f948 	bl	8000428 <__aeabi_f2d>
 8002198:	e9c7 0114 	strd	r0, r1, [r7, #80]	@ 0x50
 800219c:	4b66      	ldr	r3, [pc, #408]	@ (8002338 <main+0x2ac>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4618      	mov	r0, r3
 80021a2:	f7fe f941 	bl	8000428 <__aeabi_f2d>
 80021a6:	e9c7 0112 	strd	r0, r1, [r7, #72]	@ 0x48
 80021aa:	4b64      	ldr	r3, [pc, #400]	@ (800233c <main+0x2b0>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4618      	mov	r0, r3
 80021b0:	f7fe f93a 	bl	8000428 <__aeabi_f2d>
 80021b4:	e9c7 0110 	strd	r0, r1, [r7, #64]	@ 0x40
 80021b8:	f8d7 3290 	ldr.w	r3, [r7, #656]	@ 0x290
 80021bc:	4618      	mov	r0, r3
 80021be:	f7fe f933 	bl	8000428 <__aeabi_f2d>
 80021c2:	e9c7 010e 	strd	r0, r1, [r7, #56]	@ 0x38
 80021c6:	f8d7 328c 	ldr.w	r3, [r7, #652]	@ 0x28c
 80021ca:	4618      	mov	r0, r3
 80021cc:	f7fe f92c 	bl	8000428 <__aeabi_f2d>
 80021d0:	e9c7 010c 	strd	r0, r1, [r7, #48]	@ 0x30
 80021d4:	f8d7 3288 	ldr.w	r3, [r7, #648]	@ 0x288
 80021d8:	4618      	mov	r0, r3
 80021da:	f7fe f925 	bl	8000428 <__aeabi_f2d>
 80021de:	e9c7 010a 	strd	r0, r1, [r7, #40]	@ 0x28
	         "AccX=%.2f,AccY=%.2f,AccZ=%.2f, "
	         "GyroX=%.2f,GyroY=%.2f,GyroZ=%.2f, "
	         "MagX=%.2f,MagY=%.2f,MagZ=%.2f\r\n",
	         hours, minutes, seconds, latitude, longitude,
	         temperature, pressure, humidity,
	         accelData[0], accelData[1], accelData[2],
 80021e2:	f8d7 327c 	ldr.w	r3, [r7, #636]	@ 0x27c
	     int len = snprintf(buffer, sizeof(buffer),
 80021e6:	4618      	mov	r0, r3
 80021e8:	f7fe f91e 	bl	8000428 <__aeabi_f2d>
 80021ec:	e9c7 0108 	strd	r0, r1, [r7, #32]
	         accelData[0], accelData[1], accelData[2],
 80021f0:	f8d7 3280 	ldr.w	r3, [r7, #640]	@ 0x280
	     int len = snprintf(buffer, sizeof(buffer),
 80021f4:	4618      	mov	r0, r3
 80021f6:	f7fe f917 	bl	8000428 <__aeabi_f2d>
 80021fa:	e9c7 0106 	strd	r0, r1, [r7, #24]
	         accelData[0], accelData[1], accelData[2],
 80021fe:	f8d7 3284 	ldr.w	r3, [r7, #644]	@ 0x284
	     int len = snprintf(buffer, sizeof(buffer),
 8002202:	4618      	mov	r0, r3
 8002204:	f7fe f910 	bl	8000428 <__aeabi_f2d>
 8002208:	e9c7 0104 	strd	r0, r1, [r7, #16]
	         gyroData[0], gyroData[1], gyroData[2],
 800220c:	f8d7 3270 	ldr.w	r3, [r7, #624]	@ 0x270
	     int len = snprintf(buffer, sizeof(buffer),
 8002210:	4618      	mov	r0, r3
 8002212:	f7fe f909 	bl	8000428 <__aeabi_f2d>
 8002216:	e9c7 0102 	strd	r0, r1, [r7, #8]
	         gyroData[0], gyroData[1], gyroData[2],
 800221a:	f8d7 3274 	ldr.w	r3, [r7, #628]	@ 0x274
	     int len = snprintf(buffer, sizeof(buffer),
 800221e:	4618      	mov	r0, r3
 8002220:	f7fe f902 	bl	8000428 <__aeabi_f2d>
 8002224:	e9c7 0100 	strd	r0, r1, [r7]
	         gyroData[0], gyroData[1], gyroData[2],
 8002228:	f8d7 3278 	ldr.w	r3, [r7, #632]	@ 0x278
	     int len = snprintf(buffer, sizeof(buffer),
 800222c:	4618      	mov	r0, r3
 800222e:	f7fe f8fb 	bl	8000428 <__aeabi_f2d>
 8002232:	4682      	mov	sl, r0
 8002234:	468b      	mov	fp, r1
	         magData[0], magData[1], magData[2]);
 8002236:	f8d7 3264 	ldr.w	r3, [r7, #612]	@ 0x264
	     int len = snprintf(buffer, sizeof(buffer),
 800223a:	4618      	mov	r0, r3
 800223c:	f7fe f8f4 	bl	8000428 <__aeabi_f2d>
 8002240:	4680      	mov	r8, r0
 8002242:	4689      	mov	r9, r1
	         magData[0], magData[1], magData[2]);
 8002244:	f8d7 3268 	ldr.w	r3, [r7, #616]	@ 0x268
	     int len = snprintf(buffer, sizeof(buffer),
 8002248:	4618      	mov	r0, r3
 800224a:	f7fe f8ed 	bl	8000428 <__aeabi_f2d>
 800224e:	4604      	mov	r4, r0
 8002250:	460d      	mov	r5, r1
	         magData[0], magData[1], magData[2]);
 8002252:	f8d7 326c 	ldr.w	r3, [r7, #620]	@ 0x26c
	     int len = snprintf(buffer, sizeof(buffer),
 8002256:	4618      	mov	r0, r3
 8002258:	f7fe f8e6 	bl	8000428 <__aeabi_f2d>
 800225c:	4602      	mov	r2, r0
 800225e:	460b      	mov	r3, r1
 8002260:	f107 0064 	add.w	r0, r7, #100	@ 0x64
 8002264:	e9cd 231e 	strd	r2, r3, [sp, #120]	@ 0x78
 8002268:	e9cd 451c 	strd	r4, r5, [sp, #112]	@ 0x70
 800226c:	e9cd 891a 	strd	r8, r9, [sp, #104]	@ 0x68
 8002270:	e9cd ab18 	strd	sl, fp, [sp, #96]	@ 0x60
 8002274:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002278:	e9cd 2316 	strd	r2, r3, [sp, #88]	@ 0x58
 800227c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002280:	e9cd 2314 	strd	r2, r3, [sp, #80]	@ 0x50
 8002284:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002288:	e9cd 2312 	strd	r2, r3, [sp, #72]	@ 0x48
 800228c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002290:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8002294:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002298:	e9cd 230e 	strd	r2, r3, [sp, #56]	@ 0x38
 800229c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80022a0:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80022a4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80022a8:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 80022ac:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80022b0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80022b4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80022b8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80022bc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80022c0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80022c4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80022c8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80022cc:	9600      	str	r6, [sp, #0]
 80022ce:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80022d0:	4a1b      	ldr	r2, [pc, #108]	@ (8002340 <main+0x2b4>)
 80022d2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80022d6:	f004 fb0d 	bl	80068f4 <sniprintf>
 80022da:	f8c7 0294 	str.w	r0, [r7, #660]	@ 0x294

	     // Enviar el mensaje por UART
	     HAL_UART_Transmit(&huart1, (uint8_t *)buffer, len, HAL_MAX_DELAY);
 80022de:	f8d7 3294 	ldr.w	r3, [r7, #660]	@ 0x294
 80022e2:	b29a      	uxth	r2, r3
 80022e4:	f107 0164 	add.w	r1, r7, #100	@ 0x64
 80022e8:	f04f 33ff 	mov.w	r3, #4294967295
 80022ec:	480e      	ldr	r0, [pc, #56]	@ (8002328 <main+0x29c>)
 80022ee:	f002 ffef 	bl	80052d0 <HAL_UART_Transmit>

	     lastTransmissionTime = currentTime;
 80022f2:	4a04      	ldr	r2, [pc, #16]	@ (8002304 <main+0x278>)
 80022f4:	f8d7 3298 	ldr.w	r3, [r7, #664]	@ 0x298
 80022f8:	6013      	str	r3, [r2, #0]
	 {
 80022fa:	e71a      	b.n	8002132 <main+0xa6>
 80022fc:	200001f4 	.word	0x200001f4
 8002300:	20000698 	.word	0x20000698
 8002304:	200008b8 	.word	0x200008b8
 8002308:	20000798 	.word	0x20000798
 800230c:	2000076c 	.word	0x2000076c
 8002310:	200005fc 	.word	0x200005fc
 8002314:	0800aa48 	.word	0x0800aa48
 8002318:	200007a0 	.word	0x200007a0
 800231c:	0800aa68 	.word	0x0800aa68
 8002320:	0800aa70 	.word	0x0800aa70
 8002324:	0800aa78 	.word	0x0800aa78
 8002328:	20000650 	.word	0x20000650
 800232c:	200008ac 	.word	0x200008ac
 8002330:	200008b0 	.word	0x200008b0
 8002334:	200008b4 	.word	0x200008b4
 8002338:	200008a4 	.word	0x200008a4
 800233c:	200008a8 	.word	0x200008a8
 8002340:	0800aa8c 	.word	0x0800aa8c

08002344 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b090      	sub	sp, #64	@ 0x40
 8002348:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800234a:	f107 0318 	add.w	r3, r7, #24
 800234e:	2228      	movs	r2, #40	@ 0x28
 8002350:	2100      	movs	r1, #0
 8002352:	4618      	mov	r0, r3
 8002354:	f004 fb91 	bl	8006a7a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002358:	1d3b      	adds	r3, r7, #4
 800235a:	2200      	movs	r2, #0
 800235c:	601a      	str	r2, [r3, #0]
 800235e:	605a      	str	r2, [r3, #4]
 8002360:	609a      	str	r2, [r3, #8]
 8002362:	60da      	str	r2, [r3, #12]
 8002364:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002366:	2301      	movs	r3, #1
 8002368:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800236a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800236e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002370:	2300      	movs	r3, #0
 8002372:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002374:	2301      	movs	r3, #1
 8002376:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002378:	2302      	movs	r3, #2
 800237a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800237c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002380:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002382:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8002386:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002388:	f107 0318 	add.w	r3, r7, #24
 800238c:	4618      	mov	r0, r3
 800238e:	f002 fb3f 	bl	8004a10 <HAL_RCC_OscConfig>
 8002392:	4603      	mov	r3, r0
 8002394:	2b00      	cmp	r3, #0
 8002396:	d001      	beq.n	800239c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8002398:	f000 fa3c 	bl	8002814 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800239c:	230f      	movs	r3, #15
 800239e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80023a0:	2302      	movs	r3, #2
 80023a2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80023a4:	2300      	movs	r3, #0
 80023a6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80023a8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80023ac:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80023ae:	2300      	movs	r3, #0
 80023b0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80023b2:	1d3b      	adds	r3, r7, #4
 80023b4:	2102      	movs	r1, #2
 80023b6:	4618      	mov	r0, r3
 80023b8:	f002 fdac 	bl	8004f14 <HAL_RCC_ClockConfig>
 80023bc:	4603      	mov	r3, r0
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d001      	beq.n	80023c6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80023c2:	f000 fa27 	bl	8002814 <Error_Handler>
  }
}
 80023c6:	bf00      	nop
 80023c8:	3740      	adds	r7, #64	@ 0x40
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}
	...

080023d0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80023d4:	4b13      	ldr	r3, [pc, #76]	@ (8002424 <MX_I2C1_Init+0x54>)
 80023d6:	4a14      	ldr	r2, [pc, #80]	@ (8002428 <MX_I2C1_Init+0x58>)
 80023d8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 115200;
 80023da:	4b12      	ldr	r3, [pc, #72]	@ (8002424 <MX_I2C1_Init+0x54>)
 80023dc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80023e0:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80023e2:	4b10      	ldr	r3, [pc, #64]	@ (8002424 <MX_I2C1_Init+0x54>)
 80023e4:	2200      	movs	r2, #0
 80023e6:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80023e8:	4b0e      	ldr	r3, [pc, #56]	@ (8002424 <MX_I2C1_Init+0x54>)
 80023ea:	2200      	movs	r2, #0
 80023ec:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80023ee:	4b0d      	ldr	r3, [pc, #52]	@ (8002424 <MX_I2C1_Init+0x54>)
 80023f0:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80023f4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80023f6:	4b0b      	ldr	r3, [pc, #44]	@ (8002424 <MX_I2C1_Init+0x54>)
 80023f8:	2200      	movs	r2, #0
 80023fa:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80023fc:	4b09      	ldr	r3, [pc, #36]	@ (8002424 <MX_I2C1_Init+0x54>)
 80023fe:	2200      	movs	r2, #0
 8002400:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002402:	4b08      	ldr	r3, [pc, #32]	@ (8002424 <MX_I2C1_Init+0x54>)
 8002404:	2200      	movs	r2, #0
 8002406:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002408:	4b06      	ldr	r3, [pc, #24]	@ (8002424 <MX_I2C1_Init+0x54>)
 800240a:	2200      	movs	r2, #0
 800240c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800240e:	4805      	ldr	r0, [pc, #20]	@ (8002424 <MX_I2C1_Init+0x54>)
 8002410:	f001 faa4 	bl	800395c <HAL_I2C_Init>
 8002414:	4603      	mov	r3, r0
 8002416:	2b00      	cmp	r3, #0
 8002418:	d001      	beq.n	800241e <MX_I2C1_Init+0x4e>
  {
    Error_Handler();
 800241a:	f000 f9fb 	bl	8002814 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800241e:	bf00      	nop
 8002420:	bd80      	pop	{r7, pc}
 8002422:	bf00      	nop
 8002424:	200005fc 	.word	0x200005fc
 8002428:	40005400 	.word	0x40005400

0800242c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002430:	4b11      	ldr	r3, [pc, #68]	@ (8002478 <MX_USART1_UART_Init+0x4c>)
 8002432:	4a12      	ldr	r2, [pc, #72]	@ (800247c <MX_USART1_UART_Init+0x50>)
 8002434:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002436:	4b10      	ldr	r3, [pc, #64]	@ (8002478 <MX_USART1_UART_Init+0x4c>)
 8002438:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800243c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800243e:	4b0e      	ldr	r3, [pc, #56]	@ (8002478 <MX_USART1_UART_Init+0x4c>)
 8002440:	2200      	movs	r2, #0
 8002442:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002444:	4b0c      	ldr	r3, [pc, #48]	@ (8002478 <MX_USART1_UART_Init+0x4c>)
 8002446:	2200      	movs	r2, #0
 8002448:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800244a:	4b0b      	ldr	r3, [pc, #44]	@ (8002478 <MX_USART1_UART_Init+0x4c>)
 800244c:	2200      	movs	r2, #0
 800244e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002450:	4b09      	ldr	r3, [pc, #36]	@ (8002478 <MX_USART1_UART_Init+0x4c>)
 8002452:	220c      	movs	r2, #12
 8002454:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002456:	4b08      	ldr	r3, [pc, #32]	@ (8002478 <MX_USART1_UART_Init+0x4c>)
 8002458:	2200      	movs	r2, #0
 800245a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800245c:	4b06      	ldr	r3, [pc, #24]	@ (8002478 <MX_USART1_UART_Init+0x4c>)
 800245e:	2200      	movs	r2, #0
 8002460:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002462:	4805      	ldr	r0, [pc, #20]	@ (8002478 <MX_USART1_UART_Init+0x4c>)
 8002464:	f002 fee4 	bl	8005230 <HAL_UART_Init>
 8002468:	4603      	mov	r3, r0
 800246a:	2b00      	cmp	r3, #0
 800246c:	d001      	beq.n	8002472 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800246e:	f000 f9d1 	bl	8002814 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002472:	bf00      	nop
 8002474:	bd80      	pop	{r7, pc}
 8002476:	bf00      	nop
 8002478:	20000650 	.word	0x20000650
 800247c:	40013800 	.word	0x40013800

08002480 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002484:	4b11      	ldr	r3, [pc, #68]	@ (80024cc <MX_USART2_UART_Init+0x4c>)
 8002486:	4a12      	ldr	r2, [pc, #72]	@ (80024d0 <MX_USART2_UART_Init+0x50>)
 8002488:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800248a:	4b10      	ldr	r3, [pc, #64]	@ (80024cc <MX_USART2_UART_Init+0x4c>)
 800248c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8002490:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002492:	4b0e      	ldr	r3, [pc, #56]	@ (80024cc <MX_USART2_UART_Init+0x4c>)
 8002494:	2200      	movs	r2, #0
 8002496:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002498:	4b0c      	ldr	r3, [pc, #48]	@ (80024cc <MX_USART2_UART_Init+0x4c>)
 800249a:	2200      	movs	r2, #0
 800249c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800249e:	4b0b      	ldr	r3, [pc, #44]	@ (80024cc <MX_USART2_UART_Init+0x4c>)
 80024a0:	2200      	movs	r2, #0
 80024a2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80024a4:	4b09      	ldr	r3, [pc, #36]	@ (80024cc <MX_USART2_UART_Init+0x4c>)
 80024a6:	220c      	movs	r2, #12
 80024a8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80024aa:	4b08      	ldr	r3, [pc, #32]	@ (80024cc <MX_USART2_UART_Init+0x4c>)
 80024ac:	2200      	movs	r2, #0
 80024ae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80024b0:	4b06      	ldr	r3, [pc, #24]	@ (80024cc <MX_USART2_UART_Init+0x4c>)
 80024b2:	2200      	movs	r2, #0
 80024b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80024b6:	4805      	ldr	r0, [pc, #20]	@ (80024cc <MX_USART2_UART_Init+0x4c>)
 80024b8:	f002 feba 	bl	8005230 <HAL_UART_Init>
 80024bc:	4603      	mov	r3, r0
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d001      	beq.n	80024c6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80024c2:	f000 f9a7 	bl	8002814 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80024c6:	bf00      	nop
 80024c8:	bd80      	pop	{r7, pc}
 80024ca:	bf00      	nop
 80024cc:	20000698 	.word	0x20000698
 80024d0:	40004400 	.word	0x40004400

080024d4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80024d8:	4b11      	ldr	r3, [pc, #68]	@ (8002520 <MX_USART3_UART_Init+0x4c>)
 80024da:	4a12      	ldr	r2, [pc, #72]	@ (8002524 <MX_USART3_UART_Init+0x50>)
 80024dc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80024de:	4b10      	ldr	r3, [pc, #64]	@ (8002520 <MX_USART3_UART_Init+0x4c>)
 80024e0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80024e4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80024e6:	4b0e      	ldr	r3, [pc, #56]	@ (8002520 <MX_USART3_UART_Init+0x4c>)
 80024e8:	2200      	movs	r2, #0
 80024ea:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80024ec:	4b0c      	ldr	r3, [pc, #48]	@ (8002520 <MX_USART3_UART_Init+0x4c>)
 80024ee:	2200      	movs	r2, #0
 80024f0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80024f2:	4b0b      	ldr	r3, [pc, #44]	@ (8002520 <MX_USART3_UART_Init+0x4c>)
 80024f4:	2200      	movs	r2, #0
 80024f6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80024f8:	4b09      	ldr	r3, [pc, #36]	@ (8002520 <MX_USART3_UART_Init+0x4c>)
 80024fa:	220c      	movs	r2, #12
 80024fc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80024fe:	4b08      	ldr	r3, [pc, #32]	@ (8002520 <MX_USART3_UART_Init+0x4c>)
 8002500:	2200      	movs	r2, #0
 8002502:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002504:	4b06      	ldr	r3, [pc, #24]	@ (8002520 <MX_USART3_UART_Init+0x4c>)
 8002506:	2200      	movs	r2, #0
 8002508:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800250a:	4805      	ldr	r0, [pc, #20]	@ (8002520 <MX_USART3_UART_Init+0x4c>)
 800250c:	f002 fe90 	bl	8005230 <HAL_UART_Init>
 8002510:	4603      	mov	r3, r0
 8002512:	2b00      	cmp	r3, #0
 8002514:	d001      	beq.n	800251a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002516:	f000 f97d 	bl	8002814 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800251a:	bf00      	nop
 800251c:	bd80      	pop	{r7, pc}
 800251e:	bf00      	nop
 8002520:	200006e0 	.word	0x200006e0
 8002524:	40004800 	.word	0x40004800

08002528 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b082      	sub	sp, #8
 800252c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800252e:	4b0c      	ldr	r3, [pc, #48]	@ (8002560 <MX_DMA_Init+0x38>)
 8002530:	695b      	ldr	r3, [r3, #20]
 8002532:	4a0b      	ldr	r2, [pc, #44]	@ (8002560 <MX_DMA_Init+0x38>)
 8002534:	f043 0301 	orr.w	r3, r3, #1
 8002538:	6153      	str	r3, [r2, #20]
 800253a:	4b09      	ldr	r3, [pc, #36]	@ (8002560 <MX_DMA_Init+0x38>)
 800253c:	695b      	ldr	r3, [r3, #20]
 800253e:	f003 0301 	and.w	r3, r3, #1
 8002542:	607b      	str	r3, [r7, #4]
 8002544:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8002546:	2200      	movs	r2, #0
 8002548:	2100      	movs	r1, #0
 800254a:	2010      	movs	r0, #16
 800254c:	f000 fe5d 	bl	800320a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8002550:	2010      	movs	r0, #16
 8002552:	f000 fe76 	bl	8003242 <HAL_NVIC_EnableIRQ>

}
 8002556:	bf00      	nop
 8002558:	3708      	adds	r7, #8
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}
 800255e:	bf00      	nop
 8002560:	40021000 	.word	0x40021000

08002564 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002564:	b480      	push	{r7}
 8002566:	b085      	sub	sp, #20
 8002568:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800256a:	4b14      	ldr	r3, [pc, #80]	@ (80025bc <MX_GPIO_Init+0x58>)
 800256c:	699b      	ldr	r3, [r3, #24]
 800256e:	4a13      	ldr	r2, [pc, #76]	@ (80025bc <MX_GPIO_Init+0x58>)
 8002570:	f043 0320 	orr.w	r3, r3, #32
 8002574:	6193      	str	r3, [r2, #24]
 8002576:	4b11      	ldr	r3, [pc, #68]	@ (80025bc <MX_GPIO_Init+0x58>)
 8002578:	699b      	ldr	r3, [r3, #24]
 800257a:	f003 0320 	and.w	r3, r3, #32
 800257e:	60fb      	str	r3, [r7, #12]
 8002580:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002582:	4b0e      	ldr	r3, [pc, #56]	@ (80025bc <MX_GPIO_Init+0x58>)
 8002584:	699b      	ldr	r3, [r3, #24]
 8002586:	4a0d      	ldr	r2, [pc, #52]	@ (80025bc <MX_GPIO_Init+0x58>)
 8002588:	f043 0304 	orr.w	r3, r3, #4
 800258c:	6193      	str	r3, [r2, #24]
 800258e:	4b0b      	ldr	r3, [pc, #44]	@ (80025bc <MX_GPIO_Init+0x58>)
 8002590:	699b      	ldr	r3, [r3, #24]
 8002592:	f003 0304 	and.w	r3, r3, #4
 8002596:	60bb      	str	r3, [r7, #8]
 8002598:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800259a:	4b08      	ldr	r3, [pc, #32]	@ (80025bc <MX_GPIO_Init+0x58>)
 800259c:	699b      	ldr	r3, [r3, #24]
 800259e:	4a07      	ldr	r2, [pc, #28]	@ (80025bc <MX_GPIO_Init+0x58>)
 80025a0:	f043 0308 	orr.w	r3, r3, #8
 80025a4:	6193      	str	r3, [r2, #24]
 80025a6:	4b05      	ldr	r3, [pc, #20]	@ (80025bc <MX_GPIO_Init+0x58>)
 80025a8:	699b      	ldr	r3, [r3, #24]
 80025aa:	f003 0308 	and.w	r3, r3, #8
 80025ae:	607b      	str	r3, [r7, #4]
 80025b0:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80025b2:	bf00      	nop
 80025b4:	3714      	adds	r7, #20
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bc80      	pop	{r7}
 80025ba:	4770      	bx	lr
 80025bc:	40021000 	.word	0x40021000

080025c0 <process_gps_data>:

/* USER CODE BEGIN 4 */

void process_gps_data(void)
{
 80025c0:	b590      	push	{r4, r7, lr}
 80025c2:	b08b      	sub	sp, #44	@ 0x2c
 80025c4:	af04      	add	r7, sp, #16
    if (gpsDataReady)
 80025c6:	4b76      	ldr	r3, [pc, #472]	@ (80027a0 <process_gps_data+0x1e0>)
 80025c8:	781b      	ldrb	r3, [r3, #0]
 80025ca:	b2db      	uxtb	r3, r3
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	f000 80e2 	beq.w	8002796 <process_gps_data+0x1d6>
    {
        char *ptr = strstr((char*)gpsBuffer, "$GPRMC");
 80025d2:	4974      	ldr	r1, [pc, #464]	@ (80027a4 <process_gps_data+0x1e4>)
 80025d4:	4874      	ldr	r0, [pc, #464]	@ (80027a8 <process_gps_data+0x1e8>)
 80025d6:	f004 fa58 	bl	8006a8a <strstr>
 80025da:	6178      	str	r0, [r7, #20]
        if (ptr != NULL)
 80025dc:	697b      	ldr	r3, [r7, #20]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	f000 80cd 	beq.w	800277e <process_gps_data+0x1be>
        {
            if (sscanf(ptr, "$GPRMC,%f,A,%f,%c,%f,%c", &time, &latitude, &lat_dir, &longitude, &long_dir) == 5)
 80025e4:	4b71      	ldr	r3, [pc, #452]	@ (80027ac <process_gps_data+0x1ec>)
 80025e6:	9302      	str	r3, [sp, #8]
 80025e8:	4b71      	ldr	r3, [pc, #452]	@ (80027b0 <process_gps_data+0x1f0>)
 80025ea:	9301      	str	r3, [sp, #4]
 80025ec:	4b71      	ldr	r3, [pc, #452]	@ (80027b4 <process_gps_data+0x1f4>)
 80025ee:	9300      	str	r3, [sp, #0]
 80025f0:	4b71      	ldr	r3, [pc, #452]	@ (80027b8 <process_gps_data+0x1f8>)
 80025f2:	4a72      	ldr	r2, [pc, #456]	@ (80027bc <process_gps_data+0x1fc>)
 80025f4:	4972      	ldr	r1, [pc, #456]	@ (80027c0 <process_gps_data+0x200>)
 80025f6:	6978      	ldr	r0, [r7, #20]
 80025f8:	f004 f9d0 	bl	800699c <siscanf>
 80025fc:	4603      	mov	r3, r0
 80025fe:	2b05      	cmp	r3, #5
 8002600:	f040 80b1 	bne.w	8002766 <process_gps_data+0x1a6>
            {
                // Convertir latitud y longitud a grados decimales
                float lat_degrees = (int)(latitude / 100);
 8002604:	4b6c      	ldr	r3, [pc, #432]	@ (80027b8 <process_gps_data+0x1f8>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	496e      	ldr	r1, [pc, #440]	@ (80027c4 <process_gps_data+0x204>)
 800260a:	4618      	mov	r0, r3
 800260c:	f7fe fc6e 	bl	8000eec <__aeabi_fdiv>
 8002610:	4603      	mov	r3, r0
 8002612:	4618      	mov	r0, r3
 8002614:	f7fe fd06 	bl	8001024 <__aeabi_f2iz>
 8002618:	4603      	mov	r3, r0
 800261a:	4618      	mov	r0, r3
 800261c:	f7fe fb5e 	bl	8000cdc <__aeabi_i2f>
 8002620:	4603      	mov	r3, r0
 8002622:	613b      	str	r3, [r7, #16]
                float lat_minutes = latitude - (lat_degrees * 100);
 8002624:	4b64      	ldr	r3, [pc, #400]	@ (80027b8 <process_gps_data+0x1f8>)
 8002626:	681c      	ldr	r4, [r3, #0]
 8002628:	4966      	ldr	r1, [pc, #408]	@ (80027c4 <process_gps_data+0x204>)
 800262a:	6938      	ldr	r0, [r7, #16]
 800262c:	f7fe fbaa 	bl	8000d84 <__aeabi_fmul>
 8002630:	4603      	mov	r3, r0
 8002632:	4619      	mov	r1, r3
 8002634:	4620      	mov	r0, r4
 8002636:	f7fe fa9b 	bl	8000b70 <__aeabi_fsub>
 800263a:	4603      	mov	r3, r0
 800263c:	60fb      	str	r3, [r7, #12]
                latitude = lat_degrees + (lat_minutes / 60);
 800263e:	4962      	ldr	r1, [pc, #392]	@ (80027c8 <process_gps_data+0x208>)
 8002640:	68f8      	ldr	r0, [r7, #12]
 8002642:	f7fe fc53 	bl	8000eec <__aeabi_fdiv>
 8002646:	4603      	mov	r3, r0
 8002648:	6939      	ldr	r1, [r7, #16]
 800264a:	4618      	mov	r0, r3
 800264c:	f7fe fa92 	bl	8000b74 <__addsf3>
 8002650:	4603      	mov	r3, r0
 8002652:	461a      	mov	r2, r3
 8002654:	4b58      	ldr	r3, [pc, #352]	@ (80027b8 <process_gps_data+0x1f8>)
 8002656:	601a      	str	r2, [r3, #0]
                if (lat_dir == 'S') latitude = -latitude;
 8002658:	4b56      	ldr	r3, [pc, #344]	@ (80027b4 <process_gps_data+0x1f4>)
 800265a:	781b      	ldrb	r3, [r3, #0]
 800265c:	2b53      	cmp	r3, #83	@ 0x53
 800265e:	d105      	bne.n	800266c <process_gps_data+0xac>
 8002660:	4b55      	ldr	r3, [pc, #340]	@ (80027b8 <process_gps_data+0x1f8>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8002668:	4a53      	ldr	r2, [pc, #332]	@ (80027b8 <process_gps_data+0x1f8>)
 800266a:	6013      	str	r3, [r2, #0]

                float long_degrees = (int)(longitude / 100);
 800266c:	4b50      	ldr	r3, [pc, #320]	@ (80027b0 <process_gps_data+0x1f0>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4954      	ldr	r1, [pc, #336]	@ (80027c4 <process_gps_data+0x204>)
 8002672:	4618      	mov	r0, r3
 8002674:	f7fe fc3a 	bl	8000eec <__aeabi_fdiv>
 8002678:	4603      	mov	r3, r0
 800267a:	4618      	mov	r0, r3
 800267c:	f7fe fcd2 	bl	8001024 <__aeabi_f2iz>
 8002680:	4603      	mov	r3, r0
 8002682:	4618      	mov	r0, r3
 8002684:	f7fe fb2a 	bl	8000cdc <__aeabi_i2f>
 8002688:	4603      	mov	r3, r0
 800268a:	60bb      	str	r3, [r7, #8]
                float long_minutes = longitude - (long_degrees * 100);
 800268c:	4b48      	ldr	r3, [pc, #288]	@ (80027b0 <process_gps_data+0x1f0>)
 800268e:	681c      	ldr	r4, [r3, #0]
 8002690:	494c      	ldr	r1, [pc, #304]	@ (80027c4 <process_gps_data+0x204>)
 8002692:	68b8      	ldr	r0, [r7, #8]
 8002694:	f7fe fb76 	bl	8000d84 <__aeabi_fmul>
 8002698:	4603      	mov	r3, r0
 800269a:	4619      	mov	r1, r3
 800269c:	4620      	mov	r0, r4
 800269e:	f7fe fa67 	bl	8000b70 <__aeabi_fsub>
 80026a2:	4603      	mov	r3, r0
 80026a4:	607b      	str	r3, [r7, #4]
                longitude = long_degrees + (long_minutes / 60);
 80026a6:	4948      	ldr	r1, [pc, #288]	@ (80027c8 <process_gps_data+0x208>)
 80026a8:	6878      	ldr	r0, [r7, #4]
 80026aa:	f7fe fc1f 	bl	8000eec <__aeabi_fdiv>
 80026ae:	4603      	mov	r3, r0
 80026b0:	68b9      	ldr	r1, [r7, #8]
 80026b2:	4618      	mov	r0, r3
 80026b4:	f7fe fa5e 	bl	8000b74 <__addsf3>
 80026b8:	4603      	mov	r3, r0
 80026ba:	461a      	mov	r2, r3
 80026bc:	4b3c      	ldr	r3, [pc, #240]	@ (80027b0 <process_gps_data+0x1f0>)
 80026be:	601a      	str	r2, [r3, #0]
                if (long_dir == 'W') longitude = -longitude;
 80026c0:	4b3a      	ldr	r3, [pc, #232]	@ (80027ac <process_gps_data+0x1ec>)
 80026c2:	781b      	ldrb	r3, [r3, #0]
 80026c4:	2b57      	cmp	r3, #87	@ 0x57
 80026c6:	d105      	bne.n	80026d4 <process_gps_data+0x114>
 80026c8:	4b39      	ldr	r3, [pc, #228]	@ (80027b0 <process_gps_data+0x1f0>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 80026d0:	4a37      	ldr	r2, [pc, #220]	@ (80027b0 <process_gps_data+0x1f0>)
 80026d2:	6013      	str	r3, [r2, #0]

                // Convertir tiempo
                hours = (int)time / 10000;
 80026d4:	4b39      	ldr	r3, [pc, #228]	@ (80027bc <process_gps_data+0x1fc>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4618      	mov	r0, r3
 80026da:	f7fe fca3 	bl	8001024 <__aeabi_f2iz>
 80026de:	4603      	mov	r3, r0
 80026e0:	4a3a      	ldr	r2, [pc, #232]	@ (80027cc <process_gps_data+0x20c>)
 80026e2:	fb82 1203 	smull	r1, r2, r2, r3
 80026e6:	1312      	asrs	r2, r2, #12
 80026e8:	17db      	asrs	r3, r3, #31
 80026ea:	1ad3      	subs	r3, r2, r3
 80026ec:	4a38      	ldr	r2, [pc, #224]	@ (80027d0 <process_gps_data+0x210>)
 80026ee:	6013      	str	r3, [r2, #0]
                minutes = (int)(time - (hours * 10000)) / 100;
 80026f0:	4b32      	ldr	r3, [pc, #200]	@ (80027bc <process_gps_data+0x1fc>)
 80026f2:	681c      	ldr	r4, [r3, #0]
 80026f4:	4b36      	ldr	r3, [pc, #216]	@ (80027d0 <process_gps_data+0x210>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f242 7210 	movw	r2, #10000	@ 0x2710
 80026fc:	fb02 f303 	mul.w	r3, r2, r3
 8002700:	4618      	mov	r0, r3
 8002702:	f7fe faeb 	bl	8000cdc <__aeabi_i2f>
 8002706:	4603      	mov	r3, r0
 8002708:	4619      	mov	r1, r3
 800270a:	4620      	mov	r0, r4
 800270c:	f7fe fa30 	bl	8000b70 <__aeabi_fsub>
 8002710:	4603      	mov	r3, r0
 8002712:	4618      	mov	r0, r3
 8002714:	f7fe fc86 	bl	8001024 <__aeabi_f2iz>
 8002718:	4603      	mov	r3, r0
 800271a:	4a2e      	ldr	r2, [pc, #184]	@ (80027d4 <process_gps_data+0x214>)
 800271c:	fb82 1203 	smull	r1, r2, r2, r3
 8002720:	1152      	asrs	r2, r2, #5
 8002722:	17db      	asrs	r3, r3, #31
 8002724:	1ad3      	subs	r3, r2, r3
 8002726:	4a2c      	ldr	r2, [pc, #176]	@ (80027d8 <process_gps_data+0x218>)
 8002728:	6013      	str	r3, [r2, #0]
                seconds = time - ((int)time / 100) * 100;
 800272a:	4b24      	ldr	r3, [pc, #144]	@ (80027bc <process_gps_data+0x1fc>)
 800272c:	681c      	ldr	r4, [r3, #0]
 800272e:	4b23      	ldr	r3, [pc, #140]	@ (80027bc <process_gps_data+0x1fc>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4618      	mov	r0, r3
 8002734:	f7fe fc76 	bl	8001024 <__aeabi_f2iz>
 8002738:	4603      	mov	r3, r0
 800273a:	4a26      	ldr	r2, [pc, #152]	@ (80027d4 <process_gps_data+0x214>)
 800273c:	fb82 1203 	smull	r1, r2, r2, r3
 8002740:	1152      	asrs	r2, r2, #5
 8002742:	17db      	asrs	r3, r3, #31
 8002744:	1ad3      	subs	r3, r2, r3
 8002746:	2264      	movs	r2, #100	@ 0x64
 8002748:	fb02 f303 	mul.w	r3, r2, r3
 800274c:	4618      	mov	r0, r3
 800274e:	f7fe fac5 	bl	8000cdc <__aeabi_i2f>
 8002752:	4603      	mov	r3, r0
 8002754:	4619      	mov	r1, r3
 8002756:	4620      	mov	r0, r4
 8002758:	f7fe fa0a 	bl	8000b70 <__aeabi_fsub>
 800275c:	4603      	mov	r3, r0
 800275e:	461a      	mov	r2, r3
 8002760:	4b1e      	ldr	r3, [pc, #120]	@ (80027dc <process_gps_data+0x21c>)
 8002762:	601a      	str	r2, [r3, #0]
 8002764:	e00b      	b.n	800277e <process_gps_data+0x1be>
            }
            else
            {
                // Si no se pudo parsear correctamente, invalidar los datos
                time = 0;
 8002766:	4b15      	ldr	r3, [pc, #84]	@ (80027bc <process_gps_data+0x1fc>)
 8002768:	f04f 0200 	mov.w	r2, #0
 800276c:	601a      	str	r2, [r3, #0]
                latitude = 0;
 800276e:	4b12      	ldr	r3, [pc, #72]	@ (80027b8 <process_gps_data+0x1f8>)
 8002770:	f04f 0200 	mov.w	r2, #0
 8002774:	601a      	str	r2, [r3, #0]
                longitude = 0;
 8002776:	4b0e      	ldr	r3, [pc, #56]	@ (80027b0 <process_gps_data+0x1f0>)
 8002778:	f04f 0200 	mov.w	r2, #0
 800277c:	601a      	str	r2, [r3, #0]
            }
        }

        gpsDataReady = 0;
 800277e:	4b08      	ldr	r3, [pc, #32]	@ (80027a0 <process_gps_data+0x1e0>)
 8002780:	2200      	movs	r2, #0
 8002782:	701a      	strb	r2, [r3, #0]
        gpsBufferIndex = 0;
 8002784:	4b16      	ldr	r3, [pc, #88]	@ (80027e0 <process_gps_data+0x220>)
 8002786:	2200      	movs	r2, #0
 8002788:	601a      	str	r2, [r3, #0]
        HAL_UART_Receive_DMA(&huart2, gpsBuffer, GPS_BUFFER_SIZE);
 800278a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800278e:	4906      	ldr	r1, [pc, #24]	@ (80027a8 <process_gps_data+0x1e8>)
 8002790:	4814      	ldr	r0, [pc, #80]	@ (80027e4 <process_gps_data+0x224>)
 8002792:	f002 fe20 	bl	80053d6 <HAL_UART_Receive_DMA>
    }
}
 8002796:	bf00      	nop
 8002798:	371c      	adds	r7, #28
 800279a:	46bd      	mov	sp, r7
 800279c:	bd90      	pop	{r4, r7, pc}
 800279e:	bf00      	nop
 80027a0:	200005f8 	.word	0x200005f8
 80027a4:	0800ab44 	.word	0x0800ab44
 80027a8:	200001f4 	.word	0x200001f4
 80027ac:	20000001 	.word	0x20000001
 80027b0:	200008a8 	.word	0x200008a8
 80027b4:	20000000 	.word	0x20000000
 80027b8:	200008a4 	.word	0x200008a4
 80027bc:	200008a0 	.word	0x200008a0
 80027c0:	0800ab4c 	.word	0x0800ab4c
 80027c4:	42c80000 	.word	0x42c80000
 80027c8:	42700000 	.word	0x42700000
 80027cc:	68db8bad 	.word	0x68db8bad
 80027d0:	200008ac 	.word	0x200008ac
 80027d4:	51eb851f 	.word	0x51eb851f
 80027d8:	200008b0 	.word	0x200008b0
 80027dc:	200008b4 	.word	0x200008b4
 80027e0:	200005f4 	.word	0x200005f4
 80027e4:	20000698 	.word	0x20000698

080027e8 <HAL_UART_RxCpltCallback>:
             hours, minutes, seconds, lat, lon);
    HAL_UART_Transmit(&huart1, (uint8_t*)Data, strlen(Data), 1000);
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80027e8:	b480      	push	{r7}
 80027ea:	b083      	sub	sp, #12
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART2)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a05      	ldr	r2, [pc, #20]	@ (800280c <HAL_UART_RxCpltCallback+0x24>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d102      	bne.n	8002800 <HAL_UART_RxCpltCallback+0x18>
    {
        gpsDataReady = 1;
 80027fa:	4b05      	ldr	r3, [pc, #20]	@ (8002810 <HAL_UART_RxCpltCallback+0x28>)
 80027fc:	2201      	movs	r2, #1
 80027fe:	701a      	strb	r2, [r3, #0]
    }
}
 8002800:	bf00      	nop
 8002802:	370c      	adds	r7, #12
 8002804:	46bd      	mov	sp, r7
 8002806:	bc80      	pop	{r7}
 8002808:	4770      	bx	lr
 800280a:	bf00      	nop
 800280c:	40004400 	.word	0x40004400
 8002810:	200005f8 	.word	0x200005f8

08002814 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002814:	b480      	push	{r7}
 8002816:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002818:	b672      	cpsid	i
}
 800281a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800281c:	bf00      	nop
 800281e:	e7fd      	b.n	800281c <Error_Handler+0x8>

08002820 <MPU9250_ReadAccel>:

#include <mpu9250.h>
#include <uart.h> // Incluye tus funciones personalizadas de UART

// Implementación simplificada para enviar datos de acelerómetro via UART
void MPU9250_ReadAccel(I2C_HandleTypeDef *hi2c, float *accelData) {
 8002820:	b590      	push	{r4, r7, lr}
 8002822:	b08b      	sub	sp, #44	@ 0x2c
 8002824:	af04      	add	r7, sp, #16
 8002826:	6078      	str	r0, [r7, #4]
 8002828:	6039      	str	r1, [r7, #0]
    uint8_t rawData[6];
    HAL_I2C_Mem_Read(hi2c, MPU9250_ADDRESS, ACCEL_XOUT_H, 1, rawData, 6, 1000);
 800282a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800282e:	9302      	str	r3, [sp, #8]
 8002830:	2306      	movs	r3, #6
 8002832:	9301      	str	r3, [sp, #4]
 8002834:	f107 030c 	add.w	r3, r7, #12
 8002838:	9300      	str	r3, [sp, #0]
 800283a:	2301      	movs	r3, #1
 800283c:	223b      	movs	r2, #59	@ 0x3b
 800283e:	21d0      	movs	r1, #208	@ 0xd0
 8002840:	6878      	ldr	r0, [r7, #4]
 8002842:	f001 fac9 	bl	8003dd8 <HAL_I2C_Mem_Read>

    for (int i = 0; i < 3; ++i) {
 8002846:	2300      	movs	r3, #0
 8002848:	617b      	str	r3, [r7, #20]
 800284a:	e036      	b.n	80028ba <MPU9250_ReadAccel+0x9a>
        int16_t raw = (int16_t)(rawData[2 * i] << 8 | rawData[2 * i + 1]);
 800284c:	697b      	ldr	r3, [r7, #20]
 800284e:	005b      	lsls	r3, r3, #1
 8002850:	3318      	adds	r3, #24
 8002852:	443b      	add	r3, r7
 8002854:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8002858:	021b      	lsls	r3, r3, #8
 800285a:	b21a      	sxth	r2, r3
 800285c:	697b      	ldr	r3, [r7, #20]
 800285e:	005b      	lsls	r3, r3, #1
 8002860:	3301      	adds	r3, #1
 8002862:	3318      	adds	r3, #24
 8002864:	443b      	add	r3, r7
 8002866:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800286a:	b21b      	sxth	r3, r3
 800286c:	4313      	orrs	r3, r2
 800286e:	827b      	strh	r3, [r7, #18]
        accelData[i] = (float)raw * 2.0 / 32768.0;
 8002870:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002874:	4618      	mov	r0, r3
 8002876:	f7fe fa31 	bl	8000cdc <__aeabi_i2f>
 800287a:	4603      	mov	r3, r0
 800287c:	4618      	mov	r0, r3
 800287e:	f7fd fdd3 	bl	8000428 <__aeabi_f2d>
 8002882:	4602      	mov	r2, r0
 8002884:	460b      	mov	r3, r1
 8002886:	f7fd fc71 	bl	800016c <__adddf3>
 800288a:	4602      	mov	r2, r0
 800288c:	460b      	mov	r3, r1
 800288e:	4610      	mov	r0, r2
 8002890:	4619      	mov	r1, r3
 8002892:	f04f 0200 	mov.w	r2, #0
 8002896:	4b0d      	ldr	r3, [pc, #52]	@ (80028cc <MPU9250_ReadAccel+0xac>)
 8002898:	f7fd ff48 	bl	800072c <__aeabi_ddiv>
 800289c:	4602      	mov	r2, r0
 800289e:	460b      	mov	r3, r1
 80028a0:	4610      	mov	r0, r2
 80028a2:	4619      	mov	r1, r3
 80028a4:	697b      	ldr	r3, [r7, #20]
 80028a6:	009b      	lsls	r3, r3, #2
 80028a8:	683a      	ldr	r2, [r7, #0]
 80028aa:	18d4      	adds	r4, r2, r3
 80028ac:	f7fe f90c 	bl	8000ac8 <__aeabi_d2f>
 80028b0:	4603      	mov	r3, r0
 80028b2:	6023      	str	r3, [r4, #0]
    for (int i = 0; i < 3; ++i) {
 80028b4:	697b      	ldr	r3, [r7, #20]
 80028b6:	3301      	adds	r3, #1
 80028b8:	617b      	str	r3, [r7, #20]
 80028ba:	697b      	ldr	r3, [r7, #20]
 80028bc:	2b02      	cmp	r3, #2
 80028be:	ddc5      	ble.n	800284c <MPU9250_ReadAccel+0x2c>
    }
}
 80028c0:	bf00      	nop
 80028c2:	bf00      	nop
 80028c4:	371c      	adds	r7, #28
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd90      	pop	{r4, r7, pc}
 80028ca:	bf00      	nop
 80028cc:	40e00000 	.word	0x40e00000

080028d0 <MPU9250_ReadGyro>:

void MPU9250_ReadGyro(I2C_HandleTypeDef *hi2c, float *gyroData) {
 80028d0:	b590      	push	{r4, r7, lr}
 80028d2:	b08b      	sub	sp, #44	@ 0x2c
 80028d4:	af04      	add	r7, sp, #16
 80028d6:	6078      	str	r0, [r7, #4]
 80028d8:	6039      	str	r1, [r7, #0]
    uint8_t rawData[6];
    HAL_I2C_Mem_Read(hi2c, MPU9250_ADDRESS, GYRO_XOUT_H, 1, rawData, 6, 1000);
 80028da:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80028de:	9302      	str	r3, [sp, #8]
 80028e0:	2306      	movs	r3, #6
 80028e2:	9301      	str	r3, [sp, #4]
 80028e4:	f107 030c 	add.w	r3, r7, #12
 80028e8:	9300      	str	r3, [sp, #0]
 80028ea:	2301      	movs	r3, #1
 80028ec:	2243      	movs	r2, #67	@ 0x43
 80028ee:	21d0      	movs	r1, #208	@ 0xd0
 80028f0:	6878      	ldr	r0, [r7, #4]
 80028f2:	f001 fa71 	bl	8003dd8 <HAL_I2C_Mem_Read>

    for (int i = 0; i < 3; ++i) {
 80028f6:	2300      	movs	r3, #0
 80028f8:	617b      	str	r3, [r7, #20]
 80028fa:	e037      	b.n	800296c <MPU9250_ReadGyro+0x9c>
        int16_t raw = (int16_t)(rawData[2 * i] << 8 | rawData[2 * i + 1]);
 80028fc:	697b      	ldr	r3, [r7, #20]
 80028fe:	005b      	lsls	r3, r3, #1
 8002900:	3318      	adds	r3, #24
 8002902:	443b      	add	r3, r7
 8002904:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8002908:	021b      	lsls	r3, r3, #8
 800290a:	b21a      	sxth	r2, r3
 800290c:	697b      	ldr	r3, [r7, #20]
 800290e:	005b      	lsls	r3, r3, #1
 8002910:	3301      	adds	r3, #1
 8002912:	3318      	adds	r3, #24
 8002914:	443b      	add	r3, r7
 8002916:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800291a:	b21b      	sxth	r3, r3
 800291c:	4313      	orrs	r3, r2
 800291e:	827b      	strh	r3, [r7, #18]
        gyroData[i] = (float)raw * 250.0 / 32768.0;
 8002920:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002924:	4618      	mov	r0, r3
 8002926:	f7fe f9d9 	bl	8000cdc <__aeabi_i2f>
 800292a:	4603      	mov	r3, r0
 800292c:	4618      	mov	r0, r3
 800292e:	f7fd fd7b 	bl	8000428 <__aeabi_f2d>
 8002932:	f04f 0200 	mov.w	r2, #0
 8002936:	4b11      	ldr	r3, [pc, #68]	@ (800297c <MPU9250_ReadGyro+0xac>)
 8002938:	f7fd fdce 	bl	80004d8 <__aeabi_dmul>
 800293c:	4602      	mov	r2, r0
 800293e:	460b      	mov	r3, r1
 8002940:	4610      	mov	r0, r2
 8002942:	4619      	mov	r1, r3
 8002944:	f04f 0200 	mov.w	r2, #0
 8002948:	4b0d      	ldr	r3, [pc, #52]	@ (8002980 <MPU9250_ReadGyro+0xb0>)
 800294a:	f7fd feef 	bl	800072c <__aeabi_ddiv>
 800294e:	4602      	mov	r2, r0
 8002950:	460b      	mov	r3, r1
 8002952:	4610      	mov	r0, r2
 8002954:	4619      	mov	r1, r3
 8002956:	697b      	ldr	r3, [r7, #20]
 8002958:	009b      	lsls	r3, r3, #2
 800295a:	683a      	ldr	r2, [r7, #0]
 800295c:	18d4      	adds	r4, r2, r3
 800295e:	f7fe f8b3 	bl	8000ac8 <__aeabi_d2f>
 8002962:	4603      	mov	r3, r0
 8002964:	6023      	str	r3, [r4, #0]
    for (int i = 0; i < 3; ++i) {
 8002966:	697b      	ldr	r3, [r7, #20]
 8002968:	3301      	adds	r3, #1
 800296a:	617b      	str	r3, [r7, #20]
 800296c:	697b      	ldr	r3, [r7, #20]
 800296e:	2b02      	cmp	r3, #2
 8002970:	ddc4      	ble.n	80028fc <MPU9250_ReadGyro+0x2c>
    }
}
 8002972:	bf00      	nop
 8002974:	bf00      	nop
 8002976:	371c      	adds	r7, #28
 8002978:	46bd      	mov	sp, r7
 800297a:	bd90      	pop	{r4, r7, pc}
 800297c:	406f4000 	.word	0x406f4000
 8002980:	40e00000 	.word	0x40e00000

08002984 <MPU9250_ReadMag>:

void MPU9250_ReadMag(I2C_HandleTypeDef *hi2c, float *magData) {
 8002984:	b590      	push	{r4, r7, lr}
 8002986:	b08b      	sub	sp, #44	@ 0x2c
 8002988:	af04      	add	r7, sp, #16
 800298a:	6078      	str	r0, [r7, #4]
 800298c:	6039      	str	r1, [r7, #0]
    uint8_t rawData[7];
    HAL_I2C_Mem_Read(hi2c, MPU9250_ADDRESS, AK8963_CNTL, 1, rawData, 7, 1000);
 800298e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002992:	9302      	str	r3, [sp, #8]
 8002994:	2307      	movs	r3, #7
 8002996:	9301      	str	r3, [sp, #4]
 8002998:	f107 0308 	add.w	r3, r7, #8
 800299c:	9300      	str	r3, [sp, #0]
 800299e:	2301      	movs	r3, #1
 80029a0:	220a      	movs	r2, #10
 80029a2:	21d0      	movs	r1, #208	@ 0xd0
 80029a4:	6878      	ldr	r0, [r7, #4]
 80029a6:	f001 fa17 	bl	8003dd8 <HAL_I2C_Mem_Read>

    for (int i = 0; i < 3; ++i) {
 80029aa:	2300      	movs	r3, #0
 80029ac:	617b      	str	r3, [r7, #20]
 80029ae:	e01f      	b.n	80029f0 <MPU9250_ReadMag+0x6c>
        int16_t raw = (int16_t)(rawData[2 * i] | rawData[2 * i + 1] << 8);
 80029b0:	697b      	ldr	r3, [r7, #20]
 80029b2:	005b      	lsls	r3, r3, #1
 80029b4:	3318      	adds	r3, #24
 80029b6:	443b      	add	r3, r7
 80029b8:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80029bc:	b21a      	sxth	r2, r3
 80029be:	697b      	ldr	r3, [r7, #20]
 80029c0:	005b      	lsls	r3, r3, #1
 80029c2:	3301      	adds	r3, #1
 80029c4:	3318      	adds	r3, #24
 80029c6:	443b      	add	r3, r7
 80029c8:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80029cc:	021b      	lsls	r3, r3, #8
 80029ce:	b21b      	sxth	r3, r3
 80029d0:	4313      	orrs	r3, r2
 80029d2:	827b      	strh	r3, [r7, #18]
        magData[i] = (float)raw;
 80029d4:	697b      	ldr	r3, [r7, #20]
 80029d6:	009b      	lsls	r3, r3, #2
 80029d8:	683a      	ldr	r2, [r7, #0]
 80029da:	18d4      	adds	r4, r2, r3
 80029dc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80029e0:	4618      	mov	r0, r3
 80029e2:	f7fe f97b 	bl	8000cdc <__aeabi_i2f>
 80029e6:	4603      	mov	r3, r0
 80029e8:	6023      	str	r3, [r4, #0]
    for (int i = 0; i < 3; ++i) {
 80029ea:	697b      	ldr	r3, [r7, #20]
 80029ec:	3301      	adds	r3, #1
 80029ee:	617b      	str	r3, [r7, #20]
 80029f0:	697b      	ldr	r3, [r7, #20]
 80029f2:	2b02      	cmp	r3, #2
 80029f4:	dddc      	ble.n	80029b0 <MPU9250_ReadMag+0x2c>
    }
}
 80029f6:	bf00      	nop
 80029f8:	bf00      	nop
 80029fa:	371c      	adds	r7, #28
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bd90      	pop	{r4, r7, pc}

08002a00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002a00:	b480      	push	{r7}
 8002a02:	b085      	sub	sp, #20
 8002a04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002a06:	4b15      	ldr	r3, [pc, #84]	@ (8002a5c <HAL_MspInit+0x5c>)
 8002a08:	699b      	ldr	r3, [r3, #24]
 8002a0a:	4a14      	ldr	r2, [pc, #80]	@ (8002a5c <HAL_MspInit+0x5c>)
 8002a0c:	f043 0301 	orr.w	r3, r3, #1
 8002a10:	6193      	str	r3, [r2, #24]
 8002a12:	4b12      	ldr	r3, [pc, #72]	@ (8002a5c <HAL_MspInit+0x5c>)
 8002a14:	699b      	ldr	r3, [r3, #24]
 8002a16:	f003 0301 	and.w	r3, r3, #1
 8002a1a:	60bb      	str	r3, [r7, #8]
 8002a1c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a1e:	4b0f      	ldr	r3, [pc, #60]	@ (8002a5c <HAL_MspInit+0x5c>)
 8002a20:	69db      	ldr	r3, [r3, #28]
 8002a22:	4a0e      	ldr	r2, [pc, #56]	@ (8002a5c <HAL_MspInit+0x5c>)
 8002a24:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a28:	61d3      	str	r3, [r2, #28]
 8002a2a:	4b0c      	ldr	r3, [pc, #48]	@ (8002a5c <HAL_MspInit+0x5c>)
 8002a2c:	69db      	ldr	r3, [r3, #28]
 8002a2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a32:	607b      	str	r3, [r7, #4]
 8002a34:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8002a36:	4b0a      	ldr	r3, [pc, #40]	@ (8002a60 <HAL_MspInit+0x60>)
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	60fb      	str	r3, [r7, #12]
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8002a42:	60fb      	str	r3, [r7, #12]
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002a4a:	60fb      	str	r3, [r7, #12]
 8002a4c:	4a04      	ldr	r2, [pc, #16]	@ (8002a60 <HAL_MspInit+0x60>)
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a52:	bf00      	nop
 8002a54:	3714      	adds	r7, #20
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bc80      	pop	{r7}
 8002a5a:	4770      	bx	lr
 8002a5c:	40021000 	.word	0x40021000
 8002a60:	40010000 	.word	0x40010000

08002a64 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b088      	sub	sp, #32
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a6c:	f107 0310 	add.w	r3, r7, #16
 8002a70:	2200      	movs	r2, #0
 8002a72:	601a      	str	r2, [r3, #0]
 8002a74:	605a      	str	r2, [r3, #4]
 8002a76:	609a      	str	r2, [r3, #8]
 8002a78:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4a15      	ldr	r2, [pc, #84]	@ (8002ad4 <HAL_I2C_MspInit+0x70>)
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d123      	bne.n	8002acc <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a84:	4b14      	ldr	r3, [pc, #80]	@ (8002ad8 <HAL_I2C_MspInit+0x74>)
 8002a86:	699b      	ldr	r3, [r3, #24]
 8002a88:	4a13      	ldr	r2, [pc, #76]	@ (8002ad8 <HAL_I2C_MspInit+0x74>)
 8002a8a:	f043 0308 	orr.w	r3, r3, #8
 8002a8e:	6193      	str	r3, [r2, #24]
 8002a90:	4b11      	ldr	r3, [pc, #68]	@ (8002ad8 <HAL_I2C_MspInit+0x74>)
 8002a92:	699b      	ldr	r3, [r3, #24]
 8002a94:	f003 0308 	and.w	r3, r3, #8
 8002a98:	60fb      	str	r3, [r7, #12]
 8002a9a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002a9c:	23c0      	movs	r3, #192	@ 0xc0
 8002a9e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002aa0:	2312      	movs	r3, #18
 8002aa2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002aa4:	2303      	movs	r3, #3
 8002aa6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002aa8:	f107 0310 	add.w	r3, r7, #16
 8002aac:	4619      	mov	r1, r3
 8002aae:	480b      	ldr	r0, [pc, #44]	@ (8002adc <HAL_I2C_MspInit+0x78>)
 8002ab0:	f000 fdd0 	bl	8003654 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002ab4:	4b08      	ldr	r3, [pc, #32]	@ (8002ad8 <HAL_I2C_MspInit+0x74>)
 8002ab6:	69db      	ldr	r3, [r3, #28]
 8002ab8:	4a07      	ldr	r2, [pc, #28]	@ (8002ad8 <HAL_I2C_MspInit+0x74>)
 8002aba:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002abe:	61d3      	str	r3, [r2, #28]
 8002ac0:	4b05      	ldr	r3, [pc, #20]	@ (8002ad8 <HAL_I2C_MspInit+0x74>)
 8002ac2:	69db      	ldr	r3, [r3, #28]
 8002ac4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002ac8:	60bb      	str	r3, [r7, #8]
 8002aca:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002acc:	bf00      	nop
 8002ace:	3720      	adds	r7, #32
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	bd80      	pop	{r7, pc}
 8002ad4:	40005400 	.word	0x40005400
 8002ad8:	40021000 	.word	0x40021000
 8002adc:	40010c00 	.word	0x40010c00

08002ae0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b08c      	sub	sp, #48	@ 0x30
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ae8:	f107 0320 	add.w	r3, r7, #32
 8002aec:	2200      	movs	r2, #0
 8002aee:	601a      	str	r2, [r3, #0]
 8002af0:	605a      	str	r2, [r3, #4]
 8002af2:	609a      	str	r2, [r3, #8]
 8002af4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4a67      	ldr	r2, [pc, #412]	@ (8002c98 <HAL_UART_MspInit+0x1b8>)
 8002afc:	4293      	cmp	r3, r2
 8002afe:	d132      	bne.n	8002b66 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002b00:	4b66      	ldr	r3, [pc, #408]	@ (8002c9c <HAL_UART_MspInit+0x1bc>)
 8002b02:	699b      	ldr	r3, [r3, #24]
 8002b04:	4a65      	ldr	r2, [pc, #404]	@ (8002c9c <HAL_UART_MspInit+0x1bc>)
 8002b06:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002b0a:	6193      	str	r3, [r2, #24]
 8002b0c:	4b63      	ldr	r3, [pc, #396]	@ (8002c9c <HAL_UART_MspInit+0x1bc>)
 8002b0e:	699b      	ldr	r3, [r3, #24]
 8002b10:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002b14:	61fb      	str	r3, [r7, #28]
 8002b16:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b18:	4b60      	ldr	r3, [pc, #384]	@ (8002c9c <HAL_UART_MspInit+0x1bc>)
 8002b1a:	699b      	ldr	r3, [r3, #24]
 8002b1c:	4a5f      	ldr	r2, [pc, #380]	@ (8002c9c <HAL_UART_MspInit+0x1bc>)
 8002b1e:	f043 0304 	orr.w	r3, r3, #4
 8002b22:	6193      	str	r3, [r2, #24]
 8002b24:	4b5d      	ldr	r3, [pc, #372]	@ (8002c9c <HAL_UART_MspInit+0x1bc>)
 8002b26:	699b      	ldr	r3, [r3, #24]
 8002b28:	f003 0304 	and.w	r3, r3, #4
 8002b2c:	61bb      	str	r3, [r7, #24]
 8002b2e:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002b30:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002b34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b36:	2302      	movs	r3, #2
 8002b38:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002b3a:	2303      	movs	r3, #3
 8002b3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b3e:	f107 0320 	add.w	r3, r7, #32
 8002b42:	4619      	mov	r1, r3
 8002b44:	4856      	ldr	r0, [pc, #344]	@ (8002ca0 <HAL_UART_MspInit+0x1c0>)
 8002b46:	f000 fd85 	bl	8003654 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002b4a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002b4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b50:	2300      	movs	r3, #0
 8002b52:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b54:	2300      	movs	r3, #0
 8002b56:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b58:	f107 0320 	add.w	r3, r7, #32
 8002b5c:	4619      	mov	r1, r3
 8002b5e:	4850      	ldr	r0, [pc, #320]	@ (8002ca0 <HAL_UART_MspInit+0x1c0>)
 8002b60:	f000 fd78 	bl	8003654 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002b64:	e093      	b.n	8002c8e <HAL_UART_MspInit+0x1ae>
  else if(huart->Instance==USART2)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4a4e      	ldr	r2, [pc, #312]	@ (8002ca4 <HAL_UART_MspInit+0x1c4>)
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	d157      	bne.n	8002c20 <HAL_UART_MspInit+0x140>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002b70:	4b4a      	ldr	r3, [pc, #296]	@ (8002c9c <HAL_UART_MspInit+0x1bc>)
 8002b72:	69db      	ldr	r3, [r3, #28]
 8002b74:	4a49      	ldr	r2, [pc, #292]	@ (8002c9c <HAL_UART_MspInit+0x1bc>)
 8002b76:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002b7a:	61d3      	str	r3, [r2, #28]
 8002b7c:	4b47      	ldr	r3, [pc, #284]	@ (8002c9c <HAL_UART_MspInit+0x1bc>)
 8002b7e:	69db      	ldr	r3, [r3, #28]
 8002b80:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b84:	617b      	str	r3, [r7, #20]
 8002b86:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b88:	4b44      	ldr	r3, [pc, #272]	@ (8002c9c <HAL_UART_MspInit+0x1bc>)
 8002b8a:	699b      	ldr	r3, [r3, #24]
 8002b8c:	4a43      	ldr	r2, [pc, #268]	@ (8002c9c <HAL_UART_MspInit+0x1bc>)
 8002b8e:	f043 0304 	orr.w	r3, r3, #4
 8002b92:	6193      	str	r3, [r2, #24]
 8002b94:	4b41      	ldr	r3, [pc, #260]	@ (8002c9c <HAL_UART_MspInit+0x1bc>)
 8002b96:	699b      	ldr	r3, [r3, #24]
 8002b98:	f003 0304 	and.w	r3, r3, #4
 8002b9c:	613b      	str	r3, [r7, #16]
 8002b9e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002ba0:	2304      	movs	r3, #4
 8002ba2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ba4:	2302      	movs	r3, #2
 8002ba6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002ba8:	2303      	movs	r3, #3
 8002baa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bac:	f107 0320 	add.w	r3, r7, #32
 8002bb0:	4619      	mov	r1, r3
 8002bb2:	483b      	ldr	r0, [pc, #236]	@ (8002ca0 <HAL_UART_MspInit+0x1c0>)
 8002bb4:	f000 fd4e 	bl	8003654 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002bb8:	2308      	movs	r3, #8
 8002bba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bc4:	f107 0320 	add.w	r3, r7, #32
 8002bc8:	4619      	mov	r1, r3
 8002bca:	4835      	ldr	r0, [pc, #212]	@ (8002ca0 <HAL_UART_MspInit+0x1c0>)
 8002bcc:	f000 fd42 	bl	8003654 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8002bd0:	4b35      	ldr	r3, [pc, #212]	@ (8002ca8 <HAL_UART_MspInit+0x1c8>)
 8002bd2:	4a36      	ldr	r2, [pc, #216]	@ (8002cac <HAL_UART_MspInit+0x1cc>)
 8002bd4:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002bd6:	4b34      	ldr	r3, [pc, #208]	@ (8002ca8 <HAL_UART_MspInit+0x1c8>)
 8002bd8:	2200      	movs	r2, #0
 8002bda:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002bdc:	4b32      	ldr	r3, [pc, #200]	@ (8002ca8 <HAL_UART_MspInit+0x1c8>)
 8002bde:	2200      	movs	r2, #0
 8002be0:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002be2:	4b31      	ldr	r3, [pc, #196]	@ (8002ca8 <HAL_UART_MspInit+0x1c8>)
 8002be4:	2280      	movs	r2, #128	@ 0x80
 8002be6:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002be8:	4b2f      	ldr	r3, [pc, #188]	@ (8002ca8 <HAL_UART_MspInit+0x1c8>)
 8002bea:	2200      	movs	r2, #0
 8002bec:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002bee:	4b2e      	ldr	r3, [pc, #184]	@ (8002ca8 <HAL_UART_MspInit+0x1c8>)
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8002bf4:	4b2c      	ldr	r3, [pc, #176]	@ (8002ca8 <HAL_UART_MspInit+0x1c8>)
 8002bf6:	2220      	movs	r2, #32
 8002bf8:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8002bfa:	4b2b      	ldr	r3, [pc, #172]	@ (8002ca8 <HAL_UART_MspInit+0x1c8>)
 8002bfc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002c00:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002c02:	4829      	ldr	r0, [pc, #164]	@ (8002ca8 <HAL_UART_MspInit+0x1c8>)
 8002c04:	f000 fb38 	bl	8003278 <HAL_DMA_Init>
 8002c08:	4603      	mov	r3, r0
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d001      	beq.n	8002c12 <HAL_UART_MspInit+0x132>
      Error_Handler();
 8002c0e:	f7ff fe01 	bl	8002814 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	4a24      	ldr	r2, [pc, #144]	@ (8002ca8 <HAL_UART_MspInit+0x1c8>)
 8002c16:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002c18:	4a23      	ldr	r2, [pc, #140]	@ (8002ca8 <HAL_UART_MspInit+0x1c8>)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6253      	str	r3, [r2, #36]	@ 0x24
}
 8002c1e:	e036      	b.n	8002c8e <HAL_UART_MspInit+0x1ae>
  else if(huart->Instance==USART3)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4a22      	ldr	r2, [pc, #136]	@ (8002cb0 <HAL_UART_MspInit+0x1d0>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d131      	bne.n	8002c8e <HAL_UART_MspInit+0x1ae>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002c2a:	4b1c      	ldr	r3, [pc, #112]	@ (8002c9c <HAL_UART_MspInit+0x1bc>)
 8002c2c:	69db      	ldr	r3, [r3, #28]
 8002c2e:	4a1b      	ldr	r2, [pc, #108]	@ (8002c9c <HAL_UART_MspInit+0x1bc>)
 8002c30:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002c34:	61d3      	str	r3, [r2, #28]
 8002c36:	4b19      	ldr	r3, [pc, #100]	@ (8002c9c <HAL_UART_MspInit+0x1bc>)
 8002c38:	69db      	ldr	r3, [r3, #28]
 8002c3a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002c3e:	60fb      	str	r3, [r7, #12]
 8002c40:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c42:	4b16      	ldr	r3, [pc, #88]	@ (8002c9c <HAL_UART_MspInit+0x1bc>)
 8002c44:	699b      	ldr	r3, [r3, #24]
 8002c46:	4a15      	ldr	r2, [pc, #84]	@ (8002c9c <HAL_UART_MspInit+0x1bc>)
 8002c48:	f043 0308 	orr.w	r3, r3, #8
 8002c4c:	6193      	str	r3, [r2, #24]
 8002c4e:	4b13      	ldr	r3, [pc, #76]	@ (8002c9c <HAL_UART_MspInit+0x1bc>)
 8002c50:	699b      	ldr	r3, [r3, #24]
 8002c52:	f003 0308 	and.w	r3, r3, #8
 8002c56:	60bb      	str	r3, [r7, #8]
 8002c58:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002c5a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002c5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c60:	2302      	movs	r3, #2
 8002c62:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002c64:	2303      	movs	r3, #3
 8002c66:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c68:	f107 0320 	add.w	r3, r7, #32
 8002c6c:	4619      	mov	r1, r3
 8002c6e:	4811      	ldr	r0, [pc, #68]	@ (8002cb4 <HAL_UART_MspInit+0x1d4>)
 8002c70:	f000 fcf0 	bl	8003654 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002c74:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002c78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c82:	f107 0320 	add.w	r3, r7, #32
 8002c86:	4619      	mov	r1, r3
 8002c88:	480a      	ldr	r0, [pc, #40]	@ (8002cb4 <HAL_UART_MspInit+0x1d4>)
 8002c8a:	f000 fce3 	bl	8003654 <HAL_GPIO_Init>
}
 8002c8e:	bf00      	nop
 8002c90:	3730      	adds	r7, #48	@ 0x30
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bd80      	pop	{r7, pc}
 8002c96:	bf00      	nop
 8002c98:	40013800 	.word	0x40013800
 8002c9c:	40021000 	.word	0x40021000
 8002ca0:	40010800 	.word	0x40010800
 8002ca4:	40004400 	.word	0x40004400
 8002ca8:	20000728 	.word	0x20000728
 8002cac:	4002006c 	.word	0x4002006c
 8002cb0:	40004800 	.word	0x40004800
 8002cb4:	40010c00 	.word	0x40010c00

08002cb8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002cbc:	bf00      	nop
 8002cbe:	e7fd      	b.n	8002cbc <NMI_Handler+0x4>

08002cc0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002cc4:	bf00      	nop
 8002cc6:	e7fd      	b.n	8002cc4 <HardFault_Handler+0x4>

08002cc8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002ccc:	bf00      	nop
 8002cce:	e7fd      	b.n	8002ccc <MemManage_Handler+0x4>

08002cd0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002cd4:	bf00      	nop
 8002cd6:	e7fd      	b.n	8002cd4 <BusFault_Handler+0x4>

08002cd8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002cdc:	bf00      	nop
 8002cde:	e7fd      	b.n	8002cdc <UsageFault_Handler+0x4>

08002ce0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002ce4:	bf00      	nop
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bc80      	pop	{r7}
 8002cea:	4770      	bx	lr

08002cec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002cec:	b480      	push	{r7}
 8002cee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002cf0:	bf00      	nop
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bc80      	pop	{r7}
 8002cf6:	4770      	bx	lr

08002cf8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002cfc:	bf00      	nop
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bc80      	pop	{r7}
 8002d02:	4770      	bx	lr

08002d04 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002d08:	f000 f968 	bl	8002fdc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002d0c:	bf00      	nop
 8002d0e:	bd80      	pop	{r7, pc}

08002d10 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002d14:	4802      	ldr	r0, [pc, #8]	@ (8002d20 <DMA1_Channel6_IRQHandler+0x10>)
 8002d16:	f000 fb69 	bl	80033ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8002d1a:	bf00      	nop
 8002d1c:	bd80      	pop	{r7, pc}
 8002d1e:	bf00      	nop
 8002d20:	20000728 	.word	0x20000728

08002d24 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002d24:	b480      	push	{r7}
 8002d26:	af00      	add	r7, sp, #0
  return 1;
 8002d28:	2301      	movs	r3, #1
}
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bc80      	pop	{r7}
 8002d30:	4770      	bx	lr

08002d32 <_kill>:

int _kill(int pid, int sig)
{
 8002d32:	b580      	push	{r7, lr}
 8002d34:	b082      	sub	sp, #8
 8002d36:	af00      	add	r7, sp, #0
 8002d38:	6078      	str	r0, [r7, #4]
 8002d3a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002d3c:	f003 ff06 	bl	8006b4c <__errno>
 8002d40:	4603      	mov	r3, r0
 8002d42:	2216      	movs	r2, #22
 8002d44:	601a      	str	r2, [r3, #0]
  return -1;
 8002d46:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	3708      	adds	r7, #8
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}

08002d52 <_exit>:

void _exit (int status)
{
 8002d52:	b580      	push	{r7, lr}
 8002d54:	b082      	sub	sp, #8
 8002d56:	af00      	add	r7, sp, #0
 8002d58:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002d5a:	f04f 31ff 	mov.w	r1, #4294967295
 8002d5e:	6878      	ldr	r0, [r7, #4]
 8002d60:	f7ff ffe7 	bl	8002d32 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002d64:	bf00      	nop
 8002d66:	e7fd      	b.n	8002d64 <_exit+0x12>

08002d68 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b086      	sub	sp, #24
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	60f8      	str	r0, [r7, #12]
 8002d70:	60b9      	str	r1, [r7, #8]
 8002d72:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d74:	2300      	movs	r3, #0
 8002d76:	617b      	str	r3, [r7, #20]
 8002d78:	e00a      	b.n	8002d90 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002d7a:	f3af 8000 	nop.w
 8002d7e:	4601      	mov	r1, r0
 8002d80:	68bb      	ldr	r3, [r7, #8]
 8002d82:	1c5a      	adds	r2, r3, #1
 8002d84:	60ba      	str	r2, [r7, #8]
 8002d86:	b2ca      	uxtb	r2, r1
 8002d88:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d8a:	697b      	ldr	r3, [r7, #20]
 8002d8c:	3301      	adds	r3, #1
 8002d8e:	617b      	str	r3, [r7, #20]
 8002d90:	697a      	ldr	r2, [r7, #20]
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	429a      	cmp	r2, r3
 8002d96:	dbf0      	blt.n	8002d7a <_read+0x12>
  }

  return len;
 8002d98:	687b      	ldr	r3, [r7, #4]
}
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	3718      	adds	r7, #24
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd80      	pop	{r7, pc}

08002da2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002da2:	b580      	push	{r7, lr}
 8002da4:	b086      	sub	sp, #24
 8002da6:	af00      	add	r7, sp, #0
 8002da8:	60f8      	str	r0, [r7, #12]
 8002daa:	60b9      	str	r1, [r7, #8]
 8002dac:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002dae:	2300      	movs	r3, #0
 8002db0:	617b      	str	r3, [r7, #20]
 8002db2:	e009      	b.n	8002dc8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002db4:	68bb      	ldr	r3, [r7, #8]
 8002db6:	1c5a      	adds	r2, r3, #1
 8002db8:	60ba      	str	r2, [r7, #8]
 8002dba:	781b      	ldrb	r3, [r3, #0]
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002dc2:	697b      	ldr	r3, [r7, #20]
 8002dc4:	3301      	adds	r3, #1
 8002dc6:	617b      	str	r3, [r7, #20]
 8002dc8:	697a      	ldr	r2, [r7, #20]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	429a      	cmp	r2, r3
 8002dce:	dbf1      	blt.n	8002db4 <_write+0x12>
  }
  return len;
 8002dd0:	687b      	ldr	r3, [r7, #4]
}
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	3718      	adds	r7, #24
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bd80      	pop	{r7, pc}

08002dda <_close>:

int _close(int file)
{
 8002dda:	b480      	push	{r7}
 8002ddc:	b083      	sub	sp, #12
 8002dde:	af00      	add	r7, sp, #0
 8002de0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002de2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002de6:	4618      	mov	r0, r3
 8002de8:	370c      	adds	r7, #12
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bc80      	pop	{r7}
 8002dee:	4770      	bx	lr

08002df0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002df0:	b480      	push	{r7}
 8002df2:	b083      	sub	sp, #12
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
 8002df8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002e00:	605a      	str	r2, [r3, #4]
  return 0;
 8002e02:	2300      	movs	r3, #0
}
 8002e04:	4618      	mov	r0, r3
 8002e06:	370c      	adds	r7, #12
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bc80      	pop	{r7}
 8002e0c:	4770      	bx	lr

08002e0e <_isatty>:

int _isatty(int file)
{
 8002e0e:	b480      	push	{r7}
 8002e10:	b083      	sub	sp, #12
 8002e12:	af00      	add	r7, sp, #0
 8002e14:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002e16:	2301      	movs	r3, #1
}
 8002e18:	4618      	mov	r0, r3
 8002e1a:	370c      	adds	r7, #12
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	bc80      	pop	{r7}
 8002e20:	4770      	bx	lr

08002e22 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002e22:	b480      	push	{r7}
 8002e24:	b085      	sub	sp, #20
 8002e26:	af00      	add	r7, sp, #0
 8002e28:	60f8      	str	r0, [r7, #12]
 8002e2a:	60b9      	str	r1, [r7, #8]
 8002e2c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002e2e:	2300      	movs	r3, #0
}
 8002e30:	4618      	mov	r0, r3
 8002e32:	3714      	adds	r7, #20
 8002e34:	46bd      	mov	sp, r7
 8002e36:	bc80      	pop	{r7}
 8002e38:	4770      	bx	lr
	...

08002e3c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b086      	sub	sp, #24
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002e44:	4a14      	ldr	r2, [pc, #80]	@ (8002e98 <_sbrk+0x5c>)
 8002e46:	4b15      	ldr	r3, [pc, #84]	@ (8002e9c <_sbrk+0x60>)
 8002e48:	1ad3      	subs	r3, r2, r3
 8002e4a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002e4c:	697b      	ldr	r3, [r7, #20]
 8002e4e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002e50:	4b13      	ldr	r3, [pc, #76]	@ (8002ea0 <_sbrk+0x64>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d102      	bne.n	8002e5e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002e58:	4b11      	ldr	r3, [pc, #68]	@ (8002ea0 <_sbrk+0x64>)
 8002e5a:	4a12      	ldr	r2, [pc, #72]	@ (8002ea4 <_sbrk+0x68>)
 8002e5c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002e5e:	4b10      	ldr	r3, [pc, #64]	@ (8002ea0 <_sbrk+0x64>)
 8002e60:	681a      	ldr	r2, [r3, #0]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	4413      	add	r3, r2
 8002e66:	693a      	ldr	r2, [r7, #16]
 8002e68:	429a      	cmp	r2, r3
 8002e6a:	d207      	bcs.n	8002e7c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002e6c:	f003 fe6e 	bl	8006b4c <__errno>
 8002e70:	4603      	mov	r3, r0
 8002e72:	220c      	movs	r2, #12
 8002e74:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002e76:	f04f 33ff 	mov.w	r3, #4294967295
 8002e7a:	e009      	b.n	8002e90 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002e7c:	4b08      	ldr	r3, [pc, #32]	@ (8002ea0 <_sbrk+0x64>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002e82:	4b07      	ldr	r3, [pc, #28]	@ (8002ea0 <_sbrk+0x64>)
 8002e84:	681a      	ldr	r2, [r3, #0]
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	4413      	add	r3, r2
 8002e8a:	4a05      	ldr	r2, [pc, #20]	@ (8002ea0 <_sbrk+0x64>)
 8002e8c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
}
 8002e90:	4618      	mov	r0, r3
 8002e92:	3718      	adds	r7, #24
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bd80      	pop	{r7, pc}
 8002e98:	20005000 	.word	0x20005000
 8002e9c:	00000400 	.word	0x00000400
 8002ea0:	200008bc 	.word	0x200008bc
 8002ea4:	20000a10 	.word	0x20000a10

08002ea8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002eac:	bf00      	nop
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bc80      	pop	{r7}
 8002eb2:	4770      	bx	lr

08002eb4 <uartx_write>:
extern UART_HandleTypeDef huart1;
extern UART_HandleTypeDef huart3;


void uartx_write(UART_HandleTypeDef *huart,uint8_t ch)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b082      	sub	sp, #8
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
 8002ebc:	460b      	mov	r3, r1
 8002ebe:	70fb      	strb	r3, [r7, #3]
HAL_UART_Transmit(huart, &ch, 1, 0xffff);
 8002ec0:	1cf9      	adds	r1, r7, #3
 8002ec2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	6878      	ldr	r0, [r7, #4]
 8002eca:	f002 fa01 	bl	80052d0 <HAL_UART_Transmit>

}
 8002ece:	bf00      	nop
 8002ed0:	3708      	adds	r7, #8
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bd80      	pop	{r7, pc}

08002ed6 <uartx_write_text>:

void uartx_write_text(UART_HandleTypeDef *huart, uint8_t *info)
{
 8002ed6:	b580      	push	{r7, lr}
 8002ed8:	b082      	sub	sp, #8
 8002eda:	af00      	add	r7, sp, #0
 8002edc:	6078      	str	r0, [r7, #4]
 8002ede:	6039      	str	r1, [r7, #0]

while(*info)  uartx_write(huart,*info++);
 8002ee0:	e007      	b.n	8002ef2 <uartx_write_text+0x1c>
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	1c5a      	adds	r2, r3, #1
 8002ee6:	603a      	str	r2, [r7, #0]
 8002ee8:	781b      	ldrb	r3, [r3, #0]
 8002eea:	4619      	mov	r1, r3
 8002eec:	6878      	ldr	r0, [r7, #4]
 8002eee:	f7ff ffe1 	bl	8002eb4 <uartx_write>
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	781b      	ldrb	r3, [r3, #0]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d1f3      	bne.n	8002ee2 <uartx_write_text+0xc>

}
 8002efa:	bf00      	nop
 8002efc:	bf00      	nop
 8002efe:	3708      	adds	r7, #8
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bd80      	pop	{r7, pc}

08002f04 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002f04:	f7ff ffd0 	bl	8002ea8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002f08:	480b      	ldr	r0, [pc, #44]	@ (8002f38 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002f0a:	490c      	ldr	r1, [pc, #48]	@ (8002f3c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002f0c:	4a0c      	ldr	r2, [pc, #48]	@ (8002f40 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002f0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002f10:	e002      	b.n	8002f18 <LoopCopyDataInit>

08002f12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002f12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002f14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002f16:	3304      	adds	r3, #4

08002f18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002f18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002f1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002f1c:	d3f9      	bcc.n	8002f12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002f1e:	4a09      	ldr	r2, [pc, #36]	@ (8002f44 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002f20:	4c09      	ldr	r4, [pc, #36]	@ (8002f48 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002f22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002f24:	e001      	b.n	8002f2a <LoopFillZerobss>

08002f26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002f26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002f28:	3204      	adds	r2, #4

08002f2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002f2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002f2c:	d3fb      	bcc.n	8002f26 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002f2e:	f003 fe13 	bl	8006b58 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002f32:	f7ff f8ab 	bl	800208c <main>
  bx lr
 8002f36:	4770      	bx	lr
  ldr r0, =_sdata
 8002f38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002f3c:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8002f40:	0800b024 	.word	0x0800b024
  ldr r2, =_sbss
 8002f44:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8002f48:	20000a10 	.word	0x20000a10

08002f4c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002f4c:	e7fe      	b.n	8002f4c <ADC1_2_IRQHandler>
	...

08002f50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002f54:	4b08      	ldr	r3, [pc, #32]	@ (8002f78 <HAL_Init+0x28>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4a07      	ldr	r2, [pc, #28]	@ (8002f78 <HAL_Init+0x28>)
 8002f5a:	f043 0310 	orr.w	r3, r3, #16
 8002f5e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f60:	2003      	movs	r0, #3
 8002f62:	f000 f947 	bl	80031f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002f66:	200f      	movs	r0, #15
 8002f68:	f000 f808 	bl	8002f7c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002f6c:	f7ff fd48 	bl	8002a00 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002f70:	2300      	movs	r3, #0
}
 8002f72:	4618      	mov	r0, r3
 8002f74:	bd80      	pop	{r7, pc}
 8002f76:	bf00      	nop
 8002f78:	40022000 	.word	0x40022000

08002f7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b082      	sub	sp, #8
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002f84:	4b12      	ldr	r3, [pc, #72]	@ (8002fd0 <HAL_InitTick+0x54>)
 8002f86:	681a      	ldr	r2, [r3, #0]
 8002f88:	4b12      	ldr	r3, [pc, #72]	@ (8002fd4 <HAL_InitTick+0x58>)
 8002f8a:	781b      	ldrb	r3, [r3, #0]
 8002f8c:	4619      	mov	r1, r3
 8002f8e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002f92:	fbb3 f3f1 	udiv	r3, r3, r1
 8002f96:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	f000 f95f 	bl	800325e <HAL_SYSTICK_Config>
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d001      	beq.n	8002faa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	e00e      	b.n	8002fc8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2b0f      	cmp	r3, #15
 8002fae:	d80a      	bhi.n	8002fc6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	6879      	ldr	r1, [r7, #4]
 8002fb4:	f04f 30ff 	mov.w	r0, #4294967295
 8002fb8:	f000 f927 	bl	800320a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002fbc:	4a06      	ldr	r2, [pc, #24]	@ (8002fd8 <HAL_InitTick+0x5c>)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	e000      	b.n	8002fc8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002fc6:	2301      	movs	r3, #1
}
 8002fc8:	4618      	mov	r0, r3
 8002fca:	3708      	adds	r7, #8
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bd80      	pop	{r7, pc}
 8002fd0:	20000004 	.word	0x20000004
 8002fd4:	2000000c 	.word	0x2000000c
 8002fd8:	20000008 	.word	0x20000008

08002fdc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002fe0:	4b05      	ldr	r3, [pc, #20]	@ (8002ff8 <HAL_IncTick+0x1c>)
 8002fe2:	781b      	ldrb	r3, [r3, #0]
 8002fe4:	461a      	mov	r2, r3
 8002fe6:	4b05      	ldr	r3, [pc, #20]	@ (8002ffc <HAL_IncTick+0x20>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4413      	add	r3, r2
 8002fec:	4a03      	ldr	r2, [pc, #12]	@ (8002ffc <HAL_IncTick+0x20>)
 8002fee:	6013      	str	r3, [r2, #0]
}
 8002ff0:	bf00      	nop
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bc80      	pop	{r7}
 8002ff6:	4770      	bx	lr
 8002ff8:	2000000c 	.word	0x2000000c
 8002ffc:	200008c0 	.word	0x200008c0

08003000 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003000:	b480      	push	{r7}
 8003002:	af00      	add	r7, sp, #0
  return uwTick;
 8003004:	4b02      	ldr	r3, [pc, #8]	@ (8003010 <HAL_GetTick+0x10>)
 8003006:	681b      	ldr	r3, [r3, #0]
}
 8003008:	4618      	mov	r0, r3
 800300a:	46bd      	mov	sp, r7
 800300c:	bc80      	pop	{r7}
 800300e:	4770      	bx	lr
 8003010:	200008c0 	.word	0x200008c0

08003014 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b084      	sub	sp, #16
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800301c:	f7ff fff0 	bl	8003000 <HAL_GetTick>
 8003020:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	f1b3 3fff 	cmp.w	r3, #4294967295
 800302c:	d005      	beq.n	800303a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800302e:	4b0a      	ldr	r3, [pc, #40]	@ (8003058 <HAL_Delay+0x44>)
 8003030:	781b      	ldrb	r3, [r3, #0]
 8003032:	461a      	mov	r2, r3
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	4413      	add	r3, r2
 8003038:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800303a:	bf00      	nop
 800303c:	f7ff ffe0 	bl	8003000 <HAL_GetTick>
 8003040:	4602      	mov	r2, r0
 8003042:	68bb      	ldr	r3, [r7, #8]
 8003044:	1ad3      	subs	r3, r2, r3
 8003046:	68fa      	ldr	r2, [r7, #12]
 8003048:	429a      	cmp	r2, r3
 800304a:	d8f7      	bhi.n	800303c <HAL_Delay+0x28>
  {
  }
}
 800304c:	bf00      	nop
 800304e:	bf00      	nop
 8003050:	3710      	adds	r7, #16
 8003052:	46bd      	mov	sp, r7
 8003054:	bd80      	pop	{r7, pc}
 8003056:	bf00      	nop
 8003058:	2000000c 	.word	0x2000000c

0800305c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800305c:	b480      	push	{r7}
 800305e:	b085      	sub	sp, #20
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	f003 0307 	and.w	r3, r3, #7
 800306a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800306c:	4b0c      	ldr	r3, [pc, #48]	@ (80030a0 <__NVIC_SetPriorityGrouping+0x44>)
 800306e:	68db      	ldr	r3, [r3, #12]
 8003070:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003072:	68ba      	ldr	r2, [r7, #8]
 8003074:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003078:	4013      	ands	r3, r2
 800307a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003080:	68bb      	ldr	r3, [r7, #8]
 8003082:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003084:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003088:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800308c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800308e:	4a04      	ldr	r2, [pc, #16]	@ (80030a0 <__NVIC_SetPriorityGrouping+0x44>)
 8003090:	68bb      	ldr	r3, [r7, #8]
 8003092:	60d3      	str	r3, [r2, #12]
}
 8003094:	bf00      	nop
 8003096:	3714      	adds	r7, #20
 8003098:	46bd      	mov	sp, r7
 800309a:	bc80      	pop	{r7}
 800309c:	4770      	bx	lr
 800309e:	bf00      	nop
 80030a0:	e000ed00 	.word	0xe000ed00

080030a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80030a4:	b480      	push	{r7}
 80030a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80030a8:	4b04      	ldr	r3, [pc, #16]	@ (80030bc <__NVIC_GetPriorityGrouping+0x18>)
 80030aa:	68db      	ldr	r3, [r3, #12]
 80030ac:	0a1b      	lsrs	r3, r3, #8
 80030ae:	f003 0307 	and.w	r3, r3, #7
}
 80030b2:	4618      	mov	r0, r3
 80030b4:	46bd      	mov	sp, r7
 80030b6:	bc80      	pop	{r7}
 80030b8:	4770      	bx	lr
 80030ba:	bf00      	nop
 80030bc:	e000ed00 	.word	0xe000ed00

080030c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030c0:	b480      	push	{r7}
 80030c2:	b083      	sub	sp, #12
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	4603      	mov	r3, r0
 80030c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	db0b      	blt.n	80030ea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80030d2:	79fb      	ldrb	r3, [r7, #7]
 80030d4:	f003 021f 	and.w	r2, r3, #31
 80030d8:	4906      	ldr	r1, [pc, #24]	@ (80030f4 <__NVIC_EnableIRQ+0x34>)
 80030da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030de:	095b      	lsrs	r3, r3, #5
 80030e0:	2001      	movs	r0, #1
 80030e2:	fa00 f202 	lsl.w	r2, r0, r2
 80030e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80030ea:	bf00      	nop
 80030ec:	370c      	adds	r7, #12
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bc80      	pop	{r7}
 80030f2:	4770      	bx	lr
 80030f4:	e000e100 	.word	0xe000e100

080030f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80030f8:	b480      	push	{r7}
 80030fa:	b083      	sub	sp, #12
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	4603      	mov	r3, r0
 8003100:	6039      	str	r1, [r7, #0]
 8003102:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003104:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003108:	2b00      	cmp	r3, #0
 800310a:	db0a      	blt.n	8003122 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	b2da      	uxtb	r2, r3
 8003110:	490c      	ldr	r1, [pc, #48]	@ (8003144 <__NVIC_SetPriority+0x4c>)
 8003112:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003116:	0112      	lsls	r2, r2, #4
 8003118:	b2d2      	uxtb	r2, r2
 800311a:	440b      	add	r3, r1
 800311c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003120:	e00a      	b.n	8003138 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	b2da      	uxtb	r2, r3
 8003126:	4908      	ldr	r1, [pc, #32]	@ (8003148 <__NVIC_SetPriority+0x50>)
 8003128:	79fb      	ldrb	r3, [r7, #7]
 800312a:	f003 030f 	and.w	r3, r3, #15
 800312e:	3b04      	subs	r3, #4
 8003130:	0112      	lsls	r2, r2, #4
 8003132:	b2d2      	uxtb	r2, r2
 8003134:	440b      	add	r3, r1
 8003136:	761a      	strb	r2, [r3, #24]
}
 8003138:	bf00      	nop
 800313a:	370c      	adds	r7, #12
 800313c:	46bd      	mov	sp, r7
 800313e:	bc80      	pop	{r7}
 8003140:	4770      	bx	lr
 8003142:	bf00      	nop
 8003144:	e000e100 	.word	0xe000e100
 8003148:	e000ed00 	.word	0xe000ed00

0800314c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800314c:	b480      	push	{r7}
 800314e:	b089      	sub	sp, #36	@ 0x24
 8003150:	af00      	add	r7, sp, #0
 8003152:	60f8      	str	r0, [r7, #12]
 8003154:	60b9      	str	r1, [r7, #8]
 8003156:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	f003 0307 	and.w	r3, r3, #7
 800315e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003160:	69fb      	ldr	r3, [r7, #28]
 8003162:	f1c3 0307 	rsb	r3, r3, #7
 8003166:	2b04      	cmp	r3, #4
 8003168:	bf28      	it	cs
 800316a:	2304      	movcs	r3, #4
 800316c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800316e:	69fb      	ldr	r3, [r7, #28]
 8003170:	3304      	adds	r3, #4
 8003172:	2b06      	cmp	r3, #6
 8003174:	d902      	bls.n	800317c <NVIC_EncodePriority+0x30>
 8003176:	69fb      	ldr	r3, [r7, #28]
 8003178:	3b03      	subs	r3, #3
 800317a:	e000      	b.n	800317e <NVIC_EncodePriority+0x32>
 800317c:	2300      	movs	r3, #0
 800317e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003180:	f04f 32ff 	mov.w	r2, #4294967295
 8003184:	69bb      	ldr	r3, [r7, #24]
 8003186:	fa02 f303 	lsl.w	r3, r2, r3
 800318a:	43da      	mvns	r2, r3
 800318c:	68bb      	ldr	r3, [r7, #8]
 800318e:	401a      	ands	r2, r3
 8003190:	697b      	ldr	r3, [r7, #20]
 8003192:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003194:	f04f 31ff 	mov.w	r1, #4294967295
 8003198:	697b      	ldr	r3, [r7, #20]
 800319a:	fa01 f303 	lsl.w	r3, r1, r3
 800319e:	43d9      	mvns	r1, r3
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031a4:	4313      	orrs	r3, r2
         );
}
 80031a6:	4618      	mov	r0, r3
 80031a8:	3724      	adds	r7, #36	@ 0x24
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bc80      	pop	{r7}
 80031ae:	4770      	bx	lr

080031b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b082      	sub	sp, #8
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	3b01      	subs	r3, #1
 80031bc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80031c0:	d301      	bcc.n	80031c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80031c2:	2301      	movs	r3, #1
 80031c4:	e00f      	b.n	80031e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80031c6:	4a0a      	ldr	r2, [pc, #40]	@ (80031f0 <SysTick_Config+0x40>)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	3b01      	subs	r3, #1
 80031cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80031ce:	210f      	movs	r1, #15
 80031d0:	f04f 30ff 	mov.w	r0, #4294967295
 80031d4:	f7ff ff90 	bl	80030f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80031d8:	4b05      	ldr	r3, [pc, #20]	@ (80031f0 <SysTick_Config+0x40>)
 80031da:	2200      	movs	r2, #0
 80031dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80031de:	4b04      	ldr	r3, [pc, #16]	@ (80031f0 <SysTick_Config+0x40>)
 80031e0:	2207      	movs	r2, #7
 80031e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80031e4:	2300      	movs	r3, #0
}
 80031e6:	4618      	mov	r0, r3
 80031e8:	3708      	adds	r7, #8
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bd80      	pop	{r7, pc}
 80031ee:	bf00      	nop
 80031f0:	e000e010 	.word	0xe000e010

080031f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b082      	sub	sp, #8
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80031fc:	6878      	ldr	r0, [r7, #4]
 80031fe:	f7ff ff2d 	bl	800305c <__NVIC_SetPriorityGrouping>
}
 8003202:	bf00      	nop
 8003204:	3708      	adds	r7, #8
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}

0800320a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800320a:	b580      	push	{r7, lr}
 800320c:	b086      	sub	sp, #24
 800320e:	af00      	add	r7, sp, #0
 8003210:	4603      	mov	r3, r0
 8003212:	60b9      	str	r1, [r7, #8]
 8003214:	607a      	str	r2, [r7, #4]
 8003216:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003218:	2300      	movs	r3, #0
 800321a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800321c:	f7ff ff42 	bl	80030a4 <__NVIC_GetPriorityGrouping>
 8003220:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003222:	687a      	ldr	r2, [r7, #4]
 8003224:	68b9      	ldr	r1, [r7, #8]
 8003226:	6978      	ldr	r0, [r7, #20]
 8003228:	f7ff ff90 	bl	800314c <NVIC_EncodePriority>
 800322c:	4602      	mov	r2, r0
 800322e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003232:	4611      	mov	r1, r2
 8003234:	4618      	mov	r0, r3
 8003236:	f7ff ff5f 	bl	80030f8 <__NVIC_SetPriority>
}
 800323a:	bf00      	nop
 800323c:	3718      	adds	r7, #24
 800323e:	46bd      	mov	sp, r7
 8003240:	bd80      	pop	{r7, pc}

08003242 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003242:	b580      	push	{r7, lr}
 8003244:	b082      	sub	sp, #8
 8003246:	af00      	add	r7, sp, #0
 8003248:	4603      	mov	r3, r0
 800324a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800324c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003250:	4618      	mov	r0, r3
 8003252:	f7ff ff35 	bl	80030c0 <__NVIC_EnableIRQ>
}
 8003256:	bf00      	nop
 8003258:	3708      	adds	r7, #8
 800325a:	46bd      	mov	sp, r7
 800325c:	bd80      	pop	{r7, pc}

0800325e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800325e:	b580      	push	{r7, lr}
 8003260:	b082      	sub	sp, #8
 8003262:	af00      	add	r7, sp, #0
 8003264:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003266:	6878      	ldr	r0, [r7, #4]
 8003268:	f7ff ffa2 	bl	80031b0 <SysTick_Config>
 800326c:	4603      	mov	r3, r0
}
 800326e:	4618      	mov	r0, r3
 8003270:	3708      	adds	r7, #8
 8003272:	46bd      	mov	sp, r7
 8003274:	bd80      	pop	{r7, pc}
	...

08003278 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003278:	b480      	push	{r7}
 800327a:	b085      	sub	sp, #20
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003280:	2300      	movs	r3, #0
 8003282:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d101      	bne.n	800328e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800328a:	2301      	movs	r3, #1
 800328c:	e043      	b.n	8003316 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	461a      	mov	r2, r3
 8003294:	4b22      	ldr	r3, [pc, #136]	@ (8003320 <HAL_DMA_Init+0xa8>)
 8003296:	4413      	add	r3, r2
 8003298:	4a22      	ldr	r2, [pc, #136]	@ (8003324 <HAL_DMA_Init+0xac>)
 800329a:	fba2 2303 	umull	r2, r3, r2, r3
 800329e:	091b      	lsrs	r3, r3, #4
 80032a0:	009a      	lsls	r2, r3, #2
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	4a1f      	ldr	r2, [pc, #124]	@ (8003328 <HAL_DMA_Init+0xb0>)
 80032aa:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2202      	movs	r2, #2
 80032b0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80032c2:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80032c6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80032d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	68db      	ldr	r3, [r3, #12]
 80032d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80032dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	695b      	ldr	r3, [r3, #20]
 80032e2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032e8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	69db      	ldr	r3, [r3, #28]
 80032ee:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80032f0:	68fa      	ldr	r2, [r7, #12]
 80032f2:	4313      	orrs	r3, r2
 80032f4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	68fa      	ldr	r2, [r7, #12]
 80032fc:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2200      	movs	r2, #0
 8003302:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2201      	movs	r2, #1
 8003308:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2200      	movs	r2, #0
 8003310:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8003314:	2300      	movs	r3, #0
}
 8003316:	4618      	mov	r0, r3
 8003318:	3714      	adds	r7, #20
 800331a:	46bd      	mov	sp, r7
 800331c:	bc80      	pop	{r7}
 800331e:	4770      	bx	lr
 8003320:	bffdfff8 	.word	0xbffdfff8
 8003324:	cccccccd 	.word	0xcccccccd
 8003328:	40020000 	.word	0x40020000

0800332c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b086      	sub	sp, #24
 8003330:	af00      	add	r7, sp, #0
 8003332:	60f8      	str	r0, [r7, #12]
 8003334:	60b9      	str	r1, [r7, #8]
 8003336:	607a      	str	r2, [r7, #4]
 8003338:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800333a:	2300      	movs	r3, #0
 800333c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003344:	2b01      	cmp	r3, #1
 8003346:	d101      	bne.n	800334c <HAL_DMA_Start_IT+0x20>
 8003348:	2302      	movs	r3, #2
 800334a:	e04b      	b.n	80033e4 <HAL_DMA_Start_IT+0xb8>
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	2201      	movs	r2, #1
 8003350:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800335a:	b2db      	uxtb	r3, r3
 800335c:	2b01      	cmp	r3, #1
 800335e:	d13a      	bne.n	80033d6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	2202      	movs	r2, #2
 8003364:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	2200      	movs	r2, #0
 800336c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	681a      	ldr	r2, [r3, #0]
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f022 0201 	bic.w	r2, r2, #1
 800337c:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	687a      	ldr	r2, [r7, #4]
 8003382:	68b9      	ldr	r1, [r7, #8]
 8003384:	68f8      	ldr	r0, [r7, #12]
 8003386:	f000 f937 	bl	80035f8 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800338e:	2b00      	cmp	r3, #0
 8003390:	d008      	beq.n	80033a4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	681a      	ldr	r2, [r3, #0]
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f042 020e 	orr.w	r2, r2, #14
 80033a0:	601a      	str	r2, [r3, #0]
 80033a2:	e00f      	b.n	80033c4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	681a      	ldr	r2, [r3, #0]
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f022 0204 	bic.w	r2, r2, #4
 80033b2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	681a      	ldr	r2, [r3, #0]
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f042 020a 	orr.w	r2, r2, #10
 80033c2:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	681a      	ldr	r2, [r3, #0]
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f042 0201 	orr.w	r2, r2, #1
 80033d2:	601a      	str	r2, [r3, #0]
 80033d4:	e005      	b.n	80033e2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	2200      	movs	r2, #0
 80033da:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80033de:	2302      	movs	r3, #2
 80033e0:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80033e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80033e4:	4618      	mov	r0, r3
 80033e6:	3718      	adds	r7, #24
 80033e8:	46bd      	mov	sp, r7
 80033ea:	bd80      	pop	{r7, pc}

080033ec <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b084      	sub	sp, #16
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003408:	2204      	movs	r2, #4
 800340a:	409a      	lsls	r2, r3
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	4013      	ands	r3, r2
 8003410:	2b00      	cmp	r3, #0
 8003412:	d04f      	beq.n	80034b4 <HAL_DMA_IRQHandler+0xc8>
 8003414:	68bb      	ldr	r3, [r7, #8]
 8003416:	f003 0304 	and.w	r3, r3, #4
 800341a:	2b00      	cmp	r3, #0
 800341c:	d04a      	beq.n	80034b4 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f003 0320 	and.w	r3, r3, #32
 8003428:	2b00      	cmp	r3, #0
 800342a:	d107      	bne.n	800343c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	681a      	ldr	r2, [r3, #0]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f022 0204 	bic.w	r2, r2, #4
 800343a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4a66      	ldr	r2, [pc, #408]	@ (80035dc <HAL_DMA_IRQHandler+0x1f0>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d029      	beq.n	800349a <HAL_DMA_IRQHandler+0xae>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4a65      	ldr	r2, [pc, #404]	@ (80035e0 <HAL_DMA_IRQHandler+0x1f4>)
 800344c:	4293      	cmp	r3, r2
 800344e:	d022      	beq.n	8003496 <HAL_DMA_IRQHandler+0xaa>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4a63      	ldr	r2, [pc, #396]	@ (80035e4 <HAL_DMA_IRQHandler+0x1f8>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d01a      	beq.n	8003490 <HAL_DMA_IRQHandler+0xa4>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4a62      	ldr	r2, [pc, #392]	@ (80035e8 <HAL_DMA_IRQHandler+0x1fc>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d012      	beq.n	800348a <HAL_DMA_IRQHandler+0x9e>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4a60      	ldr	r2, [pc, #384]	@ (80035ec <HAL_DMA_IRQHandler+0x200>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d00a      	beq.n	8003484 <HAL_DMA_IRQHandler+0x98>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4a5f      	ldr	r2, [pc, #380]	@ (80035f0 <HAL_DMA_IRQHandler+0x204>)
 8003474:	4293      	cmp	r3, r2
 8003476:	d102      	bne.n	800347e <HAL_DMA_IRQHandler+0x92>
 8003478:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800347c:	e00e      	b.n	800349c <HAL_DMA_IRQHandler+0xb0>
 800347e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8003482:	e00b      	b.n	800349c <HAL_DMA_IRQHandler+0xb0>
 8003484:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8003488:	e008      	b.n	800349c <HAL_DMA_IRQHandler+0xb0>
 800348a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800348e:	e005      	b.n	800349c <HAL_DMA_IRQHandler+0xb0>
 8003490:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003494:	e002      	b.n	800349c <HAL_DMA_IRQHandler+0xb0>
 8003496:	2340      	movs	r3, #64	@ 0x40
 8003498:	e000      	b.n	800349c <HAL_DMA_IRQHandler+0xb0>
 800349a:	2304      	movs	r3, #4
 800349c:	4a55      	ldr	r2, [pc, #340]	@ (80035f4 <HAL_DMA_IRQHandler+0x208>)
 800349e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	f000 8094 	beq.w	80035d2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034ae:	6878      	ldr	r0, [r7, #4]
 80034b0:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80034b2:	e08e      	b.n	80035d2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034b8:	2202      	movs	r2, #2
 80034ba:	409a      	lsls	r2, r3
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	4013      	ands	r3, r2
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d056      	beq.n	8003572 <HAL_DMA_IRQHandler+0x186>
 80034c4:	68bb      	ldr	r3, [r7, #8]
 80034c6:	f003 0302 	and.w	r3, r3, #2
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d051      	beq.n	8003572 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f003 0320 	and.w	r3, r3, #32
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d10b      	bne.n	80034f4 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	681a      	ldr	r2, [r3, #0]
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f022 020a 	bic.w	r2, r2, #10
 80034ea:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2201      	movs	r2, #1
 80034f0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4a38      	ldr	r2, [pc, #224]	@ (80035dc <HAL_DMA_IRQHandler+0x1f0>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d029      	beq.n	8003552 <HAL_DMA_IRQHandler+0x166>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4a37      	ldr	r2, [pc, #220]	@ (80035e0 <HAL_DMA_IRQHandler+0x1f4>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d022      	beq.n	800354e <HAL_DMA_IRQHandler+0x162>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4a35      	ldr	r2, [pc, #212]	@ (80035e4 <HAL_DMA_IRQHandler+0x1f8>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d01a      	beq.n	8003548 <HAL_DMA_IRQHandler+0x15c>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4a34      	ldr	r2, [pc, #208]	@ (80035e8 <HAL_DMA_IRQHandler+0x1fc>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d012      	beq.n	8003542 <HAL_DMA_IRQHandler+0x156>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4a32      	ldr	r2, [pc, #200]	@ (80035ec <HAL_DMA_IRQHandler+0x200>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d00a      	beq.n	800353c <HAL_DMA_IRQHandler+0x150>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4a31      	ldr	r2, [pc, #196]	@ (80035f0 <HAL_DMA_IRQHandler+0x204>)
 800352c:	4293      	cmp	r3, r2
 800352e:	d102      	bne.n	8003536 <HAL_DMA_IRQHandler+0x14a>
 8003530:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8003534:	e00e      	b.n	8003554 <HAL_DMA_IRQHandler+0x168>
 8003536:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800353a:	e00b      	b.n	8003554 <HAL_DMA_IRQHandler+0x168>
 800353c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003540:	e008      	b.n	8003554 <HAL_DMA_IRQHandler+0x168>
 8003542:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003546:	e005      	b.n	8003554 <HAL_DMA_IRQHandler+0x168>
 8003548:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800354c:	e002      	b.n	8003554 <HAL_DMA_IRQHandler+0x168>
 800354e:	2320      	movs	r3, #32
 8003550:	e000      	b.n	8003554 <HAL_DMA_IRQHandler+0x168>
 8003552:	2302      	movs	r3, #2
 8003554:	4a27      	ldr	r2, [pc, #156]	@ (80035f4 <HAL_DMA_IRQHandler+0x208>)
 8003556:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2200      	movs	r2, #0
 800355c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003564:	2b00      	cmp	r3, #0
 8003566:	d034      	beq.n	80035d2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800356c:	6878      	ldr	r0, [r7, #4]
 800356e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003570:	e02f      	b.n	80035d2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003576:	2208      	movs	r2, #8
 8003578:	409a      	lsls	r2, r3
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	4013      	ands	r3, r2
 800357e:	2b00      	cmp	r3, #0
 8003580:	d028      	beq.n	80035d4 <HAL_DMA_IRQHandler+0x1e8>
 8003582:	68bb      	ldr	r3, [r7, #8]
 8003584:	f003 0308 	and.w	r3, r3, #8
 8003588:	2b00      	cmp	r3, #0
 800358a:	d023      	beq.n	80035d4 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	681a      	ldr	r2, [r3, #0]
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f022 020e 	bic.w	r2, r2, #14
 800359a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035a4:	2101      	movs	r1, #1
 80035a6:	fa01 f202 	lsl.w	r2, r1, r2
 80035aa:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2201      	movs	r2, #1
 80035b0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2201      	movs	r2, #1
 80035b6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2200      	movs	r2, #0
 80035be:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d004      	beq.n	80035d4 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035ce:	6878      	ldr	r0, [r7, #4]
 80035d0:	4798      	blx	r3
    }
  }
  return;
 80035d2:	bf00      	nop
 80035d4:	bf00      	nop
}
 80035d6:	3710      	adds	r7, #16
 80035d8:	46bd      	mov	sp, r7
 80035da:	bd80      	pop	{r7, pc}
 80035dc:	40020008 	.word	0x40020008
 80035e0:	4002001c 	.word	0x4002001c
 80035e4:	40020030 	.word	0x40020030
 80035e8:	40020044 	.word	0x40020044
 80035ec:	40020058 	.word	0x40020058
 80035f0:	4002006c 	.word	0x4002006c
 80035f4:	40020000 	.word	0x40020000

080035f8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80035f8:	b480      	push	{r7}
 80035fa:	b085      	sub	sp, #20
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	60f8      	str	r0, [r7, #12]
 8003600:	60b9      	str	r1, [r7, #8]
 8003602:	607a      	str	r2, [r7, #4]
 8003604:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800360e:	2101      	movs	r1, #1
 8003610:	fa01 f202 	lsl.w	r2, r1, r2
 8003614:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	683a      	ldr	r2, [r7, #0]
 800361c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	2b10      	cmp	r3, #16
 8003624:	d108      	bne.n	8003638 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	687a      	ldr	r2, [r7, #4]
 800362c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	68ba      	ldr	r2, [r7, #8]
 8003634:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003636:	e007      	b.n	8003648 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	68ba      	ldr	r2, [r7, #8]
 800363e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	687a      	ldr	r2, [r7, #4]
 8003646:	60da      	str	r2, [r3, #12]
}
 8003648:	bf00      	nop
 800364a:	3714      	adds	r7, #20
 800364c:	46bd      	mov	sp, r7
 800364e:	bc80      	pop	{r7}
 8003650:	4770      	bx	lr
	...

08003654 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003654:	b480      	push	{r7}
 8003656:	b08b      	sub	sp, #44	@ 0x2c
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
 800365c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800365e:	2300      	movs	r3, #0
 8003660:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003662:	2300      	movs	r3, #0
 8003664:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003666:	e169      	b.n	800393c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003668:	2201      	movs	r2, #1
 800366a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800366c:	fa02 f303 	lsl.w	r3, r2, r3
 8003670:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	69fa      	ldr	r2, [r7, #28]
 8003678:	4013      	ands	r3, r2
 800367a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800367c:	69ba      	ldr	r2, [r7, #24]
 800367e:	69fb      	ldr	r3, [r7, #28]
 8003680:	429a      	cmp	r2, r3
 8003682:	f040 8158 	bne.w	8003936 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	4a9a      	ldr	r2, [pc, #616]	@ (80038f4 <HAL_GPIO_Init+0x2a0>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d05e      	beq.n	800374e <HAL_GPIO_Init+0xfa>
 8003690:	4a98      	ldr	r2, [pc, #608]	@ (80038f4 <HAL_GPIO_Init+0x2a0>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d875      	bhi.n	8003782 <HAL_GPIO_Init+0x12e>
 8003696:	4a98      	ldr	r2, [pc, #608]	@ (80038f8 <HAL_GPIO_Init+0x2a4>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d058      	beq.n	800374e <HAL_GPIO_Init+0xfa>
 800369c:	4a96      	ldr	r2, [pc, #600]	@ (80038f8 <HAL_GPIO_Init+0x2a4>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d86f      	bhi.n	8003782 <HAL_GPIO_Init+0x12e>
 80036a2:	4a96      	ldr	r2, [pc, #600]	@ (80038fc <HAL_GPIO_Init+0x2a8>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d052      	beq.n	800374e <HAL_GPIO_Init+0xfa>
 80036a8:	4a94      	ldr	r2, [pc, #592]	@ (80038fc <HAL_GPIO_Init+0x2a8>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d869      	bhi.n	8003782 <HAL_GPIO_Init+0x12e>
 80036ae:	4a94      	ldr	r2, [pc, #592]	@ (8003900 <HAL_GPIO_Init+0x2ac>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d04c      	beq.n	800374e <HAL_GPIO_Init+0xfa>
 80036b4:	4a92      	ldr	r2, [pc, #584]	@ (8003900 <HAL_GPIO_Init+0x2ac>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d863      	bhi.n	8003782 <HAL_GPIO_Init+0x12e>
 80036ba:	4a92      	ldr	r2, [pc, #584]	@ (8003904 <HAL_GPIO_Init+0x2b0>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d046      	beq.n	800374e <HAL_GPIO_Init+0xfa>
 80036c0:	4a90      	ldr	r2, [pc, #576]	@ (8003904 <HAL_GPIO_Init+0x2b0>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d85d      	bhi.n	8003782 <HAL_GPIO_Init+0x12e>
 80036c6:	2b12      	cmp	r3, #18
 80036c8:	d82a      	bhi.n	8003720 <HAL_GPIO_Init+0xcc>
 80036ca:	2b12      	cmp	r3, #18
 80036cc:	d859      	bhi.n	8003782 <HAL_GPIO_Init+0x12e>
 80036ce:	a201      	add	r2, pc, #4	@ (adr r2, 80036d4 <HAL_GPIO_Init+0x80>)
 80036d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036d4:	0800374f 	.word	0x0800374f
 80036d8:	08003729 	.word	0x08003729
 80036dc:	0800373b 	.word	0x0800373b
 80036e0:	0800377d 	.word	0x0800377d
 80036e4:	08003783 	.word	0x08003783
 80036e8:	08003783 	.word	0x08003783
 80036ec:	08003783 	.word	0x08003783
 80036f0:	08003783 	.word	0x08003783
 80036f4:	08003783 	.word	0x08003783
 80036f8:	08003783 	.word	0x08003783
 80036fc:	08003783 	.word	0x08003783
 8003700:	08003783 	.word	0x08003783
 8003704:	08003783 	.word	0x08003783
 8003708:	08003783 	.word	0x08003783
 800370c:	08003783 	.word	0x08003783
 8003710:	08003783 	.word	0x08003783
 8003714:	08003783 	.word	0x08003783
 8003718:	08003731 	.word	0x08003731
 800371c:	08003745 	.word	0x08003745
 8003720:	4a79      	ldr	r2, [pc, #484]	@ (8003908 <HAL_GPIO_Init+0x2b4>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d013      	beq.n	800374e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003726:	e02c      	b.n	8003782 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	68db      	ldr	r3, [r3, #12]
 800372c:	623b      	str	r3, [r7, #32]
          break;
 800372e:	e029      	b.n	8003784 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	68db      	ldr	r3, [r3, #12]
 8003734:	3304      	adds	r3, #4
 8003736:	623b      	str	r3, [r7, #32]
          break;
 8003738:	e024      	b.n	8003784 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	68db      	ldr	r3, [r3, #12]
 800373e:	3308      	adds	r3, #8
 8003740:	623b      	str	r3, [r7, #32]
          break;
 8003742:	e01f      	b.n	8003784 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	68db      	ldr	r3, [r3, #12]
 8003748:	330c      	adds	r3, #12
 800374a:	623b      	str	r3, [r7, #32]
          break;
 800374c:	e01a      	b.n	8003784 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	689b      	ldr	r3, [r3, #8]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d102      	bne.n	800375c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003756:	2304      	movs	r3, #4
 8003758:	623b      	str	r3, [r7, #32]
          break;
 800375a:	e013      	b.n	8003784 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	689b      	ldr	r3, [r3, #8]
 8003760:	2b01      	cmp	r3, #1
 8003762:	d105      	bne.n	8003770 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003764:	2308      	movs	r3, #8
 8003766:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	69fa      	ldr	r2, [r7, #28]
 800376c:	611a      	str	r2, [r3, #16]
          break;
 800376e:	e009      	b.n	8003784 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003770:	2308      	movs	r3, #8
 8003772:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	69fa      	ldr	r2, [r7, #28]
 8003778:	615a      	str	r2, [r3, #20]
          break;
 800377a:	e003      	b.n	8003784 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800377c:	2300      	movs	r3, #0
 800377e:	623b      	str	r3, [r7, #32]
          break;
 8003780:	e000      	b.n	8003784 <HAL_GPIO_Init+0x130>
          break;
 8003782:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003784:	69bb      	ldr	r3, [r7, #24]
 8003786:	2bff      	cmp	r3, #255	@ 0xff
 8003788:	d801      	bhi.n	800378e <HAL_GPIO_Init+0x13a>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	e001      	b.n	8003792 <HAL_GPIO_Init+0x13e>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	3304      	adds	r3, #4
 8003792:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003794:	69bb      	ldr	r3, [r7, #24]
 8003796:	2bff      	cmp	r3, #255	@ 0xff
 8003798:	d802      	bhi.n	80037a0 <HAL_GPIO_Init+0x14c>
 800379a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800379c:	009b      	lsls	r3, r3, #2
 800379e:	e002      	b.n	80037a6 <HAL_GPIO_Init+0x152>
 80037a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037a2:	3b08      	subs	r3, #8
 80037a4:	009b      	lsls	r3, r3, #2
 80037a6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80037a8:	697b      	ldr	r3, [r7, #20]
 80037aa:	681a      	ldr	r2, [r3, #0]
 80037ac:	210f      	movs	r1, #15
 80037ae:	693b      	ldr	r3, [r7, #16]
 80037b0:	fa01 f303 	lsl.w	r3, r1, r3
 80037b4:	43db      	mvns	r3, r3
 80037b6:	401a      	ands	r2, r3
 80037b8:	6a39      	ldr	r1, [r7, #32]
 80037ba:	693b      	ldr	r3, [r7, #16]
 80037bc:	fa01 f303 	lsl.w	r3, r1, r3
 80037c0:	431a      	orrs	r2, r3
 80037c2:	697b      	ldr	r3, [r7, #20]
 80037c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	f000 80b1 	beq.w	8003936 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80037d4:	4b4d      	ldr	r3, [pc, #308]	@ (800390c <HAL_GPIO_Init+0x2b8>)
 80037d6:	699b      	ldr	r3, [r3, #24]
 80037d8:	4a4c      	ldr	r2, [pc, #304]	@ (800390c <HAL_GPIO_Init+0x2b8>)
 80037da:	f043 0301 	orr.w	r3, r3, #1
 80037de:	6193      	str	r3, [r2, #24]
 80037e0:	4b4a      	ldr	r3, [pc, #296]	@ (800390c <HAL_GPIO_Init+0x2b8>)
 80037e2:	699b      	ldr	r3, [r3, #24]
 80037e4:	f003 0301 	and.w	r3, r3, #1
 80037e8:	60bb      	str	r3, [r7, #8]
 80037ea:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80037ec:	4a48      	ldr	r2, [pc, #288]	@ (8003910 <HAL_GPIO_Init+0x2bc>)
 80037ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037f0:	089b      	lsrs	r3, r3, #2
 80037f2:	3302      	adds	r3, #2
 80037f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037f8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80037fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037fc:	f003 0303 	and.w	r3, r3, #3
 8003800:	009b      	lsls	r3, r3, #2
 8003802:	220f      	movs	r2, #15
 8003804:	fa02 f303 	lsl.w	r3, r2, r3
 8003808:	43db      	mvns	r3, r3
 800380a:	68fa      	ldr	r2, [r7, #12]
 800380c:	4013      	ands	r3, r2
 800380e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	4a40      	ldr	r2, [pc, #256]	@ (8003914 <HAL_GPIO_Init+0x2c0>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d013      	beq.n	8003840 <HAL_GPIO_Init+0x1ec>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	4a3f      	ldr	r2, [pc, #252]	@ (8003918 <HAL_GPIO_Init+0x2c4>)
 800381c:	4293      	cmp	r3, r2
 800381e:	d00d      	beq.n	800383c <HAL_GPIO_Init+0x1e8>
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	4a3e      	ldr	r2, [pc, #248]	@ (800391c <HAL_GPIO_Init+0x2c8>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d007      	beq.n	8003838 <HAL_GPIO_Init+0x1e4>
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	4a3d      	ldr	r2, [pc, #244]	@ (8003920 <HAL_GPIO_Init+0x2cc>)
 800382c:	4293      	cmp	r3, r2
 800382e:	d101      	bne.n	8003834 <HAL_GPIO_Init+0x1e0>
 8003830:	2303      	movs	r3, #3
 8003832:	e006      	b.n	8003842 <HAL_GPIO_Init+0x1ee>
 8003834:	2304      	movs	r3, #4
 8003836:	e004      	b.n	8003842 <HAL_GPIO_Init+0x1ee>
 8003838:	2302      	movs	r3, #2
 800383a:	e002      	b.n	8003842 <HAL_GPIO_Init+0x1ee>
 800383c:	2301      	movs	r3, #1
 800383e:	e000      	b.n	8003842 <HAL_GPIO_Init+0x1ee>
 8003840:	2300      	movs	r3, #0
 8003842:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003844:	f002 0203 	and.w	r2, r2, #3
 8003848:	0092      	lsls	r2, r2, #2
 800384a:	4093      	lsls	r3, r2
 800384c:	68fa      	ldr	r2, [r7, #12]
 800384e:	4313      	orrs	r3, r2
 8003850:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003852:	492f      	ldr	r1, [pc, #188]	@ (8003910 <HAL_GPIO_Init+0x2bc>)
 8003854:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003856:	089b      	lsrs	r3, r3, #2
 8003858:	3302      	adds	r3, #2
 800385a:	68fa      	ldr	r2, [r7, #12]
 800385c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003868:	2b00      	cmp	r3, #0
 800386a:	d006      	beq.n	800387a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800386c:	4b2d      	ldr	r3, [pc, #180]	@ (8003924 <HAL_GPIO_Init+0x2d0>)
 800386e:	689a      	ldr	r2, [r3, #8]
 8003870:	492c      	ldr	r1, [pc, #176]	@ (8003924 <HAL_GPIO_Init+0x2d0>)
 8003872:	69bb      	ldr	r3, [r7, #24]
 8003874:	4313      	orrs	r3, r2
 8003876:	608b      	str	r3, [r1, #8]
 8003878:	e006      	b.n	8003888 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800387a:	4b2a      	ldr	r3, [pc, #168]	@ (8003924 <HAL_GPIO_Init+0x2d0>)
 800387c:	689a      	ldr	r2, [r3, #8]
 800387e:	69bb      	ldr	r3, [r7, #24]
 8003880:	43db      	mvns	r3, r3
 8003882:	4928      	ldr	r1, [pc, #160]	@ (8003924 <HAL_GPIO_Init+0x2d0>)
 8003884:	4013      	ands	r3, r2
 8003886:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003890:	2b00      	cmp	r3, #0
 8003892:	d006      	beq.n	80038a2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003894:	4b23      	ldr	r3, [pc, #140]	@ (8003924 <HAL_GPIO_Init+0x2d0>)
 8003896:	68da      	ldr	r2, [r3, #12]
 8003898:	4922      	ldr	r1, [pc, #136]	@ (8003924 <HAL_GPIO_Init+0x2d0>)
 800389a:	69bb      	ldr	r3, [r7, #24]
 800389c:	4313      	orrs	r3, r2
 800389e:	60cb      	str	r3, [r1, #12]
 80038a0:	e006      	b.n	80038b0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80038a2:	4b20      	ldr	r3, [pc, #128]	@ (8003924 <HAL_GPIO_Init+0x2d0>)
 80038a4:	68da      	ldr	r2, [r3, #12]
 80038a6:	69bb      	ldr	r3, [r7, #24]
 80038a8:	43db      	mvns	r3, r3
 80038aa:	491e      	ldr	r1, [pc, #120]	@ (8003924 <HAL_GPIO_Init+0x2d0>)
 80038ac:	4013      	ands	r3, r2
 80038ae:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d006      	beq.n	80038ca <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80038bc:	4b19      	ldr	r3, [pc, #100]	@ (8003924 <HAL_GPIO_Init+0x2d0>)
 80038be:	685a      	ldr	r2, [r3, #4]
 80038c0:	4918      	ldr	r1, [pc, #96]	@ (8003924 <HAL_GPIO_Init+0x2d0>)
 80038c2:	69bb      	ldr	r3, [r7, #24]
 80038c4:	4313      	orrs	r3, r2
 80038c6:	604b      	str	r3, [r1, #4]
 80038c8:	e006      	b.n	80038d8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80038ca:	4b16      	ldr	r3, [pc, #88]	@ (8003924 <HAL_GPIO_Init+0x2d0>)
 80038cc:	685a      	ldr	r2, [r3, #4]
 80038ce:	69bb      	ldr	r3, [r7, #24]
 80038d0:	43db      	mvns	r3, r3
 80038d2:	4914      	ldr	r1, [pc, #80]	@ (8003924 <HAL_GPIO_Init+0x2d0>)
 80038d4:	4013      	ands	r3, r2
 80038d6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d021      	beq.n	8003928 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80038e4:	4b0f      	ldr	r3, [pc, #60]	@ (8003924 <HAL_GPIO_Init+0x2d0>)
 80038e6:	681a      	ldr	r2, [r3, #0]
 80038e8:	490e      	ldr	r1, [pc, #56]	@ (8003924 <HAL_GPIO_Init+0x2d0>)
 80038ea:	69bb      	ldr	r3, [r7, #24]
 80038ec:	4313      	orrs	r3, r2
 80038ee:	600b      	str	r3, [r1, #0]
 80038f0:	e021      	b.n	8003936 <HAL_GPIO_Init+0x2e2>
 80038f2:	bf00      	nop
 80038f4:	10320000 	.word	0x10320000
 80038f8:	10310000 	.word	0x10310000
 80038fc:	10220000 	.word	0x10220000
 8003900:	10210000 	.word	0x10210000
 8003904:	10120000 	.word	0x10120000
 8003908:	10110000 	.word	0x10110000
 800390c:	40021000 	.word	0x40021000
 8003910:	40010000 	.word	0x40010000
 8003914:	40010800 	.word	0x40010800
 8003918:	40010c00 	.word	0x40010c00
 800391c:	40011000 	.word	0x40011000
 8003920:	40011400 	.word	0x40011400
 8003924:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003928:	4b0b      	ldr	r3, [pc, #44]	@ (8003958 <HAL_GPIO_Init+0x304>)
 800392a:	681a      	ldr	r2, [r3, #0]
 800392c:	69bb      	ldr	r3, [r7, #24]
 800392e:	43db      	mvns	r3, r3
 8003930:	4909      	ldr	r1, [pc, #36]	@ (8003958 <HAL_GPIO_Init+0x304>)
 8003932:	4013      	ands	r3, r2
 8003934:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003936:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003938:	3301      	adds	r3, #1
 800393a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	681a      	ldr	r2, [r3, #0]
 8003940:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003942:	fa22 f303 	lsr.w	r3, r2, r3
 8003946:	2b00      	cmp	r3, #0
 8003948:	f47f ae8e 	bne.w	8003668 <HAL_GPIO_Init+0x14>
  }
}
 800394c:	bf00      	nop
 800394e:	bf00      	nop
 8003950:	372c      	adds	r7, #44	@ 0x2c
 8003952:	46bd      	mov	sp, r7
 8003954:	bc80      	pop	{r7}
 8003956:	4770      	bx	lr
 8003958:	40010400 	.word	0x40010400

0800395c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b084      	sub	sp, #16
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d101      	bne.n	800396e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800396a:	2301      	movs	r3, #1
 800396c:	e12b      	b.n	8003bc6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003974:	b2db      	uxtb	r3, r3
 8003976:	2b00      	cmp	r3, #0
 8003978:	d106      	bne.n	8003988 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2200      	movs	r2, #0
 800397e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003982:	6878      	ldr	r0, [r7, #4]
 8003984:	f7ff f86e 	bl	8002a64 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2224      	movs	r2, #36	@ 0x24
 800398c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	681a      	ldr	r2, [r3, #0]
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f022 0201 	bic.w	r2, r2, #1
 800399e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	681a      	ldr	r2, [r3, #0]
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80039ae:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	681a      	ldr	r2, [r3, #0]
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80039be:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80039c0:	f001 fbf0 	bl	80051a4 <HAL_RCC_GetPCLK1Freq>
 80039c4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	4a81      	ldr	r2, [pc, #516]	@ (8003bd0 <HAL_I2C_Init+0x274>)
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d807      	bhi.n	80039e0 <HAL_I2C_Init+0x84>
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	4a80      	ldr	r2, [pc, #512]	@ (8003bd4 <HAL_I2C_Init+0x278>)
 80039d4:	4293      	cmp	r3, r2
 80039d6:	bf94      	ite	ls
 80039d8:	2301      	movls	r3, #1
 80039da:	2300      	movhi	r3, #0
 80039dc:	b2db      	uxtb	r3, r3
 80039de:	e006      	b.n	80039ee <HAL_I2C_Init+0x92>
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	4a7d      	ldr	r2, [pc, #500]	@ (8003bd8 <HAL_I2C_Init+0x27c>)
 80039e4:	4293      	cmp	r3, r2
 80039e6:	bf94      	ite	ls
 80039e8:	2301      	movls	r3, #1
 80039ea:	2300      	movhi	r3, #0
 80039ec:	b2db      	uxtb	r3, r3
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d001      	beq.n	80039f6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80039f2:	2301      	movs	r3, #1
 80039f4:	e0e7      	b.n	8003bc6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	4a78      	ldr	r2, [pc, #480]	@ (8003bdc <HAL_I2C_Init+0x280>)
 80039fa:	fba2 2303 	umull	r2, r3, r2, r3
 80039fe:	0c9b      	lsrs	r3, r3, #18
 8003a00:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	68ba      	ldr	r2, [r7, #8]
 8003a12:	430a      	orrs	r2, r1
 8003a14:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	6a1b      	ldr	r3, [r3, #32]
 8003a1c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	685b      	ldr	r3, [r3, #4]
 8003a24:	4a6a      	ldr	r2, [pc, #424]	@ (8003bd0 <HAL_I2C_Init+0x274>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d802      	bhi.n	8003a30 <HAL_I2C_Init+0xd4>
 8003a2a:	68bb      	ldr	r3, [r7, #8]
 8003a2c:	3301      	adds	r3, #1
 8003a2e:	e009      	b.n	8003a44 <HAL_I2C_Init+0xe8>
 8003a30:	68bb      	ldr	r3, [r7, #8]
 8003a32:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003a36:	fb02 f303 	mul.w	r3, r2, r3
 8003a3a:	4a69      	ldr	r2, [pc, #420]	@ (8003be0 <HAL_I2C_Init+0x284>)
 8003a3c:	fba2 2303 	umull	r2, r3, r2, r3
 8003a40:	099b      	lsrs	r3, r3, #6
 8003a42:	3301      	adds	r3, #1
 8003a44:	687a      	ldr	r2, [r7, #4]
 8003a46:	6812      	ldr	r2, [r2, #0]
 8003a48:	430b      	orrs	r3, r1
 8003a4a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	69db      	ldr	r3, [r3, #28]
 8003a52:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003a56:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	495c      	ldr	r1, [pc, #368]	@ (8003bd0 <HAL_I2C_Init+0x274>)
 8003a60:	428b      	cmp	r3, r1
 8003a62:	d819      	bhi.n	8003a98 <HAL_I2C_Init+0x13c>
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	1e59      	subs	r1, r3, #1
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	005b      	lsls	r3, r3, #1
 8003a6e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003a72:	1c59      	adds	r1, r3, #1
 8003a74:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003a78:	400b      	ands	r3, r1
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d00a      	beq.n	8003a94 <HAL_I2C_Init+0x138>
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	1e59      	subs	r1, r3, #1
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	005b      	lsls	r3, r3, #1
 8003a88:	fbb1 f3f3 	udiv	r3, r1, r3
 8003a8c:	3301      	adds	r3, #1
 8003a8e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a92:	e051      	b.n	8003b38 <HAL_I2C_Init+0x1dc>
 8003a94:	2304      	movs	r3, #4
 8003a96:	e04f      	b.n	8003b38 <HAL_I2C_Init+0x1dc>
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	689b      	ldr	r3, [r3, #8]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d111      	bne.n	8003ac4 <HAL_I2C_Init+0x168>
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	1e58      	subs	r0, r3, #1
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6859      	ldr	r1, [r3, #4]
 8003aa8:	460b      	mov	r3, r1
 8003aaa:	005b      	lsls	r3, r3, #1
 8003aac:	440b      	add	r3, r1
 8003aae:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ab2:	3301      	adds	r3, #1
 8003ab4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	bf0c      	ite	eq
 8003abc:	2301      	moveq	r3, #1
 8003abe:	2300      	movne	r3, #0
 8003ac0:	b2db      	uxtb	r3, r3
 8003ac2:	e012      	b.n	8003aea <HAL_I2C_Init+0x18e>
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	1e58      	subs	r0, r3, #1
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6859      	ldr	r1, [r3, #4]
 8003acc:	460b      	mov	r3, r1
 8003ace:	009b      	lsls	r3, r3, #2
 8003ad0:	440b      	add	r3, r1
 8003ad2:	0099      	lsls	r1, r3, #2
 8003ad4:	440b      	add	r3, r1
 8003ad6:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ada:	3301      	adds	r3, #1
 8003adc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	bf0c      	ite	eq
 8003ae4:	2301      	moveq	r3, #1
 8003ae6:	2300      	movne	r3, #0
 8003ae8:	b2db      	uxtb	r3, r3
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d001      	beq.n	8003af2 <HAL_I2C_Init+0x196>
 8003aee:	2301      	movs	r3, #1
 8003af0:	e022      	b.n	8003b38 <HAL_I2C_Init+0x1dc>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	689b      	ldr	r3, [r3, #8]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d10e      	bne.n	8003b18 <HAL_I2C_Init+0x1bc>
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	1e58      	subs	r0, r3, #1
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6859      	ldr	r1, [r3, #4]
 8003b02:	460b      	mov	r3, r1
 8003b04:	005b      	lsls	r3, r3, #1
 8003b06:	440b      	add	r3, r1
 8003b08:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b0c:	3301      	adds	r3, #1
 8003b0e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b12:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003b16:	e00f      	b.n	8003b38 <HAL_I2C_Init+0x1dc>
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	1e58      	subs	r0, r3, #1
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6859      	ldr	r1, [r3, #4]
 8003b20:	460b      	mov	r3, r1
 8003b22:	009b      	lsls	r3, r3, #2
 8003b24:	440b      	add	r3, r1
 8003b26:	0099      	lsls	r1, r3, #2
 8003b28:	440b      	add	r3, r1
 8003b2a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b2e:	3301      	adds	r3, #1
 8003b30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b34:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003b38:	6879      	ldr	r1, [r7, #4]
 8003b3a:	6809      	ldr	r1, [r1, #0]
 8003b3c:	4313      	orrs	r3, r2
 8003b3e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	69da      	ldr	r2, [r3, #28]
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6a1b      	ldr	r3, [r3, #32]
 8003b52:	431a      	orrs	r2, r3
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	430a      	orrs	r2, r1
 8003b5a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	689b      	ldr	r3, [r3, #8]
 8003b62:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003b66:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003b6a:	687a      	ldr	r2, [r7, #4]
 8003b6c:	6911      	ldr	r1, [r2, #16]
 8003b6e:	687a      	ldr	r2, [r7, #4]
 8003b70:	68d2      	ldr	r2, [r2, #12]
 8003b72:	4311      	orrs	r1, r2
 8003b74:	687a      	ldr	r2, [r7, #4]
 8003b76:	6812      	ldr	r2, [r2, #0]
 8003b78:	430b      	orrs	r3, r1
 8003b7a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	68db      	ldr	r3, [r3, #12]
 8003b82:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	695a      	ldr	r2, [r3, #20]
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	699b      	ldr	r3, [r3, #24]
 8003b8e:	431a      	orrs	r2, r3
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	430a      	orrs	r2, r1
 8003b96:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	681a      	ldr	r2, [r3, #0]
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f042 0201 	orr.w	r2, r2, #1
 8003ba6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2200      	movs	r2, #0
 8003bac:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2220      	movs	r2, #32
 8003bb2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2200      	movs	r2, #0
 8003bba:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003bc4:	2300      	movs	r3, #0
}
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	3710      	adds	r7, #16
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	bd80      	pop	{r7, pc}
 8003bce:	bf00      	nop
 8003bd0:	000186a0 	.word	0x000186a0
 8003bd4:	001e847f 	.word	0x001e847f
 8003bd8:	003d08ff 	.word	0x003d08ff
 8003bdc:	431bde83 	.word	0x431bde83
 8003be0:	10624dd3 	.word	0x10624dd3

08003be4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b088      	sub	sp, #32
 8003be8:	af02      	add	r7, sp, #8
 8003bea:	60f8      	str	r0, [r7, #12]
 8003bec:	4608      	mov	r0, r1
 8003bee:	4611      	mov	r1, r2
 8003bf0:	461a      	mov	r2, r3
 8003bf2:	4603      	mov	r3, r0
 8003bf4:	817b      	strh	r3, [r7, #10]
 8003bf6:	460b      	mov	r3, r1
 8003bf8:	813b      	strh	r3, [r7, #8]
 8003bfa:	4613      	mov	r3, r2
 8003bfc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003bfe:	f7ff f9ff 	bl	8003000 <HAL_GetTick>
 8003c02:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c0a:	b2db      	uxtb	r3, r3
 8003c0c:	2b20      	cmp	r3, #32
 8003c0e:	f040 80d9 	bne.w	8003dc4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003c12:	697b      	ldr	r3, [r7, #20]
 8003c14:	9300      	str	r3, [sp, #0]
 8003c16:	2319      	movs	r3, #25
 8003c18:	2201      	movs	r2, #1
 8003c1a:	496d      	ldr	r1, [pc, #436]	@ (8003dd0 <HAL_I2C_Mem_Write+0x1ec>)
 8003c1c:	68f8      	ldr	r0, [r7, #12]
 8003c1e:	f000 fcc1 	bl	80045a4 <I2C_WaitOnFlagUntilTimeout>
 8003c22:	4603      	mov	r3, r0
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d001      	beq.n	8003c2c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003c28:	2302      	movs	r3, #2
 8003c2a:	e0cc      	b.n	8003dc6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003c32:	2b01      	cmp	r3, #1
 8003c34:	d101      	bne.n	8003c3a <HAL_I2C_Mem_Write+0x56>
 8003c36:	2302      	movs	r3, #2
 8003c38:	e0c5      	b.n	8003dc6 <HAL_I2C_Mem_Write+0x1e2>
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	2201      	movs	r2, #1
 8003c3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f003 0301 	and.w	r3, r3, #1
 8003c4c:	2b01      	cmp	r3, #1
 8003c4e:	d007      	beq.n	8003c60 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	681a      	ldr	r2, [r3, #0]
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f042 0201 	orr.w	r2, r2, #1
 8003c5e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	681a      	ldr	r2, [r3, #0]
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003c6e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	2221      	movs	r2, #33	@ 0x21
 8003c74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	2240      	movs	r2, #64	@ 0x40
 8003c7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	2200      	movs	r2, #0
 8003c84:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	6a3a      	ldr	r2, [r7, #32]
 8003c8a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003c90:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c96:	b29a      	uxth	r2, r3
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	4a4d      	ldr	r2, [pc, #308]	@ (8003dd4 <HAL_I2C_Mem_Write+0x1f0>)
 8003ca0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003ca2:	88f8      	ldrh	r0, [r7, #6]
 8003ca4:	893a      	ldrh	r2, [r7, #8]
 8003ca6:	8979      	ldrh	r1, [r7, #10]
 8003ca8:	697b      	ldr	r3, [r7, #20]
 8003caa:	9301      	str	r3, [sp, #4]
 8003cac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cae:	9300      	str	r3, [sp, #0]
 8003cb0:	4603      	mov	r3, r0
 8003cb2:	68f8      	ldr	r0, [r7, #12]
 8003cb4:	f000 faf8 	bl	80042a8 <I2C_RequestMemoryWrite>
 8003cb8:	4603      	mov	r3, r0
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d052      	beq.n	8003d64 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	e081      	b.n	8003dc6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003cc2:	697a      	ldr	r2, [r7, #20]
 8003cc4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003cc6:	68f8      	ldr	r0, [r7, #12]
 8003cc8:	f000 fd86 	bl	80047d8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003ccc:	4603      	mov	r3, r0
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d00d      	beq.n	8003cee <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cd6:	2b04      	cmp	r3, #4
 8003cd8:	d107      	bne.n	8003cea <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	681a      	ldr	r2, [r3, #0]
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ce8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003cea:	2301      	movs	r3, #1
 8003cec:	e06b      	b.n	8003dc6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cf2:	781a      	ldrb	r2, [r3, #0]
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cfe:	1c5a      	adds	r2, r3, #1
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d08:	3b01      	subs	r3, #1
 8003d0a:	b29a      	uxth	r2, r3
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d14:	b29b      	uxth	r3, r3
 8003d16:	3b01      	subs	r3, #1
 8003d18:	b29a      	uxth	r2, r3
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	695b      	ldr	r3, [r3, #20]
 8003d24:	f003 0304 	and.w	r3, r3, #4
 8003d28:	2b04      	cmp	r3, #4
 8003d2a:	d11b      	bne.n	8003d64 <HAL_I2C_Mem_Write+0x180>
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d017      	beq.n	8003d64 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d38:	781a      	ldrb	r2, [r3, #0]
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d44:	1c5a      	adds	r2, r3, #1
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d4e:	3b01      	subs	r3, #1
 8003d50:	b29a      	uxth	r2, r3
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d5a:	b29b      	uxth	r3, r3
 8003d5c:	3b01      	subs	r3, #1
 8003d5e:	b29a      	uxth	r2, r3
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d1aa      	bne.n	8003cc2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d6c:	697a      	ldr	r2, [r7, #20]
 8003d6e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003d70:	68f8      	ldr	r0, [r7, #12]
 8003d72:	f000 fd79 	bl	8004868 <I2C_WaitOnBTFFlagUntilTimeout>
 8003d76:	4603      	mov	r3, r0
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d00d      	beq.n	8003d98 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d80:	2b04      	cmp	r3, #4
 8003d82:	d107      	bne.n	8003d94 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	681a      	ldr	r2, [r3, #0]
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d92:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003d94:	2301      	movs	r3, #1
 8003d96:	e016      	b.n	8003dc6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	681a      	ldr	r2, [r3, #0]
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003da6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	2220      	movs	r2, #32
 8003dac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	2200      	movs	r2, #0
 8003db4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	2200      	movs	r2, #0
 8003dbc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	e000      	b.n	8003dc6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003dc4:	2302      	movs	r3, #2
  }
}
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	3718      	adds	r7, #24
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	bd80      	pop	{r7, pc}
 8003dce:	bf00      	nop
 8003dd0:	00100002 	.word	0x00100002
 8003dd4:	ffff0000 	.word	0xffff0000

08003dd8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b08c      	sub	sp, #48	@ 0x30
 8003ddc:	af02      	add	r7, sp, #8
 8003dde:	60f8      	str	r0, [r7, #12]
 8003de0:	4608      	mov	r0, r1
 8003de2:	4611      	mov	r1, r2
 8003de4:	461a      	mov	r2, r3
 8003de6:	4603      	mov	r3, r0
 8003de8:	817b      	strh	r3, [r7, #10]
 8003dea:	460b      	mov	r3, r1
 8003dec:	813b      	strh	r3, [r7, #8]
 8003dee:	4613      	mov	r3, r2
 8003df0:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8003df2:	2300      	movs	r3, #0
 8003df4:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003df6:	f7ff f903 	bl	8003000 <HAL_GetTick>
 8003dfa:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e02:	b2db      	uxtb	r3, r3
 8003e04:	2b20      	cmp	r3, #32
 8003e06:	f040 8244 	bne.w	8004292 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003e0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e0c:	9300      	str	r3, [sp, #0]
 8003e0e:	2319      	movs	r3, #25
 8003e10:	2201      	movs	r2, #1
 8003e12:	4982      	ldr	r1, [pc, #520]	@ (800401c <HAL_I2C_Mem_Read+0x244>)
 8003e14:	68f8      	ldr	r0, [r7, #12]
 8003e16:	f000 fbc5 	bl	80045a4 <I2C_WaitOnFlagUntilTimeout>
 8003e1a:	4603      	mov	r3, r0
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d001      	beq.n	8003e24 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8003e20:	2302      	movs	r3, #2
 8003e22:	e237      	b.n	8004294 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003e2a:	2b01      	cmp	r3, #1
 8003e2c:	d101      	bne.n	8003e32 <HAL_I2C_Mem_Read+0x5a>
 8003e2e:	2302      	movs	r3, #2
 8003e30:	e230      	b.n	8004294 <HAL_I2C_Mem_Read+0x4bc>
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	2201      	movs	r2, #1
 8003e36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f003 0301 	and.w	r3, r3, #1
 8003e44:	2b01      	cmp	r3, #1
 8003e46:	d007      	beq.n	8003e58 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	681a      	ldr	r2, [r3, #0]
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f042 0201 	orr.w	r2, r2, #1
 8003e56:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	681a      	ldr	r2, [r3, #0]
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003e66:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	2222      	movs	r2, #34	@ 0x22
 8003e6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	2240      	movs	r2, #64	@ 0x40
 8003e74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003e82:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8003e88:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e8e:	b29a      	uxth	r2, r3
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	4a62      	ldr	r2, [pc, #392]	@ (8004020 <HAL_I2C_Mem_Read+0x248>)
 8003e98:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003e9a:	88f8      	ldrh	r0, [r7, #6]
 8003e9c:	893a      	ldrh	r2, [r7, #8]
 8003e9e:	8979      	ldrh	r1, [r7, #10]
 8003ea0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ea2:	9301      	str	r3, [sp, #4]
 8003ea4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ea6:	9300      	str	r3, [sp, #0]
 8003ea8:	4603      	mov	r3, r0
 8003eaa:	68f8      	ldr	r0, [r7, #12]
 8003eac:	f000 fa92 	bl	80043d4 <I2C_RequestMemoryRead>
 8003eb0:	4603      	mov	r3, r0
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d001      	beq.n	8003eba <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	e1ec      	b.n	8004294 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d113      	bne.n	8003eea <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	61fb      	str	r3, [r7, #28]
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	695b      	ldr	r3, [r3, #20]
 8003ecc:	61fb      	str	r3, [r7, #28]
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	699b      	ldr	r3, [r3, #24]
 8003ed4:	61fb      	str	r3, [r7, #28]
 8003ed6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	681a      	ldr	r2, [r3, #0]
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ee6:	601a      	str	r2, [r3, #0]
 8003ee8:	e1c0      	b.n	800426c <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003eee:	2b01      	cmp	r3, #1
 8003ef0:	d11e      	bne.n	8003f30 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	681a      	ldr	r2, [r3, #0]
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003f00:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003f02:	b672      	cpsid	i
}
 8003f04:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f06:	2300      	movs	r3, #0
 8003f08:	61bb      	str	r3, [r7, #24]
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	695b      	ldr	r3, [r3, #20]
 8003f10:	61bb      	str	r3, [r7, #24]
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	699b      	ldr	r3, [r3, #24]
 8003f18:	61bb      	str	r3, [r7, #24]
 8003f1a:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	681a      	ldr	r2, [r3, #0]
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f2a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003f2c:	b662      	cpsie	i
}
 8003f2e:	e035      	b.n	8003f9c <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f34:	2b02      	cmp	r3, #2
 8003f36:	d11e      	bne.n	8003f76 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	681a      	ldr	r2, [r3, #0]
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003f46:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003f48:	b672      	cpsid	i
}
 8003f4a:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	617b      	str	r3, [r7, #20]
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	695b      	ldr	r3, [r3, #20]
 8003f56:	617b      	str	r3, [r7, #20]
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	699b      	ldr	r3, [r3, #24]
 8003f5e:	617b      	str	r3, [r7, #20]
 8003f60:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	681a      	ldr	r2, [r3, #0]
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003f70:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003f72:	b662      	cpsie	i
}
 8003f74:	e012      	b.n	8003f9c <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	681a      	ldr	r2, [r3, #0]
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003f84:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f86:	2300      	movs	r3, #0
 8003f88:	613b      	str	r3, [r7, #16]
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	695b      	ldr	r3, [r3, #20]
 8003f90:	613b      	str	r3, [r7, #16]
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	699b      	ldr	r3, [r3, #24]
 8003f98:	613b      	str	r3, [r7, #16]
 8003f9a:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8003f9c:	e166      	b.n	800426c <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fa2:	2b03      	cmp	r3, #3
 8003fa4:	f200 811f 	bhi.w	80041e6 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fac:	2b01      	cmp	r3, #1
 8003fae:	d123      	bne.n	8003ff8 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003fb0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003fb2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003fb4:	68f8      	ldr	r0, [r7, #12]
 8003fb6:	f000 fc9f 	bl	80048f8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003fba:	4603      	mov	r3, r0
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d001      	beq.n	8003fc4 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	e167      	b.n	8004294 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	691a      	ldr	r2, [r3, #16]
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fce:	b2d2      	uxtb	r2, r2
 8003fd0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fd6:	1c5a      	adds	r2, r3, #1
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fe0:	3b01      	subs	r3, #1
 8003fe2:	b29a      	uxth	r2, r3
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fec:	b29b      	uxth	r3, r3
 8003fee:	3b01      	subs	r3, #1
 8003ff0:	b29a      	uxth	r2, r3
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003ff6:	e139      	b.n	800426c <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ffc:	2b02      	cmp	r3, #2
 8003ffe:	d152      	bne.n	80040a6 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004000:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004002:	9300      	str	r3, [sp, #0]
 8004004:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004006:	2200      	movs	r2, #0
 8004008:	4906      	ldr	r1, [pc, #24]	@ (8004024 <HAL_I2C_Mem_Read+0x24c>)
 800400a:	68f8      	ldr	r0, [r7, #12]
 800400c:	f000 faca 	bl	80045a4 <I2C_WaitOnFlagUntilTimeout>
 8004010:	4603      	mov	r3, r0
 8004012:	2b00      	cmp	r3, #0
 8004014:	d008      	beq.n	8004028 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8004016:	2301      	movs	r3, #1
 8004018:	e13c      	b.n	8004294 <HAL_I2C_Mem_Read+0x4bc>
 800401a:	bf00      	nop
 800401c:	00100002 	.word	0x00100002
 8004020:	ffff0000 	.word	0xffff0000
 8004024:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8004028:	b672      	cpsid	i
}
 800402a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	681a      	ldr	r2, [r3, #0]
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800403a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	691a      	ldr	r2, [r3, #16]
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004046:	b2d2      	uxtb	r2, r2
 8004048:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800404e:	1c5a      	adds	r2, r3, #1
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004058:	3b01      	subs	r3, #1
 800405a:	b29a      	uxth	r2, r3
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004064:	b29b      	uxth	r3, r3
 8004066:	3b01      	subs	r3, #1
 8004068:	b29a      	uxth	r2, r3
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800406e:	b662      	cpsie	i
}
 8004070:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	691a      	ldr	r2, [r3, #16]
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800407c:	b2d2      	uxtb	r2, r2
 800407e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004084:	1c5a      	adds	r2, r3, #1
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800408e:	3b01      	subs	r3, #1
 8004090:	b29a      	uxth	r2, r3
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800409a:	b29b      	uxth	r3, r3
 800409c:	3b01      	subs	r3, #1
 800409e:	b29a      	uxth	r2, r3
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80040a4:	e0e2      	b.n	800426c <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80040a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040a8:	9300      	str	r3, [sp, #0]
 80040aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040ac:	2200      	movs	r2, #0
 80040ae:	497b      	ldr	r1, [pc, #492]	@ (800429c <HAL_I2C_Mem_Read+0x4c4>)
 80040b0:	68f8      	ldr	r0, [r7, #12]
 80040b2:	f000 fa77 	bl	80045a4 <I2C_WaitOnFlagUntilTimeout>
 80040b6:	4603      	mov	r3, r0
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d001      	beq.n	80040c0 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 80040bc:	2301      	movs	r3, #1
 80040be:	e0e9      	b.n	8004294 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	681a      	ldr	r2, [r3, #0]
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80040ce:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80040d0:	b672      	cpsid	i
}
 80040d2:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	691a      	ldr	r2, [r3, #16]
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040de:	b2d2      	uxtb	r2, r2
 80040e0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040e6:	1c5a      	adds	r2, r3, #1
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040f0:	3b01      	subs	r3, #1
 80040f2:	b29a      	uxth	r2, r3
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040fc:	b29b      	uxth	r3, r3
 80040fe:	3b01      	subs	r3, #1
 8004100:	b29a      	uxth	r2, r3
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004106:	4b66      	ldr	r3, [pc, #408]	@ (80042a0 <HAL_I2C_Mem_Read+0x4c8>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	08db      	lsrs	r3, r3, #3
 800410c:	4a65      	ldr	r2, [pc, #404]	@ (80042a4 <HAL_I2C_Mem_Read+0x4cc>)
 800410e:	fba2 2303 	umull	r2, r3, r2, r3
 8004112:	0a1a      	lsrs	r2, r3, #8
 8004114:	4613      	mov	r3, r2
 8004116:	009b      	lsls	r3, r3, #2
 8004118:	4413      	add	r3, r2
 800411a:	00da      	lsls	r2, r3, #3
 800411c:	1ad3      	subs	r3, r2, r3
 800411e:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8004120:	6a3b      	ldr	r3, [r7, #32]
 8004122:	3b01      	subs	r3, #1
 8004124:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8004126:	6a3b      	ldr	r3, [r7, #32]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d118      	bne.n	800415e <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	2200      	movs	r2, #0
 8004130:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	2220      	movs	r2, #32
 8004136:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	2200      	movs	r2, #0
 800413e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004146:	f043 0220 	orr.w	r2, r3, #32
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800414e:	b662      	cpsie	i
}
 8004150:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	2200      	movs	r2, #0
 8004156:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 800415a:	2301      	movs	r3, #1
 800415c:	e09a      	b.n	8004294 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	695b      	ldr	r3, [r3, #20]
 8004164:	f003 0304 	and.w	r3, r3, #4
 8004168:	2b04      	cmp	r3, #4
 800416a:	d1d9      	bne.n	8004120 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	681a      	ldr	r2, [r3, #0]
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800417a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	691a      	ldr	r2, [r3, #16]
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004186:	b2d2      	uxtb	r2, r2
 8004188:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800418e:	1c5a      	adds	r2, r3, #1
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004198:	3b01      	subs	r3, #1
 800419a:	b29a      	uxth	r2, r3
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041a4:	b29b      	uxth	r3, r3
 80041a6:	3b01      	subs	r3, #1
 80041a8:	b29a      	uxth	r2, r3
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80041ae:	b662      	cpsie	i
}
 80041b0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	691a      	ldr	r2, [r3, #16]
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041bc:	b2d2      	uxtb	r2, r2
 80041be:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041c4:	1c5a      	adds	r2, r3, #1
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041ce:	3b01      	subs	r3, #1
 80041d0:	b29a      	uxth	r2, r3
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041da:	b29b      	uxth	r3, r3
 80041dc:	3b01      	subs	r3, #1
 80041de:	b29a      	uxth	r2, r3
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80041e4:	e042      	b.n	800426c <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80041e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80041e8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80041ea:	68f8      	ldr	r0, [r7, #12]
 80041ec:	f000 fb84 	bl	80048f8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80041f0:	4603      	mov	r3, r0
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d001      	beq.n	80041fa <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 80041f6:	2301      	movs	r3, #1
 80041f8:	e04c      	b.n	8004294 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	691a      	ldr	r2, [r3, #16]
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004204:	b2d2      	uxtb	r2, r2
 8004206:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800420c:	1c5a      	adds	r2, r3, #1
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004216:	3b01      	subs	r3, #1
 8004218:	b29a      	uxth	r2, r3
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004222:	b29b      	uxth	r3, r3
 8004224:	3b01      	subs	r3, #1
 8004226:	b29a      	uxth	r2, r3
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	695b      	ldr	r3, [r3, #20]
 8004232:	f003 0304 	and.w	r3, r3, #4
 8004236:	2b04      	cmp	r3, #4
 8004238:	d118      	bne.n	800426c <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	691a      	ldr	r2, [r3, #16]
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004244:	b2d2      	uxtb	r2, r2
 8004246:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800424c:	1c5a      	adds	r2, r3, #1
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004256:	3b01      	subs	r3, #1
 8004258:	b29a      	uxth	r2, r3
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004262:	b29b      	uxth	r3, r3
 8004264:	3b01      	subs	r3, #1
 8004266:	b29a      	uxth	r2, r3
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004270:	2b00      	cmp	r3, #0
 8004272:	f47f ae94 	bne.w	8003f9e <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	2220      	movs	r2, #32
 800427a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	2200      	movs	r2, #0
 8004282:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	2200      	movs	r2, #0
 800428a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800428e:	2300      	movs	r3, #0
 8004290:	e000      	b.n	8004294 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8004292:	2302      	movs	r3, #2
  }
}
 8004294:	4618      	mov	r0, r3
 8004296:	3728      	adds	r7, #40	@ 0x28
 8004298:	46bd      	mov	sp, r7
 800429a:	bd80      	pop	{r7, pc}
 800429c:	00010004 	.word	0x00010004
 80042a0:	20000004 	.word	0x20000004
 80042a4:	14f8b589 	.word	0x14f8b589

080042a8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b088      	sub	sp, #32
 80042ac:	af02      	add	r7, sp, #8
 80042ae:	60f8      	str	r0, [r7, #12]
 80042b0:	4608      	mov	r0, r1
 80042b2:	4611      	mov	r1, r2
 80042b4:	461a      	mov	r2, r3
 80042b6:	4603      	mov	r3, r0
 80042b8:	817b      	strh	r3, [r7, #10]
 80042ba:	460b      	mov	r3, r1
 80042bc:	813b      	strh	r3, [r7, #8]
 80042be:	4613      	mov	r3, r2
 80042c0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	681a      	ldr	r2, [r3, #0]
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80042d0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80042d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042d4:	9300      	str	r3, [sp, #0]
 80042d6:	6a3b      	ldr	r3, [r7, #32]
 80042d8:	2200      	movs	r2, #0
 80042da:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80042de:	68f8      	ldr	r0, [r7, #12]
 80042e0:	f000 f960 	bl	80045a4 <I2C_WaitOnFlagUntilTimeout>
 80042e4:	4603      	mov	r3, r0
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d00d      	beq.n	8004306 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042f4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80042f8:	d103      	bne.n	8004302 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004300:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004302:	2303      	movs	r3, #3
 8004304:	e05f      	b.n	80043c6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004306:	897b      	ldrh	r3, [r7, #10]
 8004308:	b2db      	uxtb	r3, r3
 800430a:	461a      	mov	r2, r3
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004314:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004316:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004318:	6a3a      	ldr	r2, [r7, #32]
 800431a:	492d      	ldr	r1, [pc, #180]	@ (80043d0 <I2C_RequestMemoryWrite+0x128>)
 800431c:	68f8      	ldr	r0, [r7, #12]
 800431e:	f000 f9bb 	bl	8004698 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004322:	4603      	mov	r3, r0
 8004324:	2b00      	cmp	r3, #0
 8004326:	d001      	beq.n	800432c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004328:	2301      	movs	r3, #1
 800432a:	e04c      	b.n	80043c6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800432c:	2300      	movs	r3, #0
 800432e:	617b      	str	r3, [r7, #20]
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	695b      	ldr	r3, [r3, #20]
 8004336:	617b      	str	r3, [r7, #20]
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	699b      	ldr	r3, [r3, #24]
 800433e:	617b      	str	r3, [r7, #20]
 8004340:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004342:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004344:	6a39      	ldr	r1, [r7, #32]
 8004346:	68f8      	ldr	r0, [r7, #12]
 8004348:	f000 fa46 	bl	80047d8 <I2C_WaitOnTXEFlagUntilTimeout>
 800434c:	4603      	mov	r3, r0
 800434e:	2b00      	cmp	r3, #0
 8004350:	d00d      	beq.n	800436e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004356:	2b04      	cmp	r3, #4
 8004358:	d107      	bne.n	800436a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	681a      	ldr	r2, [r3, #0]
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004368:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800436a:	2301      	movs	r3, #1
 800436c:	e02b      	b.n	80043c6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800436e:	88fb      	ldrh	r3, [r7, #6]
 8004370:	2b01      	cmp	r3, #1
 8004372:	d105      	bne.n	8004380 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004374:	893b      	ldrh	r3, [r7, #8]
 8004376:	b2da      	uxtb	r2, r3
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	611a      	str	r2, [r3, #16]
 800437e:	e021      	b.n	80043c4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004380:	893b      	ldrh	r3, [r7, #8]
 8004382:	0a1b      	lsrs	r3, r3, #8
 8004384:	b29b      	uxth	r3, r3
 8004386:	b2da      	uxtb	r2, r3
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800438e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004390:	6a39      	ldr	r1, [r7, #32]
 8004392:	68f8      	ldr	r0, [r7, #12]
 8004394:	f000 fa20 	bl	80047d8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004398:	4603      	mov	r3, r0
 800439a:	2b00      	cmp	r3, #0
 800439c:	d00d      	beq.n	80043ba <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043a2:	2b04      	cmp	r3, #4
 80043a4:	d107      	bne.n	80043b6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	681a      	ldr	r2, [r3, #0]
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80043b4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80043b6:	2301      	movs	r3, #1
 80043b8:	e005      	b.n	80043c6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80043ba:	893b      	ldrh	r3, [r7, #8]
 80043bc:	b2da      	uxtb	r2, r3
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80043c4:	2300      	movs	r3, #0
}
 80043c6:	4618      	mov	r0, r3
 80043c8:	3718      	adds	r7, #24
 80043ca:	46bd      	mov	sp, r7
 80043cc:	bd80      	pop	{r7, pc}
 80043ce:	bf00      	nop
 80043d0:	00010002 	.word	0x00010002

080043d4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b088      	sub	sp, #32
 80043d8:	af02      	add	r7, sp, #8
 80043da:	60f8      	str	r0, [r7, #12]
 80043dc:	4608      	mov	r0, r1
 80043de:	4611      	mov	r1, r2
 80043e0:	461a      	mov	r2, r3
 80043e2:	4603      	mov	r3, r0
 80043e4:	817b      	strh	r3, [r7, #10]
 80043e6:	460b      	mov	r3, r1
 80043e8:	813b      	strh	r3, [r7, #8]
 80043ea:	4613      	mov	r3, r2
 80043ec:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	681a      	ldr	r2, [r3, #0]
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80043fc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	681a      	ldr	r2, [r3, #0]
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800440c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800440e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004410:	9300      	str	r3, [sp, #0]
 8004412:	6a3b      	ldr	r3, [r7, #32]
 8004414:	2200      	movs	r2, #0
 8004416:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800441a:	68f8      	ldr	r0, [r7, #12]
 800441c:	f000 f8c2 	bl	80045a4 <I2C_WaitOnFlagUntilTimeout>
 8004420:	4603      	mov	r3, r0
 8004422:	2b00      	cmp	r3, #0
 8004424:	d00d      	beq.n	8004442 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004430:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004434:	d103      	bne.n	800443e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800443c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800443e:	2303      	movs	r3, #3
 8004440:	e0aa      	b.n	8004598 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004442:	897b      	ldrh	r3, [r7, #10]
 8004444:	b2db      	uxtb	r3, r3
 8004446:	461a      	mov	r2, r3
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004450:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004452:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004454:	6a3a      	ldr	r2, [r7, #32]
 8004456:	4952      	ldr	r1, [pc, #328]	@ (80045a0 <I2C_RequestMemoryRead+0x1cc>)
 8004458:	68f8      	ldr	r0, [r7, #12]
 800445a:	f000 f91d 	bl	8004698 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800445e:	4603      	mov	r3, r0
 8004460:	2b00      	cmp	r3, #0
 8004462:	d001      	beq.n	8004468 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004464:	2301      	movs	r3, #1
 8004466:	e097      	b.n	8004598 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004468:	2300      	movs	r3, #0
 800446a:	617b      	str	r3, [r7, #20]
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	695b      	ldr	r3, [r3, #20]
 8004472:	617b      	str	r3, [r7, #20]
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	699b      	ldr	r3, [r3, #24]
 800447a:	617b      	str	r3, [r7, #20]
 800447c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800447e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004480:	6a39      	ldr	r1, [r7, #32]
 8004482:	68f8      	ldr	r0, [r7, #12]
 8004484:	f000 f9a8 	bl	80047d8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004488:	4603      	mov	r3, r0
 800448a:	2b00      	cmp	r3, #0
 800448c:	d00d      	beq.n	80044aa <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004492:	2b04      	cmp	r3, #4
 8004494:	d107      	bne.n	80044a6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	681a      	ldr	r2, [r3, #0]
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80044a4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80044a6:	2301      	movs	r3, #1
 80044a8:	e076      	b.n	8004598 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80044aa:	88fb      	ldrh	r3, [r7, #6]
 80044ac:	2b01      	cmp	r3, #1
 80044ae:	d105      	bne.n	80044bc <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80044b0:	893b      	ldrh	r3, [r7, #8]
 80044b2:	b2da      	uxtb	r2, r3
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	611a      	str	r2, [r3, #16]
 80044ba:	e021      	b.n	8004500 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80044bc:	893b      	ldrh	r3, [r7, #8]
 80044be:	0a1b      	lsrs	r3, r3, #8
 80044c0:	b29b      	uxth	r3, r3
 80044c2:	b2da      	uxtb	r2, r3
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80044ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80044cc:	6a39      	ldr	r1, [r7, #32]
 80044ce:	68f8      	ldr	r0, [r7, #12]
 80044d0:	f000 f982 	bl	80047d8 <I2C_WaitOnTXEFlagUntilTimeout>
 80044d4:	4603      	mov	r3, r0
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d00d      	beq.n	80044f6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044de:	2b04      	cmp	r3, #4
 80044e0:	d107      	bne.n	80044f2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	681a      	ldr	r2, [r3, #0]
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80044f0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80044f2:	2301      	movs	r3, #1
 80044f4:	e050      	b.n	8004598 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80044f6:	893b      	ldrh	r3, [r7, #8]
 80044f8:	b2da      	uxtb	r2, r3
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004500:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004502:	6a39      	ldr	r1, [r7, #32]
 8004504:	68f8      	ldr	r0, [r7, #12]
 8004506:	f000 f967 	bl	80047d8 <I2C_WaitOnTXEFlagUntilTimeout>
 800450a:	4603      	mov	r3, r0
 800450c:	2b00      	cmp	r3, #0
 800450e:	d00d      	beq.n	800452c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004514:	2b04      	cmp	r3, #4
 8004516:	d107      	bne.n	8004528 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	681a      	ldr	r2, [r3, #0]
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004526:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004528:	2301      	movs	r3, #1
 800452a:	e035      	b.n	8004598 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	681a      	ldr	r2, [r3, #0]
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800453a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800453c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800453e:	9300      	str	r3, [sp, #0]
 8004540:	6a3b      	ldr	r3, [r7, #32]
 8004542:	2200      	movs	r2, #0
 8004544:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004548:	68f8      	ldr	r0, [r7, #12]
 800454a:	f000 f82b 	bl	80045a4 <I2C_WaitOnFlagUntilTimeout>
 800454e:	4603      	mov	r3, r0
 8004550:	2b00      	cmp	r3, #0
 8004552:	d00d      	beq.n	8004570 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800455e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004562:	d103      	bne.n	800456c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800456a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800456c:	2303      	movs	r3, #3
 800456e:	e013      	b.n	8004598 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004570:	897b      	ldrh	r3, [r7, #10]
 8004572:	b2db      	uxtb	r3, r3
 8004574:	f043 0301 	orr.w	r3, r3, #1
 8004578:	b2da      	uxtb	r2, r3
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004580:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004582:	6a3a      	ldr	r2, [r7, #32]
 8004584:	4906      	ldr	r1, [pc, #24]	@ (80045a0 <I2C_RequestMemoryRead+0x1cc>)
 8004586:	68f8      	ldr	r0, [r7, #12]
 8004588:	f000 f886 	bl	8004698 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800458c:	4603      	mov	r3, r0
 800458e:	2b00      	cmp	r3, #0
 8004590:	d001      	beq.n	8004596 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004592:	2301      	movs	r3, #1
 8004594:	e000      	b.n	8004598 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004596:	2300      	movs	r3, #0
}
 8004598:	4618      	mov	r0, r3
 800459a:	3718      	adds	r7, #24
 800459c:	46bd      	mov	sp, r7
 800459e:	bd80      	pop	{r7, pc}
 80045a0:	00010002 	.word	0x00010002

080045a4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b084      	sub	sp, #16
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	60f8      	str	r0, [r7, #12]
 80045ac:	60b9      	str	r1, [r7, #8]
 80045ae:	603b      	str	r3, [r7, #0]
 80045b0:	4613      	mov	r3, r2
 80045b2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80045b4:	e048      	b.n	8004648 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045bc:	d044      	beq.n	8004648 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045be:	f7fe fd1f 	bl	8003000 <HAL_GetTick>
 80045c2:	4602      	mov	r2, r0
 80045c4:	69bb      	ldr	r3, [r7, #24]
 80045c6:	1ad3      	subs	r3, r2, r3
 80045c8:	683a      	ldr	r2, [r7, #0]
 80045ca:	429a      	cmp	r2, r3
 80045cc:	d302      	bcc.n	80045d4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d139      	bne.n	8004648 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80045d4:	68bb      	ldr	r3, [r7, #8]
 80045d6:	0c1b      	lsrs	r3, r3, #16
 80045d8:	b2db      	uxtb	r3, r3
 80045da:	2b01      	cmp	r3, #1
 80045dc:	d10d      	bne.n	80045fa <I2C_WaitOnFlagUntilTimeout+0x56>
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	695b      	ldr	r3, [r3, #20]
 80045e4:	43da      	mvns	r2, r3
 80045e6:	68bb      	ldr	r3, [r7, #8]
 80045e8:	4013      	ands	r3, r2
 80045ea:	b29b      	uxth	r3, r3
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	bf0c      	ite	eq
 80045f0:	2301      	moveq	r3, #1
 80045f2:	2300      	movne	r3, #0
 80045f4:	b2db      	uxtb	r3, r3
 80045f6:	461a      	mov	r2, r3
 80045f8:	e00c      	b.n	8004614 <I2C_WaitOnFlagUntilTimeout+0x70>
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	699b      	ldr	r3, [r3, #24]
 8004600:	43da      	mvns	r2, r3
 8004602:	68bb      	ldr	r3, [r7, #8]
 8004604:	4013      	ands	r3, r2
 8004606:	b29b      	uxth	r3, r3
 8004608:	2b00      	cmp	r3, #0
 800460a:	bf0c      	ite	eq
 800460c:	2301      	moveq	r3, #1
 800460e:	2300      	movne	r3, #0
 8004610:	b2db      	uxtb	r3, r3
 8004612:	461a      	mov	r2, r3
 8004614:	79fb      	ldrb	r3, [r7, #7]
 8004616:	429a      	cmp	r2, r3
 8004618:	d116      	bne.n	8004648 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	2200      	movs	r2, #0
 800461e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	2220      	movs	r2, #32
 8004624:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	2200      	movs	r2, #0
 800462c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004634:	f043 0220 	orr.w	r2, r3, #32
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	2200      	movs	r2, #0
 8004640:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004644:	2301      	movs	r3, #1
 8004646:	e023      	b.n	8004690 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004648:	68bb      	ldr	r3, [r7, #8]
 800464a:	0c1b      	lsrs	r3, r3, #16
 800464c:	b2db      	uxtb	r3, r3
 800464e:	2b01      	cmp	r3, #1
 8004650:	d10d      	bne.n	800466e <I2C_WaitOnFlagUntilTimeout+0xca>
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	695b      	ldr	r3, [r3, #20]
 8004658:	43da      	mvns	r2, r3
 800465a:	68bb      	ldr	r3, [r7, #8]
 800465c:	4013      	ands	r3, r2
 800465e:	b29b      	uxth	r3, r3
 8004660:	2b00      	cmp	r3, #0
 8004662:	bf0c      	ite	eq
 8004664:	2301      	moveq	r3, #1
 8004666:	2300      	movne	r3, #0
 8004668:	b2db      	uxtb	r3, r3
 800466a:	461a      	mov	r2, r3
 800466c:	e00c      	b.n	8004688 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	699b      	ldr	r3, [r3, #24]
 8004674:	43da      	mvns	r2, r3
 8004676:	68bb      	ldr	r3, [r7, #8]
 8004678:	4013      	ands	r3, r2
 800467a:	b29b      	uxth	r3, r3
 800467c:	2b00      	cmp	r3, #0
 800467e:	bf0c      	ite	eq
 8004680:	2301      	moveq	r3, #1
 8004682:	2300      	movne	r3, #0
 8004684:	b2db      	uxtb	r3, r3
 8004686:	461a      	mov	r2, r3
 8004688:	79fb      	ldrb	r3, [r7, #7]
 800468a:	429a      	cmp	r2, r3
 800468c:	d093      	beq.n	80045b6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800468e:	2300      	movs	r3, #0
}
 8004690:	4618      	mov	r0, r3
 8004692:	3710      	adds	r7, #16
 8004694:	46bd      	mov	sp, r7
 8004696:	bd80      	pop	{r7, pc}

08004698 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004698:	b580      	push	{r7, lr}
 800469a:	b084      	sub	sp, #16
 800469c:	af00      	add	r7, sp, #0
 800469e:	60f8      	str	r0, [r7, #12]
 80046a0:	60b9      	str	r1, [r7, #8]
 80046a2:	607a      	str	r2, [r7, #4]
 80046a4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80046a6:	e071      	b.n	800478c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	695b      	ldr	r3, [r3, #20]
 80046ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80046b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80046b6:	d123      	bne.n	8004700 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	681a      	ldr	r2, [r3, #0]
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80046c6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80046d0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	2200      	movs	r2, #0
 80046d6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	2220      	movs	r2, #32
 80046dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	2200      	movs	r2, #0
 80046e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046ec:	f043 0204 	orr.w	r2, r3, #4
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	2200      	movs	r2, #0
 80046f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80046fc:	2301      	movs	r3, #1
 80046fe:	e067      	b.n	80047d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004706:	d041      	beq.n	800478c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004708:	f7fe fc7a 	bl	8003000 <HAL_GetTick>
 800470c:	4602      	mov	r2, r0
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	1ad3      	subs	r3, r2, r3
 8004712:	687a      	ldr	r2, [r7, #4]
 8004714:	429a      	cmp	r2, r3
 8004716:	d302      	bcc.n	800471e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d136      	bne.n	800478c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800471e:	68bb      	ldr	r3, [r7, #8]
 8004720:	0c1b      	lsrs	r3, r3, #16
 8004722:	b2db      	uxtb	r3, r3
 8004724:	2b01      	cmp	r3, #1
 8004726:	d10c      	bne.n	8004742 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	695b      	ldr	r3, [r3, #20]
 800472e:	43da      	mvns	r2, r3
 8004730:	68bb      	ldr	r3, [r7, #8]
 8004732:	4013      	ands	r3, r2
 8004734:	b29b      	uxth	r3, r3
 8004736:	2b00      	cmp	r3, #0
 8004738:	bf14      	ite	ne
 800473a:	2301      	movne	r3, #1
 800473c:	2300      	moveq	r3, #0
 800473e:	b2db      	uxtb	r3, r3
 8004740:	e00b      	b.n	800475a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	699b      	ldr	r3, [r3, #24]
 8004748:	43da      	mvns	r2, r3
 800474a:	68bb      	ldr	r3, [r7, #8]
 800474c:	4013      	ands	r3, r2
 800474e:	b29b      	uxth	r3, r3
 8004750:	2b00      	cmp	r3, #0
 8004752:	bf14      	ite	ne
 8004754:	2301      	movne	r3, #1
 8004756:	2300      	moveq	r3, #0
 8004758:	b2db      	uxtb	r3, r3
 800475a:	2b00      	cmp	r3, #0
 800475c:	d016      	beq.n	800478c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	2200      	movs	r2, #0
 8004762:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	2220      	movs	r2, #32
 8004768:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	2200      	movs	r2, #0
 8004770:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004778:	f043 0220 	orr.w	r2, r3, #32
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	2200      	movs	r2, #0
 8004784:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004788:	2301      	movs	r3, #1
 800478a:	e021      	b.n	80047d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800478c:	68bb      	ldr	r3, [r7, #8]
 800478e:	0c1b      	lsrs	r3, r3, #16
 8004790:	b2db      	uxtb	r3, r3
 8004792:	2b01      	cmp	r3, #1
 8004794:	d10c      	bne.n	80047b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	695b      	ldr	r3, [r3, #20]
 800479c:	43da      	mvns	r2, r3
 800479e:	68bb      	ldr	r3, [r7, #8]
 80047a0:	4013      	ands	r3, r2
 80047a2:	b29b      	uxth	r3, r3
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	bf14      	ite	ne
 80047a8:	2301      	movne	r3, #1
 80047aa:	2300      	moveq	r3, #0
 80047ac:	b2db      	uxtb	r3, r3
 80047ae:	e00b      	b.n	80047c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	699b      	ldr	r3, [r3, #24]
 80047b6:	43da      	mvns	r2, r3
 80047b8:	68bb      	ldr	r3, [r7, #8]
 80047ba:	4013      	ands	r3, r2
 80047bc:	b29b      	uxth	r3, r3
 80047be:	2b00      	cmp	r3, #0
 80047c0:	bf14      	ite	ne
 80047c2:	2301      	movne	r3, #1
 80047c4:	2300      	moveq	r3, #0
 80047c6:	b2db      	uxtb	r3, r3
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	f47f af6d 	bne.w	80046a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80047ce:	2300      	movs	r3, #0
}
 80047d0:	4618      	mov	r0, r3
 80047d2:	3710      	adds	r7, #16
 80047d4:	46bd      	mov	sp, r7
 80047d6:	bd80      	pop	{r7, pc}

080047d8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b084      	sub	sp, #16
 80047dc:	af00      	add	r7, sp, #0
 80047de:	60f8      	str	r0, [r7, #12]
 80047e0:	60b9      	str	r1, [r7, #8]
 80047e2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80047e4:	e034      	b.n	8004850 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80047e6:	68f8      	ldr	r0, [r7, #12]
 80047e8:	f000 f8e3 	bl	80049b2 <I2C_IsAcknowledgeFailed>
 80047ec:	4603      	mov	r3, r0
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d001      	beq.n	80047f6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80047f2:	2301      	movs	r3, #1
 80047f4:	e034      	b.n	8004860 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047f6:	68bb      	ldr	r3, [r7, #8]
 80047f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047fc:	d028      	beq.n	8004850 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047fe:	f7fe fbff 	bl	8003000 <HAL_GetTick>
 8004802:	4602      	mov	r2, r0
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	1ad3      	subs	r3, r2, r3
 8004808:	68ba      	ldr	r2, [r7, #8]
 800480a:	429a      	cmp	r2, r3
 800480c:	d302      	bcc.n	8004814 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800480e:	68bb      	ldr	r3, [r7, #8]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d11d      	bne.n	8004850 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	695b      	ldr	r3, [r3, #20]
 800481a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800481e:	2b80      	cmp	r3, #128	@ 0x80
 8004820:	d016      	beq.n	8004850 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	2200      	movs	r2, #0
 8004826:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	2220      	movs	r2, #32
 800482c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	2200      	movs	r2, #0
 8004834:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800483c:	f043 0220 	orr.w	r2, r3, #32
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	2200      	movs	r2, #0
 8004848:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800484c:	2301      	movs	r3, #1
 800484e:	e007      	b.n	8004860 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	695b      	ldr	r3, [r3, #20]
 8004856:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800485a:	2b80      	cmp	r3, #128	@ 0x80
 800485c:	d1c3      	bne.n	80047e6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800485e:	2300      	movs	r3, #0
}
 8004860:	4618      	mov	r0, r3
 8004862:	3710      	adds	r7, #16
 8004864:	46bd      	mov	sp, r7
 8004866:	bd80      	pop	{r7, pc}

08004868 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004868:	b580      	push	{r7, lr}
 800486a:	b084      	sub	sp, #16
 800486c:	af00      	add	r7, sp, #0
 800486e:	60f8      	str	r0, [r7, #12]
 8004870:	60b9      	str	r1, [r7, #8]
 8004872:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004874:	e034      	b.n	80048e0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004876:	68f8      	ldr	r0, [r7, #12]
 8004878:	f000 f89b 	bl	80049b2 <I2C_IsAcknowledgeFailed>
 800487c:	4603      	mov	r3, r0
 800487e:	2b00      	cmp	r3, #0
 8004880:	d001      	beq.n	8004886 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004882:	2301      	movs	r3, #1
 8004884:	e034      	b.n	80048f0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004886:	68bb      	ldr	r3, [r7, #8]
 8004888:	f1b3 3fff 	cmp.w	r3, #4294967295
 800488c:	d028      	beq.n	80048e0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800488e:	f7fe fbb7 	bl	8003000 <HAL_GetTick>
 8004892:	4602      	mov	r2, r0
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	1ad3      	subs	r3, r2, r3
 8004898:	68ba      	ldr	r2, [r7, #8]
 800489a:	429a      	cmp	r2, r3
 800489c:	d302      	bcc.n	80048a4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800489e:	68bb      	ldr	r3, [r7, #8]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d11d      	bne.n	80048e0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	695b      	ldr	r3, [r3, #20]
 80048aa:	f003 0304 	and.w	r3, r3, #4
 80048ae:	2b04      	cmp	r3, #4
 80048b0:	d016      	beq.n	80048e0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	2200      	movs	r2, #0
 80048b6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	2220      	movs	r2, #32
 80048bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	2200      	movs	r2, #0
 80048c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048cc:	f043 0220 	orr.w	r2, r3, #32
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	2200      	movs	r2, #0
 80048d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80048dc:	2301      	movs	r3, #1
 80048de:	e007      	b.n	80048f0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	695b      	ldr	r3, [r3, #20]
 80048e6:	f003 0304 	and.w	r3, r3, #4
 80048ea:	2b04      	cmp	r3, #4
 80048ec:	d1c3      	bne.n	8004876 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80048ee:	2300      	movs	r3, #0
}
 80048f0:	4618      	mov	r0, r3
 80048f2:	3710      	adds	r7, #16
 80048f4:	46bd      	mov	sp, r7
 80048f6:	bd80      	pop	{r7, pc}

080048f8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b084      	sub	sp, #16
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	60f8      	str	r0, [r7, #12]
 8004900:	60b9      	str	r1, [r7, #8]
 8004902:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004904:	e049      	b.n	800499a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	695b      	ldr	r3, [r3, #20]
 800490c:	f003 0310 	and.w	r3, r3, #16
 8004910:	2b10      	cmp	r3, #16
 8004912:	d119      	bne.n	8004948 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f06f 0210 	mvn.w	r2, #16
 800491c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	2200      	movs	r2, #0
 8004922:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	2220      	movs	r2, #32
 8004928:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	2200      	movs	r2, #0
 8004930:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	2200      	movs	r2, #0
 8004940:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004944:	2301      	movs	r3, #1
 8004946:	e030      	b.n	80049aa <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004948:	f7fe fb5a 	bl	8003000 <HAL_GetTick>
 800494c:	4602      	mov	r2, r0
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	1ad3      	subs	r3, r2, r3
 8004952:	68ba      	ldr	r2, [r7, #8]
 8004954:	429a      	cmp	r2, r3
 8004956:	d302      	bcc.n	800495e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004958:	68bb      	ldr	r3, [r7, #8]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d11d      	bne.n	800499a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	695b      	ldr	r3, [r3, #20]
 8004964:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004968:	2b40      	cmp	r3, #64	@ 0x40
 800496a:	d016      	beq.n	800499a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	2200      	movs	r2, #0
 8004970:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	2220      	movs	r2, #32
 8004976:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	2200      	movs	r2, #0
 800497e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004986:	f043 0220 	orr.w	r2, r3, #32
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	2200      	movs	r2, #0
 8004992:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004996:	2301      	movs	r3, #1
 8004998:	e007      	b.n	80049aa <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	695b      	ldr	r3, [r3, #20]
 80049a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049a4:	2b40      	cmp	r3, #64	@ 0x40
 80049a6:	d1ae      	bne.n	8004906 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80049a8:	2300      	movs	r3, #0
}
 80049aa:	4618      	mov	r0, r3
 80049ac:	3710      	adds	r7, #16
 80049ae:	46bd      	mov	sp, r7
 80049b0:	bd80      	pop	{r7, pc}

080049b2 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80049b2:	b480      	push	{r7}
 80049b4:	b083      	sub	sp, #12
 80049b6:	af00      	add	r7, sp, #0
 80049b8:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	695b      	ldr	r3, [r3, #20]
 80049c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80049c4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80049c8:	d11b      	bne.n	8004a02 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80049d2:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2200      	movs	r2, #0
 80049d8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2220      	movs	r2, #32
 80049de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2200      	movs	r2, #0
 80049e6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049ee:	f043 0204 	orr.w	r2, r3, #4
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2200      	movs	r2, #0
 80049fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80049fe:	2301      	movs	r3, #1
 8004a00:	e000      	b.n	8004a04 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004a02:	2300      	movs	r3, #0
}
 8004a04:	4618      	mov	r0, r3
 8004a06:	370c      	adds	r7, #12
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	bc80      	pop	{r7}
 8004a0c:	4770      	bx	lr
	...

08004a10 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b086      	sub	sp, #24
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d101      	bne.n	8004a22 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004a1e:	2301      	movs	r3, #1
 8004a20:	e272      	b.n	8004f08 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f003 0301 	and.w	r3, r3, #1
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	f000 8087 	beq.w	8004b3e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004a30:	4b92      	ldr	r3, [pc, #584]	@ (8004c7c <HAL_RCC_OscConfig+0x26c>)
 8004a32:	685b      	ldr	r3, [r3, #4]
 8004a34:	f003 030c 	and.w	r3, r3, #12
 8004a38:	2b04      	cmp	r3, #4
 8004a3a:	d00c      	beq.n	8004a56 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004a3c:	4b8f      	ldr	r3, [pc, #572]	@ (8004c7c <HAL_RCC_OscConfig+0x26c>)
 8004a3e:	685b      	ldr	r3, [r3, #4]
 8004a40:	f003 030c 	and.w	r3, r3, #12
 8004a44:	2b08      	cmp	r3, #8
 8004a46:	d112      	bne.n	8004a6e <HAL_RCC_OscConfig+0x5e>
 8004a48:	4b8c      	ldr	r3, [pc, #560]	@ (8004c7c <HAL_RCC_OscConfig+0x26c>)
 8004a4a:	685b      	ldr	r3, [r3, #4]
 8004a4c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004a50:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a54:	d10b      	bne.n	8004a6e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a56:	4b89      	ldr	r3, [pc, #548]	@ (8004c7c <HAL_RCC_OscConfig+0x26c>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d06c      	beq.n	8004b3c <HAL_RCC_OscConfig+0x12c>
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	685b      	ldr	r3, [r3, #4]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d168      	bne.n	8004b3c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	e24c      	b.n	8004f08 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	685b      	ldr	r3, [r3, #4]
 8004a72:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a76:	d106      	bne.n	8004a86 <HAL_RCC_OscConfig+0x76>
 8004a78:	4b80      	ldr	r3, [pc, #512]	@ (8004c7c <HAL_RCC_OscConfig+0x26c>)
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	4a7f      	ldr	r2, [pc, #508]	@ (8004c7c <HAL_RCC_OscConfig+0x26c>)
 8004a7e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a82:	6013      	str	r3, [r2, #0]
 8004a84:	e02e      	b.n	8004ae4 <HAL_RCC_OscConfig+0xd4>
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	685b      	ldr	r3, [r3, #4]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d10c      	bne.n	8004aa8 <HAL_RCC_OscConfig+0x98>
 8004a8e:	4b7b      	ldr	r3, [pc, #492]	@ (8004c7c <HAL_RCC_OscConfig+0x26c>)
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	4a7a      	ldr	r2, [pc, #488]	@ (8004c7c <HAL_RCC_OscConfig+0x26c>)
 8004a94:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004a98:	6013      	str	r3, [r2, #0]
 8004a9a:	4b78      	ldr	r3, [pc, #480]	@ (8004c7c <HAL_RCC_OscConfig+0x26c>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	4a77      	ldr	r2, [pc, #476]	@ (8004c7c <HAL_RCC_OscConfig+0x26c>)
 8004aa0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004aa4:	6013      	str	r3, [r2, #0]
 8004aa6:	e01d      	b.n	8004ae4 <HAL_RCC_OscConfig+0xd4>
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	685b      	ldr	r3, [r3, #4]
 8004aac:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004ab0:	d10c      	bne.n	8004acc <HAL_RCC_OscConfig+0xbc>
 8004ab2:	4b72      	ldr	r3, [pc, #456]	@ (8004c7c <HAL_RCC_OscConfig+0x26c>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	4a71      	ldr	r2, [pc, #452]	@ (8004c7c <HAL_RCC_OscConfig+0x26c>)
 8004ab8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004abc:	6013      	str	r3, [r2, #0]
 8004abe:	4b6f      	ldr	r3, [pc, #444]	@ (8004c7c <HAL_RCC_OscConfig+0x26c>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	4a6e      	ldr	r2, [pc, #440]	@ (8004c7c <HAL_RCC_OscConfig+0x26c>)
 8004ac4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ac8:	6013      	str	r3, [r2, #0]
 8004aca:	e00b      	b.n	8004ae4 <HAL_RCC_OscConfig+0xd4>
 8004acc:	4b6b      	ldr	r3, [pc, #428]	@ (8004c7c <HAL_RCC_OscConfig+0x26c>)
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	4a6a      	ldr	r2, [pc, #424]	@ (8004c7c <HAL_RCC_OscConfig+0x26c>)
 8004ad2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004ad6:	6013      	str	r3, [r2, #0]
 8004ad8:	4b68      	ldr	r3, [pc, #416]	@ (8004c7c <HAL_RCC_OscConfig+0x26c>)
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	4a67      	ldr	r2, [pc, #412]	@ (8004c7c <HAL_RCC_OscConfig+0x26c>)
 8004ade:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004ae2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	685b      	ldr	r3, [r3, #4]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d013      	beq.n	8004b14 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004aec:	f7fe fa88 	bl	8003000 <HAL_GetTick>
 8004af0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004af2:	e008      	b.n	8004b06 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004af4:	f7fe fa84 	bl	8003000 <HAL_GetTick>
 8004af8:	4602      	mov	r2, r0
 8004afa:	693b      	ldr	r3, [r7, #16]
 8004afc:	1ad3      	subs	r3, r2, r3
 8004afe:	2b64      	cmp	r3, #100	@ 0x64
 8004b00:	d901      	bls.n	8004b06 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004b02:	2303      	movs	r3, #3
 8004b04:	e200      	b.n	8004f08 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b06:	4b5d      	ldr	r3, [pc, #372]	@ (8004c7c <HAL_RCC_OscConfig+0x26c>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d0f0      	beq.n	8004af4 <HAL_RCC_OscConfig+0xe4>
 8004b12:	e014      	b.n	8004b3e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b14:	f7fe fa74 	bl	8003000 <HAL_GetTick>
 8004b18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b1a:	e008      	b.n	8004b2e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b1c:	f7fe fa70 	bl	8003000 <HAL_GetTick>
 8004b20:	4602      	mov	r2, r0
 8004b22:	693b      	ldr	r3, [r7, #16]
 8004b24:	1ad3      	subs	r3, r2, r3
 8004b26:	2b64      	cmp	r3, #100	@ 0x64
 8004b28:	d901      	bls.n	8004b2e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004b2a:	2303      	movs	r3, #3
 8004b2c:	e1ec      	b.n	8004f08 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b2e:	4b53      	ldr	r3, [pc, #332]	@ (8004c7c <HAL_RCC_OscConfig+0x26c>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d1f0      	bne.n	8004b1c <HAL_RCC_OscConfig+0x10c>
 8004b3a:	e000      	b.n	8004b3e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b3c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f003 0302 	and.w	r3, r3, #2
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d063      	beq.n	8004c12 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004b4a:	4b4c      	ldr	r3, [pc, #304]	@ (8004c7c <HAL_RCC_OscConfig+0x26c>)
 8004b4c:	685b      	ldr	r3, [r3, #4]
 8004b4e:	f003 030c 	and.w	r3, r3, #12
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d00b      	beq.n	8004b6e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004b56:	4b49      	ldr	r3, [pc, #292]	@ (8004c7c <HAL_RCC_OscConfig+0x26c>)
 8004b58:	685b      	ldr	r3, [r3, #4]
 8004b5a:	f003 030c 	and.w	r3, r3, #12
 8004b5e:	2b08      	cmp	r3, #8
 8004b60:	d11c      	bne.n	8004b9c <HAL_RCC_OscConfig+0x18c>
 8004b62:	4b46      	ldr	r3, [pc, #280]	@ (8004c7c <HAL_RCC_OscConfig+0x26c>)
 8004b64:	685b      	ldr	r3, [r3, #4]
 8004b66:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d116      	bne.n	8004b9c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b6e:	4b43      	ldr	r3, [pc, #268]	@ (8004c7c <HAL_RCC_OscConfig+0x26c>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f003 0302 	and.w	r3, r3, #2
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d005      	beq.n	8004b86 <HAL_RCC_OscConfig+0x176>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	691b      	ldr	r3, [r3, #16]
 8004b7e:	2b01      	cmp	r3, #1
 8004b80:	d001      	beq.n	8004b86 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004b82:	2301      	movs	r3, #1
 8004b84:	e1c0      	b.n	8004f08 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b86:	4b3d      	ldr	r3, [pc, #244]	@ (8004c7c <HAL_RCC_OscConfig+0x26c>)
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	695b      	ldr	r3, [r3, #20]
 8004b92:	00db      	lsls	r3, r3, #3
 8004b94:	4939      	ldr	r1, [pc, #228]	@ (8004c7c <HAL_RCC_OscConfig+0x26c>)
 8004b96:	4313      	orrs	r3, r2
 8004b98:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b9a:	e03a      	b.n	8004c12 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	691b      	ldr	r3, [r3, #16]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d020      	beq.n	8004be6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004ba4:	4b36      	ldr	r3, [pc, #216]	@ (8004c80 <HAL_RCC_OscConfig+0x270>)
 8004ba6:	2201      	movs	r2, #1
 8004ba8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004baa:	f7fe fa29 	bl	8003000 <HAL_GetTick>
 8004bae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bb0:	e008      	b.n	8004bc4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004bb2:	f7fe fa25 	bl	8003000 <HAL_GetTick>
 8004bb6:	4602      	mov	r2, r0
 8004bb8:	693b      	ldr	r3, [r7, #16]
 8004bba:	1ad3      	subs	r3, r2, r3
 8004bbc:	2b02      	cmp	r3, #2
 8004bbe:	d901      	bls.n	8004bc4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004bc0:	2303      	movs	r3, #3
 8004bc2:	e1a1      	b.n	8004f08 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bc4:	4b2d      	ldr	r3, [pc, #180]	@ (8004c7c <HAL_RCC_OscConfig+0x26c>)
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f003 0302 	and.w	r3, r3, #2
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d0f0      	beq.n	8004bb2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bd0:	4b2a      	ldr	r3, [pc, #168]	@ (8004c7c <HAL_RCC_OscConfig+0x26c>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	695b      	ldr	r3, [r3, #20]
 8004bdc:	00db      	lsls	r3, r3, #3
 8004bde:	4927      	ldr	r1, [pc, #156]	@ (8004c7c <HAL_RCC_OscConfig+0x26c>)
 8004be0:	4313      	orrs	r3, r2
 8004be2:	600b      	str	r3, [r1, #0]
 8004be4:	e015      	b.n	8004c12 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004be6:	4b26      	ldr	r3, [pc, #152]	@ (8004c80 <HAL_RCC_OscConfig+0x270>)
 8004be8:	2200      	movs	r2, #0
 8004bea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bec:	f7fe fa08 	bl	8003000 <HAL_GetTick>
 8004bf0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004bf2:	e008      	b.n	8004c06 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004bf4:	f7fe fa04 	bl	8003000 <HAL_GetTick>
 8004bf8:	4602      	mov	r2, r0
 8004bfa:	693b      	ldr	r3, [r7, #16]
 8004bfc:	1ad3      	subs	r3, r2, r3
 8004bfe:	2b02      	cmp	r3, #2
 8004c00:	d901      	bls.n	8004c06 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004c02:	2303      	movs	r3, #3
 8004c04:	e180      	b.n	8004f08 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c06:	4b1d      	ldr	r3, [pc, #116]	@ (8004c7c <HAL_RCC_OscConfig+0x26c>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f003 0302 	and.w	r3, r3, #2
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d1f0      	bne.n	8004bf4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f003 0308 	and.w	r3, r3, #8
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d03a      	beq.n	8004c94 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	699b      	ldr	r3, [r3, #24]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d019      	beq.n	8004c5a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004c26:	4b17      	ldr	r3, [pc, #92]	@ (8004c84 <HAL_RCC_OscConfig+0x274>)
 8004c28:	2201      	movs	r2, #1
 8004c2a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c2c:	f7fe f9e8 	bl	8003000 <HAL_GetTick>
 8004c30:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c32:	e008      	b.n	8004c46 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c34:	f7fe f9e4 	bl	8003000 <HAL_GetTick>
 8004c38:	4602      	mov	r2, r0
 8004c3a:	693b      	ldr	r3, [r7, #16]
 8004c3c:	1ad3      	subs	r3, r2, r3
 8004c3e:	2b02      	cmp	r3, #2
 8004c40:	d901      	bls.n	8004c46 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004c42:	2303      	movs	r3, #3
 8004c44:	e160      	b.n	8004f08 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c46:	4b0d      	ldr	r3, [pc, #52]	@ (8004c7c <HAL_RCC_OscConfig+0x26c>)
 8004c48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c4a:	f003 0302 	and.w	r3, r3, #2
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d0f0      	beq.n	8004c34 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004c52:	2001      	movs	r0, #1
 8004c54:	f000 face 	bl	80051f4 <RCC_Delay>
 8004c58:	e01c      	b.n	8004c94 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004c5a:	4b0a      	ldr	r3, [pc, #40]	@ (8004c84 <HAL_RCC_OscConfig+0x274>)
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c60:	f7fe f9ce 	bl	8003000 <HAL_GetTick>
 8004c64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c66:	e00f      	b.n	8004c88 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c68:	f7fe f9ca 	bl	8003000 <HAL_GetTick>
 8004c6c:	4602      	mov	r2, r0
 8004c6e:	693b      	ldr	r3, [r7, #16]
 8004c70:	1ad3      	subs	r3, r2, r3
 8004c72:	2b02      	cmp	r3, #2
 8004c74:	d908      	bls.n	8004c88 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004c76:	2303      	movs	r3, #3
 8004c78:	e146      	b.n	8004f08 <HAL_RCC_OscConfig+0x4f8>
 8004c7a:	bf00      	nop
 8004c7c:	40021000 	.word	0x40021000
 8004c80:	42420000 	.word	0x42420000
 8004c84:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c88:	4b92      	ldr	r3, [pc, #584]	@ (8004ed4 <HAL_RCC_OscConfig+0x4c4>)
 8004c8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c8c:	f003 0302 	and.w	r3, r3, #2
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d1e9      	bne.n	8004c68 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f003 0304 	and.w	r3, r3, #4
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	f000 80a6 	beq.w	8004dee <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004ca6:	4b8b      	ldr	r3, [pc, #556]	@ (8004ed4 <HAL_RCC_OscConfig+0x4c4>)
 8004ca8:	69db      	ldr	r3, [r3, #28]
 8004caa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d10d      	bne.n	8004cce <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004cb2:	4b88      	ldr	r3, [pc, #544]	@ (8004ed4 <HAL_RCC_OscConfig+0x4c4>)
 8004cb4:	69db      	ldr	r3, [r3, #28]
 8004cb6:	4a87      	ldr	r2, [pc, #540]	@ (8004ed4 <HAL_RCC_OscConfig+0x4c4>)
 8004cb8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004cbc:	61d3      	str	r3, [r2, #28]
 8004cbe:	4b85      	ldr	r3, [pc, #532]	@ (8004ed4 <HAL_RCC_OscConfig+0x4c4>)
 8004cc0:	69db      	ldr	r3, [r3, #28]
 8004cc2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004cc6:	60bb      	str	r3, [r7, #8]
 8004cc8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004cca:	2301      	movs	r3, #1
 8004ccc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cce:	4b82      	ldr	r3, [pc, #520]	@ (8004ed8 <HAL_RCC_OscConfig+0x4c8>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d118      	bne.n	8004d0c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004cda:	4b7f      	ldr	r3, [pc, #508]	@ (8004ed8 <HAL_RCC_OscConfig+0x4c8>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	4a7e      	ldr	r2, [pc, #504]	@ (8004ed8 <HAL_RCC_OscConfig+0x4c8>)
 8004ce0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004ce4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004ce6:	f7fe f98b 	bl	8003000 <HAL_GetTick>
 8004cea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cec:	e008      	b.n	8004d00 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004cee:	f7fe f987 	bl	8003000 <HAL_GetTick>
 8004cf2:	4602      	mov	r2, r0
 8004cf4:	693b      	ldr	r3, [r7, #16]
 8004cf6:	1ad3      	subs	r3, r2, r3
 8004cf8:	2b64      	cmp	r3, #100	@ 0x64
 8004cfa:	d901      	bls.n	8004d00 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004cfc:	2303      	movs	r3, #3
 8004cfe:	e103      	b.n	8004f08 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d00:	4b75      	ldr	r3, [pc, #468]	@ (8004ed8 <HAL_RCC_OscConfig+0x4c8>)
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d0f0      	beq.n	8004cee <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	68db      	ldr	r3, [r3, #12]
 8004d10:	2b01      	cmp	r3, #1
 8004d12:	d106      	bne.n	8004d22 <HAL_RCC_OscConfig+0x312>
 8004d14:	4b6f      	ldr	r3, [pc, #444]	@ (8004ed4 <HAL_RCC_OscConfig+0x4c4>)
 8004d16:	6a1b      	ldr	r3, [r3, #32]
 8004d18:	4a6e      	ldr	r2, [pc, #440]	@ (8004ed4 <HAL_RCC_OscConfig+0x4c4>)
 8004d1a:	f043 0301 	orr.w	r3, r3, #1
 8004d1e:	6213      	str	r3, [r2, #32]
 8004d20:	e02d      	b.n	8004d7e <HAL_RCC_OscConfig+0x36e>
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	68db      	ldr	r3, [r3, #12]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d10c      	bne.n	8004d44 <HAL_RCC_OscConfig+0x334>
 8004d2a:	4b6a      	ldr	r3, [pc, #424]	@ (8004ed4 <HAL_RCC_OscConfig+0x4c4>)
 8004d2c:	6a1b      	ldr	r3, [r3, #32]
 8004d2e:	4a69      	ldr	r2, [pc, #420]	@ (8004ed4 <HAL_RCC_OscConfig+0x4c4>)
 8004d30:	f023 0301 	bic.w	r3, r3, #1
 8004d34:	6213      	str	r3, [r2, #32]
 8004d36:	4b67      	ldr	r3, [pc, #412]	@ (8004ed4 <HAL_RCC_OscConfig+0x4c4>)
 8004d38:	6a1b      	ldr	r3, [r3, #32]
 8004d3a:	4a66      	ldr	r2, [pc, #408]	@ (8004ed4 <HAL_RCC_OscConfig+0x4c4>)
 8004d3c:	f023 0304 	bic.w	r3, r3, #4
 8004d40:	6213      	str	r3, [r2, #32]
 8004d42:	e01c      	b.n	8004d7e <HAL_RCC_OscConfig+0x36e>
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	68db      	ldr	r3, [r3, #12]
 8004d48:	2b05      	cmp	r3, #5
 8004d4a:	d10c      	bne.n	8004d66 <HAL_RCC_OscConfig+0x356>
 8004d4c:	4b61      	ldr	r3, [pc, #388]	@ (8004ed4 <HAL_RCC_OscConfig+0x4c4>)
 8004d4e:	6a1b      	ldr	r3, [r3, #32]
 8004d50:	4a60      	ldr	r2, [pc, #384]	@ (8004ed4 <HAL_RCC_OscConfig+0x4c4>)
 8004d52:	f043 0304 	orr.w	r3, r3, #4
 8004d56:	6213      	str	r3, [r2, #32]
 8004d58:	4b5e      	ldr	r3, [pc, #376]	@ (8004ed4 <HAL_RCC_OscConfig+0x4c4>)
 8004d5a:	6a1b      	ldr	r3, [r3, #32]
 8004d5c:	4a5d      	ldr	r2, [pc, #372]	@ (8004ed4 <HAL_RCC_OscConfig+0x4c4>)
 8004d5e:	f043 0301 	orr.w	r3, r3, #1
 8004d62:	6213      	str	r3, [r2, #32]
 8004d64:	e00b      	b.n	8004d7e <HAL_RCC_OscConfig+0x36e>
 8004d66:	4b5b      	ldr	r3, [pc, #364]	@ (8004ed4 <HAL_RCC_OscConfig+0x4c4>)
 8004d68:	6a1b      	ldr	r3, [r3, #32]
 8004d6a:	4a5a      	ldr	r2, [pc, #360]	@ (8004ed4 <HAL_RCC_OscConfig+0x4c4>)
 8004d6c:	f023 0301 	bic.w	r3, r3, #1
 8004d70:	6213      	str	r3, [r2, #32]
 8004d72:	4b58      	ldr	r3, [pc, #352]	@ (8004ed4 <HAL_RCC_OscConfig+0x4c4>)
 8004d74:	6a1b      	ldr	r3, [r3, #32]
 8004d76:	4a57      	ldr	r2, [pc, #348]	@ (8004ed4 <HAL_RCC_OscConfig+0x4c4>)
 8004d78:	f023 0304 	bic.w	r3, r3, #4
 8004d7c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	68db      	ldr	r3, [r3, #12]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d015      	beq.n	8004db2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d86:	f7fe f93b 	bl	8003000 <HAL_GetTick>
 8004d8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d8c:	e00a      	b.n	8004da4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d8e:	f7fe f937 	bl	8003000 <HAL_GetTick>
 8004d92:	4602      	mov	r2, r0
 8004d94:	693b      	ldr	r3, [r7, #16]
 8004d96:	1ad3      	subs	r3, r2, r3
 8004d98:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d901      	bls.n	8004da4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004da0:	2303      	movs	r3, #3
 8004da2:	e0b1      	b.n	8004f08 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004da4:	4b4b      	ldr	r3, [pc, #300]	@ (8004ed4 <HAL_RCC_OscConfig+0x4c4>)
 8004da6:	6a1b      	ldr	r3, [r3, #32]
 8004da8:	f003 0302 	and.w	r3, r3, #2
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d0ee      	beq.n	8004d8e <HAL_RCC_OscConfig+0x37e>
 8004db0:	e014      	b.n	8004ddc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004db2:	f7fe f925 	bl	8003000 <HAL_GetTick>
 8004db6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004db8:	e00a      	b.n	8004dd0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004dba:	f7fe f921 	bl	8003000 <HAL_GetTick>
 8004dbe:	4602      	mov	r2, r0
 8004dc0:	693b      	ldr	r3, [r7, #16]
 8004dc2:	1ad3      	subs	r3, r2, r3
 8004dc4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	d901      	bls.n	8004dd0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004dcc:	2303      	movs	r3, #3
 8004dce:	e09b      	b.n	8004f08 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004dd0:	4b40      	ldr	r3, [pc, #256]	@ (8004ed4 <HAL_RCC_OscConfig+0x4c4>)
 8004dd2:	6a1b      	ldr	r3, [r3, #32]
 8004dd4:	f003 0302 	and.w	r3, r3, #2
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d1ee      	bne.n	8004dba <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004ddc:	7dfb      	ldrb	r3, [r7, #23]
 8004dde:	2b01      	cmp	r3, #1
 8004de0:	d105      	bne.n	8004dee <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004de2:	4b3c      	ldr	r3, [pc, #240]	@ (8004ed4 <HAL_RCC_OscConfig+0x4c4>)
 8004de4:	69db      	ldr	r3, [r3, #28]
 8004de6:	4a3b      	ldr	r2, [pc, #236]	@ (8004ed4 <HAL_RCC_OscConfig+0x4c4>)
 8004de8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004dec:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	69db      	ldr	r3, [r3, #28]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	f000 8087 	beq.w	8004f06 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004df8:	4b36      	ldr	r3, [pc, #216]	@ (8004ed4 <HAL_RCC_OscConfig+0x4c4>)
 8004dfa:	685b      	ldr	r3, [r3, #4]
 8004dfc:	f003 030c 	and.w	r3, r3, #12
 8004e00:	2b08      	cmp	r3, #8
 8004e02:	d061      	beq.n	8004ec8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	69db      	ldr	r3, [r3, #28]
 8004e08:	2b02      	cmp	r3, #2
 8004e0a:	d146      	bne.n	8004e9a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e0c:	4b33      	ldr	r3, [pc, #204]	@ (8004edc <HAL_RCC_OscConfig+0x4cc>)
 8004e0e:	2200      	movs	r2, #0
 8004e10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e12:	f7fe f8f5 	bl	8003000 <HAL_GetTick>
 8004e16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004e18:	e008      	b.n	8004e2c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e1a:	f7fe f8f1 	bl	8003000 <HAL_GetTick>
 8004e1e:	4602      	mov	r2, r0
 8004e20:	693b      	ldr	r3, [r7, #16]
 8004e22:	1ad3      	subs	r3, r2, r3
 8004e24:	2b02      	cmp	r3, #2
 8004e26:	d901      	bls.n	8004e2c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004e28:	2303      	movs	r3, #3
 8004e2a:	e06d      	b.n	8004f08 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004e2c:	4b29      	ldr	r3, [pc, #164]	@ (8004ed4 <HAL_RCC_OscConfig+0x4c4>)
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d1f0      	bne.n	8004e1a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	6a1b      	ldr	r3, [r3, #32]
 8004e3c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004e40:	d108      	bne.n	8004e54 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004e42:	4b24      	ldr	r3, [pc, #144]	@ (8004ed4 <HAL_RCC_OscConfig+0x4c4>)
 8004e44:	685b      	ldr	r3, [r3, #4]
 8004e46:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	689b      	ldr	r3, [r3, #8]
 8004e4e:	4921      	ldr	r1, [pc, #132]	@ (8004ed4 <HAL_RCC_OscConfig+0x4c4>)
 8004e50:	4313      	orrs	r3, r2
 8004e52:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004e54:	4b1f      	ldr	r3, [pc, #124]	@ (8004ed4 <HAL_RCC_OscConfig+0x4c4>)
 8004e56:	685b      	ldr	r3, [r3, #4]
 8004e58:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6a19      	ldr	r1, [r3, #32]
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e64:	430b      	orrs	r3, r1
 8004e66:	491b      	ldr	r1, [pc, #108]	@ (8004ed4 <HAL_RCC_OscConfig+0x4c4>)
 8004e68:	4313      	orrs	r3, r2
 8004e6a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004e6c:	4b1b      	ldr	r3, [pc, #108]	@ (8004edc <HAL_RCC_OscConfig+0x4cc>)
 8004e6e:	2201      	movs	r2, #1
 8004e70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e72:	f7fe f8c5 	bl	8003000 <HAL_GetTick>
 8004e76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004e78:	e008      	b.n	8004e8c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e7a:	f7fe f8c1 	bl	8003000 <HAL_GetTick>
 8004e7e:	4602      	mov	r2, r0
 8004e80:	693b      	ldr	r3, [r7, #16]
 8004e82:	1ad3      	subs	r3, r2, r3
 8004e84:	2b02      	cmp	r3, #2
 8004e86:	d901      	bls.n	8004e8c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004e88:	2303      	movs	r3, #3
 8004e8a:	e03d      	b.n	8004f08 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004e8c:	4b11      	ldr	r3, [pc, #68]	@ (8004ed4 <HAL_RCC_OscConfig+0x4c4>)
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d0f0      	beq.n	8004e7a <HAL_RCC_OscConfig+0x46a>
 8004e98:	e035      	b.n	8004f06 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e9a:	4b10      	ldr	r3, [pc, #64]	@ (8004edc <HAL_RCC_OscConfig+0x4cc>)
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ea0:	f7fe f8ae 	bl	8003000 <HAL_GetTick>
 8004ea4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004ea6:	e008      	b.n	8004eba <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ea8:	f7fe f8aa 	bl	8003000 <HAL_GetTick>
 8004eac:	4602      	mov	r2, r0
 8004eae:	693b      	ldr	r3, [r7, #16]
 8004eb0:	1ad3      	subs	r3, r2, r3
 8004eb2:	2b02      	cmp	r3, #2
 8004eb4:	d901      	bls.n	8004eba <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004eb6:	2303      	movs	r3, #3
 8004eb8:	e026      	b.n	8004f08 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004eba:	4b06      	ldr	r3, [pc, #24]	@ (8004ed4 <HAL_RCC_OscConfig+0x4c4>)
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d1f0      	bne.n	8004ea8 <HAL_RCC_OscConfig+0x498>
 8004ec6:	e01e      	b.n	8004f06 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	69db      	ldr	r3, [r3, #28]
 8004ecc:	2b01      	cmp	r3, #1
 8004ece:	d107      	bne.n	8004ee0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004ed0:	2301      	movs	r3, #1
 8004ed2:	e019      	b.n	8004f08 <HAL_RCC_OscConfig+0x4f8>
 8004ed4:	40021000 	.word	0x40021000
 8004ed8:	40007000 	.word	0x40007000
 8004edc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004ee0:	4b0b      	ldr	r3, [pc, #44]	@ (8004f10 <HAL_RCC_OscConfig+0x500>)
 8004ee2:	685b      	ldr	r3, [r3, #4]
 8004ee4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6a1b      	ldr	r3, [r3, #32]
 8004ef0:	429a      	cmp	r2, r3
 8004ef2:	d106      	bne.n	8004f02 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004efe:	429a      	cmp	r2, r3
 8004f00:	d001      	beq.n	8004f06 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004f02:	2301      	movs	r3, #1
 8004f04:	e000      	b.n	8004f08 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004f06:	2300      	movs	r3, #0
}
 8004f08:	4618      	mov	r0, r3
 8004f0a:	3718      	adds	r7, #24
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	bd80      	pop	{r7, pc}
 8004f10:	40021000 	.word	0x40021000

08004f14 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b084      	sub	sp, #16
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
 8004f1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d101      	bne.n	8004f28 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004f24:	2301      	movs	r3, #1
 8004f26:	e0d0      	b.n	80050ca <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004f28:	4b6a      	ldr	r3, [pc, #424]	@ (80050d4 <HAL_RCC_ClockConfig+0x1c0>)
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f003 0307 	and.w	r3, r3, #7
 8004f30:	683a      	ldr	r2, [r7, #0]
 8004f32:	429a      	cmp	r2, r3
 8004f34:	d910      	bls.n	8004f58 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f36:	4b67      	ldr	r3, [pc, #412]	@ (80050d4 <HAL_RCC_ClockConfig+0x1c0>)
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f023 0207 	bic.w	r2, r3, #7
 8004f3e:	4965      	ldr	r1, [pc, #404]	@ (80050d4 <HAL_RCC_ClockConfig+0x1c0>)
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	4313      	orrs	r3, r2
 8004f44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f46:	4b63      	ldr	r3, [pc, #396]	@ (80050d4 <HAL_RCC_ClockConfig+0x1c0>)
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f003 0307 	and.w	r3, r3, #7
 8004f4e:	683a      	ldr	r2, [r7, #0]
 8004f50:	429a      	cmp	r2, r3
 8004f52:	d001      	beq.n	8004f58 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004f54:	2301      	movs	r3, #1
 8004f56:	e0b8      	b.n	80050ca <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f003 0302 	and.w	r3, r3, #2
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d020      	beq.n	8004fa6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f003 0304 	and.w	r3, r3, #4
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d005      	beq.n	8004f7c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004f70:	4b59      	ldr	r3, [pc, #356]	@ (80050d8 <HAL_RCC_ClockConfig+0x1c4>)
 8004f72:	685b      	ldr	r3, [r3, #4]
 8004f74:	4a58      	ldr	r2, [pc, #352]	@ (80050d8 <HAL_RCC_ClockConfig+0x1c4>)
 8004f76:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004f7a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f003 0308 	and.w	r3, r3, #8
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d005      	beq.n	8004f94 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004f88:	4b53      	ldr	r3, [pc, #332]	@ (80050d8 <HAL_RCC_ClockConfig+0x1c4>)
 8004f8a:	685b      	ldr	r3, [r3, #4]
 8004f8c:	4a52      	ldr	r2, [pc, #328]	@ (80050d8 <HAL_RCC_ClockConfig+0x1c4>)
 8004f8e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8004f92:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f94:	4b50      	ldr	r3, [pc, #320]	@ (80050d8 <HAL_RCC_ClockConfig+0x1c4>)
 8004f96:	685b      	ldr	r3, [r3, #4]
 8004f98:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	689b      	ldr	r3, [r3, #8]
 8004fa0:	494d      	ldr	r1, [pc, #308]	@ (80050d8 <HAL_RCC_ClockConfig+0x1c4>)
 8004fa2:	4313      	orrs	r3, r2
 8004fa4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f003 0301 	and.w	r3, r3, #1
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d040      	beq.n	8005034 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	685b      	ldr	r3, [r3, #4]
 8004fb6:	2b01      	cmp	r3, #1
 8004fb8:	d107      	bne.n	8004fca <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004fba:	4b47      	ldr	r3, [pc, #284]	@ (80050d8 <HAL_RCC_ClockConfig+0x1c4>)
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d115      	bne.n	8004ff2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004fc6:	2301      	movs	r3, #1
 8004fc8:	e07f      	b.n	80050ca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	685b      	ldr	r3, [r3, #4]
 8004fce:	2b02      	cmp	r3, #2
 8004fd0:	d107      	bne.n	8004fe2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004fd2:	4b41      	ldr	r3, [pc, #260]	@ (80050d8 <HAL_RCC_ClockConfig+0x1c4>)
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d109      	bne.n	8004ff2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004fde:	2301      	movs	r3, #1
 8004fe0:	e073      	b.n	80050ca <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004fe2:	4b3d      	ldr	r3, [pc, #244]	@ (80050d8 <HAL_RCC_ClockConfig+0x1c4>)
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f003 0302 	and.w	r3, r3, #2
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d101      	bne.n	8004ff2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004fee:	2301      	movs	r3, #1
 8004ff0:	e06b      	b.n	80050ca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004ff2:	4b39      	ldr	r3, [pc, #228]	@ (80050d8 <HAL_RCC_ClockConfig+0x1c4>)
 8004ff4:	685b      	ldr	r3, [r3, #4]
 8004ff6:	f023 0203 	bic.w	r2, r3, #3
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	685b      	ldr	r3, [r3, #4]
 8004ffe:	4936      	ldr	r1, [pc, #216]	@ (80050d8 <HAL_RCC_ClockConfig+0x1c4>)
 8005000:	4313      	orrs	r3, r2
 8005002:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005004:	f7fd fffc 	bl	8003000 <HAL_GetTick>
 8005008:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800500a:	e00a      	b.n	8005022 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800500c:	f7fd fff8 	bl	8003000 <HAL_GetTick>
 8005010:	4602      	mov	r2, r0
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	1ad3      	subs	r3, r2, r3
 8005016:	f241 3288 	movw	r2, #5000	@ 0x1388
 800501a:	4293      	cmp	r3, r2
 800501c:	d901      	bls.n	8005022 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800501e:	2303      	movs	r3, #3
 8005020:	e053      	b.n	80050ca <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005022:	4b2d      	ldr	r3, [pc, #180]	@ (80050d8 <HAL_RCC_ClockConfig+0x1c4>)
 8005024:	685b      	ldr	r3, [r3, #4]
 8005026:	f003 020c 	and.w	r2, r3, #12
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	685b      	ldr	r3, [r3, #4]
 800502e:	009b      	lsls	r3, r3, #2
 8005030:	429a      	cmp	r2, r3
 8005032:	d1eb      	bne.n	800500c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005034:	4b27      	ldr	r3, [pc, #156]	@ (80050d4 <HAL_RCC_ClockConfig+0x1c0>)
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f003 0307 	and.w	r3, r3, #7
 800503c:	683a      	ldr	r2, [r7, #0]
 800503e:	429a      	cmp	r2, r3
 8005040:	d210      	bcs.n	8005064 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005042:	4b24      	ldr	r3, [pc, #144]	@ (80050d4 <HAL_RCC_ClockConfig+0x1c0>)
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f023 0207 	bic.w	r2, r3, #7
 800504a:	4922      	ldr	r1, [pc, #136]	@ (80050d4 <HAL_RCC_ClockConfig+0x1c0>)
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	4313      	orrs	r3, r2
 8005050:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005052:	4b20      	ldr	r3, [pc, #128]	@ (80050d4 <HAL_RCC_ClockConfig+0x1c0>)
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f003 0307 	and.w	r3, r3, #7
 800505a:	683a      	ldr	r2, [r7, #0]
 800505c:	429a      	cmp	r2, r3
 800505e:	d001      	beq.n	8005064 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005060:	2301      	movs	r3, #1
 8005062:	e032      	b.n	80050ca <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f003 0304 	and.w	r3, r3, #4
 800506c:	2b00      	cmp	r3, #0
 800506e:	d008      	beq.n	8005082 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005070:	4b19      	ldr	r3, [pc, #100]	@ (80050d8 <HAL_RCC_ClockConfig+0x1c4>)
 8005072:	685b      	ldr	r3, [r3, #4]
 8005074:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	68db      	ldr	r3, [r3, #12]
 800507c:	4916      	ldr	r1, [pc, #88]	@ (80050d8 <HAL_RCC_ClockConfig+0x1c4>)
 800507e:	4313      	orrs	r3, r2
 8005080:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f003 0308 	and.w	r3, r3, #8
 800508a:	2b00      	cmp	r3, #0
 800508c:	d009      	beq.n	80050a2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800508e:	4b12      	ldr	r3, [pc, #72]	@ (80050d8 <HAL_RCC_ClockConfig+0x1c4>)
 8005090:	685b      	ldr	r3, [r3, #4]
 8005092:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	691b      	ldr	r3, [r3, #16]
 800509a:	00db      	lsls	r3, r3, #3
 800509c:	490e      	ldr	r1, [pc, #56]	@ (80050d8 <HAL_RCC_ClockConfig+0x1c4>)
 800509e:	4313      	orrs	r3, r2
 80050a0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80050a2:	f000 f821 	bl	80050e8 <HAL_RCC_GetSysClockFreq>
 80050a6:	4602      	mov	r2, r0
 80050a8:	4b0b      	ldr	r3, [pc, #44]	@ (80050d8 <HAL_RCC_ClockConfig+0x1c4>)
 80050aa:	685b      	ldr	r3, [r3, #4]
 80050ac:	091b      	lsrs	r3, r3, #4
 80050ae:	f003 030f 	and.w	r3, r3, #15
 80050b2:	490a      	ldr	r1, [pc, #40]	@ (80050dc <HAL_RCC_ClockConfig+0x1c8>)
 80050b4:	5ccb      	ldrb	r3, [r1, r3]
 80050b6:	fa22 f303 	lsr.w	r3, r2, r3
 80050ba:	4a09      	ldr	r2, [pc, #36]	@ (80050e0 <HAL_RCC_ClockConfig+0x1cc>)
 80050bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80050be:	4b09      	ldr	r3, [pc, #36]	@ (80050e4 <HAL_RCC_ClockConfig+0x1d0>)
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	4618      	mov	r0, r3
 80050c4:	f7fd ff5a 	bl	8002f7c <HAL_InitTick>

  return HAL_OK;
 80050c8:	2300      	movs	r3, #0
}
 80050ca:	4618      	mov	r0, r3
 80050cc:	3710      	adds	r7, #16
 80050ce:	46bd      	mov	sp, r7
 80050d0:	bd80      	pop	{r7, pc}
 80050d2:	bf00      	nop
 80050d4:	40022000 	.word	0x40022000
 80050d8:	40021000 	.word	0x40021000
 80050dc:	0800aba0 	.word	0x0800aba0
 80050e0:	20000004 	.word	0x20000004
 80050e4:	20000008 	.word	0x20000008

080050e8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80050e8:	b480      	push	{r7}
 80050ea:	b087      	sub	sp, #28
 80050ec:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80050ee:	2300      	movs	r3, #0
 80050f0:	60fb      	str	r3, [r7, #12]
 80050f2:	2300      	movs	r3, #0
 80050f4:	60bb      	str	r3, [r7, #8]
 80050f6:	2300      	movs	r3, #0
 80050f8:	617b      	str	r3, [r7, #20]
 80050fa:	2300      	movs	r3, #0
 80050fc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80050fe:	2300      	movs	r3, #0
 8005100:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005102:	4b1e      	ldr	r3, [pc, #120]	@ (800517c <HAL_RCC_GetSysClockFreq+0x94>)
 8005104:	685b      	ldr	r3, [r3, #4]
 8005106:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	f003 030c 	and.w	r3, r3, #12
 800510e:	2b04      	cmp	r3, #4
 8005110:	d002      	beq.n	8005118 <HAL_RCC_GetSysClockFreq+0x30>
 8005112:	2b08      	cmp	r3, #8
 8005114:	d003      	beq.n	800511e <HAL_RCC_GetSysClockFreq+0x36>
 8005116:	e027      	b.n	8005168 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005118:	4b19      	ldr	r3, [pc, #100]	@ (8005180 <HAL_RCC_GetSysClockFreq+0x98>)
 800511a:	613b      	str	r3, [r7, #16]
      break;
 800511c:	e027      	b.n	800516e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	0c9b      	lsrs	r3, r3, #18
 8005122:	f003 030f 	and.w	r3, r3, #15
 8005126:	4a17      	ldr	r2, [pc, #92]	@ (8005184 <HAL_RCC_GetSysClockFreq+0x9c>)
 8005128:	5cd3      	ldrb	r3, [r2, r3]
 800512a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005132:	2b00      	cmp	r3, #0
 8005134:	d010      	beq.n	8005158 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005136:	4b11      	ldr	r3, [pc, #68]	@ (800517c <HAL_RCC_GetSysClockFreq+0x94>)
 8005138:	685b      	ldr	r3, [r3, #4]
 800513a:	0c5b      	lsrs	r3, r3, #17
 800513c:	f003 0301 	and.w	r3, r3, #1
 8005140:	4a11      	ldr	r2, [pc, #68]	@ (8005188 <HAL_RCC_GetSysClockFreq+0xa0>)
 8005142:	5cd3      	ldrb	r3, [r2, r3]
 8005144:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	4a0d      	ldr	r2, [pc, #52]	@ (8005180 <HAL_RCC_GetSysClockFreq+0x98>)
 800514a:	fb03 f202 	mul.w	r2, r3, r2
 800514e:	68bb      	ldr	r3, [r7, #8]
 8005150:	fbb2 f3f3 	udiv	r3, r2, r3
 8005154:	617b      	str	r3, [r7, #20]
 8005156:	e004      	b.n	8005162 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	4a0c      	ldr	r2, [pc, #48]	@ (800518c <HAL_RCC_GetSysClockFreq+0xa4>)
 800515c:	fb02 f303 	mul.w	r3, r2, r3
 8005160:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8005162:	697b      	ldr	r3, [r7, #20]
 8005164:	613b      	str	r3, [r7, #16]
      break;
 8005166:	e002      	b.n	800516e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005168:	4b05      	ldr	r3, [pc, #20]	@ (8005180 <HAL_RCC_GetSysClockFreq+0x98>)
 800516a:	613b      	str	r3, [r7, #16]
      break;
 800516c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800516e:	693b      	ldr	r3, [r7, #16]
}
 8005170:	4618      	mov	r0, r3
 8005172:	371c      	adds	r7, #28
 8005174:	46bd      	mov	sp, r7
 8005176:	bc80      	pop	{r7}
 8005178:	4770      	bx	lr
 800517a:	bf00      	nop
 800517c:	40021000 	.word	0x40021000
 8005180:	007a1200 	.word	0x007a1200
 8005184:	0800abb8 	.word	0x0800abb8
 8005188:	0800abc8 	.word	0x0800abc8
 800518c:	003d0900 	.word	0x003d0900

08005190 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005190:	b480      	push	{r7}
 8005192:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005194:	4b02      	ldr	r3, [pc, #8]	@ (80051a0 <HAL_RCC_GetHCLKFreq+0x10>)
 8005196:	681b      	ldr	r3, [r3, #0]
}
 8005198:	4618      	mov	r0, r3
 800519a:	46bd      	mov	sp, r7
 800519c:	bc80      	pop	{r7}
 800519e:	4770      	bx	lr
 80051a0:	20000004 	.word	0x20000004

080051a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80051a8:	f7ff fff2 	bl	8005190 <HAL_RCC_GetHCLKFreq>
 80051ac:	4602      	mov	r2, r0
 80051ae:	4b05      	ldr	r3, [pc, #20]	@ (80051c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80051b0:	685b      	ldr	r3, [r3, #4]
 80051b2:	0a1b      	lsrs	r3, r3, #8
 80051b4:	f003 0307 	and.w	r3, r3, #7
 80051b8:	4903      	ldr	r1, [pc, #12]	@ (80051c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80051ba:	5ccb      	ldrb	r3, [r1, r3]
 80051bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80051c0:	4618      	mov	r0, r3
 80051c2:	bd80      	pop	{r7, pc}
 80051c4:	40021000 	.word	0x40021000
 80051c8:	0800abb0 	.word	0x0800abb0

080051cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80051cc:	b580      	push	{r7, lr}
 80051ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80051d0:	f7ff ffde 	bl	8005190 <HAL_RCC_GetHCLKFreq>
 80051d4:	4602      	mov	r2, r0
 80051d6:	4b05      	ldr	r3, [pc, #20]	@ (80051ec <HAL_RCC_GetPCLK2Freq+0x20>)
 80051d8:	685b      	ldr	r3, [r3, #4]
 80051da:	0adb      	lsrs	r3, r3, #11
 80051dc:	f003 0307 	and.w	r3, r3, #7
 80051e0:	4903      	ldr	r1, [pc, #12]	@ (80051f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80051e2:	5ccb      	ldrb	r3, [r1, r3]
 80051e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80051e8:	4618      	mov	r0, r3
 80051ea:	bd80      	pop	{r7, pc}
 80051ec:	40021000 	.word	0x40021000
 80051f0:	0800abb0 	.word	0x0800abb0

080051f4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80051f4:	b480      	push	{r7}
 80051f6:	b085      	sub	sp, #20
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80051fc:	4b0a      	ldr	r3, [pc, #40]	@ (8005228 <RCC_Delay+0x34>)
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	4a0a      	ldr	r2, [pc, #40]	@ (800522c <RCC_Delay+0x38>)
 8005202:	fba2 2303 	umull	r2, r3, r2, r3
 8005206:	0a5b      	lsrs	r3, r3, #9
 8005208:	687a      	ldr	r2, [r7, #4]
 800520a:	fb02 f303 	mul.w	r3, r2, r3
 800520e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005210:	bf00      	nop
  }
  while (Delay --);
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	1e5a      	subs	r2, r3, #1
 8005216:	60fa      	str	r2, [r7, #12]
 8005218:	2b00      	cmp	r3, #0
 800521a:	d1f9      	bne.n	8005210 <RCC_Delay+0x1c>
}
 800521c:	bf00      	nop
 800521e:	bf00      	nop
 8005220:	3714      	adds	r7, #20
 8005222:	46bd      	mov	sp, r7
 8005224:	bc80      	pop	{r7}
 8005226:	4770      	bx	lr
 8005228:	20000004 	.word	0x20000004
 800522c:	10624dd3 	.word	0x10624dd3

08005230 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005230:	b580      	push	{r7, lr}
 8005232:	b082      	sub	sp, #8
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d101      	bne.n	8005242 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800523e:	2301      	movs	r3, #1
 8005240:	e042      	b.n	80052c8 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005248:	b2db      	uxtb	r3, r3
 800524a:	2b00      	cmp	r3, #0
 800524c:	d106      	bne.n	800525c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	2200      	movs	r2, #0
 8005252:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005256:	6878      	ldr	r0, [r7, #4]
 8005258:	f7fd fc42 	bl	8002ae0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2224      	movs	r2, #36	@ 0x24
 8005260:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	68da      	ldr	r2, [r3, #12]
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005272:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005274:	6878      	ldr	r0, [r7, #4]
 8005276:	f000 fb81 	bl	800597c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	691a      	ldr	r2, [r3, #16]
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005288:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	695a      	ldr	r2, [r3, #20]
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005298:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	68da      	ldr	r2, [r3, #12]
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80052a8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	2200      	movs	r2, #0
 80052ae:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2220      	movs	r2, #32
 80052b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2220      	movs	r2, #32
 80052bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2200      	movs	r2, #0
 80052c4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80052c6:	2300      	movs	r3, #0
}
 80052c8:	4618      	mov	r0, r3
 80052ca:	3708      	adds	r7, #8
 80052cc:	46bd      	mov	sp, r7
 80052ce:	bd80      	pop	{r7, pc}

080052d0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b08a      	sub	sp, #40	@ 0x28
 80052d4:	af02      	add	r7, sp, #8
 80052d6:	60f8      	str	r0, [r7, #12]
 80052d8:	60b9      	str	r1, [r7, #8]
 80052da:	603b      	str	r3, [r7, #0]
 80052dc:	4613      	mov	r3, r2
 80052de:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80052e0:	2300      	movs	r3, #0
 80052e2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80052ea:	b2db      	uxtb	r3, r3
 80052ec:	2b20      	cmp	r3, #32
 80052ee:	d16d      	bne.n	80053cc <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80052f0:	68bb      	ldr	r3, [r7, #8]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d002      	beq.n	80052fc <HAL_UART_Transmit+0x2c>
 80052f6:	88fb      	ldrh	r3, [r7, #6]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d101      	bne.n	8005300 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80052fc:	2301      	movs	r3, #1
 80052fe:	e066      	b.n	80053ce <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	2200      	movs	r2, #0
 8005304:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	2221      	movs	r2, #33	@ 0x21
 800530a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800530e:	f7fd fe77 	bl	8003000 <HAL_GetTick>
 8005312:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	88fa      	ldrh	r2, [r7, #6]
 8005318:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	88fa      	ldrh	r2, [r7, #6]
 800531e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	689b      	ldr	r3, [r3, #8]
 8005324:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005328:	d108      	bne.n	800533c <HAL_UART_Transmit+0x6c>
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	691b      	ldr	r3, [r3, #16]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d104      	bne.n	800533c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005332:	2300      	movs	r3, #0
 8005334:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005336:	68bb      	ldr	r3, [r7, #8]
 8005338:	61bb      	str	r3, [r7, #24]
 800533a:	e003      	b.n	8005344 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800533c:	68bb      	ldr	r3, [r7, #8]
 800533e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005340:	2300      	movs	r3, #0
 8005342:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005344:	e02a      	b.n	800539c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	9300      	str	r3, [sp, #0]
 800534a:	697b      	ldr	r3, [r7, #20]
 800534c:	2200      	movs	r2, #0
 800534e:	2180      	movs	r1, #128	@ 0x80
 8005350:	68f8      	ldr	r0, [r7, #12]
 8005352:	f000 f980 	bl	8005656 <UART_WaitOnFlagUntilTimeout>
 8005356:	4603      	mov	r3, r0
 8005358:	2b00      	cmp	r3, #0
 800535a:	d001      	beq.n	8005360 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 800535c:	2303      	movs	r3, #3
 800535e:	e036      	b.n	80053ce <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8005360:	69fb      	ldr	r3, [r7, #28]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d10b      	bne.n	800537e <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005366:	69bb      	ldr	r3, [r7, #24]
 8005368:	881b      	ldrh	r3, [r3, #0]
 800536a:	461a      	mov	r2, r3
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005374:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005376:	69bb      	ldr	r3, [r7, #24]
 8005378:	3302      	adds	r3, #2
 800537a:	61bb      	str	r3, [r7, #24]
 800537c:	e007      	b.n	800538e <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800537e:	69fb      	ldr	r3, [r7, #28]
 8005380:	781a      	ldrb	r2, [r3, #0]
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005388:	69fb      	ldr	r3, [r7, #28]
 800538a:	3301      	adds	r3, #1
 800538c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005392:	b29b      	uxth	r3, r3
 8005394:	3b01      	subs	r3, #1
 8005396:	b29a      	uxth	r2, r3
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80053a0:	b29b      	uxth	r3, r3
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d1cf      	bne.n	8005346 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	9300      	str	r3, [sp, #0]
 80053aa:	697b      	ldr	r3, [r7, #20]
 80053ac:	2200      	movs	r2, #0
 80053ae:	2140      	movs	r1, #64	@ 0x40
 80053b0:	68f8      	ldr	r0, [r7, #12]
 80053b2:	f000 f950 	bl	8005656 <UART_WaitOnFlagUntilTimeout>
 80053b6:	4603      	mov	r3, r0
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d001      	beq.n	80053c0 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80053bc:	2303      	movs	r3, #3
 80053be:	e006      	b.n	80053ce <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	2220      	movs	r2, #32
 80053c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80053c8:	2300      	movs	r3, #0
 80053ca:	e000      	b.n	80053ce <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80053cc:	2302      	movs	r3, #2
  }
}
 80053ce:	4618      	mov	r0, r3
 80053d0:	3720      	adds	r7, #32
 80053d2:	46bd      	mov	sp, r7
 80053d4:	bd80      	pop	{r7, pc}

080053d6 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80053d6:	b580      	push	{r7, lr}
 80053d8:	b084      	sub	sp, #16
 80053da:	af00      	add	r7, sp, #0
 80053dc:	60f8      	str	r0, [r7, #12]
 80053de:	60b9      	str	r1, [r7, #8]
 80053e0:	4613      	mov	r3, r2
 80053e2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80053ea:	b2db      	uxtb	r3, r3
 80053ec:	2b20      	cmp	r3, #32
 80053ee:	d112      	bne.n	8005416 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80053f0:	68bb      	ldr	r3, [r7, #8]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d002      	beq.n	80053fc <HAL_UART_Receive_DMA+0x26>
 80053f6:	88fb      	ldrh	r3, [r7, #6]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d101      	bne.n	8005400 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80053fc:	2301      	movs	r3, #1
 80053fe:	e00b      	b.n	8005418 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	2200      	movs	r2, #0
 8005404:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8005406:	88fb      	ldrh	r3, [r7, #6]
 8005408:	461a      	mov	r2, r3
 800540a:	68b9      	ldr	r1, [r7, #8]
 800540c:	68f8      	ldr	r0, [r7, #12]
 800540e:	f000 f991 	bl	8005734 <UART_Start_Receive_DMA>
 8005412:	4603      	mov	r3, r0
 8005414:	e000      	b.n	8005418 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8005416:	2302      	movs	r3, #2
  }
}
 8005418:	4618      	mov	r0, r3
 800541a:	3710      	adds	r7, #16
 800541c:	46bd      	mov	sp, r7
 800541e:	bd80      	pop	{r7, pc}

08005420 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005420:	b480      	push	{r7}
 8005422:	b083      	sub	sp, #12
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8005428:	bf00      	nop
 800542a:	370c      	adds	r7, #12
 800542c:	46bd      	mov	sp, r7
 800542e:	bc80      	pop	{r7}
 8005430:	4770      	bx	lr

08005432 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005432:	b480      	push	{r7}
 8005434:	b083      	sub	sp, #12
 8005436:	af00      	add	r7, sp, #0
 8005438:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800543a:	bf00      	nop
 800543c:	370c      	adds	r7, #12
 800543e:	46bd      	mov	sp, r7
 8005440:	bc80      	pop	{r7}
 8005442:	4770      	bx	lr

08005444 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005444:	b480      	push	{r7}
 8005446:	b083      	sub	sp, #12
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
 800544c:	460b      	mov	r3, r1
 800544e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005450:	bf00      	nop
 8005452:	370c      	adds	r7, #12
 8005454:	46bd      	mov	sp, r7
 8005456:	bc80      	pop	{r7}
 8005458:	4770      	bx	lr

0800545a <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800545a:	b580      	push	{r7, lr}
 800545c:	b09c      	sub	sp, #112	@ 0x70
 800545e:	af00      	add	r7, sp, #0
 8005460:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005466:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f003 0320 	and.w	r3, r3, #32
 8005472:	2b00      	cmp	r3, #0
 8005474:	d172      	bne.n	800555c <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8005476:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005478:	2200      	movs	r2, #0
 800547a:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800547c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	330c      	adds	r3, #12
 8005482:	64fb      	str	r3, [r7, #76]	@ 0x4c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005484:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005486:	e853 3f00 	ldrex	r3, [r3]
 800548a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800548c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800548e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005492:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005494:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	330c      	adds	r3, #12
 800549a:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800549c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800549e:	657b      	str	r3, [r7, #84]	@ 0x54
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054a0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80054a2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80054a4:	e841 2300 	strex	r3, r2, [r1]
 80054a8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80054aa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d1e5      	bne.n	800547c <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054b0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	3314      	adds	r3, #20
 80054b6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054ba:	e853 3f00 	ldrex	r3, [r3]
 80054be:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80054c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80054c2:	f023 0301 	bic.w	r3, r3, #1
 80054c6:	667b      	str	r3, [r7, #100]	@ 0x64
 80054c8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	3314      	adds	r3, #20
 80054ce:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80054d0:	647a      	str	r2, [r7, #68]	@ 0x44
 80054d2:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054d4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80054d6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80054d8:	e841 2300 	strex	r3, r2, [r1]
 80054dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80054de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d1e5      	bne.n	80054b0 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80054e4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	3314      	adds	r3, #20
 80054ea:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054ee:	e853 3f00 	ldrex	r3, [r3]
 80054f2:	623b      	str	r3, [r7, #32]
   return(result);
 80054f4:	6a3b      	ldr	r3, [r7, #32]
 80054f6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80054fa:	663b      	str	r3, [r7, #96]	@ 0x60
 80054fc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	3314      	adds	r3, #20
 8005502:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8005504:	633a      	str	r2, [r7, #48]	@ 0x30
 8005506:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005508:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800550a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800550c:	e841 2300 	strex	r3, r2, [r1]
 8005510:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005512:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005514:	2b00      	cmp	r3, #0
 8005516:	d1e5      	bne.n	80054e4 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005518:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800551a:	2220      	movs	r2, #32
 800551c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005520:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005522:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005524:	2b01      	cmp	r3, #1
 8005526:	d119      	bne.n	800555c <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005528:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	330c      	adds	r3, #12
 800552e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005530:	693b      	ldr	r3, [r7, #16]
 8005532:	e853 3f00 	ldrex	r3, [r3]
 8005536:	60fb      	str	r3, [r7, #12]
   return(result);
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	f023 0310 	bic.w	r3, r3, #16
 800553e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005540:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	330c      	adds	r3, #12
 8005546:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8005548:	61fa      	str	r2, [r7, #28]
 800554a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800554c:	69b9      	ldr	r1, [r7, #24]
 800554e:	69fa      	ldr	r2, [r7, #28]
 8005550:	e841 2300 	strex	r3, r2, [r1]
 8005554:	617b      	str	r3, [r7, #20]
   return(result);
 8005556:	697b      	ldr	r3, [r7, #20]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d1e5      	bne.n	8005528 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800555c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800555e:	2200      	movs	r2, #0
 8005560:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005562:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005564:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005566:	2b01      	cmp	r3, #1
 8005568:	d106      	bne.n	8005578 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800556a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800556c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800556e:	4619      	mov	r1, r3
 8005570:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8005572:	f7ff ff67 	bl	8005444 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005576:	e002      	b.n	800557e <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8005578:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800557a:	f7fd f935 	bl	80027e8 <HAL_UART_RxCpltCallback>
}
 800557e:	bf00      	nop
 8005580:	3770      	adds	r7, #112	@ 0x70
 8005582:	46bd      	mov	sp, r7
 8005584:	bd80      	pop	{r7, pc}

08005586 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005586:	b580      	push	{r7, lr}
 8005588:	b084      	sub	sp, #16
 800558a:	af00      	add	r7, sp, #0
 800558c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005592:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	2201      	movs	r2, #1
 8005598:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800559e:	2b01      	cmp	r3, #1
 80055a0:	d108      	bne.n	80055b4 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80055a6:	085b      	lsrs	r3, r3, #1
 80055a8:	b29b      	uxth	r3, r3
 80055aa:	4619      	mov	r1, r3
 80055ac:	68f8      	ldr	r0, [r7, #12]
 80055ae:	f7ff ff49 	bl	8005444 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80055b2:	e002      	b.n	80055ba <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 80055b4:	68f8      	ldr	r0, [r7, #12]
 80055b6:	f7ff ff33 	bl	8005420 <HAL_UART_RxHalfCpltCallback>
}
 80055ba:	bf00      	nop
 80055bc:	3710      	adds	r7, #16
 80055be:	46bd      	mov	sp, r7
 80055c0:	bd80      	pop	{r7, pc}

080055c2 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80055c2:	b580      	push	{r7, lr}
 80055c4:	b084      	sub	sp, #16
 80055c6:	af00      	add	r7, sp, #0
 80055c8:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80055ca:	2300      	movs	r3, #0
 80055cc:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055d2:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80055d4:	68bb      	ldr	r3, [r7, #8]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	695b      	ldr	r3, [r3, #20]
 80055da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80055de:	2b00      	cmp	r3, #0
 80055e0:	bf14      	ite	ne
 80055e2:	2301      	movne	r3, #1
 80055e4:	2300      	moveq	r3, #0
 80055e6:	b2db      	uxtb	r3, r3
 80055e8:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80055ea:	68bb      	ldr	r3, [r7, #8]
 80055ec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80055f0:	b2db      	uxtb	r3, r3
 80055f2:	2b21      	cmp	r3, #33	@ 0x21
 80055f4:	d108      	bne.n	8005608 <UART_DMAError+0x46>
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d005      	beq.n	8005608 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80055fc:	68bb      	ldr	r3, [r7, #8]
 80055fe:	2200      	movs	r2, #0
 8005600:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8005602:	68b8      	ldr	r0, [r7, #8]
 8005604:	f000 f930 	bl	8005868 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005608:	68bb      	ldr	r3, [r7, #8]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	695b      	ldr	r3, [r3, #20]
 800560e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005612:	2b00      	cmp	r3, #0
 8005614:	bf14      	ite	ne
 8005616:	2301      	movne	r3, #1
 8005618:	2300      	moveq	r3, #0
 800561a:	b2db      	uxtb	r3, r3
 800561c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800561e:	68bb      	ldr	r3, [r7, #8]
 8005620:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005624:	b2db      	uxtb	r3, r3
 8005626:	2b22      	cmp	r3, #34	@ 0x22
 8005628:	d108      	bne.n	800563c <UART_DMAError+0x7a>
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	2b00      	cmp	r3, #0
 800562e:	d005      	beq.n	800563c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8005630:	68bb      	ldr	r3, [r7, #8]
 8005632:	2200      	movs	r2, #0
 8005634:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8005636:	68b8      	ldr	r0, [r7, #8]
 8005638:	f000 f93d 	bl	80058b6 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800563c:	68bb      	ldr	r3, [r7, #8]
 800563e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005640:	f043 0210 	orr.w	r2, r3, #16
 8005644:	68bb      	ldr	r3, [r7, #8]
 8005646:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005648:	68b8      	ldr	r0, [r7, #8]
 800564a:	f7ff fef2 	bl	8005432 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800564e:	bf00      	nop
 8005650:	3710      	adds	r7, #16
 8005652:	46bd      	mov	sp, r7
 8005654:	bd80      	pop	{r7, pc}

08005656 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005656:	b580      	push	{r7, lr}
 8005658:	b090      	sub	sp, #64	@ 0x40
 800565a:	af00      	add	r7, sp, #0
 800565c:	60f8      	str	r0, [r7, #12]
 800565e:	60b9      	str	r1, [r7, #8]
 8005660:	603b      	str	r3, [r7, #0]
 8005662:	4613      	mov	r3, r2
 8005664:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005666:	e050      	b.n	800570a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005668:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800566a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800566e:	d04c      	beq.n	800570a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005670:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005672:	2b00      	cmp	r3, #0
 8005674:	d007      	beq.n	8005686 <UART_WaitOnFlagUntilTimeout+0x30>
 8005676:	f7fd fcc3 	bl	8003000 <HAL_GetTick>
 800567a:	4602      	mov	r2, r0
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	1ad3      	subs	r3, r2, r3
 8005680:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005682:	429a      	cmp	r2, r3
 8005684:	d241      	bcs.n	800570a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	330c      	adds	r3, #12
 800568c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800568e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005690:	e853 3f00 	ldrex	r3, [r3]
 8005694:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005696:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005698:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800569c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	330c      	adds	r3, #12
 80056a4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80056a6:	637a      	str	r2, [r7, #52]	@ 0x34
 80056a8:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056aa:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80056ac:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80056ae:	e841 2300 	strex	r3, r2, [r1]
 80056b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80056b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d1e5      	bne.n	8005686 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	3314      	adds	r3, #20
 80056c0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056c2:	697b      	ldr	r3, [r7, #20]
 80056c4:	e853 3f00 	ldrex	r3, [r3]
 80056c8:	613b      	str	r3, [r7, #16]
   return(result);
 80056ca:	693b      	ldr	r3, [r7, #16]
 80056cc:	f023 0301 	bic.w	r3, r3, #1
 80056d0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	3314      	adds	r3, #20
 80056d8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80056da:	623a      	str	r2, [r7, #32]
 80056dc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056de:	69f9      	ldr	r1, [r7, #28]
 80056e0:	6a3a      	ldr	r2, [r7, #32]
 80056e2:	e841 2300 	strex	r3, r2, [r1]
 80056e6:	61bb      	str	r3, [r7, #24]
   return(result);
 80056e8:	69bb      	ldr	r3, [r7, #24]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d1e5      	bne.n	80056ba <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	2220      	movs	r2, #32
 80056f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	2220      	movs	r2, #32
 80056fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	2200      	movs	r2, #0
 8005702:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 8005706:	2303      	movs	r3, #3
 8005708:	e00f      	b.n	800572a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	681a      	ldr	r2, [r3, #0]
 8005710:	68bb      	ldr	r3, [r7, #8]
 8005712:	4013      	ands	r3, r2
 8005714:	68ba      	ldr	r2, [r7, #8]
 8005716:	429a      	cmp	r2, r3
 8005718:	bf0c      	ite	eq
 800571a:	2301      	moveq	r3, #1
 800571c:	2300      	movne	r3, #0
 800571e:	b2db      	uxtb	r3, r3
 8005720:	461a      	mov	r2, r3
 8005722:	79fb      	ldrb	r3, [r7, #7]
 8005724:	429a      	cmp	r2, r3
 8005726:	d09f      	beq.n	8005668 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005728:	2300      	movs	r3, #0
}
 800572a:	4618      	mov	r0, r3
 800572c:	3740      	adds	r7, #64	@ 0x40
 800572e:	46bd      	mov	sp, r7
 8005730:	bd80      	pop	{r7, pc}
	...

08005734 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005734:	b580      	push	{r7, lr}
 8005736:	b098      	sub	sp, #96	@ 0x60
 8005738:	af00      	add	r7, sp, #0
 800573a:	60f8      	str	r0, [r7, #12]
 800573c:	60b9      	str	r1, [r7, #8]
 800573e:	4613      	mov	r3, r2
 8005740:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8005742:	68ba      	ldr	r2, [r7, #8]
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	88fa      	ldrh	r2, [r7, #6]
 800574c:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	2200      	movs	r2, #0
 8005752:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	2222      	movs	r2, #34	@ 0x22
 8005758:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005760:	4a3e      	ldr	r2, [pc, #248]	@ (800585c <UART_Start_Receive_DMA+0x128>)
 8005762:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005768:	4a3d      	ldr	r2, [pc, #244]	@ (8005860 <UART_Start_Receive_DMA+0x12c>)
 800576a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005770:	4a3c      	ldr	r2, [pc, #240]	@ (8005864 <UART_Start_Receive_DMA+0x130>)
 8005772:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005778:	2200      	movs	r2, #0
 800577a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800577c:	f107 0308 	add.w	r3, r7, #8
 8005780:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	3304      	adds	r3, #4
 800578c:	4619      	mov	r1, r3
 800578e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005790:	681a      	ldr	r2, [r3, #0]
 8005792:	88fb      	ldrh	r3, [r7, #6]
 8005794:	f7fd fdca 	bl	800332c <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8005798:	2300      	movs	r3, #0
 800579a:	613b      	str	r3, [r7, #16]
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	613b      	str	r3, [r7, #16]
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	685b      	ldr	r3, [r3, #4]
 80057aa:	613b      	str	r3, [r7, #16]
 80057ac:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	691b      	ldr	r3, [r3, #16]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d019      	beq.n	80057ea <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	330c      	adds	r3, #12
 80057bc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80057c0:	e853 3f00 	ldrex	r3, [r3]
 80057c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80057c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80057c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80057cc:	65bb      	str	r3, [r7, #88]	@ 0x58
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	330c      	adds	r3, #12
 80057d4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80057d6:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80057d8:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057da:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80057dc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80057de:	e841 2300 	strex	r3, r2, [r1]
 80057e2:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80057e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d1e5      	bne.n	80057b6 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	3314      	adds	r3, #20
 80057f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057f4:	e853 3f00 	ldrex	r3, [r3]
 80057f8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80057fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057fc:	f043 0301 	orr.w	r3, r3, #1
 8005800:	657b      	str	r3, [r7, #84]	@ 0x54
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	3314      	adds	r3, #20
 8005808:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800580a:	63ba      	str	r2, [r7, #56]	@ 0x38
 800580c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800580e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8005810:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005812:	e841 2300 	strex	r3, r2, [r1]
 8005816:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005818:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800581a:	2b00      	cmp	r3, #0
 800581c:	d1e5      	bne.n	80057ea <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	3314      	adds	r3, #20
 8005824:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005826:	69bb      	ldr	r3, [r7, #24]
 8005828:	e853 3f00 	ldrex	r3, [r3]
 800582c:	617b      	str	r3, [r7, #20]
   return(result);
 800582e:	697b      	ldr	r3, [r7, #20]
 8005830:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005834:	653b      	str	r3, [r7, #80]	@ 0x50
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	3314      	adds	r3, #20
 800583c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800583e:	627a      	str	r2, [r7, #36]	@ 0x24
 8005840:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005842:	6a39      	ldr	r1, [r7, #32]
 8005844:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005846:	e841 2300 	strex	r3, r2, [r1]
 800584a:	61fb      	str	r3, [r7, #28]
   return(result);
 800584c:	69fb      	ldr	r3, [r7, #28]
 800584e:	2b00      	cmp	r3, #0
 8005850:	d1e5      	bne.n	800581e <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8005852:	2300      	movs	r3, #0
}
 8005854:	4618      	mov	r0, r3
 8005856:	3760      	adds	r7, #96	@ 0x60
 8005858:	46bd      	mov	sp, r7
 800585a:	bd80      	pop	{r7, pc}
 800585c:	0800545b 	.word	0x0800545b
 8005860:	08005587 	.word	0x08005587
 8005864:	080055c3 	.word	0x080055c3

08005868 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005868:	b480      	push	{r7}
 800586a:	b089      	sub	sp, #36	@ 0x24
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	330c      	adds	r3, #12
 8005876:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	e853 3f00 	ldrex	r3, [r3]
 800587e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005880:	68bb      	ldr	r3, [r7, #8]
 8005882:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8005886:	61fb      	str	r3, [r7, #28]
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	330c      	adds	r3, #12
 800588e:	69fa      	ldr	r2, [r7, #28]
 8005890:	61ba      	str	r2, [r7, #24]
 8005892:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005894:	6979      	ldr	r1, [r7, #20]
 8005896:	69ba      	ldr	r2, [r7, #24]
 8005898:	e841 2300 	strex	r3, r2, [r1]
 800589c:	613b      	str	r3, [r7, #16]
   return(result);
 800589e:	693b      	ldr	r3, [r7, #16]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d1e5      	bne.n	8005870 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2220      	movs	r2, #32
 80058a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 80058ac:	bf00      	nop
 80058ae:	3724      	adds	r7, #36	@ 0x24
 80058b0:	46bd      	mov	sp, r7
 80058b2:	bc80      	pop	{r7}
 80058b4:	4770      	bx	lr

080058b6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80058b6:	b480      	push	{r7}
 80058b8:	b095      	sub	sp, #84	@ 0x54
 80058ba:	af00      	add	r7, sp, #0
 80058bc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	330c      	adds	r3, #12
 80058c4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058c8:	e853 3f00 	ldrex	r3, [r3]
 80058cc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80058ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058d0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80058d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	330c      	adds	r3, #12
 80058dc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80058de:	643a      	str	r2, [r7, #64]	@ 0x40
 80058e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058e2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80058e4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80058e6:	e841 2300 	strex	r3, r2, [r1]
 80058ea:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80058ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d1e5      	bne.n	80058be <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	3314      	adds	r3, #20
 80058f8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058fa:	6a3b      	ldr	r3, [r7, #32]
 80058fc:	e853 3f00 	ldrex	r3, [r3]
 8005900:	61fb      	str	r3, [r7, #28]
   return(result);
 8005902:	69fb      	ldr	r3, [r7, #28]
 8005904:	f023 0301 	bic.w	r3, r3, #1
 8005908:	64bb      	str	r3, [r7, #72]	@ 0x48
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	3314      	adds	r3, #20
 8005910:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005912:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005914:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005916:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005918:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800591a:	e841 2300 	strex	r3, r2, [r1]
 800591e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005920:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005922:	2b00      	cmp	r3, #0
 8005924:	d1e5      	bne.n	80058f2 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800592a:	2b01      	cmp	r3, #1
 800592c:	d119      	bne.n	8005962 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	330c      	adds	r3, #12
 8005934:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	e853 3f00 	ldrex	r3, [r3]
 800593c:	60bb      	str	r3, [r7, #8]
   return(result);
 800593e:	68bb      	ldr	r3, [r7, #8]
 8005940:	f023 0310 	bic.w	r3, r3, #16
 8005944:	647b      	str	r3, [r7, #68]	@ 0x44
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	330c      	adds	r3, #12
 800594c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800594e:	61ba      	str	r2, [r7, #24]
 8005950:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005952:	6979      	ldr	r1, [r7, #20]
 8005954:	69ba      	ldr	r2, [r7, #24]
 8005956:	e841 2300 	strex	r3, r2, [r1]
 800595a:	613b      	str	r3, [r7, #16]
   return(result);
 800595c:	693b      	ldr	r3, [r7, #16]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d1e5      	bne.n	800592e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	2220      	movs	r2, #32
 8005966:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2200      	movs	r2, #0
 800596e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005970:	bf00      	nop
 8005972:	3754      	adds	r7, #84	@ 0x54
 8005974:	46bd      	mov	sp, r7
 8005976:	bc80      	pop	{r7}
 8005978:	4770      	bx	lr
	...

0800597c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800597c:	b580      	push	{r7, lr}
 800597e:	b084      	sub	sp, #16
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	691b      	ldr	r3, [r3, #16]
 800598a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	68da      	ldr	r2, [r3, #12]
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	430a      	orrs	r2, r1
 8005998:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	689a      	ldr	r2, [r3, #8]
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	691b      	ldr	r3, [r3, #16]
 80059a2:	431a      	orrs	r2, r3
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	695b      	ldr	r3, [r3, #20]
 80059a8:	4313      	orrs	r3, r2
 80059aa:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	68db      	ldr	r3, [r3, #12]
 80059b2:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80059b6:	f023 030c 	bic.w	r3, r3, #12
 80059ba:	687a      	ldr	r2, [r7, #4]
 80059bc:	6812      	ldr	r2, [r2, #0]
 80059be:	68b9      	ldr	r1, [r7, #8]
 80059c0:	430b      	orrs	r3, r1
 80059c2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	695b      	ldr	r3, [r3, #20]
 80059ca:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	699a      	ldr	r2, [r3, #24]
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	430a      	orrs	r2, r1
 80059d8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	4a2c      	ldr	r2, [pc, #176]	@ (8005a90 <UART_SetConfig+0x114>)
 80059e0:	4293      	cmp	r3, r2
 80059e2:	d103      	bne.n	80059ec <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80059e4:	f7ff fbf2 	bl	80051cc <HAL_RCC_GetPCLK2Freq>
 80059e8:	60f8      	str	r0, [r7, #12]
 80059ea:	e002      	b.n	80059f2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80059ec:	f7ff fbda 	bl	80051a4 <HAL_RCC_GetPCLK1Freq>
 80059f0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80059f2:	68fa      	ldr	r2, [r7, #12]
 80059f4:	4613      	mov	r3, r2
 80059f6:	009b      	lsls	r3, r3, #2
 80059f8:	4413      	add	r3, r2
 80059fa:	009a      	lsls	r2, r3, #2
 80059fc:	441a      	add	r2, r3
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	685b      	ldr	r3, [r3, #4]
 8005a02:	009b      	lsls	r3, r3, #2
 8005a04:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a08:	4a22      	ldr	r2, [pc, #136]	@ (8005a94 <UART_SetConfig+0x118>)
 8005a0a:	fba2 2303 	umull	r2, r3, r2, r3
 8005a0e:	095b      	lsrs	r3, r3, #5
 8005a10:	0119      	lsls	r1, r3, #4
 8005a12:	68fa      	ldr	r2, [r7, #12]
 8005a14:	4613      	mov	r3, r2
 8005a16:	009b      	lsls	r3, r3, #2
 8005a18:	4413      	add	r3, r2
 8005a1a:	009a      	lsls	r2, r3, #2
 8005a1c:	441a      	add	r2, r3
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	685b      	ldr	r3, [r3, #4]
 8005a22:	009b      	lsls	r3, r3, #2
 8005a24:	fbb2 f2f3 	udiv	r2, r2, r3
 8005a28:	4b1a      	ldr	r3, [pc, #104]	@ (8005a94 <UART_SetConfig+0x118>)
 8005a2a:	fba3 0302 	umull	r0, r3, r3, r2
 8005a2e:	095b      	lsrs	r3, r3, #5
 8005a30:	2064      	movs	r0, #100	@ 0x64
 8005a32:	fb00 f303 	mul.w	r3, r0, r3
 8005a36:	1ad3      	subs	r3, r2, r3
 8005a38:	011b      	lsls	r3, r3, #4
 8005a3a:	3332      	adds	r3, #50	@ 0x32
 8005a3c:	4a15      	ldr	r2, [pc, #84]	@ (8005a94 <UART_SetConfig+0x118>)
 8005a3e:	fba2 2303 	umull	r2, r3, r2, r3
 8005a42:	095b      	lsrs	r3, r3, #5
 8005a44:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005a48:	4419      	add	r1, r3
 8005a4a:	68fa      	ldr	r2, [r7, #12]
 8005a4c:	4613      	mov	r3, r2
 8005a4e:	009b      	lsls	r3, r3, #2
 8005a50:	4413      	add	r3, r2
 8005a52:	009a      	lsls	r2, r3, #2
 8005a54:	441a      	add	r2, r3
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	685b      	ldr	r3, [r3, #4]
 8005a5a:	009b      	lsls	r3, r3, #2
 8005a5c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005a60:	4b0c      	ldr	r3, [pc, #48]	@ (8005a94 <UART_SetConfig+0x118>)
 8005a62:	fba3 0302 	umull	r0, r3, r3, r2
 8005a66:	095b      	lsrs	r3, r3, #5
 8005a68:	2064      	movs	r0, #100	@ 0x64
 8005a6a:	fb00 f303 	mul.w	r3, r0, r3
 8005a6e:	1ad3      	subs	r3, r2, r3
 8005a70:	011b      	lsls	r3, r3, #4
 8005a72:	3332      	adds	r3, #50	@ 0x32
 8005a74:	4a07      	ldr	r2, [pc, #28]	@ (8005a94 <UART_SetConfig+0x118>)
 8005a76:	fba2 2303 	umull	r2, r3, r2, r3
 8005a7a:	095b      	lsrs	r3, r3, #5
 8005a7c:	f003 020f 	and.w	r2, r3, #15
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	440a      	add	r2, r1
 8005a86:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005a88:	bf00      	nop
 8005a8a:	3710      	adds	r7, #16
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	bd80      	pop	{r7, pc}
 8005a90:	40013800 	.word	0x40013800
 8005a94:	51eb851f 	.word	0x51eb851f

08005a98 <__cvt>:
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a9e:	461d      	mov	r5, r3
 8005aa0:	bfbb      	ittet	lt
 8005aa2:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8005aa6:	461d      	movlt	r5, r3
 8005aa8:	2300      	movge	r3, #0
 8005aaa:	232d      	movlt	r3, #45	@ 0x2d
 8005aac:	b088      	sub	sp, #32
 8005aae:	4614      	mov	r4, r2
 8005ab0:	bfb8      	it	lt
 8005ab2:	4614      	movlt	r4, r2
 8005ab4:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8005ab6:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8005ab8:	7013      	strb	r3, [r2, #0]
 8005aba:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005abc:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8005ac0:	f023 0820 	bic.w	r8, r3, #32
 8005ac4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005ac8:	d005      	beq.n	8005ad6 <__cvt+0x3e>
 8005aca:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8005ace:	d100      	bne.n	8005ad2 <__cvt+0x3a>
 8005ad0:	3601      	adds	r6, #1
 8005ad2:	2302      	movs	r3, #2
 8005ad4:	e000      	b.n	8005ad8 <__cvt+0x40>
 8005ad6:	2303      	movs	r3, #3
 8005ad8:	aa07      	add	r2, sp, #28
 8005ada:	9204      	str	r2, [sp, #16]
 8005adc:	aa06      	add	r2, sp, #24
 8005ade:	e9cd a202 	strd	sl, r2, [sp, #8]
 8005ae2:	e9cd 3600 	strd	r3, r6, [sp]
 8005ae6:	4622      	mov	r2, r4
 8005ae8:	462b      	mov	r3, r5
 8005aea:	f001 f8f9 	bl	8006ce0 <_dtoa_r>
 8005aee:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8005af2:	4607      	mov	r7, r0
 8005af4:	d119      	bne.n	8005b2a <__cvt+0x92>
 8005af6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8005af8:	07db      	lsls	r3, r3, #31
 8005afa:	d50e      	bpl.n	8005b1a <__cvt+0x82>
 8005afc:	eb00 0906 	add.w	r9, r0, r6
 8005b00:	2200      	movs	r2, #0
 8005b02:	2300      	movs	r3, #0
 8005b04:	4620      	mov	r0, r4
 8005b06:	4629      	mov	r1, r5
 8005b08:	f7fa ff4e 	bl	80009a8 <__aeabi_dcmpeq>
 8005b0c:	b108      	cbz	r0, 8005b12 <__cvt+0x7a>
 8005b0e:	f8cd 901c 	str.w	r9, [sp, #28]
 8005b12:	2230      	movs	r2, #48	@ 0x30
 8005b14:	9b07      	ldr	r3, [sp, #28]
 8005b16:	454b      	cmp	r3, r9
 8005b18:	d31e      	bcc.n	8005b58 <__cvt+0xc0>
 8005b1a:	4638      	mov	r0, r7
 8005b1c:	9b07      	ldr	r3, [sp, #28]
 8005b1e:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8005b20:	1bdb      	subs	r3, r3, r7
 8005b22:	6013      	str	r3, [r2, #0]
 8005b24:	b008      	add	sp, #32
 8005b26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b2a:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005b2e:	eb00 0906 	add.w	r9, r0, r6
 8005b32:	d1e5      	bne.n	8005b00 <__cvt+0x68>
 8005b34:	7803      	ldrb	r3, [r0, #0]
 8005b36:	2b30      	cmp	r3, #48	@ 0x30
 8005b38:	d10a      	bne.n	8005b50 <__cvt+0xb8>
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	2300      	movs	r3, #0
 8005b3e:	4620      	mov	r0, r4
 8005b40:	4629      	mov	r1, r5
 8005b42:	f7fa ff31 	bl	80009a8 <__aeabi_dcmpeq>
 8005b46:	b918      	cbnz	r0, 8005b50 <__cvt+0xb8>
 8005b48:	f1c6 0601 	rsb	r6, r6, #1
 8005b4c:	f8ca 6000 	str.w	r6, [sl]
 8005b50:	f8da 3000 	ldr.w	r3, [sl]
 8005b54:	4499      	add	r9, r3
 8005b56:	e7d3      	b.n	8005b00 <__cvt+0x68>
 8005b58:	1c59      	adds	r1, r3, #1
 8005b5a:	9107      	str	r1, [sp, #28]
 8005b5c:	701a      	strb	r2, [r3, #0]
 8005b5e:	e7d9      	b.n	8005b14 <__cvt+0x7c>

08005b60 <__exponent>:
 8005b60:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005b62:	2900      	cmp	r1, #0
 8005b64:	bfb6      	itet	lt
 8005b66:	232d      	movlt	r3, #45	@ 0x2d
 8005b68:	232b      	movge	r3, #43	@ 0x2b
 8005b6a:	4249      	neglt	r1, r1
 8005b6c:	2909      	cmp	r1, #9
 8005b6e:	7002      	strb	r2, [r0, #0]
 8005b70:	7043      	strb	r3, [r0, #1]
 8005b72:	dd29      	ble.n	8005bc8 <__exponent+0x68>
 8005b74:	f10d 0307 	add.w	r3, sp, #7
 8005b78:	461d      	mov	r5, r3
 8005b7a:	270a      	movs	r7, #10
 8005b7c:	fbb1 f6f7 	udiv	r6, r1, r7
 8005b80:	461a      	mov	r2, r3
 8005b82:	fb07 1416 	mls	r4, r7, r6, r1
 8005b86:	3430      	adds	r4, #48	@ 0x30
 8005b88:	f802 4c01 	strb.w	r4, [r2, #-1]
 8005b8c:	460c      	mov	r4, r1
 8005b8e:	2c63      	cmp	r4, #99	@ 0x63
 8005b90:	4631      	mov	r1, r6
 8005b92:	f103 33ff 	add.w	r3, r3, #4294967295
 8005b96:	dcf1      	bgt.n	8005b7c <__exponent+0x1c>
 8005b98:	3130      	adds	r1, #48	@ 0x30
 8005b9a:	1e94      	subs	r4, r2, #2
 8005b9c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005ba0:	4623      	mov	r3, r4
 8005ba2:	1c41      	adds	r1, r0, #1
 8005ba4:	42ab      	cmp	r3, r5
 8005ba6:	d30a      	bcc.n	8005bbe <__exponent+0x5e>
 8005ba8:	f10d 0309 	add.w	r3, sp, #9
 8005bac:	1a9b      	subs	r3, r3, r2
 8005bae:	42ac      	cmp	r4, r5
 8005bb0:	bf88      	it	hi
 8005bb2:	2300      	movhi	r3, #0
 8005bb4:	3302      	adds	r3, #2
 8005bb6:	4403      	add	r3, r0
 8005bb8:	1a18      	subs	r0, r3, r0
 8005bba:	b003      	add	sp, #12
 8005bbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005bbe:	f813 6b01 	ldrb.w	r6, [r3], #1
 8005bc2:	f801 6f01 	strb.w	r6, [r1, #1]!
 8005bc6:	e7ed      	b.n	8005ba4 <__exponent+0x44>
 8005bc8:	2330      	movs	r3, #48	@ 0x30
 8005bca:	3130      	adds	r1, #48	@ 0x30
 8005bcc:	7083      	strb	r3, [r0, #2]
 8005bce:	70c1      	strb	r1, [r0, #3]
 8005bd0:	1d03      	adds	r3, r0, #4
 8005bd2:	e7f1      	b.n	8005bb8 <__exponent+0x58>

08005bd4 <_printf_float>:
 8005bd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bd8:	b091      	sub	sp, #68	@ 0x44
 8005bda:	460c      	mov	r4, r1
 8005bdc:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8005be0:	4616      	mov	r6, r2
 8005be2:	461f      	mov	r7, r3
 8005be4:	4605      	mov	r5, r0
 8005be6:	f000 ff67 	bl	8006ab8 <_localeconv_r>
 8005bea:	6803      	ldr	r3, [r0, #0]
 8005bec:	4618      	mov	r0, r3
 8005bee:	9308      	str	r3, [sp, #32]
 8005bf0:	f7fa faae 	bl	8000150 <strlen>
 8005bf4:	2300      	movs	r3, #0
 8005bf6:	930e      	str	r3, [sp, #56]	@ 0x38
 8005bf8:	f8d8 3000 	ldr.w	r3, [r8]
 8005bfc:	9009      	str	r0, [sp, #36]	@ 0x24
 8005bfe:	3307      	adds	r3, #7
 8005c00:	f023 0307 	bic.w	r3, r3, #7
 8005c04:	f103 0208 	add.w	r2, r3, #8
 8005c08:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005c0c:	f8d4 b000 	ldr.w	fp, [r4]
 8005c10:	f8c8 2000 	str.w	r2, [r8]
 8005c14:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005c18:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8005c1c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005c1e:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8005c22:	f04f 32ff 	mov.w	r2, #4294967295
 8005c26:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005c2a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8005c2e:	4b9c      	ldr	r3, [pc, #624]	@ (8005ea0 <_printf_float+0x2cc>)
 8005c30:	f7fa feec 	bl	8000a0c <__aeabi_dcmpun>
 8005c34:	bb70      	cbnz	r0, 8005c94 <_printf_float+0xc0>
 8005c36:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005c3a:	f04f 32ff 	mov.w	r2, #4294967295
 8005c3e:	4b98      	ldr	r3, [pc, #608]	@ (8005ea0 <_printf_float+0x2cc>)
 8005c40:	f7fa fec6 	bl	80009d0 <__aeabi_dcmple>
 8005c44:	bb30      	cbnz	r0, 8005c94 <_printf_float+0xc0>
 8005c46:	2200      	movs	r2, #0
 8005c48:	2300      	movs	r3, #0
 8005c4a:	4640      	mov	r0, r8
 8005c4c:	4649      	mov	r1, r9
 8005c4e:	f7fa feb5 	bl	80009bc <__aeabi_dcmplt>
 8005c52:	b110      	cbz	r0, 8005c5a <_printf_float+0x86>
 8005c54:	232d      	movs	r3, #45	@ 0x2d
 8005c56:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005c5a:	4a92      	ldr	r2, [pc, #584]	@ (8005ea4 <_printf_float+0x2d0>)
 8005c5c:	4b92      	ldr	r3, [pc, #584]	@ (8005ea8 <_printf_float+0x2d4>)
 8005c5e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8005c62:	bf94      	ite	ls
 8005c64:	4690      	movls	r8, r2
 8005c66:	4698      	movhi	r8, r3
 8005c68:	2303      	movs	r3, #3
 8005c6a:	f04f 0900 	mov.w	r9, #0
 8005c6e:	6123      	str	r3, [r4, #16]
 8005c70:	f02b 0304 	bic.w	r3, fp, #4
 8005c74:	6023      	str	r3, [r4, #0]
 8005c76:	4633      	mov	r3, r6
 8005c78:	4621      	mov	r1, r4
 8005c7a:	4628      	mov	r0, r5
 8005c7c:	9700      	str	r7, [sp, #0]
 8005c7e:	aa0f      	add	r2, sp, #60	@ 0x3c
 8005c80:	f000 f9d4 	bl	800602c <_printf_common>
 8005c84:	3001      	adds	r0, #1
 8005c86:	f040 8090 	bne.w	8005daa <_printf_float+0x1d6>
 8005c8a:	f04f 30ff 	mov.w	r0, #4294967295
 8005c8e:	b011      	add	sp, #68	@ 0x44
 8005c90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c94:	4642      	mov	r2, r8
 8005c96:	464b      	mov	r3, r9
 8005c98:	4640      	mov	r0, r8
 8005c9a:	4649      	mov	r1, r9
 8005c9c:	f7fa feb6 	bl	8000a0c <__aeabi_dcmpun>
 8005ca0:	b148      	cbz	r0, 8005cb6 <_printf_float+0xe2>
 8005ca2:	464b      	mov	r3, r9
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	bfb8      	it	lt
 8005ca8:	232d      	movlt	r3, #45	@ 0x2d
 8005caa:	4a80      	ldr	r2, [pc, #512]	@ (8005eac <_printf_float+0x2d8>)
 8005cac:	bfb8      	it	lt
 8005cae:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8005cb2:	4b7f      	ldr	r3, [pc, #508]	@ (8005eb0 <_printf_float+0x2dc>)
 8005cb4:	e7d3      	b.n	8005c5e <_printf_float+0x8a>
 8005cb6:	6863      	ldr	r3, [r4, #4]
 8005cb8:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8005cbc:	1c5a      	adds	r2, r3, #1
 8005cbe:	d13f      	bne.n	8005d40 <_printf_float+0x16c>
 8005cc0:	2306      	movs	r3, #6
 8005cc2:	6063      	str	r3, [r4, #4]
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8005cca:	6023      	str	r3, [r4, #0]
 8005ccc:	9206      	str	r2, [sp, #24]
 8005cce:	aa0e      	add	r2, sp, #56	@ 0x38
 8005cd0:	e9cd a204 	strd	sl, r2, [sp, #16]
 8005cd4:	aa0d      	add	r2, sp, #52	@ 0x34
 8005cd6:	9203      	str	r2, [sp, #12]
 8005cd8:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8005cdc:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8005ce0:	6863      	ldr	r3, [r4, #4]
 8005ce2:	4642      	mov	r2, r8
 8005ce4:	9300      	str	r3, [sp, #0]
 8005ce6:	4628      	mov	r0, r5
 8005ce8:	464b      	mov	r3, r9
 8005cea:	910a      	str	r1, [sp, #40]	@ 0x28
 8005cec:	f7ff fed4 	bl	8005a98 <__cvt>
 8005cf0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005cf2:	4680      	mov	r8, r0
 8005cf4:	2947      	cmp	r1, #71	@ 0x47
 8005cf6:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8005cf8:	d128      	bne.n	8005d4c <_printf_float+0x178>
 8005cfa:	1cc8      	adds	r0, r1, #3
 8005cfc:	db02      	blt.n	8005d04 <_printf_float+0x130>
 8005cfe:	6863      	ldr	r3, [r4, #4]
 8005d00:	4299      	cmp	r1, r3
 8005d02:	dd40      	ble.n	8005d86 <_printf_float+0x1b2>
 8005d04:	f1aa 0a02 	sub.w	sl, sl, #2
 8005d08:	fa5f fa8a 	uxtb.w	sl, sl
 8005d0c:	4652      	mov	r2, sl
 8005d0e:	3901      	subs	r1, #1
 8005d10:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005d14:	910d      	str	r1, [sp, #52]	@ 0x34
 8005d16:	f7ff ff23 	bl	8005b60 <__exponent>
 8005d1a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005d1c:	4681      	mov	r9, r0
 8005d1e:	1813      	adds	r3, r2, r0
 8005d20:	2a01      	cmp	r2, #1
 8005d22:	6123      	str	r3, [r4, #16]
 8005d24:	dc02      	bgt.n	8005d2c <_printf_float+0x158>
 8005d26:	6822      	ldr	r2, [r4, #0]
 8005d28:	07d2      	lsls	r2, r2, #31
 8005d2a:	d501      	bpl.n	8005d30 <_printf_float+0x15c>
 8005d2c:	3301      	adds	r3, #1
 8005d2e:	6123      	str	r3, [r4, #16]
 8005d30:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d09e      	beq.n	8005c76 <_printf_float+0xa2>
 8005d38:	232d      	movs	r3, #45	@ 0x2d
 8005d3a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005d3e:	e79a      	b.n	8005c76 <_printf_float+0xa2>
 8005d40:	2947      	cmp	r1, #71	@ 0x47
 8005d42:	d1bf      	bne.n	8005cc4 <_printf_float+0xf0>
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d1bd      	bne.n	8005cc4 <_printf_float+0xf0>
 8005d48:	2301      	movs	r3, #1
 8005d4a:	e7ba      	b.n	8005cc2 <_printf_float+0xee>
 8005d4c:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005d50:	d9dc      	bls.n	8005d0c <_printf_float+0x138>
 8005d52:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8005d56:	d118      	bne.n	8005d8a <_printf_float+0x1b6>
 8005d58:	2900      	cmp	r1, #0
 8005d5a:	6863      	ldr	r3, [r4, #4]
 8005d5c:	dd0b      	ble.n	8005d76 <_printf_float+0x1a2>
 8005d5e:	6121      	str	r1, [r4, #16]
 8005d60:	b913      	cbnz	r3, 8005d68 <_printf_float+0x194>
 8005d62:	6822      	ldr	r2, [r4, #0]
 8005d64:	07d0      	lsls	r0, r2, #31
 8005d66:	d502      	bpl.n	8005d6e <_printf_float+0x19a>
 8005d68:	3301      	adds	r3, #1
 8005d6a:	440b      	add	r3, r1
 8005d6c:	6123      	str	r3, [r4, #16]
 8005d6e:	f04f 0900 	mov.w	r9, #0
 8005d72:	65a1      	str	r1, [r4, #88]	@ 0x58
 8005d74:	e7dc      	b.n	8005d30 <_printf_float+0x15c>
 8005d76:	b913      	cbnz	r3, 8005d7e <_printf_float+0x1aa>
 8005d78:	6822      	ldr	r2, [r4, #0]
 8005d7a:	07d2      	lsls	r2, r2, #31
 8005d7c:	d501      	bpl.n	8005d82 <_printf_float+0x1ae>
 8005d7e:	3302      	adds	r3, #2
 8005d80:	e7f4      	b.n	8005d6c <_printf_float+0x198>
 8005d82:	2301      	movs	r3, #1
 8005d84:	e7f2      	b.n	8005d6c <_printf_float+0x198>
 8005d86:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8005d8a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005d8c:	4299      	cmp	r1, r3
 8005d8e:	db05      	blt.n	8005d9c <_printf_float+0x1c8>
 8005d90:	6823      	ldr	r3, [r4, #0]
 8005d92:	6121      	str	r1, [r4, #16]
 8005d94:	07d8      	lsls	r0, r3, #31
 8005d96:	d5ea      	bpl.n	8005d6e <_printf_float+0x19a>
 8005d98:	1c4b      	adds	r3, r1, #1
 8005d9a:	e7e7      	b.n	8005d6c <_printf_float+0x198>
 8005d9c:	2900      	cmp	r1, #0
 8005d9e:	bfcc      	ite	gt
 8005da0:	2201      	movgt	r2, #1
 8005da2:	f1c1 0202 	rsble	r2, r1, #2
 8005da6:	4413      	add	r3, r2
 8005da8:	e7e0      	b.n	8005d6c <_printf_float+0x198>
 8005daa:	6823      	ldr	r3, [r4, #0]
 8005dac:	055a      	lsls	r2, r3, #21
 8005dae:	d407      	bmi.n	8005dc0 <_printf_float+0x1ec>
 8005db0:	6923      	ldr	r3, [r4, #16]
 8005db2:	4642      	mov	r2, r8
 8005db4:	4631      	mov	r1, r6
 8005db6:	4628      	mov	r0, r5
 8005db8:	47b8      	blx	r7
 8005dba:	3001      	adds	r0, #1
 8005dbc:	d12b      	bne.n	8005e16 <_printf_float+0x242>
 8005dbe:	e764      	b.n	8005c8a <_printf_float+0xb6>
 8005dc0:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005dc4:	f240 80dc 	bls.w	8005f80 <_printf_float+0x3ac>
 8005dc8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005dcc:	2200      	movs	r2, #0
 8005dce:	2300      	movs	r3, #0
 8005dd0:	f7fa fdea 	bl	80009a8 <__aeabi_dcmpeq>
 8005dd4:	2800      	cmp	r0, #0
 8005dd6:	d033      	beq.n	8005e40 <_printf_float+0x26c>
 8005dd8:	2301      	movs	r3, #1
 8005dda:	4631      	mov	r1, r6
 8005ddc:	4628      	mov	r0, r5
 8005dde:	4a35      	ldr	r2, [pc, #212]	@ (8005eb4 <_printf_float+0x2e0>)
 8005de0:	47b8      	blx	r7
 8005de2:	3001      	adds	r0, #1
 8005de4:	f43f af51 	beq.w	8005c8a <_printf_float+0xb6>
 8005de8:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8005dec:	4543      	cmp	r3, r8
 8005dee:	db02      	blt.n	8005df6 <_printf_float+0x222>
 8005df0:	6823      	ldr	r3, [r4, #0]
 8005df2:	07d8      	lsls	r0, r3, #31
 8005df4:	d50f      	bpl.n	8005e16 <_printf_float+0x242>
 8005df6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005dfa:	4631      	mov	r1, r6
 8005dfc:	4628      	mov	r0, r5
 8005dfe:	47b8      	blx	r7
 8005e00:	3001      	adds	r0, #1
 8005e02:	f43f af42 	beq.w	8005c8a <_printf_float+0xb6>
 8005e06:	f04f 0900 	mov.w	r9, #0
 8005e0a:	f108 38ff 	add.w	r8, r8, #4294967295
 8005e0e:	f104 0a1a 	add.w	sl, r4, #26
 8005e12:	45c8      	cmp	r8, r9
 8005e14:	dc09      	bgt.n	8005e2a <_printf_float+0x256>
 8005e16:	6823      	ldr	r3, [r4, #0]
 8005e18:	079b      	lsls	r3, r3, #30
 8005e1a:	f100 8102 	bmi.w	8006022 <_printf_float+0x44e>
 8005e1e:	68e0      	ldr	r0, [r4, #12]
 8005e20:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005e22:	4298      	cmp	r0, r3
 8005e24:	bfb8      	it	lt
 8005e26:	4618      	movlt	r0, r3
 8005e28:	e731      	b.n	8005c8e <_printf_float+0xba>
 8005e2a:	2301      	movs	r3, #1
 8005e2c:	4652      	mov	r2, sl
 8005e2e:	4631      	mov	r1, r6
 8005e30:	4628      	mov	r0, r5
 8005e32:	47b8      	blx	r7
 8005e34:	3001      	adds	r0, #1
 8005e36:	f43f af28 	beq.w	8005c8a <_printf_float+0xb6>
 8005e3a:	f109 0901 	add.w	r9, r9, #1
 8005e3e:	e7e8      	b.n	8005e12 <_printf_float+0x23e>
 8005e40:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	dc38      	bgt.n	8005eb8 <_printf_float+0x2e4>
 8005e46:	2301      	movs	r3, #1
 8005e48:	4631      	mov	r1, r6
 8005e4a:	4628      	mov	r0, r5
 8005e4c:	4a19      	ldr	r2, [pc, #100]	@ (8005eb4 <_printf_float+0x2e0>)
 8005e4e:	47b8      	blx	r7
 8005e50:	3001      	adds	r0, #1
 8005e52:	f43f af1a 	beq.w	8005c8a <_printf_float+0xb6>
 8005e56:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8005e5a:	ea59 0303 	orrs.w	r3, r9, r3
 8005e5e:	d102      	bne.n	8005e66 <_printf_float+0x292>
 8005e60:	6823      	ldr	r3, [r4, #0]
 8005e62:	07d9      	lsls	r1, r3, #31
 8005e64:	d5d7      	bpl.n	8005e16 <_printf_float+0x242>
 8005e66:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005e6a:	4631      	mov	r1, r6
 8005e6c:	4628      	mov	r0, r5
 8005e6e:	47b8      	blx	r7
 8005e70:	3001      	adds	r0, #1
 8005e72:	f43f af0a 	beq.w	8005c8a <_printf_float+0xb6>
 8005e76:	f04f 0a00 	mov.w	sl, #0
 8005e7a:	f104 0b1a 	add.w	fp, r4, #26
 8005e7e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005e80:	425b      	negs	r3, r3
 8005e82:	4553      	cmp	r3, sl
 8005e84:	dc01      	bgt.n	8005e8a <_printf_float+0x2b6>
 8005e86:	464b      	mov	r3, r9
 8005e88:	e793      	b.n	8005db2 <_printf_float+0x1de>
 8005e8a:	2301      	movs	r3, #1
 8005e8c:	465a      	mov	r2, fp
 8005e8e:	4631      	mov	r1, r6
 8005e90:	4628      	mov	r0, r5
 8005e92:	47b8      	blx	r7
 8005e94:	3001      	adds	r0, #1
 8005e96:	f43f aef8 	beq.w	8005c8a <_printf_float+0xb6>
 8005e9a:	f10a 0a01 	add.w	sl, sl, #1
 8005e9e:	e7ee      	b.n	8005e7e <_printf_float+0x2aa>
 8005ea0:	7fefffff 	.word	0x7fefffff
 8005ea4:	0800abca 	.word	0x0800abca
 8005ea8:	0800abce 	.word	0x0800abce
 8005eac:	0800abd2 	.word	0x0800abd2
 8005eb0:	0800abd6 	.word	0x0800abd6
 8005eb4:	0800af68 	.word	0x0800af68
 8005eb8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005eba:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8005ebe:	4553      	cmp	r3, sl
 8005ec0:	bfa8      	it	ge
 8005ec2:	4653      	movge	r3, sl
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	4699      	mov	r9, r3
 8005ec8:	dc36      	bgt.n	8005f38 <_printf_float+0x364>
 8005eca:	f04f 0b00 	mov.w	fp, #0
 8005ece:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005ed2:	f104 021a 	add.w	r2, r4, #26
 8005ed6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005ed8:	930a      	str	r3, [sp, #40]	@ 0x28
 8005eda:	eba3 0309 	sub.w	r3, r3, r9
 8005ede:	455b      	cmp	r3, fp
 8005ee0:	dc31      	bgt.n	8005f46 <_printf_float+0x372>
 8005ee2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005ee4:	459a      	cmp	sl, r3
 8005ee6:	dc3a      	bgt.n	8005f5e <_printf_float+0x38a>
 8005ee8:	6823      	ldr	r3, [r4, #0]
 8005eea:	07da      	lsls	r2, r3, #31
 8005eec:	d437      	bmi.n	8005f5e <_printf_float+0x38a>
 8005eee:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005ef0:	ebaa 0903 	sub.w	r9, sl, r3
 8005ef4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005ef6:	ebaa 0303 	sub.w	r3, sl, r3
 8005efa:	4599      	cmp	r9, r3
 8005efc:	bfa8      	it	ge
 8005efe:	4699      	movge	r9, r3
 8005f00:	f1b9 0f00 	cmp.w	r9, #0
 8005f04:	dc33      	bgt.n	8005f6e <_printf_float+0x39a>
 8005f06:	f04f 0800 	mov.w	r8, #0
 8005f0a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005f0e:	f104 0b1a 	add.w	fp, r4, #26
 8005f12:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005f14:	ebaa 0303 	sub.w	r3, sl, r3
 8005f18:	eba3 0309 	sub.w	r3, r3, r9
 8005f1c:	4543      	cmp	r3, r8
 8005f1e:	f77f af7a 	ble.w	8005e16 <_printf_float+0x242>
 8005f22:	2301      	movs	r3, #1
 8005f24:	465a      	mov	r2, fp
 8005f26:	4631      	mov	r1, r6
 8005f28:	4628      	mov	r0, r5
 8005f2a:	47b8      	blx	r7
 8005f2c:	3001      	adds	r0, #1
 8005f2e:	f43f aeac 	beq.w	8005c8a <_printf_float+0xb6>
 8005f32:	f108 0801 	add.w	r8, r8, #1
 8005f36:	e7ec      	b.n	8005f12 <_printf_float+0x33e>
 8005f38:	4642      	mov	r2, r8
 8005f3a:	4631      	mov	r1, r6
 8005f3c:	4628      	mov	r0, r5
 8005f3e:	47b8      	blx	r7
 8005f40:	3001      	adds	r0, #1
 8005f42:	d1c2      	bne.n	8005eca <_printf_float+0x2f6>
 8005f44:	e6a1      	b.n	8005c8a <_printf_float+0xb6>
 8005f46:	2301      	movs	r3, #1
 8005f48:	4631      	mov	r1, r6
 8005f4a:	4628      	mov	r0, r5
 8005f4c:	920a      	str	r2, [sp, #40]	@ 0x28
 8005f4e:	47b8      	blx	r7
 8005f50:	3001      	adds	r0, #1
 8005f52:	f43f ae9a 	beq.w	8005c8a <_printf_float+0xb6>
 8005f56:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005f58:	f10b 0b01 	add.w	fp, fp, #1
 8005f5c:	e7bb      	b.n	8005ed6 <_printf_float+0x302>
 8005f5e:	4631      	mov	r1, r6
 8005f60:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005f64:	4628      	mov	r0, r5
 8005f66:	47b8      	blx	r7
 8005f68:	3001      	adds	r0, #1
 8005f6a:	d1c0      	bne.n	8005eee <_printf_float+0x31a>
 8005f6c:	e68d      	b.n	8005c8a <_printf_float+0xb6>
 8005f6e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005f70:	464b      	mov	r3, r9
 8005f72:	4631      	mov	r1, r6
 8005f74:	4628      	mov	r0, r5
 8005f76:	4442      	add	r2, r8
 8005f78:	47b8      	blx	r7
 8005f7a:	3001      	adds	r0, #1
 8005f7c:	d1c3      	bne.n	8005f06 <_printf_float+0x332>
 8005f7e:	e684      	b.n	8005c8a <_printf_float+0xb6>
 8005f80:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8005f84:	f1ba 0f01 	cmp.w	sl, #1
 8005f88:	dc01      	bgt.n	8005f8e <_printf_float+0x3ba>
 8005f8a:	07db      	lsls	r3, r3, #31
 8005f8c:	d536      	bpl.n	8005ffc <_printf_float+0x428>
 8005f8e:	2301      	movs	r3, #1
 8005f90:	4642      	mov	r2, r8
 8005f92:	4631      	mov	r1, r6
 8005f94:	4628      	mov	r0, r5
 8005f96:	47b8      	blx	r7
 8005f98:	3001      	adds	r0, #1
 8005f9a:	f43f ae76 	beq.w	8005c8a <_printf_float+0xb6>
 8005f9e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005fa2:	4631      	mov	r1, r6
 8005fa4:	4628      	mov	r0, r5
 8005fa6:	47b8      	blx	r7
 8005fa8:	3001      	adds	r0, #1
 8005faa:	f43f ae6e 	beq.w	8005c8a <_printf_float+0xb6>
 8005fae:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	2300      	movs	r3, #0
 8005fb6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005fba:	f7fa fcf5 	bl	80009a8 <__aeabi_dcmpeq>
 8005fbe:	b9c0      	cbnz	r0, 8005ff2 <_printf_float+0x41e>
 8005fc0:	4653      	mov	r3, sl
 8005fc2:	f108 0201 	add.w	r2, r8, #1
 8005fc6:	4631      	mov	r1, r6
 8005fc8:	4628      	mov	r0, r5
 8005fca:	47b8      	blx	r7
 8005fcc:	3001      	adds	r0, #1
 8005fce:	d10c      	bne.n	8005fea <_printf_float+0x416>
 8005fd0:	e65b      	b.n	8005c8a <_printf_float+0xb6>
 8005fd2:	2301      	movs	r3, #1
 8005fd4:	465a      	mov	r2, fp
 8005fd6:	4631      	mov	r1, r6
 8005fd8:	4628      	mov	r0, r5
 8005fda:	47b8      	blx	r7
 8005fdc:	3001      	adds	r0, #1
 8005fde:	f43f ae54 	beq.w	8005c8a <_printf_float+0xb6>
 8005fe2:	f108 0801 	add.w	r8, r8, #1
 8005fe6:	45d0      	cmp	r8, sl
 8005fe8:	dbf3      	blt.n	8005fd2 <_printf_float+0x3fe>
 8005fea:	464b      	mov	r3, r9
 8005fec:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8005ff0:	e6e0      	b.n	8005db4 <_printf_float+0x1e0>
 8005ff2:	f04f 0800 	mov.w	r8, #0
 8005ff6:	f104 0b1a 	add.w	fp, r4, #26
 8005ffa:	e7f4      	b.n	8005fe6 <_printf_float+0x412>
 8005ffc:	2301      	movs	r3, #1
 8005ffe:	4642      	mov	r2, r8
 8006000:	e7e1      	b.n	8005fc6 <_printf_float+0x3f2>
 8006002:	2301      	movs	r3, #1
 8006004:	464a      	mov	r2, r9
 8006006:	4631      	mov	r1, r6
 8006008:	4628      	mov	r0, r5
 800600a:	47b8      	blx	r7
 800600c:	3001      	adds	r0, #1
 800600e:	f43f ae3c 	beq.w	8005c8a <_printf_float+0xb6>
 8006012:	f108 0801 	add.w	r8, r8, #1
 8006016:	68e3      	ldr	r3, [r4, #12]
 8006018:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800601a:	1a5b      	subs	r3, r3, r1
 800601c:	4543      	cmp	r3, r8
 800601e:	dcf0      	bgt.n	8006002 <_printf_float+0x42e>
 8006020:	e6fd      	b.n	8005e1e <_printf_float+0x24a>
 8006022:	f04f 0800 	mov.w	r8, #0
 8006026:	f104 0919 	add.w	r9, r4, #25
 800602a:	e7f4      	b.n	8006016 <_printf_float+0x442>

0800602c <_printf_common>:
 800602c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006030:	4616      	mov	r6, r2
 8006032:	4698      	mov	r8, r3
 8006034:	688a      	ldr	r2, [r1, #8]
 8006036:	690b      	ldr	r3, [r1, #16]
 8006038:	4607      	mov	r7, r0
 800603a:	4293      	cmp	r3, r2
 800603c:	bfb8      	it	lt
 800603e:	4613      	movlt	r3, r2
 8006040:	6033      	str	r3, [r6, #0]
 8006042:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006046:	460c      	mov	r4, r1
 8006048:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800604c:	b10a      	cbz	r2, 8006052 <_printf_common+0x26>
 800604e:	3301      	adds	r3, #1
 8006050:	6033      	str	r3, [r6, #0]
 8006052:	6823      	ldr	r3, [r4, #0]
 8006054:	0699      	lsls	r1, r3, #26
 8006056:	bf42      	ittt	mi
 8006058:	6833      	ldrmi	r3, [r6, #0]
 800605a:	3302      	addmi	r3, #2
 800605c:	6033      	strmi	r3, [r6, #0]
 800605e:	6825      	ldr	r5, [r4, #0]
 8006060:	f015 0506 	ands.w	r5, r5, #6
 8006064:	d106      	bne.n	8006074 <_printf_common+0x48>
 8006066:	f104 0a19 	add.w	sl, r4, #25
 800606a:	68e3      	ldr	r3, [r4, #12]
 800606c:	6832      	ldr	r2, [r6, #0]
 800606e:	1a9b      	subs	r3, r3, r2
 8006070:	42ab      	cmp	r3, r5
 8006072:	dc2b      	bgt.n	80060cc <_printf_common+0xa0>
 8006074:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006078:	6822      	ldr	r2, [r4, #0]
 800607a:	3b00      	subs	r3, #0
 800607c:	bf18      	it	ne
 800607e:	2301      	movne	r3, #1
 8006080:	0692      	lsls	r2, r2, #26
 8006082:	d430      	bmi.n	80060e6 <_printf_common+0xba>
 8006084:	4641      	mov	r1, r8
 8006086:	4638      	mov	r0, r7
 8006088:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800608c:	47c8      	blx	r9
 800608e:	3001      	adds	r0, #1
 8006090:	d023      	beq.n	80060da <_printf_common+0xae>
 8006092:	6823      	ldr	r3, [r4, #0]
 8006094:	6922      	ldr	r2, [r4, #16]
 8006096:	f003 0306 	and.w	r3, r3, #6
 800609a:	2b04      	cmp	r3, #4
 800609c:	bf14      	ite	ne
 800609e:	2500      	movne	r5, #0
 80060a0:	6833      	ldreq	r3, [r6, #0]
 80060a2:	f04f 0600 	mov.w	r6, #0
 80060a6:	bf08      	it	eq
 80060a8:	68e5      	ldreq	r5, [r4, #12]
 80060aa:	f104 041a 	add.w	r4, r4, #26
 80060ae:	bf08      	it	eq
 80060b0:	1aed      	subeq	r5, r5, r3
 80060b2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80060b6:	bf08      	it	eq
 80060b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80060bc:	4293      	cmp	r3, r2
 80060be:	bfc4      	itt	gt
 80060c0:	1a9b      	subgt	r3, r3, r2
 80060c2:	18ed      	addgt	r5, r5, r3
 80060c4:	42b5      	cmp	r5, r6
 80060c6:	d11a      	bne.n	80060fe <_printf_common+0xd2>
 80060c8:	2000      	movs	r0, #0
 80060ca:	e008      	b.n	80060de <_printf_common+0xb2>
 80060cc:	2301      	movs	r3, #1
 80060ce:	4652      	mov	r2, sl
 80060d0:	4641      	mov	r1, r8
 80060d2:	4638      	mov	r0, r7
 80060d4:	47c8      	blx	r9
 80060d6:	3001      	adds	r0, #1
 80060d8:	d103      	bne.n	80060e2 <_printf_common+0xb6>
 80060da:	f04f 30ff 	mov.w	r0, #4294967295
 80060de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060e2:	3501      	adds	r5, #1
 80060e4:	e7c1      	b.n	800606a <_printf_common+0x3e>
 80060e6:	2030      	movs	r0, #48	@ 0x30
 80060e8:	18e1      	adds	r1, r4, r3
 80060ea:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80060ee:	1c5a      	adds	r2, r3, #1
 80060f0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80060f4:	4422      	add	r2, r4
 80060f6:	3302      	adds	r3, #2
 80060f8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80060fc:	e7c2      	b.n	8006084 <_printf_common+0x58>
 80060fe:	2301      	movs	r3, #1
 8006100:	4622      	mov	r2, r4
 8006102:	4641      	mov	r1, r8
 8006104:	4638      	mov	r0, r7
 8006106:	47c8      	blx	r9
 8006108:	3001      	adds	r0, #1
 800610a:	d0e6      	beq.n	80060da <_printf_common+0xae>
 800610c:	3601      	adds	r6, #1
 800610e:	e7d9      	b.n	80060c4 <_printf_common+0x98>

08006110 <_printf_i>:
 8006110:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006114:	7e0f      	ldrb	r7, [r1, #24]
 8006116:	4691      	mov	r9, r2
 8006118:	2f78      	cmp	r7, #120	@ 0x78
 800611a:	4680      	mov	r8, r0
 800611c:	460c      	mov	r4, r1
 800611e:	469a      	mov	sl, r3
 8006120:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006122:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006126:	d807      	bhi.n	8006138 <_printf_i+0x28>
 8006128:	2f62      	cmp	r7, #98	@ 0x62
 800612a:	d80a      	bhi.n	8006142 <_printf_i+0x32>
 800612c:	2f00      	cmp	r7, #0
 800612e:	f000 80d3 	beq.w	80062d8 <_printf_i+0x1c8>
 8006132:	2f58      	cmp	r7, #88	@ 0x58
 8006134:	f000 80ba 	beq.w	80062ac <_printf_i+0x19c>
 8006138:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800613c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006140:	e03a      	b.n	80061b8 <_printf_i+0xa8>
 8006142:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006146:	2b15      	cmp	r3, #21
 8006148:	d8f6      	bhi.n	8006138 <_printf_i+0x28>
 800614a:	a101      	add	r1, pc, #4	@ (adr r1, 8006150 <_printf_i+0x40>)
 800614c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006150:	080061a9 	.word	0x080061a9
 8006154:	080061bd 	.word	0x080061bd
 8006158:	08006139 	.word	0x08006139
 800615c:	08006139 	.word	0x08006139
 8006160:	08006139 	.word	0x08006139
 8006164:	08006139 	.word	0x08006139
 8006168:	080061bd 	.word	0x080061bd
 800616c:	08006139 	.word	0x08006139
 8006170:	08006139 	.word	0x08006139
 8006174:	08006139 	.word	0x08006139
 8006178:	08006139 	.word	0x08006139
 800617c:	080062bf 	.word	0x080062bf
 8006180:	080061e7 	.word	0x080061e7
 8006184:	08006279 	.word	0x08006279
 8006188:	08006139 	.word	0x08006139
 800618c:	08006139 	.word	0x08006139
 8006190:	080062e1 	.word	0x080062e1
 8006194:	08006139 	.word	0x08006139
 8006198:	080061e7 	.word	0x080061e7
 800619c:	08006139 	.word	0x08006139
 80061a0:	08006139 	.word	0x08006139
 80061a4:	08006281 	.word	0x08006281
 80061a8:	6833      	ldr	r3, [r6, #0]
 80061aa:	1d1a      	adds	r2, r3, #4
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	6032      	str	r2, [r6, #0]
 80061b0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80061b4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80061b8:	2301      	movs	r3, #1
 80061ba:	e09e      	b.n	80062fa <_printf_i+0x1ea>
 80061bc:	6833      	ldr	r3, [r6, #0]
 80061be:	6820      	ldr	r0, [r4, #0]
 80061c0:	1d19      	adds	r1, r3, #4
 80061c2:	6031      	str	r1, [r6, #0]
 80061c4:	0606      	lsls	r6, r0, #24
 80061c6:	d501      	bpl.n	80061cc <_printf_i+0xbc>
 80061c8:	681d      	ldr	r5, [r3, #0]
 80061ca:	e003      	b.n	80061d4 <_printf_i+0xc4>
 80061cc:	0645      	lsls	r5, r0, #25
 80061ce:	d5fb      	bpl.n	80061c8 <_printf_i+0xb8>
 80061d0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80061d4:	2d00      	cmp	r5, #0
 80061d6:	da03      	bge.n	80061e0 <_printf_i+0xd0>
 80061d8:	232d      	movs	r3, #45	@ 0x2d
 80061da:	426d      	negs	r5, r5
 80061dc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80061e0:	230a      	movs	r3, #10
 80061e2:	4859      	ldr	r0, [pc, #356]	@ (8006348 <_printf_i+0x238>)
 80061e4:	e011      	b.n	800620a <_printf_i+0xfa>
 80061e6:	6821      	ldr	r1, [r4, #0]
 80061e8:	6833      	ldr	r3, [r6, #0]
 80061ea:	0608      	lsls	r0, r1, #24
 80061ec:	f853 5b04 	ldr.w	r5, [r3], #4
 80061f0:	d402      	bmi.n	80061f8 <_printf_i+0xe8>
 80061f2:	0649      	lsls	r1, r1, #25
 80061f4:	bf48      	it	mi
 80061f6:	b2ad      	uxthmi	r5, r5
 80061f8:	2f6f      	cmp	r7, #111	@ 0x6f
 80061fa:	6033      	str	r3, [r6, #0]
 80061fc:	bf14      	ite	ne
 80061fe:	230a      	movne	r3, #10
 8006200:	2308      	moveq	r3, #8
 8006202:	4851      	ldr	r0, [pc, #324]	@ (8006348 <_printf_i+0x238>)
 8006204:	2100      	movs	r1, #0
 8006206:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800620a:	6866      	ldr	r6, [r4, #4]
 800620c:	2e00      	cmp	r6, #0
 800620e:	bfa8      	it	ge
 8006210:	6821      	ldrge	r1, [r4, #0]
 8006212:	60a6      	str	r6, [r4, #8]
 8006214:	bfa4      	itt	ge
 8006216:	f021 0104 	bicge.w	r1, r1, #4
 800621a:	6021      	strge	r1, [r4, #0]
 800621c:	b90d      	cbnz	r5, 8006222 <_printf_i+0x112>
 800621e:	2e00      	cmp	r6, #0
 8006220:	d04b      	beq.n	80062ba <_printf_i+0x1aa>
 8006222:	4616      	mov	r6, r2
 8006224:	fbb5 f1f3 	udiv	r1, r5, r3
 8006228:	fb03 5711 	mls	r7, r3, r1, r5
 800622c:	5dc7      	ldrb	r7, [r0, r7]
 800622e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006232:	462f      	mov	r7, r5
 8006234:	42bb      	cmp	r3, r7
 8006236:	460d      	mov	r5, r1
 8006238:	d9f4      	bls.n	8006224 <_printf_i+0x114>
 800623a:	2b08      	cmp	r3, #8
 800623c:	d10b      	bne.n	8006256 <_printf_i+0x146>
 800623e:	6823      	ldr	r3, [r4, #0]
 8006240:	07df      	lsls	r7, r3, #31
 8006242:	d508      	bpl.n	8006256 <_printf_i+0x146>
 8006244:	6923      	ldr	r3, [r4, #16]
 8006246:	6861      	ldr	r1, [r4, #4]
 8006248:	4299      	cmp	r1, r3
 800624a:	bfde      	ittt	le
 800624c:	2330      	movle	r3, #48	@ 0x30
 800624e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006252:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006256:	1b92      	subs	r2, r2, r6
 8006258:	6122      	str	r2, [r4, #16]
 800625a:	464b      	mov	r3, r9
 800625c:	4621      	mov	r1, r4
 800625e:	4640      	mov	r0, r8
 8006260:	f8cd a000 	str.w	sl, [sp]
 8006264:	aa03      	add	r2, sp, #12
 8006266:	f7ff fee1 	bl	800602c <_printf_common>
 800626a:	3001      	adds	r0, #1
 800626c:	d14a      	bne.n	8006304 <_printf_i+0x1f4>
 800626e:	f04f 30ff 	mov.w	r0, #4294967295
 8006272:	b004      	add	sp, #16
 8006274:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006278:	6823      	ldr	r3, [r4, #0]
 800627a:	f043 0320 	orr.w	r3, r3, #32
 800627e:	6023      	str	r3, [r4, #0]
 8006280:	2778      	movs	r7, #120	@ 0x78
 8006282:	4832      	ldr	r0, [pc, #200]	@ (800634c <_printf_i+0x23c>)
 8006284:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006288:	6823      	ldr	r3, [r4, #0]
 800628a:	6831      	ldr	r1, [r6, #0]
 800628c:	061f      	lsls	r7, r3, #24
 800628e:	f851 5b04 	ldr.w	r5, [r1], #4
 8006292:	d402      	bmi.n	800629a <_printf_i+0x18a>
 8006294:	065f      	lsls	r7, r3, #25
 8006296:	bf48      	it	mi
 8006298:	b2ad      	uxthmi	r5, r5
 800629a:	6031      	str	r1, [r6, #0]
 800629c:	07d9      	lsls	r1, r3, #31
 800629e:	bf44      	itt	mi
 80062a0:	f043 0320 	orrmi.w	r3, r3, #32
 80062a4:	6023      	strmi	r3, [r4, #0]
 80062a6:	b11d      	cbz	r5, 80062b0 <_printf_i+0x1a0>
 80062a8:	2310      	movs	r3, #16
 80062aa:	e7ab      	b.n	8006204 <_printf_i+0xf4>
 80062ac:	4826      	ldr	r0, [pc, #152]	@ (8006348 <_printf_i+0x238>)
 80062ae:	e7e9      	b.n	8006284 <_printf_i+0x174>
 80062b0:	6823      	ldr	r3, [r4, #0]
 80062b2:	f023 0320 	bic.w	r3, r3, #32
 80062b6:	6023      	str	r3, [r4, #0]
 80062b8:	e7f6      	b.n	80062a8 <_printf_i+0x198>
 80062ba:	4616      	mov	r6, r2
 80062bc:	e7bd      	b.n	800623a <_printf_i+0x12a>
 80062be:	6833      	ldr	r3, [r6, #0]
 80062c0:	6825      	ldr	r5, [r4, #0]
 80062c2:	1d18      	adds	r0, r3, #4
 80062c4:	6961      	ldr	r1, [r4, #20]
 80062c6:	6030      	str	r0, [r6, #0]
 80062c8:	062e      	lsls	r6, r5, #24
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	d501      	bpl.n	80062d2 <_printf_i+0x1c2>
 80062ce:	6019      	str	r1, [r3, #0]
 80062d0:	e002      	b.n	80062d8 <_printf_i+0x1c8>
 80062d2:	0668      	lsls	r0, r5, #25
 80062d4:	d5fb      	bpl.n	80062ce <_printf_i+0x1be>
 80062d6:	8019      	strh	r1, [r3, #0]
 80062d8:	2300      	movs	r3, #0
 80062da:	4616      	mov	r6, r2
 80062dc:	6123      	str	r3, [r4, #16]
 80062de:	e7bc      	b.n	800625a <_printf_i+0x14a>
 80062e0:	6833      	ldr	r3, [r6, #0]
 80062e2:	2100      	movs	r1, #0
 80062e4:	1d1a      	adds	r2, r3, #4
 80062e6:	6032      	str	r2, [r6, #0]
 80062e8:	681e      	ldr	r6, [r3, #0]
 80062ea:	6862      	ldr	r2, [r4, #4]
 80062ec:	4630      	mov	r0, r6
 80062ee:	f000 fc5a 	bl	8006ba6 <memchr>
 80062f2:	b108      	cbz	r0, 80062f8 <_printf_i+0x1e8>
 80062f4:	1b80      	subs	r0, r0, r6
 80062f6:	6060      	str	r0, [r4, #4]
 80062f8:	6863      	ldr	r3, [r4, #4]
 80062fa:	6123      	str	r3, [r4, #16]
 80062fc:	2300      	movs	r3, #0
 80062fe:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006302:	e7aa      	b.n	800625a <_printf_i+0x14a>
 8006304:	4632      	mov	r2, r6
 8006306:	4649      	mov	r1, r9
 8006308:	4640      	mov	r0, r8
 800630a:	6923      	ldr	r3, [r4, #16]
 800630c:	47d0      	blx	sl
 800630e:	3001      	adds	r0, #1
 8006310:	d0ad      	beq.n	800626e <_printf_i+0x15e>
 8006312:	6823      	ldr	r3, [r4, #0]
 8006314:	079b      	lsls	r3, r3, #30
 8006316:	d413      	bmi.n	8006340 <_printf_i+0x230>
 8006318:	68e0      	ldr	r0, [r4, #12]
 800631a:	9b03      	ldr	r3, [sp, #12]
 800631c:	4298      	cmp	r0, r3
 800631e:	bfb8      	it	lt
 8006320:	4618      	movlt	r0, r3
 8006322:	e7a6      	b.n	8006272 <_printf_i+0x162>
 8006324:	2301      	movs	r3, #1
 8006326:	4632      	mov	r2, r6
 8006328:	4649      	mov	r1, r9
 800632a:	4640      	mov	r0, r8
 800632c:	47d0      	blx	sl
 800632e:	3001      	adds	r0, #1
 8006330:	d09d      	beq.n	800626e <_printf_i+0x15e>
 8006332:	3501      	adds	r5, #1
 8006334:	68e3      	ldr	r3, [r4, #12]
 8006336:	9903      	ldr	r1, [sp, #12]
 8006338:	1a5b      	subs	r3, r3, r1
 800633a:	42ab      	cmp	r3, r5
 800633c:	dcf2      	bgt.n	8006324 <_printf_i+0x214>
 800633e:	e7eb      	b.n	8006318 <_printf_i+0x208>
 8006340:	2500      	movs	r5, #0
 8006342:	f104 0619 	add.w	r6, r4, #25
 8006346:	e7f5      	b.n	8006334 <_printf_i+0x224>
 8006348:	0800abda 	.word	0x0800abda
 800634c:	0800abeb 	.word	0x0800abeb

08006350 <_scanf_float>:
 8006350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006354:	b087      	sub	sp, #28
 8006356:	9303      	str	r3, [sp, #12]
 8006358:	688b      	ldr	r3, [r1, #8]
 800635a:	4617      	mov	r7, r2
 800635c:	1e5a      	subs	r2, r3, #1
 800635e:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8006362:	bf82      	ittt	hi
 8006364:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8006368:	eb03 0b05 	addhi.w	fp, r3, r5
 800636c:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8006370:	460a      	mov	r2, r1
 8006372:	f04f 0500 	mov.w	r5, #0
 8006376:	bf88      	it	hi
 8006378:	608b      	strhi	r3, [r1, #8]
 800637a:	680b      	ldr	r3, [r1, #0]
 800637c:	4680      	mov	r8, r0
 800637e:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8006382:	f842 3b1c 	str.w	r3, [r2], #28
 8006386:	460c      	mov	r4, r1
 8006388:	bf98      	it	ls
 800638a:	f04f 0b00 	movls.w	fp, #0
 800638e:	4616      	mov	r6, r2
 8006390:	46aa      	mov	sl, r5
 8006392:	46a9      	mov	r9, r5
 8006394:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8006398:	9201      	str	r2, [sp, #4]
 800639a:	9502      	str	r5, [sp, #8]
 800639c:	68a2      	ldr	r2, [r4, #8]
 800639e:	b152      	cbz	r2, 80063b6 <_scanf_float+0x66>
 80063a0:	683b      	ldr	r3, [r7, #0]
 80063a2:	781b      	ldrb	r3, [r3, #0]
 80063a4:	2b4e      	cmp	r3, #78	@ 0x4e
 80063a6:	d865      	bhi.n	8006474 <_scanf_float+0x124>
 80063a8:	2b40      	cmp	r3, #64	@ 0x40
 80063aa:	d83d      	bhi.n	8006428 <_scanf_float+0xd8>
 80063ac:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 80063b0:	b2c8      	uxtb	r0, r1
 80063b2:	280e      	cmp	r0, #14
 80063b4:	d93b      	bls.n	800642e <_scanf_float+0xde>
 80063b6:	f1b9 0f00 	cmp.w	r9, #0
 80063ba:	d003      	beq.n	80063c4 <_scanf_float+0x74>
 80063bc:	6823      	ldr	r3, [r4, #0]
 80063be:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80063c2:	6023      	str	r3, [r4, #0]
 80063c4:	f10a 3aff 	add.w	sl, sl, #4294967295
 80063c8:	f1ba 0f01 	cmp.w	sl, #1
 80063cc:	f200 8118 	bhi.w	8006600 <_scanf_float+0x2b0>
 80063d0:	9b01      	ldr	r3, [sp, #4]
 80063d2:	429e      	cmp	r6, r3
 80063d4:	f200 8109 	bhi.w	80065ea <_scanf_float+0x29a>
 80063d8:	2001      	movs	r0, #1
 80063da:	b007      	add	sp, #28
 80063dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063e0:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 80063e4:	2a0d      	cmp	r2, #13
 80063e6:	d8e6      	bhi.n	80063b6 <_scanf_float+0x66>
 80063e8:	a101      	add	r1, pc, #4	@ (adr r1, 80063f0 <_scanf_float+0xa0>)
 80063ea:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80063ee:	bf00      	nop
 80063f0:	08006537 	.word	0x08006537
 80063f4:	080063b7 	.word	0x080063b7
 80063f8:	080063b7 	.word	0x080063b7
 80063fc:	080063b7 	.word	0x080063b7
 8006400:	08006597 	.word	0x08006597
 8006404:	0800656f 	.word	0x0800656f
 8006408:	080063b7 	.word	0x080063b7
 800640c:	080063b7 	.word	0x080063b7
 8006410:	08006545 	.word	0x08006545
 8006414:	080063b7 	.word	0x080063b7
 8006418:	080063b7 	.word	0x080063b7
 800641c:	080063b7 	.word	0x080063b7
 8006420:	080063b7 	.word	0x080063b7
 8006424:	080064fd 	.word	0x080064fd
 8006428:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800642c:	e7da      	b.n	80063e4 <_scanf_float+0x94>
 800642e:	290e      	cmp	r1, #14
 8006430:	d8c1      	bhi.n	80063b6 <_scanf_float+0x66>
 8006432:	a001      	add	r0, pc, #4	@ (adr r0, 8006438 <_scanf_float+0xe8>)
 8006434:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8006438:	080064ed 	.word	0x080064ed
 800643c:	080063b7 	.word	0x080063b7
 8006440:	080064ed 	.word	0x080064ed
 8006444:	08006583 	.word	0x08006583
 8006448:	080063b7 	.word	0x080063b7
 800644c:	08006495 	.word	0x08006495
 8006450:	080064d3 	.word	0x080064d3
 8006454:	080064d3 	.word	0x080064d3
 8006458:	080064d3 	.word	0x080064d3
 800645c:	080064d3 	.word	0x080064d3
 8006460:	080064d3 	.word	0x080064d3
 8006464:	080064d3 	.word	0x080064d3
 8006468:	080064d3 	.word	0x080064d3
 800646c:	080064d3 	.word	0x080064d3
 8006470:	080064d3 	.word	0x080064d3
 8006474:	2b6e      	cmp	r3, #110	@ 0x6e
 8006476:	d809      	bhi.n	800648c <_scanf_float+0x13c>
 8006478:	2b60      	cmp	r3, #96	@ 0x60
 800647a:	d8b1      	bhi.n	80063e0 <_scanf_float+0x90>
 800647c:	2b54      	cmp	r3, #84	@ 0x54
 800647e:	d07b      	beq.n	8006578 <_scanf_float+0x228>
 8006480:	2b59      	cmp	r3, #89	@ 0x59
 8006482:	d198      	bne.n	80063b6 <_scanf_float+0x66>
 8006484:	2d07      	cmp	r5, #7
 8006486:	d196      	bne.n	80063b6 <_scanf_float+0x66>
 8006488:	2508      	movs	r5, #8
 800648a:	e02c      	b.n	80064e6 <_scanf_float+0x196>
 800648c:	2b74      	cmp	r3, #116	@ 0x74
 800648e:	d073      	beq.n	8006578 <_scanf_float+0x228>
 8006490:	2b79      	cmp	r3, #121	@ 0x79
 8006492:	e7f6      	b.n	8006482 <_scanf_float+0x132>
 8006494:	6821      	ldr	r1, [r4, #0]
 8006496:	05c8      	lsls	r0, r1, #23
 8006498:	d51b      	bpl.n	80064d2 <_scanf_float+0x182>
 800649a:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800649e:	6021      	str	r1, [r4, #0]
 80064a0:	f109 0901 	add.w	r9, r9, #1
 80064a4:	f1bb 0f00 	cmp.w	fp, #0
 80064a8:	d003      	beq.n	80064b2 <_scanf_float+0x162>
 80064aa:	3201      	adds	r2, #1
 80064ac:	f10b 3bff 	add.w	fp, fp, #4294967295
 80064b0:	60a2      	str	r2, [r4, #8]
 80064b2:	68a3      	ldr	r3, [r4, #8]
 80064b4:	3b01      	subs	r3, #1
 80064b6:	60a3      	str	r3, [r4, #8]
 80064b8:	6923      	ldr	r3, [r4, #16]
 80064ba:	3301      	adds	r3, #1
 80064bc:	6123      	str	r3, [r4, #16]
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	3b01      	subs	r3, #1
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	607b      	str	r3, [r7, #4]
 80064c6:	f340 8087 	ble.w	80065d8 <_scanf_float+0x288>
 80064ca:	683b      	ldr	r3, [r7, #0]
 80064cc:	3301      	adds	r3, #1
 80064ce:	603b      	str	r3, [r7, #0]
 80064d0:	e764      	b.n	800639c <_scanf_float+0x4c>
 80064d2:	eb1a 0105 	adds.w	r1, sl, r5
 80064d6:	f47f af6e 	bne.w	80063b6 <_scanf_float+0x66>
 80064da:	460d      	mov	r5, r1
 80064dc:	468a      	mov	sl, r1
 80064de:	6822      	ldr	r2, [r4, #0]
 80064e0:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 80064e4:	6022      	str	r2, [r4, #0]
 80064e6:	f806 3b01 	strb.w	r3, [r6], #1
 80064ea:	e7e2      	b.n	80064b2 <_scanf_float+0x162>
 80064ec:	6822      	ldr	r2, [r4, #0]
 80064ee:	0610      	lsls	r0, r2, #24
 80064f0:	f57f af61 	bpl.w	80063b6 <_scanf_float+0x66>
 80064f4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80064f8:	6022      	str	r2, [r4, #0]
 80064fa:	e7f4      	b.n	80064e6 <_scanf_float+0x196>
 80064fc:	f1ba 0f00 	cmp.w	sl, #0
 8006500:	d10e      	bne.n	8006520 <_scanf_float+0x1d0>
 8006502:	f1b9 0f00 	cmp.w	r9, #0
 8006506:	d10e      	bne.n	8006526 <_scanf_float+0x1d6>
 8006508:	6822      	ldr	r2, [r4, #0]
 800650a:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800650e:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8006512:	d108      	bne.n	8006526 <_scanf_float+0x1d6>
 8006514:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006518:	f04f 0a01 	mov.w	sl, #1
 800651c:	6022      	str	r2, [r4, #0]
 800651e:	e7e2      	b.n	80064e6 <_scanf_float+0x196>
 8006520:	f1ba 0f02 	cmp.w	sl, #2
 8006524:	d055      	beq.n	80065d2 <_scanf_float+0x282>
 8006526:	2d01      	cmp	r5, #1
 8006528:	d002      	beq.n	8006530 <_scanf_float+0x1e0>
 800652a:	2d04      	cmp	r5, #4
 800652c:	f47f af43 	bne.w	80063b6 <_scanf_float+0x66>
 8006530:	3501      	adds	r5, #1
 8006532:	b2ed      	uxtb	r5, r5
 8006534:	e7d7      	b.n	80064e6 <_scanf_float+0x196>
 8006536:	f1ba 0f01 	cmp.w	sl, #1
 800653a:	f47f af3c 	bne.w	80063b6 <_scanf_float+0x66>
 800653e:	f04f 0a02 	mov.w	sl, #2
 8006542:	e7d0      	b.n	80064e6 <_scanf_float+0x196>
 8006544:	b97d      	cbnz	r5, 8006566 <_scanf_float+0x216>
 8006546:	f1b9 0f00 	cmp.w	r9, #0
 800654a:	f47f af37 	bne.w	80063bc <_scanf_float+0x6c>
 800654e:	6822      	ldr	r2, [r4, #0]
 8006550:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8006554:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8006558:	f040 8103 	bne.w	8006762 <_scanf_float+0x412>
 800655c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006560:	2501      	movs	r5, #1
 8006562:	6022      	str	r2, [r4, #0]
 8006564:	e7bf      	b.n	80064e6 <_scanf_float+0x196>
 8006566:	2d03      	cmp	r5, #3
 8006568:	d0e2      	beq.n	8006530 <_scanf_float+0x1e0>
 800656a:	2d05      	cmp	r5, #5
 800656c:	e7de      	b.n	800652c <_scanf_float+0x1dc>
 800656e:	2d02      	cmp	r5, #2
 8006570:	f47f af21 	bne.w	80063b6 <_scanf_float+0x66>
 8006574:	2503      	movs	r5, #3
 8006576:	e7b6      	b.n	80064e6 <_scanf_float+0x196>
 8006578:	2d06      	cmp	r5, #6
 800657a:	f47f af1c 	bne.w	80063b6 <_scanf_float+0x66>
 800657e:	2507      	movs	r5, #7
 8006580:	e7b1      	b.n	80064e6 <_scanf_float+0x196>
 8006582:	6822      	ldr	r2, [r4, #0]
 8006584:	0591      	lsls	r1, r2, #22
 8006586:	f57f af16 	bpl.w	80063b6 <_scanf_float+0x66>
 800658a:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800658e:	6022      	str	r2, [r4, #0]
 8006590:	f8cd 9008 	str.w	r9, [sp, #8]
 8006594:	e7a7      	b.n	80064e6 <_scanf_float+0x196>
 8006596:	6822      	ldr	r2, [r4, #0]
 8006598:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800659c:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80065a0:	d006      	beq.n	80065b0 <_scanf_float+0x260>
 80065a2:	0550      	lsls	r0, r2, #21
 80065a4:	f57f af07 	bpl.w	80063b6 <_scanf_float+0x66>
 80065a8:	f1b9 0f00 	cmp.w	r9, #0
 80065ac:	f000 80d9 	beq.w	8006762 <_scanf_float+0x412>
 80065b0:	0591      	lsls	r1, r2, #22
 80065b2:	bf58      	it	pl
 80065b4:	9902      	ldrpl	r1, [sp, #8]
 80065b6:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80065ba:	bf58      	it	pl
 80065bc:	eba9 0101 	subpl.w	r1, r9, r1
 80065c0:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 80065c4:	f04f 0900 	mov.w	r9, #0
 80065c8:	bf58      	it	pl
 80065ca:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80065ce:	6022      	str	r2, [r4, #0]
 80065d0:	e789      	b.n	80064e6 <_scanf_float+0x196>
 80065d2:	f04f 0a03 	mov.w	sl, #3
 80065d6:	e786      	b.n	80064e6 <_scanf_float+0x196>
 80065d8:	4639      	mov	r1, r7
 80065da:	4640      	mov	r0, r8
 80065dc:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80065e0:	4798      	blx	r3
 80065e2:	2800      	cmp	r0, #0
 80065e4:	f43f aeda 	beq.w	800639c <_scanf_float+0x4c>
 80065e8:	e6e5      	b.n	80063b6 <_scanf_float+0x66>
 80065ea:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80065ee:	463a      	mov	r2, r7
 80065f0:	4640      	mov	r0, r8
 80065f2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80065f6:	4798      	blx	r3
 80065f8:	6923      	ldr	r3, [r4, #16]
 80065fa:	3b01      	subs	r3, #1
 80065fc:	6123      	str	r3, [r4, #16]
 80065fe:	e6e7      	b.n	80063d0 <_scanf_float+0x80>
 8006600:	1e6b      	subs	r3, r5, #1
 8006602:	2b06      	cmp	r3, #6
 8006604:	d824      	bhi.n	8006650 <_scanf_float+0x300>
 8006606:	2d02      	cmp	r5, #2
 8006608:	d836      	bhi.n	8006678 <_scanf_float+0x328>
 800660a:	9b01      	ldr	r3, [sp, #4]
 800660c:	429e      	cmp	r6, r3
 800660e:	f67f aee3 	bls.w	80063d8 <_scanf_float+0x88>
 8006612:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006616:	463a      	mov	r2, r7
 8006618:	4640      	mov	r0, r8
 800661a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800661e:	4798      	blx	r3
 8006620:	6923      	ldr	r3, [r4, #16]
 8006622:	3b01      	subs	r3, #1
 8006624:	6123      	str	r3, [r4, #16]
 8006626:	e7f0      	b.n	800660a <_scanf_float+0x2ba>
 8006628:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800662c:	463a      	mov	r2, r7
 800662e:	4640      	mov	r0, r8
 8006630:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8006634:	4798      	blx	r3
 8006636:	6923      	ldr	r3, [r4, #16]
 8006638:	3b01      	subs	r3, #1
 800663a:	6123      	str	r3, [r4, #16]
 800663c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006640:	fa5f fa8a 	uxtb.w	sl, sl
 8006644:	f1ba 0f02 	cmp.w	sl, #2
 8006648:	d1ee      	bne.n	8006628 <_scanf_float+0x2d8>
 800664a:	3d03      	subs	r5, #3
 800664c:	b2ed      	uxtb	r5, r5
 800664e:	1b76      	subs	r6, r6, r5
 8006650:	6823      	ldr	r3, [r4, #0]
 8006652:	05da      	lsls	r2, r3, #23
 8006654:	d530      	bpl.n	80066b8 <_scanf_float+0x368>
 8006656:	055b      	lsls	r3, r3, #21
 8006658:	d511      	bpl.n	800667e <_scanf_float+0x32e>
 800665a:	9b01      	ldr	r3, [sp, #4]
 800665c:	429e      	cmp	r6, r3
 800665e:	f67f aebb 	bls.w	80063d8 <_scanf_float+0x88>
 8006662:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006666:	463a      	mov	r2, r7
 8006668:	4640      	mov	r0, r8
 800666a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800666e:	4798      	blx	r3
 8006670:	6923      	ldr	r3, [r4, #16]
 8006672:	3b01      	subs	r3, #1
 8006674:	6123      	str	r3, [r4, #16]
 8006676:	e7f0      	b.n	800665a <_scanf_float+0x30a>
 8006678:	46aa      	mov	sl, r5
 800667a:	46b3      	mov	fp, r6
 800667c:	e7de      	b.n	800663c <_scanf_float+0x2ec>
 800667e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8006682:	6923      	ldr	r3, [r4, #16]
 8006684:	2965      	cmp	r1, #101	@ 0x65
 8006686:	f103 33ff 	add.w	r3, r3, #4294967295
 800668a:	f106 35ff 	add.w	r5, r6, #4294967295
 800668e:	6123      	str	r3, [r4, #16]
 8006690:	d00c      	beq.n	80066ac <_scanf_float+0x35c>
 8006692:	2945      	cmp	r1, #69	@ 0x45
 8006694:	d00a      	beq.n	80066ac <_scanf_float+0x35c>
 8006696:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800669a:	463a      	mov	r2, r7
 800669c:	4640      	mov	r0, r8
 800669e:	4798      	blx	r3
 80066a0:	6923      	ldr	r3, [r4, #16]
 80066a2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80066a6:	3b01      	subs	r3, #1
 80066a8:	1eb5      	subs	r5, r6, #2
 80066aa:	6123      	str	r3, [r4, #16]
 80066ac:	463a      	mov	r2, r7
 80066ae:	4640      	mov	r0, r8
 80066b0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80066b4:	4798      	blx	r3
 80066b6:	462e      	mov	r6, r5
 80066b8:	6822      	ldr	r2, [r4, #0]
 80066ba:	f012 0210 	ands.w	r2, r2, #16
 80066be:	d001      	beq.n	80066c4 <_scanf_float+0x374>
 80066c0:	2000      	movs	r0, #0
 80066c2:	e68a      	b.n	80063da <_scanf_float+0x8a>
 80066c4:	7032      	strb	r2, [r6, #0]
 80066c6:	6823      	ldr	r3, [r4, #0]
 80066c8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80066cc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80066d0:	d11c      	bne.n	800670c <_scanf_float+0x3bc>
 80066d2:	9b02      	ldr	r3, [sp, #8]
 80066d4:	454b      	cmp	r3, r9
 80066d6:	eba3 0209 	sub.w	r2, r3, r9
 80066da:	d123      	bne.n	8006724 <_scanf_float+0x3d4>
 80066dc:	2200      	movs	r2, #0
 80066de:	4640      	mov	r0, r8
 80066e0:	9901      	ldr	r1, [sp, #4]
 80066e2:	f002 fc65 	bl	8008fb0 <_strtod_r>
 80066e6:	9b03      	ldr	r3, [sp, #12]
 80066e8:	6825      	ldr	r5, [r4, #0]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	f015 0f02 	tst.w	r5, #2
 80066f0:	4606      	mov	r6, r0
 80066f2:	460f      	mov	r7, r1
 80066f4:	f103 0204 	add.w	r2, r3, #4
 80066f8:	d01f      	beq.n	800673a <_scanf_float+0x3ea>
 80066fa:	9903      	ldr	r1, [sp, #12]
 80066fc:	600a      	str	r2, [r1, #0]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	e9c3 6700 	strd	r6, r7, [r3]
 8006704:	68e3      	ldr	r3, [r4, #12]
 8006706:	3301      	adds	r3, #1
 8006708:	60e3      	str	r3, [r4, #12]
 800670a:	e7d9      	b.n	80066c0 <_scanf_float+0x370>
 800670c:	9b04      	ldr	r3, [sp, #16]
 800670e:	2b00      	cmp	r3, #0
 8006710:	d0e4      	beq.n	80066dc <_scanf_float+0x38c>
 8006712:	9905      	ldr	r1, [sp, #20]
 8006714:	230a      	movs	r3, #10
 8006716:	4640      	mov	r0, r8
 8006718:	3101      	adds	r1, #1
 800671a:	f002 fcc9 	bl	80090b0 <_strtol_r>
 800671e:	9b04      	ldr	r3, [sp, #16]
 8006720:	9e05      	ldr	r6, [sp, #20]
 8006722:	1ac2      	subs	r2, r0, r3
 8006724:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8006728:	429e      	cmp	r6, r3
 800672a:	bf28      	it	cs
 800672c:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8006730:	4630      	mov	r0, r6
 8006732:	490d      	ldr	r1, [pc, #52]	@ (8006768 <_scanf_float+0x418>)
 8006734:	f000 f912 	bl	800695c <siprintf>
 8006738:	e7d0      	b.n	80066dc <_scanf_float+0x38c>
 800673a:	076d      	lsls	r5, r5, #29
 800673c:	d4dd      	bmi.n	80066fa <_scanf_float+0x3aa>
 800673e:	9d03      	ldr	r5, [sp, #12]
 8006740:	602a      	str	r2, [r5, #0]
 8006742:	681d      	ldr	r5, [r3, #0]
 8006744:	4602      	mov	r2, r0
 8006746:	460b      	mov	r3, r1
 8006748:	f7fa f960 	bl	8000a0c <__aeabi_dcmpun>
 800674c:	b120      	cbz	r0, 8006758 <_scanf_float+0x408>
 800674e:	4807      	ldr	r0, [pc, #28]	@ (800676c <_scanf_float+0x41c>)
 8006750:	f000 fa38 	bl	8006bc4 <nanf>
 8006754:	6028      	str	r0, [r5, #0]
 8006756:	e7d5      	b.n	8006704 <_scanf_float+0x3b4>
 8006758:	4630      	mov	r0, r6
 800675a:	4639      	mov	r1, r7
 800675c:	f7fa f9b4 	bl	8000ac8 <__aeabi_d2f>
 8006760:	e7f8      	b.n	8006754 <_scanf_float+0x404>
 8006762:	f04f 0900 	mov.w	r9, #0
 8006766:	e62d      	b.n	80063c4 <_scanf_float+0x74>
 8006768:	0800abfc 	.word	0x0800abfc
 800676c:	0800afb0 	.word	0x0800afb0

08006770 <std>:
 8006770:	2300      	movs	r3, #0
 8006772:	b510      	push	{r4, lr}
 8006774:	4604      	mov	r4, r0
 8006776:	e9c0 3300 	strd	r3, r3, [r0]
 800677a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800677e:	6083      	str	r3, [r0, #8]
 8006780:	8181      	strh	r1, [r0, #12]
 8006782:	6643      	str	r3, [r0, #100]	@ 0x64
 8006784:	81c2      	strh	r2, [r0, #14]
 8006786:	6183      	str	r3, [r0, #24]
 8006788:	4619      	mov	r1, r3
 800678a:	2208      	movs	r2, #8
 800678c:	305c      	adds	r0, #92	@ 0x5c
 800678e:	f000 f974 	bl	8006a7a <memset>
 8006792:	4b0d      	ldr	r3, [pc, #52]	@ (80067c8 <std+0x58>)
 8006794:	6224      	str	r4, [r4, #32]
 8006796:	6263      	str	r3, [r4, #36]	@ 0x24
 8006798:	4b0c      	ldr	r3, [pc, #48]	@ (80067cc <std+0x5c>)
 800679a:	62a3      	str	r3, [r4, #40]	@ 0x28
 800679c:	4b0c      	ldr	r3, [pc, #48]	@ (80067d0 <std+0x60>)
 800679e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80067a0:	4b0c      	ldr	r3, [pc, #48]	@ (80067d4 <std+0x64>)
 80067a2:	6323      	str	r3, [r4, #48]	@ 0x30
 80067a4:	4b0c      	ldr	r3, [pc, #48]	@ (80067d8 <std+0x68>)
 80067a6:	429c      	cmp	r4, r3
 80067a8:	d006      	beq.n	80067b8 <std+0x48>
 80067aa:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80067ae:	4294      	cmp	r4, r2
 80067b0:	d002      	beq.n	80067b8 <std+0x48>
 80067b2:	33d0      	adds	r3, #208	@ 0xd0
 80067b4:	429c      	cmp	r4, r3
 80067b6:	d105      	bne.n	80067c4 <std+0x54>
 80067b8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80067bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80067c0:	f000 b9ee 	b.w	8006ba0 <__retarget_lock_init_recursive>
 80067c4:	bd10      	pop	{r4, pc}
 80067c6:	bf00      	nop
 80067c8:	080069f1 	.word	0x080069f1
 80067cc:	08006a17 	.word	0x08006a17
 80067d0:	08006a4f 	.word	0x08006a4f
 80067d4:	08006a73 	.word	0x08006a73
 80067d8:	200008c4 	.word	0x200008c4

080067dc <stdio_exit_handler>:
 80067dc:	4a02      	ldr	r2, [pc, #8]	@ (80067e8 <stdio_exit_handler+0xc>)
 80067de:	4903      	ldr	r1, [pc, #12]	@ (80067ec <stdio_exit_handler+0x10>)
 80067e0:	4803      	ldr	r0, [pc, #12]	@ (80067f0 <stdio_exit_handler+0x14>)
 80067e2:	f000 b869 	b.w	80068b8 <_fwalk_sglue>
 80067e6:	bf00      	nop
 80067e8:	20000010 	.word	0x20000010
 80067ec:	08009a91 	.word	0x08009a91
 80067f0:	20000020 	.word	0x20000020

080067f4 <cleanup_stdio>:
 80067f4:	6841      	ldr	r1, [r0, #4]
 80067f6:	4b0c      	ldr	r3, [pc, #48]	@ (8006828 <cleanup_stdio+0x34>)
 80067f8:	b510      	push	{r4, lr}
 80067fa:	4299      	cmp	r1, r3
 80067fc:	4604      	mov	r4, r0
 80067fe:	d001      	beq.n	8006804 <cleanup_stdio+0x10>
 8006800:	f003 f946 	bl	8009a90 <_fflush_r>
 8006804:	68a1      	ldr	r1, [r4, #8]
 8006806:	4b09      	ldr	r3, [pc, #36]	@ (800682c <cleanup_stdio+0x38>)
 8006808:	4299      	cmp	r1, r3
 800680a:	d002      	beq.n	8006812 <cleanup_stdio+0x1e>
 800680c:	4620      	mov	r0, r4
 800680e:	f003 f93f 	bl	8009a90 <_fflush_r>
 8006812:	68e1      	ldr	r1, [r4, #12]
 8006814:	4b06      	ldr	r3, [pc, #24]	@ (8006830 <cleanup_stdio+0x3c>)
 8006816:	4299      	cmp	r1, r3
 8006818:	d004      	beq.n	8006824 <cleanup_stdio+0x30>
 800681a:	4620      	mov	r0, r4
 800681c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006820:	f003 b936 	b.w	8009a90 <_fflush_r>
 8006824:	bd10      	pop	{r4, pc}
 8006826:	bf00      	nop
 8006828:	200008c4 	.word	0x200008c4
 800682c:	2000092c 	.word	0x2000092c
 8006830:	20000994 	.word	0x20000994

08006834 <global_stdio_init.part.0>:
 8006834:	b510      	push	{r4, lr}
 8006836:	4b0b      	ldr	r3, [pc, #44]	@ (8006864 <global_stdio_init.part.0+0x30>)
 8006838:	4c0b      	ldr	r4, [pc, #44]	@ (8006868 <global_stdio_init.part.0+0x34>)
 800683a:	4a0c      	ldr	r2, [pc, #48]	@ (800686c <global_stdio_init.part.0+0x38>)
 800683c:	4620      	mov	r0, r4
 800683e:	601a      	str	r2, [r3, #0]
 8006840:	2104      	movs	r1, #4
 8006842:	2200      	movs	r2, #0
 8006844:	f7ff ff94 	bl	8006770 <std>
 8006848:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800684c:	2201      	movs	r2, #1
 800684e:	2109      	movs	r1, #9
 8006850:	f7ff ff8e 	bl	8006770 <std>
 8006854:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006858:	2202      	movs	r2, #2
 800685a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800685e:	2112      	movs	r1, #18
 8006860:	f7ff bf86 	b.w	8006770 <std>
 8006864:	200009fc 	.word	0x200009fc
 8006868:	200008c4 	.word	0x200008c4
 800686c:	080067dd 	.word	0x080067dd

08006870 <__sfp_lock_acquire>:
 8006870:	4801      	ldr	r0, [pc, #4]	@ (8006878 <__sfp_lock_acquire+0x8>)
 8006872:	f000 b996 	b.w	8006ba2 <__retarget_lock_acquire_recursive>
 8006876:	bf00      	nop
 8006878:	20000a05 	.word	0x20000a05

0800687c <__sfp_lock_release>:
 800687c:	4801      	ldr	r0, [pc, #4]	@ (8006884 <__sfp_lock_release+0x8>)
 800687e:	f000 b991 	b.w	8006ba4 <__retarget_lock_release_recursive>
 8006882:	bf00      	nop
 8006884:	20000a05 	.word	0x20000a05

08006888 <__sinit>:
 8006888:	b510      	push	{r4, lr}
 800688a:	4604      	mov	r4, r0
 800688c:	f7ff fff0 	bl	8006870 <__sfp_lock_acquire>
 8006890:	6a23      	ldr	r3, [r4, #32]
 8006892:	b11b      	cbz	r3, 800689c <__sinit+0x14>
 8006894:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006898:	f7ff bff0 	b.w	800687c <__sfp_lock_release>
 800689c:	4b04      	ldr	r3, [pc, #16]	@ (80068b0 <__sinit+0x28>)
 800689e:	6223      	str	r3, [r4, #32]
 80068a0:	4b04      	ldr	r3, [pc, #16]	@ (80068b4 <__sinit+0x2c>)
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d1f5      	bne.n	8006894 <__sinit+0xc>
 80068a8:	f7ff ffc4 	bl	8006834 <global_stdio_init.part.0>
 80068ac:	e7f2      	b.n	8006894 <__sinit+0xc>
 80068ae:	bf00      	nop
 80068b0:	080067f5 	.word	0x080067f5
 80068b4:	200009fc 	.word	0x200009fc

080068b8 <_fwalk_sglue>:
 80068b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80068bc:	4607      	mov	r7, r0
 80068be:	4688      	mov	r8, r1
 80068c0:	4614      	mov	r4, r2
 80068c2:	2600      	movs	r6, #0
 80068c4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80068c8:	f1b9 0901 	subs.w	r9, r9, #1
 80068cc:	d505      	bpl.n	80068da <_fwalk_sglue+0x22>
 80068ce:	6824      	ldr	r4, [r4, #0]
 80068d0:	2c00      	cmp	r4, #0
 80068d2:	d1f7      	bne.n	80068c4 <_fwalk_sglue+0xc>
 80068d4:	4630      	mov	r0, r6
 80068d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80068da:	89ab      	ldrh	r3, [r5, #12]
 80068dc:	2b01      	cmp	r3, #1
 80068de:	d907      	bls.n	80068f0 <_fwalk_sglue+0x38>
 80068e0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80068e4:	3301      	adds	r3, #1
 80068e6:	d003      	beq.n	80068f0 <_fwalk_sglue+0x38>
 80068e8:	4629      	mov	r1, r5
 80068ea:	4638      	mov	r0, r7
 80068ec:	47c0      	blx	r8
 80068ee:	4306      	orrs	r6, r0
 80068f0:	3568      	adds	r5, #104	@ 0x68
 80068f2:	e7e9      	b.n	80068c8 <_fwalk_sglue+0x10>

080068f4 <sniprintf>:
 80068f4:	b40c      	push	{r2, r3}
 80068f6:	b530      	push	{r4, r5, lr}
 80068f8:	4b17      	ldr	r3, [pc, #92]	@ (8006958 <sniprintf+0x64>)
 80068fa:	1e0c      	subs	r4, r1, #0
 80068fc:	681d      	ldr	r5, [r3, #0]
 80068fe:	b09d      	sub	sp, #116	@ 0x74
 8006900:	da08      	bge.n	8006914 <sniprintf+0x20>
 8006902:	238b      	movs	r3, #139	@ 0x8b
 8006904:	f04f 30ff 	mov.w	r0, #4294967295
 8006908:	602b      	str	r3, [r5, #0]
 800690a:	b01d      	add	sp, #116	@ 0x74
 800690c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006910:	b002      	add	sp, #8
 8006912:	4770      	bx	lr
 8006914:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8006918:	f8ad 3014 	strh.w	r3, [sp, #20]
 800691c:	bf0c      	ite	eq
 800691e:	4623      	moveq	r3, r4
 8006920:	f104 33ff 	addne.w	r3, r4, #4294967295
 8006924:	9304      	str	r3, [sp, #16]
 8006926:	9307      	str	r3, [sp, #28]
 8006928:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800692c:	9002      	str	r0, [sp, #8]
 800692e:	9006      	str	r0, [sp, #24]
 8006930:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006934:	4628      	mov	r0, r5
 8006936:	ab21      	add	r3, sp, #132	@ 0x84
 8006938:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800693a:	a902      	add	r1, sp, #8
 800693c:	9301      	str	r3, [sp, #4]
 800693e:	f002 fc15 	bl	800916c <_svfiprintf_r>
 8006942:	1c43      	adds	r3, r0, #1
 8006944:	bfbc      	itt	lt
 8006946:	238b      	movlt	r3, #139	@ 0x8b
 8006948:	602b      	strlt	r3, [r5, #0]
 800694a:	2c00      	cmp	r4, #0
 800694c:	d0dd      	beq.n	800690a <sniprintf+0x16>
 800694e:	2200      	movs	r2, #0
 8006950:	9b02      	ldr	r3, [sp, #8]
 8006952:	701a      	strb	r2, [r3, #0]
 8006954:	e7d9      	b.n	800690a <sniprintf+0x16>
 8006956:	bf00      	nop
 8006958:	2000001c 	.word	0x2000001c

0800695c <siprintf>:
 800695c:	b40e      	push	{r1, r2, r3}
 800695e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006962:	b500      	push	{lr}
 8006964:	b09c      	sub	sp, #112	@ 0x70
 8006966:	ab1d      	add	r3, sp, #116	@ 0x74
 8006968:	9002      	str	r0, [sp, #8]
 800696a:	9006      	str	r0, [sp, #24]
 800696c:	9107      	str	r1, [sp, #28]
 800696e:	9104      	str	r1, [sp, #16]
 8006970:	4808      	ldr	r0, [pc, #32]	@ (8006994 <siprintf+0x38>)
 8006972:	4909      	ldr	r1, [pc, #36]	@ (8006998 <siprintf+0x3c>)
 8006974:	f853 2b04 	ldr.w	r2, [r3], #4
 8006978:	9105      	str	r1, [sp, #20]
 800697a:	6800      	ldr	r0, [r0, #0]
 800697c:	a902      	add	r1, sp, #8
 800697e:	9301      	str	r3, [sp, #4]
 8006980:	f002 fbf4 	bl	800916c <_svfiprintf_r>
 8006984:	2200      	movs	r2, #0
 8006986:	9b02      	ldr	r3, [sp, #8]
 8006988:	701a      	strb	r2, [r3, #0]
 800698a:	b01c      	add	sp, #112	@ 0x70
 800698c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006990:	b003      	add	sp, #12
 8006992:	4770      	bx	lr
 8006994:	2000001c 	.word	0x2000001c
 8006998:	ffff0208 	.word	0xffff0208

0800699c <siscanf>:
 800699c:	b40e      	push	{r1, r2, r3}
 800699e:	f44f 7201 	mov.w	r2, #516	@ 0x204
 80069a2:	b530      	push	{r4, r5, lr}
 80069a4:	b09c      	sub	sp, #112	@ 0x70
 80069a6:	ac1f      	add	r4, sp, #124	@ 0x7c
 80069a8:	f854 5b04 	ldr.w	r5, [r4], #4
 80069ac:	f8ad 2014 	strh.w	r2, [sp, #20]
 80069b0:	9002      	str	r0, [sp, #8]
 80069b2:	9006      	str	r0, [sp, #24]
 80069b4:	f7f9 fbcc 	bl	8000150 <strlen>
 80069b8:	4b0b      	ldr	r3, [pc, #44]	@ (80069e8 <siscanf+0x4c>)
 80069ba:	9003      	str	r0, [sp, #12]
 80069bc:	930b      	str	r3, [sp, #44]	@ 0x2c
 80069be:	2300      	movs	r3, #0
 80069c0:	930f      	str	r3, [sp, #60]	@ 0x3c
 80069c2:	9314      	str	r3, [sp, #80]	@ 0x50
 80069c4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80069c8:	9007      	str	r0, [sp, #28]
 80069ca:	4808      	ldr	r0, [pc, #32]	@ (80069ec <siscanf+0x50>)
 80069cc:	f8ad 3016 	strh.w	r3, [sp, #22]
 80069d0:	462a      	mov	r2, r5
 80069d2:	4623      	mov	r3, r4
 80069d4:	a902      	add	r1, sp, #8
 80069d6:	6800      	ldr	r0, [r0, #0]
 80069d8:	9401      	str	r4, [sp, #4]
 80069da:	f002 fd1b 	bl	8009414 <__ssvfiscanf_r>
 80069de:	b01c      	add	sp, #112	@ 0x70
 80069e0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80069e4:	b003      	add	sp, #12
 80069e6:	4770      	bx	lr
 80069e8:	08006a13 	.word	0x08006a13
 80069ec:	2000001c 	.word	0x2000001c

080069f0 <__sread>:
 80069f0:	b510      	push	{r4, lr}
 80069f2:	460c      	mov	r4, r1
 80069f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80069f8:	f000 f884 	bl	8006b04 <_read_r>
 80069fc:	2800      	cmp	r0, #0
 80069fe:	bfab      	itete	ge
 8006a00:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006a02:	89a3      	ldrhlt	r3, [r4, #12]
 8006a04:	181b      	addge	r3, r3, r0
 8006a06:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006a0a:	bfac      	ite	ge
 8006a0c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006a0e:	81a3      	strhlt	r3, [r4, #12]
 8006a10:	bd10      	pop	{r4, pc}

08006a12 <__seofread>:
 8006a12:	2000      	movs	r0, #0
 8006a14:	4770      	bx	lr

08006a16 <__swrite>:
 8006a16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a1a:	461f      	mov	r7, r3
 8006a1c:	898b      	ldrh	r3, [r1, #12]
 8006a1e:	4605      	mov	r5, r0
 8006a20:	05db      	lsls	r3, r3, #23
 8006a22:	460c      	mov	r4, r1
 8006a24:	4616      	mov	r6, r2
 8006a26:	d505      	bpl.n	8006a34 <__swrite+0x1e>
 8006a28:	2302      	movs	r3, #2
 8006a2a:	2200      	movs	r2, #0
 8006a2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a30:	f000 f856 	bl	8006ae0 <_lseek_r>
 8006a34:	89a3      	ldrh	r3, [r4, #12]
 8006a36:	4632      	mov	r2, r6
 8006a38:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006a3c:	81a3      	strh	r3, [r4, #12]
 8006a3e:	4628      	mov	r0, r5
 8006a40:	463b      	mov	r3, r7
 8006a42:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006a46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006a4a:	f000 b86d 	b.w	8006b28 <_write_r>

08006a4e <__sseek>:
 8006a4e:	b510      	push	{r4, lr}
 8006a50:	460c      	mov	r4, r1
 8006a52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a56:	f000 f843 	bl	8006ae0 <_lseek_r>
 8006a5a:	1c43      	adds	r3, r0, #1
 8006a5c:	89a3      	ldrh	r3, [r4, #12]
 8006a5e:	bf15      	itete	ne
 8006a60:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006a62:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006a66:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006a6a:	81a3      	strheq	r3, [r4, #12]
 8006a6c:	bf18      	it	ne
 8006a6e:	81a3      	strhne	r3, [r4, #12]
 8006a70:	bd10      	pop	{r4, pc}

08006a72 <__sclose>:
 8006a72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a76:	f000 b823 	b.w	8006ac0 <_close_r>

08006a7a <memset>:
 8006a7a:	4603      	mov	r3, r0
 8006a7c:	4402      	add	r2, r0
 8006a7e:	4293      	cmp	r3, r2
 8006a80:	d100      	bne.n	8006a84 <memset+0xa>
 8006a82:	4770      	bx	lr
 8006a84:	f803 1b01 	strb.w	r1, [r3], #1
 8006a88:	e7f9      	b.n	8006a7e <memset+0x4>

08006a8a <strstr>:
 8006a8a:	780a      	ldrb	r2, [r1, #0]
 8006a8c:	b570      	push	{r4, r5, r6, lr}
 8006a8e:	b96a      	cbnz	r2, 8006aac <strstr+0x22>
 8006a90:	bd70      	pop	{r4, r5, r6, pc}
 8006a92:	429a      	cmp	r2, r3
 8006a94:	d109      	bne.n	8006aaa <strstr+0x20>
 8006a96:	460c      	mov	r4, r1
 8006a98:	4605      	mov	r5, r0
 8006a9a:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d0f6      	beq.n	8006a90 <strstr+0x6>
 8006aa2:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8006aa6:	429e      	cmp	r6, r3
 8006aa8:	d0f7      	beq.n	8006a9a <strstr+0x10>
 8006aaa:	3001      	adds	r0, #1
 8006aac:	7803      	ldrb	r3, [r0, #0]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d1ef      	bne.n	8006a92 <strstr+0x8>
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	e7ec      	b.n	8006a90 <strstr+0x6>
	...

08006ab8 <_localeconv_r>:
 8006ab8:	4800      	ldr	r0, [pc, #0]	@ (8006abc <_localeconv_r+0x4>)
 8006aba:	4770      	bx	lr
 8006abc:	2000015c 	.word	0x2000015c

08006ac0 <_close_r>:
 8006ac0:	b538      	push	{r3, r4, r5, lr}
 8006ac2:	2300      	movs	r3, #0
 8006ac4:	4d05      	ldr	r5, [pc, #20]	@ (8006adc <_close_r+0x1c>)
 8006ac6:	4604      	mov	r4, r0
 8006ac8:	4608      	mov	r0, r1
 8006aca:	602b      	str	r3, [r5, #0]
 8006acc:	f7fc f985 	bl	8002dda <_close>
 8006ad0:	1c43      	adds	r3, r0, #1
 8006ad2:	d102      	bne.n	8006ada <_close_r+0x1a>
 8006ad4:	682b      	ldr	r3, [r5, #0]
 8006ad6:	b103      	cbz	r3, 8006ada <_close_r+0x1a>
 8006ad8:	6023      	str	r3, [r4, #0]
 8006ada:	bd38      	pop	{r3, r4, r5, pc}
 8006adc:	20000a00 	.word	0x20000a00

08006ae0 <_lseek_r>:
 8006ae0:	b538      	push	{r3, r4, r5, lr}
 8006ae2:	4604      	mov	r4, r0
 8006ae4:	4608      	mov	r0, r1
 8006ae6:	4611      	mov	r1, r2
 8006ae8:	2200      	movs	r2, #0
 8006aea:	4d05      	ldr	r5, [pc, #20]	@ (8006b00 <_lseek_r+0x20>)
 8006aec:	602a      	str	r2, [r5, #0]
 8006aee:	461a      	mov	r2, r3
 8006af0:	f7fc f997 	bl	8002e22 <_lseek>
 8006af4:	1c43      	adds	r3, r0, #1
 8006af6:	d102      	bne.n	8006afe <_lseek_r+0x1e>
 8006af8:	682b      	ldr	r3, [r5, #0]
 8006afa:	b103      	cbz	r3, 8006afe <_lseek_r+0x1e>
 8006afc:	6023      	str	r3, [r4, #0]
 8006afe:	bd38      	pop	{r3, r4, r5, pc}
 8006b00:	20000a00 	.word	0x20000a00

08006b04 <_read_r>:
 8006b04:	b538      	push	{r3, r4, r5, lr}
 8006b06:	4604      	mov	r4, r0
 8006b08:	4608      	mov	r0, r1
 8006b0a:	4611      	mov	r1, r2
 8006b0c:	2200      	movs	r2, #0
 8006b0e:	4d05      	ldr	r5, [pc, #20]	@ (8006b24 <_read_r+0x20>)
 8006b10:	602a      	str	r2, [r5, #0]
 8006b12:	461a      	mov	r2, r3
 8006b14:	f7fc f928 	bl	8002d68 <_read>
 8006b18:	1c43      	adds	r3, r0, #1
 8006b1a:	d102      	bne.n	8006b22 <_read_r+0x1e>
 8006b1c:	682b      	ldr	r3, [r5, #0]
 8006b1e:	b103      	cbz	r3, 8006b22 <_read_r+0x1e>
 8006b20:	6023      	str	r3, [r4, #0]
 8006b22:	bd38      	pop	{r3, r4, r5, pc}
 8006b24:	20000a00 	.word	0x20000a00

08006b28 <_write_r>:
 8006b28:	b538      	push	{r3, r4, r5, lr}
 8006b2a:	4604      	mov	r4, r0
 8006b2c:	4608      	mov	r0, r1
 8006b2e:	4611      	mov	r1, r2
 8006b30:	2200      	movs	r2, #0
 8006b32:	4d05      	ldr	r5, [pc, #20]	@ (8006b48 <_write_r+0x20>)
 8006b34:	602a      	str	r2, [r5, #0]
 8006b36:	461a      	mov	r2, r3
 8006b38:	f7fc f933 	bl	8002da2 <_write>
 8006b3c:	1c43      	adds	r3, r0, #1
 8006b3e:	d102      	bne.n	8006b46 <_write_r+0x1e>
 8006b40:	682b      	ldr	r3, [r5, #0]
 8006b42:	b103      	cbz	r3, 8006b46 <_write_r+0x1e>
 8006b44:	6023      	str	r3, [r4, #0]
 8006b46:	bd38      	pop	{r3, r4, r5, pc}
 8006b48:	20000a00 	.word	0x20000a00

08006b4c <__errno>:
 8006b4c:	4b01      	ldr	r3, [pc, #4]	@ (8006b54 <__errno+0x8>)
 8006b4e:	6818      	ldr	r0, [r3, #0]
 8006b50:	4770      	bx	lr
 8006b52:	bf00      	nop
 8006b54:	2000001c 	.word	0x2000001c

08006b58 <__libc_init_array>:
 8006b58:	b570      	push	{r4, r5, r6, lr}
 8006b5a:	2600      	movs	r6, #0
 8006b5c:	4d0c      	ldr	r5, [pc, #48]	@ (8006b90 <__libc_init_array+0x38>)
 8006b5e:	4c0d      	ldr	r4, [pc, #52]	@ (8006b94 <__libc_init_array+0x3c>)
 8006b60:	1b64      	subs	r4, r4, r5
 8006b62:	10a4      	asrs	r4, r4, #2
 8006b64:	42a6      	cmp	r6, r4
 8006b66:	d109      	bne.n	8006b7c <__libc_init_array+0x24>
 8006b68:	f003 ff62 	bl	800aa30 <_init>
 8006b6c:	2600      	movs	r6, #0
 8006b6e:	4d0a      	ldr	r5, [pc, #40]	@ (8006b98 <__libc_init_array+0x40>)
 8006b70:	4c0a      	ldr	r4, [pc, #40]	@ (8006b9c <__libc_init_array+0x44>)
 8006b72:	1b64      	subs	r4, r4, r5
 8006b74:	10a4      	asrs	r4, r4, #2
 8006b76:	42a6      	cmp	r6, r4
 8006b78:	d105      	bne.n	8006b86 <__libc_init_array+0x2e>
 8006b7a:	bd70      	pop	{r4, r5, r6, pc}
 8006b7c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b80:	4798      	blx	r3
 8006b82:	3601      	adds	r6, #1
 8006b84:	e7ee      	b.n	8006b64 <__libc_init_array+0xc>
 8006b86:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b8a:	4798      	blx	r3
 8006b8c:	3601      	adds	r6, #1
 8006b8e:	e7f2      	b.n	8006b76 <__libc_init_array+0x1e>
 8006b90:	0800b01c 	.word	0x0800b01c
 8006b94:	0800b01c 	.word	0x0800b01c
 8006b98:	0800b01c 	.word	0x0800b01c
 8006b9c:	0800b020 	.word	0x0800b020

08006ba0 <__retarget_lock_init_recursive>:
 8006ba0:	4770      	bx	lr

08006ba2 <__retarget_lock_acquire_recursive>:
 8006ba2:	4770      	bx	lr

08006ba4 <__retarget_lock_release_recursive>:
 8006ba4:	4770      	bx	lr

08006ba6 <memchr>:
 8006ba6:	4603      	mov	r3, r0
 8006ba8:	b510      	push	{r4, lr}
 8006baa:	b2c9      	uxtb	r1, r1
 8006bac:	4402      	add	r2, r0
 8006bae:	4293      	cmp	r3, r2
 8006bb0:	4618      	mov	r0, r3
 8006bb2:	d101      	bne.n	8006bb8 <memchr+0x12>
 8006bb4:	2000      	movs	r0, #0
 8006bb6:	e003      	b.n	8006bc0 <memchr+0x1a>
 8006bb8:	7804      	ldrb	r4, [r0, #0]
 8006bba:	3301      	adds	r3, #1
 8006bbc:	428c      	cmp	r4, r1
 8006bbe:	d1f6      	bne.n	8006bae <memchr+0x8>
 8006bc0:	bd10      	pop	{r4, pc}
	...

08006bc4 <nanf>:
 8006bc4:	4800      	ldr	r0, [pc, #0]	@ (8006bc8 <nanf+0x4>)
 8006bc6:	4770      	bx	lr
 8006bc8:	7fc00000 	.word	0x7fc00000

08006bcc <quorem>:
 8006bcc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bd0:	6903      	ldr	r3, [r0, #16]
 8006bd2:	690c      	ldr	r4, [r1, #16]
 8006bd4:	4607      	mov	r7, r0
 8006bd6:	42a3      	cmp	r3, r4
 8006bd8:	db7e      	blt.n	8006cd8 <quorem+0x10c>
 8006bda:	3c01      	subs	r4, #1
 8006bdc:	00a3      	lsls	r3, r4, #2
 8006bde:	f100 0514 	add.w	r5, r0, #20
 8006be2:	f101 0814 	add.w	r8, r1, #20
 8006be6:	9300      	str	r3, [sp, #0]
 8006be8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006bec:	9301      	str	r3, [sp, #4]
 8006bee:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006bf2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006bf6:	3301      	adds	r3, #1
 8006bf8:	429a      	cmp	r2, r3
 8006bfa:	fbb2 f6f3 	udiv	r6, r2, r3
 8006bfe:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006c02:	d32e      	bcc.n	8006c62 <quorem+0x96>
 8006c04:	f04f 0a00 	mov.w	sl, #0
 8006c08:	46c4      	mov	ip, r8
 8006c0a:	46ae      	mov	lr, r5
 8006c0c:	46d3      	mov	fp, sl
 8006c0e:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006c12:	b298      	uxth	r0, r3
 8006c14:	fb06 a000 	mla	r0, r6, r0, sl
 8006c18:	0c1b      	lsrs	r3, r3, #16
 8006c1a:	0c02      	lsrs	r2, r0, #16
 8006c1c:	fb06 2303 	mla	r3, r6, r3, r2
 8006c20:	f8de 2000 	ldr.w	r2, [lr]
 8006c24:	b280      	uxth	r0, r0
 8006c26:	b292      	uxth	r2, r2
 8006c28:	1a12      	subs	r2, r2, r0
 8006c2a:	445a      	add	r2, fp
 8006c2c:	f8de 0000 	ldr.w	r0, [lr]
 8006c30:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006c34:	b29b      	uxth	r3, r3
 8006c36:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8006c3a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006c3e:	b292      	uxth	r2, r2
 8006c40:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006c44:	45e1      	cmp	r9, ip
 8006c46:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8006c4a:	f84e 2b04 	str.w	r2, [lr], #4
 8006c4e:	d2de      	bcs.n	8006c0e <quorem+0x42>
 8006c50:	9b00      	ldr	r3, [sp, #0]
 8006c52:	58eb      	ldr	r3, [r5, r3]
 8006c54:	b92b      	cbnz	r3, 8006c62 <quorem+0x96>
 8006c56:	9b01      	ldr	r3, [sp, #4]
 8006c58:	3b04      	subs	r3, #4
 8006c5a:	429d      	cmp	r5, r3
 8006c5c:	461a      	mov	r2, r3
 8006c5e:	d32f      	bcc.n	8006cc0 <quorem+0xf4>
 8006c60:	613c      	str	r4, [r7, #16]
 8006c62:	4638      	mov	r0, r7
 8006c64:	f001 f9c4 	bl	8007ff0 <__mcmp>
 8006c68:	2800      	cmp	r0, #0
 8006c6a:	db25      	blt.n	8006cb8 <quorem+0xec>
 8006c6c:	4629      	mov	r1, r5
 8006c6e:	2000      	movs	r0, #0
 8006c70:	f858 2b04 	ldr.w	r2, [r8], #4
 8006c74:	f8d1 c000 	ldr.w	ip, [r1]
 8006c78:	fa1f fe82 	uxth.w	lr, r2
 8006c7c:	fa1f f38c 	uxth.w	r3, ip
 8006c80:	eba3 030e 	sub.w	r3, r3, lr
 8006c84:	4403      	add	r3, r0
 8006c86:	0c12      	lsrs	r2, r2, #16
 8006c88:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8006c8c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8006c90:	b29b      	uxth	r3, r3
 8006c92:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006c96:	45c1      	cmp	r9, r8
 8006c98:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006c9c:	f841 3b04 	str.w	r3, [r1], #4
 8006ca0:	d2e6      	bcs.n	8006c70 <quorem+0xa4>
 8006ca2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006ca6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006caa:	b922      	cbnz	r2, 8006cb6 <quorem+0xea>
 8006cac:	3b04      	subs	r3, #4
 8006cae:	429d      	cmp	r5, r3
 8006cb0:	461a      	mov	r2, r3
 8006cb2:	d30b      	bcc.n	8006ccc <quorem+0x100>
 8006cb4:	613c      	str	r4, [r7, #16]
 8006cb6:	3601      	adds	r6, #1
 8006cb8:	4630      	mov	r0, r6
 8006cba:	b003      	add	sp, #12
 8006cbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006cc0:	6812      	ldr	r2, [r2, #0]
 8006cc2:	3b04      	subs	r3, #4
 8006cc4:	2a00      	cmp	r2, #0
 8006cc6:	d1cb      	bne.n	8006c60 <quorem+0x94>
 8006cc8:	3c01      	subs	r4, #1
 8006cca:	e7c6      	b.n	8006c5a <quorem+0x8e>
 8006ccc:	6812      	ldr	r2, [r2, #0]
 8006cce:	3b04      	subs	r3, #4
 8006cd0:	2a00      	cmp	r2, #0
 8006cd2:	d1ef      	bne.n	8006cb4 <quorem+0xe8>
 8006cd4:	3c01      	subs	r4, #1
 8006cd6:	e7ea      	b.n	8006cae <quorem+0xe2>
 8006cd8:	2000      	movs	r0, #0
 8006cda:	e7ee      	b.n	8006cba <quorem+0xee>
 8006cdc:	0000      	movs	r0, r0
	...

08006ce0 <_dtoa_r>:
 8006ce0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ce4:	4614      	mov	r4, r2
 8006ce6:	461d      	mov	r5, r3
 8006ce8:	69c7      	ldr	r7, [r0, #28]
 8006cea:	b097      	sub	sp, #92	@ 0x5c
 8006cec:	4683      	mov	fp, r0
 8006cee:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8006cf2:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8006cf4:	b97f      	cbnz	r7, 8006d16 <_dtoa_r+0x36>
 8006cf6:	2010      	movs	r0, #16
 8006cf8:	f000 fe02 	bl	8007900 <malloc>
 8006cfc:	4602      	mov	r2, r0
 8006cfe:	f8cb 001c 	str.w	r0, [fp, #28]
 8006d02:	b920      	cbnz	r0, 8006d0e <_dtoa_r+0x2e>
 8006d04:	21ef      	movs	r1, #239	@ 0xef
 8006d06:	4ba8      	ldr	r3, [pc, #672]	@ (8006fa8 <_dtoa_r+0x2c8>)
 8006d08:	48a8      	ldr	r0, [pc, #672]	@ (8006fac <_dtoa_r+0x2cc>)
 8006d0a:	f002 ffab 	bl	8009c64 <__assert_func>
 8006d0e:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006d12:	6007      	str	r7, [r0, #0]
 8006d14:	60c7      	str	r7, [r0, #12]
 8006d16:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006d1a:	6819      	ldr	r1, [r3, #0]
 8006d1c:	b159      	cbz	r1, 8006d36 <_dtoa_r+0x56>
 8006d1e:	685a      	ldr	r2, [r3, #4]
 8006d20:	2301      	movs	r3, #1
 8006d22:	4093      	lsls	r3, r2
 8006d24:	604a      	str	r2, [r1, #4]
 8006d26:	608b      	str	r3, [r1, #8]
 8006d28:	4658      	mov	r0, fp
 8006d2a:	f000 fedf 	bl	8007aec <_Bfree>
 8006d2e:	2200      	movs	r2, #0
 8006d30:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006d34:	601a      	str	r2, [r3, #0]
 8006d36:	1e2b      	subs	r3, r5, #0
 8006d38:	bfaf      	iteee	ge
 8006d3a:	2300      	movge	r3, #0
 8006d3c:	2201      	movlt	r2, #1
 8006d3e:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8006d42:	9303      	strlt	r3, [sp, #12]
 8006d44:	bfa8      	it	ge
 8006d46:	6033      	strge	r3, [r6, #0]
 8006d48:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8006d4c:	4b98      	ldr	r3, [pc, #608]	@ (8006fb0 <_dtoa_r+0x2d0>)
 8006d4e:	bfb8      	it	lt
 8006d50:	6032      	strlt	r2, [r6, #0]
 8006d52:	ea33 0308 	bics.w	r3, r3, r8
 8006d56:	d112      	bne.n	8006d7e <_dtoa_r+0x9e>
 8006d58:	f242 730f 	movw	r3, #9999	@ 0x270f
 8006d5c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8006d5e:	6013      	str	r3, [r2, #0]
 8006d60:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8006d64:	4323      	orrs	r3, r4
 8006d66:	f000 8550 	beq.w	800780a <_dtoa_r+0xb2a>
 8006d6a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006d6c:	f8df a244 	ldr.w	sl, [pc, #580]	@ 8006fb4 <_dtoa_r+0x2d4>
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	f000 8552 	beq.w	800781a <_dtoa_r+0xb3a>
 8006d76:	f10a 0303 	add.w	r3, sl, #3
 8006d7a:	f000 bd4c 	b.w	8007816 <_dtoa_r+0xb36>
 8006d7e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006d82:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8006d86:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	2300      	movs	r3, #0
 8006d8e:	f7f9 fe0b 	bl	80009a8 <__aeabi_dcmpeq>
 8006d92:	4607      	mov	r7, r0
 8006d94:	b158      	cbz	r0, 8006dae <_dtoa_r+0xce>
 8006d96:	2301      	movs	r3, #1
 8006d98:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8006d9a:	6013      	str	r3, [r2, #0]
 8006d9c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006d9e:	b113      	cbz	r3, 8006da6 <_dtoa_r+0xc6>
 8006da0:	4b85      	ldr	r3, [pc, #532]	@ (8006fb8 <_dtoa_r+0x2d8>)
 8006da2:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8006da4:	6013      	str	r3, [r2, #0]
 8006da6:	f8df a214 	ldr.w	sl, [pc, #532]	@ 8006fbc <_dtoa_r+0x2dc>
 8006daa:	f000 bd36 	b.w	800781a <_dtoa_r+0xb3a>
 8006dae:	ab14      	add	r3, sp, #80	@ 0x50
 8006db0:	9301      	str	r3, [sp, #4]
 8006db2:	ab15      	add	r3, sp, #84	@ 0x54
 8006db4:	9300      	str	r3, [sp, #0]
 8006db6:	4658      	mov	r0, fp
 8006db8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8006dbc:	f001 fa30 	bl	8008220 <__d2b>
 8006dc0:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8006dc4:	4681      	mov	r9, r0
 8006dc6:	2e00      	cmp	r6, #0
 8006dc8:	d077      	beq.n	8006eba <_dtoa_r+0x1da>
 8006dca:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006dce:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006dd0:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8006dd4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006dd8:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8006ddc:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8006de0:	9712      	str	r7, [sp, #72]	@ 0x48
 8006de2:	4619      	mov	r1, r3
 8006de4:	2200      	movs	r2, #0
 8006de6:	4b76      	ldr	r3, [pc, #472]	@ (8006fc0 <_dtoa_r+0x2e0>)
 8006de8:	f7f9 f9be 	bl	8000168 <__aeabi_dsub>
 8006dec:	a368      	add	r3, pc, #416	@ (adr r3, 8006f90 <_dtoa_r+0x2b0>)
 8006dee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006df2:	f7f9 fb71 	bl	80004d8 <__aeabi_dmul>
 8006df6:	a368      	add	r3, pc, #416	@ (adr r3, 8006f98 <_dtoa_r+0x2b8>)
 8006df8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dfc:	f7f9 f9b6 	bl	800016c <__adddf3>
 8006e00:	4604      	mov	r4, r0
 8006e02:	4630      	mov	r0, r6
 8006e04:	460d      	mov	r5, r1
 8006e06:	f7f9 fafd 	bl	8000404 <__aeabi_i2d>
 8006e0a:	a365      	add	r3, pc, #404	@ (adr r3, 8006fa0 <_dtoa_r+0x2c0>)
 8006e0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e10:	f7f9 fb62 	bl	80004d8 <__aeabi_dmul>
 8006e14:	4602      	mov	r2, r0
 8006e16:	460b      	mov	r3, r1
 8006e18:	4620      	mov	r0, r4
 8006e1a:	4629      	mov	r1, r5
 8006e1c:	f7f9 f9a6 	bl	800016c <__adddf3>
 8006e20:	4604      	mov	r4, r0
 8006e22:	460d      	mov	r5, r1
 8006e24:	f7f9 fe08 	bl	8000a38 <__aeabi_d2iz>
 8006e28:	2200      	movs	r2, #0
 8006e2a:	4607      	mov	r7, r0
 8006e2c:	2300      	movs	r3, #0
 8006e2e:	4620      	mov	r0, r4
 8006e30:	4629      	mov	r1, r5
 8006e32:	f7f9 fdc3 	bl	80009bc <__aeabi_dcmplt>
 8006e36:	b140      	cbz	r0, 8006e4a <_dtoa_r+0x16a>
 8006e38:	4638      	mov	r0, r7
 8006e3a:	f7f9 fae3 	bl	8000404 <__aeabi_i2d>
 8006e3e:	4622      	mov	r2, r4
 8006e40:	462b      	mov	r3, r5
 8006e42:	f7f9 fdb1 	bl	80009a8 <__aeabi_dcmpeq>
 8006e46:	b900      	cbnz	r0, 8006e4a <_dtoa_r+0x16a>
 8006e48:	3f01      	subs	r7, #1
 8006e4a:	2f16      	cmp	r7, #22
 8006e4c:	d853      	bhi.n	8006ef6 <_dtoa_r+0x216>
 8006e4e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006e52:	4b5c      	ldr	r3, [pc, #368]	@ (8006fc4 <_dtoa_r+0x2e4>)
 8006e54:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006e58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e5c:	f7f9 fdae 	bl	80009bc <__aeabi_dcmplt>
 8006e60:	2800      	cmp	r0, #0
 8006e62:	d04a      	beq.n	8006efa <_dtoa_r+0x21a>
 8006e64:	2300      	movs	r3, #0
 8006e66:	3f01      	subs	r7, #1
 8006e68:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006e6a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006e6c:	1b9b      	subs	r3, r3, r6
 8006e6e:	1e5a      	subs	r2, r3, #1
 8006e70:	bf46      	itte	mi
 8006e72:	f1c3 0801 	rsbmi	r8, r3, #1
 8006e76:	2300      	movmi	r3, #0
 8006e78:	f04f 0800 	movpl.w	r8, #0
 8006e7c:	9209      	str	r2, [sp, #36]	@ 0x24
 8006e7e:	bf48      	it	mi
 8006e80:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8006e82:	2f00      	cmp	r7, #0
 8006e84:	db3b      	blt.n	8006efe <_dtoa_r+0x21e>
 8006e86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e88:	970e      	str	r7, [sp, #56]	@ 0x38
 8006e8a:	443b      	add	r3, r7
 8006e8c:	9309      	str	r3, [sp, #36]	@ 0x24
 8006e8e:	2300      	movs	r3, #0
 8006e90:	930a      	str	r3, [sp, #40]	@ 0x28
 8006e92:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006e94:	2b09      	cmp	r3, #9
 8006e96:	d866      	bhi.n	8006f66 <_dtoa_r+0x286>
 8006e98:	2b05      	cmp	r3, #5
 8006e9a:	bfc4      	itt	gt
 8006e9c:	3b04      	subgt	r3, #4
 8006e9e:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8006ea0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006ea2:	bfc8      	it	gt
 8006ea4:	2400      	movgt	r4, #0
 8006ea6:	f1a3 0302 	sub.w	r3, r3, #2
 8006eaa:	bfd8      	it	le
 8006eac:	2401      	movle	r4, #1
 8006eae:	2b03      	cmp	r3, #3
 8006eb0:	d864      	bhi.n	8006f7c <_dtoa_r+0x29c>
 8006eb2:	e8df f003 	tbb	[pc, r3]
 8006eb6:	382b      	.short	0x382b
 8006eb8:	5636      	.short	0x5636
 8006eba:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8006ebe:	441e      	add	r6, r3
 8006ec0:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8006ec4:	2b20      	cmp	r3, #32
 8006ec6:	bfc1      	itttt	gt
 8006ec8:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8006ecc:	fa08 f803 	lslgt.w	r8, r8, r3
 8006ed0:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8006ed4:	fa24 f303 	lsrgt.w	r3, r4, r3
 8006ed8:	bfd6      	itet	le
 8006eda:	f1c3 0320 	rsble	r3, r3, #32
 8006ede:	ea48 0003 	orrgt.w	r0, r8, r3
 8006ee2:	fa04 f003 	lslle.w	r0, r4, r3
 8006ee6:	f7f9 fa7d 	bl	80003e4 <__aeabi_ui2d>
 8006eea:	2201      	movs	r2, #1
 8006eec:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8006ef0:	3e01      	subs	r6, #1
 8006ef2:	9212      	str	r2, [sp, #72]	@ 0x48
 8006ef4:	e775      	b.n	8006de2 <_dtoa_r+0x102>
 8006ef6:	2301      	movs	r3, #1
 8006ef8:	e7b6      	b.n	8006e68 <_dtoa_r+0x188>
 8006efa:	900f      	str	r0, [sp, #60]	@ 0x3c
 8006efc:	e7b5      	b.n	8006e6a <_dtoa_r+0x18a>
 8006efe:	427b      	negs	r3, r7
 8006f00:	930a      	str	r3, [sp, #40]	@ 0x28
 8006f02:	2300      	movs	r3, #0
 8006f04:	eba8 0807 	sub.w	r8, r8, r7
 8006f08:	930e      	str	r3, [sp, #56]	@ 0x38
 8006f0a:	e7c2      	b.n	8006e92 <_dtoa_r+0x1b2>
 8006f0c:	2300      	movs	r3, #0
 8006f0e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006f10:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	dc35      	bgt.n	8006f82 <_dtoa_r+0x2a2>
 8006f16:	2301      	movs	r3, #1
 8006f18:	461a      	mov	r2, r3
 8006f1a:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8006f1e:	9221      	str	r2, [sp, #132]	@ 0x84
 8006f20:	e00b      	b.n	8006f3a <_dtoa_r+0x25a>
 8006f22:	2301      	movs	r3, #1
 8006f24:	e7f3      	b.n	8006f0e <_dtoa_r+0x22e>
 8006f26:	2300      	movs	r3, #0
 8006f28:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006f2a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006f2c:	18fb      	adds	r3, r7, r3
 8006f2e:	9308      	str	r3, [sp, #32]
 8006f30:	3301      	adds	r3, #1
 8006f32:	2b01      	cmp	r3, #1
 8006f34:	9307      	str	r3, [sp, #28]
 8006f36:	bfb8      	it	lt
 8006f38:	2301      	movlt	r3, #1
 8006f3a:	2100      	movs	r1, #0
 8006f3c:	2204      	movs	r2, #4
 8006f3e:	f8db 001c 	ldr.w	r0, [fp, #28]
 8006f42:	f102 0514 	add.w	r5, r2, #20
 8006f46:	429d      	cmp	r5, r3
 8006f48:	d91f      	bls.n	8006f8a <_dtoa_r+0x2aa>
 8006f4a:	6041      	str	r1, [r0, #4]
 8006f4c:	4658      	mov	r0, fp
 8006f4e:	f000 fd8d 	bl	8007a6c <_Balloc>
 8006f52:	4682      	mov	sl, r0
 8006f54:	2800      	cmp	r0, #0
 8006f56:	d139      	bne.n	8006fcc <_dtoa_r+0x2ec>
 8006f58:	4602      	mov	r2, r0
 8006f5a:	f240 11af 	movw	r1, #431	@ 0x1af
 8006f5e:	4b1a      	ldr	r3, [pc, #104]	@ (8006fc8 <_dtoa_r+0x2e8>)
 8006f60:	e6d2      	b.n	8006d08 <_dtoa_r+0x28>
 8006f62:	2301      	movs	r3, #1
 8006f64:	e7e0      	b.n	8006f28 <_dtoa_r+0x248>
 8006f66:	2401      	movs	r4, #1
 8006f68:	2300      	movs	r3, #0
 8006f6a:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006f6c:	9320      	str	r3, [sp, #128]	@ 0x80
 8006f6e:	f04f 33ff 	mov.w	r3, #4294967295
 8006f72:	2200      	movs	r2, #0
 8006f74:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8006f78:	2312      	movs	r3, #18
 8006f7a:	e7d0      	b.n	8006f1e <_dtoa_r+0x23e>
 8006f7c:	2301      	movs	r3, #1
 8006f7e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006f80:	e7f5      	b.n	8006f6e <_dtoa_r+0x28e>
 8006f82:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006f84:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8006f88:	e7d7      	b.n	8006f3a <_dtoa_r+0x25a>
 8006f8a:	3101      	adds	r1, #1
 8006f8c:	0052      	lsls	r2, r2, #1
 8006f8e:	e7d8      	b.n	8006f42 <_dtoa_r+0x262>
 8006f90:	636f4361 	.word	0x636f4361
 8006f94:	3fd287a7 	.word	0x3fd287a7
 8006f98:	8b60c8b3 	.word	0x8b60c8b3
 8006f9c:	3fc68a28 	.word	0x3fc68a28
 8006fa0:	509f79fb 	.word	0x509f79fb
 8006fa4:	3fd34413 	.word	0x3fd34413
 8006fa8:	0800ac0e 	.word	0x0800ac0e
 8006fac:	0800ac25 	.word	0x0800ac25
 8006fb0:	7ff00000 	.word	0x7ff00000
 8006fb4:	0800ac0a 	.word	0x0800ac0a
 8006fb8:	0800af69 	.word	0x0800af69
 8006fbc:	0800af68 	.word	0x0800af68
 8006fc0:	3ff80000 	.word	0x3ff80000
 8006fc4:	0800ad20 	.word	0x0800ad20
 8006fc8:	0800ac7d 	.word	0x0800ac7d
 8006fcc:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006fd0:	6018      	str	r0, [r3, #0]
 8006fd2:	9b07      	ldr	r3, [sp, #28]
 8006fd4:	2b0e      	cmp	r3, #14
 8006fd6:	f200 80a4 	bhi.w	8007122 <_dtoa_r+0x442>
 8006fda:	2c00      	cmp	r4, #0
 8006fdc:	f000 80a1 	beq.w	8007122 <_dtoa_r+0x442>
 8006fe0:	2f00      	cmp	r7, #0
 8006fe2:	dd33      	ble.n	800704c <_dtoa_r+0x36c>
 8006fe4:	4b86      	ldr	r3, [pc, #536]	@ (8007200 <_dtoa_r+0x520>)
 8006fe6:	f007 020f 	and.w	r2, r7, #15
 8006fea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006fee:	05f8      	lsls	r0, r7, #23
 8006ff0:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006ff4:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006ff8:	ea4f 1427 	mov.w	r4, r7, asr #4
 8006ffc:	d516      	bpl.n	800702c <_dtoa_r+0x34c>
 8006ffe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007002:	4b80      	ldr	r3, [pc, #512]	@ (8007204 <_dtoa_r+0x524>)
 8007004:	2603      	movs	r6, #3
 8007006:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800700a:	f7f9 fb8f 	bl	800072c <__aeabi_ddiv>
 800700e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007012:	f004 040f 	and.w	r4, r4, #15
 8007016:	4d7b      	ldr	r5, [pc, #492]	@ (8007204 <_dtoa_r+0x524>)
 8007018:	b954      	cbnz	r4, 8007030 <_dtoa_r+0x350>
 800701a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800701e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007022:	f7f9 fb83 	bl	800072c <__aeabi_ddiv>
 8007026:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800702a:	e028      	b.n	800707e <_dtoa_r+0x39e>
 800702c:	2602      	movs	r6, #2
 800702e:	e7f2      	b.n	8007016 <_dtoa_r+0x336>
 8007030:	07e1      	lsls	r1, r4, #31
 8007032:	d508      	bpl.n	8007046 <_dtoa_r+0x366>
 8007034:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007038:	e9d5 2300 	ldrd	r2, r3, [r5]
 800703c:	f7f9 fa4c 	bl	80004d8 <__aeabi_dmul>
 8007040:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007044:	3601      	adds	r6, #1
 8007046:	1064      	asrs	r4, r4, #1
 8007048:	3508      	adds	r5, #8
 800704a:	e7e5      	b.n	8007018 <_dtoa_r+0x338>
 800704c:	f000 80d2 	beq.w	80071f4 <_dtoa_r+0x514>
 8007050:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007054:	427c      	negs	r4, r7
 8007056:	4b6a      	ldr	r3, [pc, #424]	@ (8007200 <_dtoa_r+0x520>)
 8007058:	f004 020f 	and.w	r2, r4, #15
 800705c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007060:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007064:	f7f9 fa38 	bl	80004d8 <__aeabi_dmul>
 8007068:	2602      	movs	r6, #2
 800706a:	2300      	movs	r3, #0
 800706c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007070:	4d64      	ldr	r5, [pc, #400]	@ (8007204 <_dtoa_r+0x524>)
 8007072:	1124      	asrs	r4, r4, #4
 8007074:	2c00      	cmp	r4, #0
 8007076:	f040 80b2 	bne.w	80071de <_dtoa_r+0x4fe>
 800707a:	2b00      	cmp	r3, #0
 800707c:	d1d3      	bne.n	8007026 <_dtoa_r+0x346>
 800707e:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007082:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007084:	2b00      	cmp	r3, #0
 8007086:	f000 80b7 	beq.w	80071f8 <_dtoa_r+0x518>
 800708a:	2200      	movs	r2, #0
 800708c:	4620      	mov	r0, r4
 800708e:	4629      	mov	r1, r5
 8007090:	4b5d      	ldr	r3, [pc, #372]	@ (8007208 <_dtoa_r+0x528>)
 8007092:	f7f9 fc93 	bl	80009bc <__aeabi_dcmplt>
 8007096:	2800      	cmp	r0, #0
 8007098:	f000 80ae 	beq.w	80071f8 <_dtoa_r+0x518>
 800709c:	9b07      	ldr	r3, [sp, #28]
 800709e:	2b00      	cmp	r3, #0
 80070a0:	f000 80aa 	beq.w	80071f8 <_dtoa_r+0x518>
 80070a4:	9b08      	ldr	r3, [sp, #32]
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	dd37      	ble.n	800711a <_dtoa_r+0x43a>
 80070aa:	1e7b      	subs	r3, r7, #1
 80070ac:	4620      	mov	r0, r4
 80070ae:	9304      	str	r3, [sp, #16]
 80070b0:	2200      	movs	r2, #0
 80070b2:	4629      	mov	r1, r5
 80070b4:	4b55      	ldr	r3, [pc, #340]	@ (800720c <_dtoa_r+0x52c>)
 80070b6:	f7f9 fa0f 	bl	80004d8 <__aeabi_dmul>
 80070ba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80070be:	9c08      	ldr	r4, [sp, #32]
 80070c0:	3601      	adds	r6, #1
 80070c2:	4630      	mov	r0, r6
 80070c4:	f7f9 f99e 	bl	8000404 <__aeabi_i2d>
 80070c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80070cc:	f7f9 fa04 	bl	80004d8 <__aeabi_dmul>
 80070d0:	2200      	movs	r2, #0
 80070d2:	4b4f      	ldr	r3, [pc, #316]	@ (8007210 <_dtoa_r+0x530>)
 80070d4:	f7f9 f84a 	bl	800016c <__adddf3>
 80070d8:	4605      	mov	r5, r0
 80070da:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80070de:	2c00      	cmp	r4, #0
 80070e0:	f040 809a 	bne.w	8007218 <_dtoa_r+0x538>
 80070e4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80070e8:	2200      	movs	r2, #0
 80070ea:	4b4a      	ldr	r3, [pc, #296]	@ (8007214 <_dtoa_r+0x534>)
 80070ec:	f7f9 f83c 	bl	8000168 <__aeabi_dsub>
 80070f0:	4602      	mov	r2, r0
 80070f2:	460b      	mov	r3, r1
 80070f4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80070f8:	462a      	mov	r2, r5
 80070fa:	4633      	mov	r3, r6
 80070fc:	f7f9 fc7c 	bl	80009f8 <__aeabi_dcmpgt>
 8007100:	2800      	cmp	r0, #0
 8007102:	f040 828e 	bne.w	8007622 <_dtoa_r+0x942>
 8007106:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800710a:	462a      	mov	r2, r5
 800710c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007110:	f7f9 fc54 	bl	80009bc <__aeabi_dcmplt>
 8007114:	2800      	cmp	r0, #0
 8007116:	f040 8127 	bne.w	8007368 <_dtoa_r+0x688>
 800711a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800711e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8007122:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8007124:	2b00      	cmp	r3, #0
 8007126:	f2c0 8163 	blt.w	80073f0 <_dtoa_r+0x710>
 800712a:	2f0e      	cmp	r7, #14
 800712c:	f300 8160 	bgt.w	80073f0 <_dtoa_r+0x710>
 8007130:	4b33      	ldr	r3, [pc, #204]	@ (8007200 <_dtoa_r+0x520>)
 8007132:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007136:	e9d3 3400 	ldrd	r3, r4, [r3]
 800713a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800713e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007140:	2b00      	cmp	r3, #0
 8007142:	da03      	bge.n	800714c <_dtoa_r+0x46c>
 8007144:	9b07      	ldr	r3, [sp, #28]
 8007146:	2b00      	cmp	r3, #0
 8007148:	f340 8100 	ble.w	800734c <_dtoa_r+0x66c>
 800714c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007150:	4656      	mov	r6, sl
 8007152:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007156:	4620      	mov	r0, r4
 8007158:	4629      	mov	r1, r5
 800715a:	f7f9 fae7 	bl	800072c <__aeabi_ddiv>
 800715e:	f7f9 fc6b 	bl	8000a38 <__aeabi_d2iz>
 8007162:	4680      	mov	r8, r0
 8007164:	f7f9 f94e 	bl	8000404 <__aeabi_i2d>
 8007168:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800716c:	f7f9 f9b4 	bl	80004d8 <__aeabi_dmul>
 8007170:	4602      	mov	r2, r0
 8007172:	460b      	mov	r3, r1
 8007174:	4620      	mov	r0, r4
 8007176:	4629      	mov	r1, r5
 8007178:	f7f8 fff6 	bl	8000168 <__aeabi_dsub>
 800717c:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8007180:	9d07      	ldr	r5, [sp, #28]
 8007182:	f806 4b01 	strb.w	r4, [r6], #1
 8007186:	eba6 040a 	sub.w	r4, r6, sl
 800718a:	42a5      	cmp	r5, r4
 800718c:	4602      	mov	r2, r0
 800718e:	460b      	mov	r3, r1
 8007190:	f040 8116 	bne.w	80073c0 <_dtoa_r+0x6e0>
 8007194:	f7f8 ffea 	bl	800016c <__adddf3>
 8007198:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800719c:	4604      	mov	r4, r0
 800719e:	460d      	mov	r5, r1
 80071a0:	f7f9 fc2a 	bl	80009f8 <__aeabi_dcmpgt>
 80071a4:	2800      	cmp	r0, #0
 80071a6:	f040 80f8 	bne.w	800739a <_dtoa_r+0x6ba>
 80071aa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80071ae:	4620      	mov	r0, r4
 80071b0:	4629      	mov	r1, r5
 80071b2:	f7f9 fbf9 	bl	80009a8 <__aeabi_dcmpeq>
 80071b6:	b118      	cbz	r0, 80071c0 <_dtoa_r+0x4e0>
 80071b8:	f018 0f01 	tst.w	r8, #1
 80071bc:	f040 80ed 	bne.w	800739a <_dtoa_r+0x6ba>
 80071c0:	4649      	mov	r1, r9
 80071c2:	4658      	mov	r0, fp
 80071c4:	f000 fc92 	bl	8007aec <_Bfree>
 80071c8:	2300      	movs	r3, #0
 80071ca:	7033      	strb	r3, [r6, #0]
 80071cc:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80071ce:	3701      	adds	r7, #1
 80071d0:	601f      	str	r7, [r3, #0]
 80071d2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	f000 8320 	beq.w	800781a <_dtoa_r+0xb3a>
 80071da:	601e      	str	r6, [r3, #0]
 80071dc:	e31d      	b.n	800781a <_dtoa_r+0xb3a>
 80071de:	07e2      	lsls	r2, r4, #31
 80071e0:	d505      	bpl.n	80071ee <_dtoa_r+0x50e>
 80071e2:	e9d5 2300 	ldrd	r2, r3, [r5]
 80071e6:	f7f9 f977 	bl	80004d8 <__aeabi_dmul>
 80071ea:	2301      	movs	r3, #1
 80071ec:	3601      	adds	r6, #1
 80071ee:	1064      	asrs	r4, r4, #1
 80071f0:	3508      	adds	r5, #8
 80071f2:	e73f      	b.n	8007074 <_dtoa_r+0x394>
 80071f4:	2602      	movs	r6, #2
 80071f6:	e742      	b.n	800707e <_dtoa_r+0x39e>
 80071f8:	9c07      	ldr	r4, [sp, #28]
 80071fa:	9704      	str	r7, [sp, #16]
 80071fc:	e761      	b.n	80070c2 <_dtoa_r+0x3e2>
 80071fe:	bf00      	nop
 8007200:	0800ad20 	.word	0x0800ad20
 8007204:	0800acf8 	.word	0x0800acf8
 8007208:	3ff00000 	.word	0x3ff00000
 800720c:	40240000 	.word	0x40240000
 8007210:	401c0000 	.word	0x401c0000
 8007214:	40140000 	.word	0x40140000
 8007218:	4b70      	ldr	r3, [pc, #448]	@ (80073dc <_dtoa_r+0x6fc>)
 800721a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800721c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007220:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007224:	4454      	add	r4, sl
 8007226:	2900      	cmp	r1, #0
 8007228:	d045      	beq.n	80072b6 <_dtoa_r+0x5d6>
 800722a:	2000      	movs	r0, #0
 800722c:	496c      	ldr	r1, [pc, #432]	@ (80073e0 <_dtoa_r+0x700>)
 800722e:	f7f9 fa7d 	bl	800072c <__aeabi_ddiv>
 8007232:	4633      	mov	r3, r6
 8007234:	462a      	mov	r2, r5
 8007236:	f7f8 ff97 	bl	8000168 <__aeabi_dsub>
 800723a:	4656      	mov	r6, sl
 800723c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007240:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007244:	f7f9 fbf8 	bl	8000a38 <__aeabi_d2iz>
 8007248:	4605      	mov	r5, r0
 800724a:	f7f9 f8db 	bl	8000404 <__aeabi_i2d>
 800724e:	4602      	mov	r2, r0
 8007250:	460b      	mov	r3, r1
 8007252:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007256:	f7f8 ff87 	bl	8000168 <__aeabi_dsub>
 800725a:	4602      	mov	r2, r0
 800725c:	460b      	mov	r3, r1
 800725e:	3530      	adds	r5, #48	@ 0x30
 8007260:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007264:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007268:	f806 5b01 	strb.w	r5, [r6], #1
 800726c:	f7f9 fba6 	bl	80009bc <__aeabi_dcmplt>
 8007270:	2800      	cmp	r0, #0
 8007272:	d163      	bne.n	800733c <_dtoa_r+0x65c>
 8007274:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007278:	2000      	movs	r0, #0
 800727a:	495a      	ldr	r1, [pc, #360]	@ (80073e4 <_dtoa_r+0x704>)
 800727c:	f7f8 ff74 	bl	8000168 <__aeabi_dsub>
 8007280:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007284:	f7f9 fb9a 	bl	80009bc <__aeabi_dcmplt>
 8007288:	2800      	cmp	r0, #0
 800728a:	f040 8087 	bne.w	800739c <_dtoa_r+0x6bc>
 800728e:	42a6      	cmp	r6, r4
 8007290:	f43f af43 	beq.w	800711a <_dtoa_r+0x43a>
 8007294:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007298:	2200      	movs	r2, #0
 800729a:	4b53      	ldr	r3, [pc, #332]	@ (80073e8 <_dtoa_r+0x708>)
 800729c:	f7f9 f91c 	bl	80004d8 <__aeabi_dmul>
 80072a0:	2200      	movs	r2, #0
 80072a2:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80072a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80072aa:	4b4f      	ldr	r3, [pc, #316]	@ (80073e8 <_dtoa_r+0x708>)
 80072ac:	f7f9 f914 	bl	80004d8 <__aeabi_dmul>
 80072b0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80072b4:	e7c4      	b.n	8007240 <_dtoa_r+0x560>
 80072b6:	4631      	mov	r1, r6
 80072b8:	4628      	mov	r0, r5
 80072ba:	f7f9 f90d 	bl	80004d8 <__aeabi_dmul>
 80072be:	4656      	mov	r6, sl
 80072c0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80072c4:	9413      	str	r4, [sp, #76]	@ 0x4c
 80072c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80072ca:	f7f9 fbb5 	bl	8000a38 <__aeabi_d2iz>
 80072ce:	4605      	mov	r5, r0
 80072d0:	f7f9 f898 	bl	8000404 <__aeabi_i2d>
 80072d4:	4602      	mov	r2, r0
 80072d6:	460b      	mov	r3, r1
 80072d8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80072dc:	f7f8 ff44 	bl	8000168 <__aeabi_dsub>
 80072e0:	4602      	mov	r2, r0
 80072e2:	460b      	mov	r3, r1
 80072e4:	3530      	adds	r5, #48	@ 0x30
 80072e6:	f806 5b01 	strb.w	r5, [r6], #1
 80072ea:	42a6      	cmp	r6, r4
 80072ec:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80072f0:	f04f 0200 	mov.w	r2, #0
 80072f4:	d124      	bne.n	8007340 <_dtoa_r+0x660>
 80072f6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80072fa:	4b39      	ldr	r3, [pc, #228]	@ (80073e0 <_dtoa_r+0x700>)
 80072fc:	f7f8 ff36 	bl	800016c <__adddf3>
 8007300:	4602      	mov	r2, r0
 8007302:	460b      	mov	r3, r1
 8007304:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007308:	f7f9 fb76 	bl	80009f8 <__aeabi_dcmpgt>
 800730c:	2800      	cmp	r0, #0
 800730e:	d145      	bne.n	800739c <_dtoa_r+0x6bc>
 8007310:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007314:	2000      	movs	r0, #0
 8007316:	4932      	ldr	r1, [pc, #200]	@ (80073e0 <_dtoa_r+0x700>)
 8007318:	f7f8 ff26 	bl	8000168 <__aeabi_dsub>
 800731c:	4602      	mov	r2, r0
 800731e:	460b      	mov	r3, r1
 8007320:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007324:	f7f9 fb4a 	bl	80009bc <__aeabi_dcmplt>
 8007328:	2800      	cmp	r0, #0
 800732a:	f43f aef6 	beq.w	800711a <_dtoa_r+0x43a>
 800732e:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8007330:	1e73      	subs	r3, r6, #1
 8007332:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007334:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007338:	2b30      	cmp	r3, #48	@ 0x30
 800733a:	d0f8      	beq.n	800732e <_dtoa_r+0x64e>
 800733c:	9f04      	ldr	r7, [sp, #16]
 800733e:	e73f      	b.n	80071c0 <_dtoa_r+0x4e0>
 8007340:	4b29      	ldr	r3, [pc, #164]	@ (80073e8 <_dtoa_r+0x708>)
 8007342:	f7f9 f8c9 	bl	80004d8 <__aeabi_dmul>
 8007346:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800734a:	e7bc      	b.n	80072c6 <_dtoa_r+0x5e6>
 800734c:	d10c      	bne.n	8007368 <_dtoa_r+0x688>
 800734e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007352:	2200      	movs	r2, #0
 8007354:	4b25      	ldr	r3, [pc, #148]	@ (80073ec <_dtoa_r+0x70c>)
 8007356:	f7f9 f8bf 	bl	80004d8 <__aeabi_dmul>
 800735a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800735e:	f7f9 fb41 	bl	80009e4 <__aeabi_dcmpge>
 8007362:	2800      	cmp	r0, #0
 8007364:	f000 815b 	beq.w	800761e <_dtoa_r+0x93e>
 8007368:	2400      	movs	r4, #0
 800736a:	4625      	mov	r5, r4
 800736c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800736e:	4656      	mov	r6, sl
 8007370:	43db      	mvns	r3, r3
 8007372:	9304      	str	r3, [sp, #16]
 8007374:	2700      	movs	r7, #0
 8007376:	4621      	mov	r1, r4
 8007378:	4658      	mov	r0, fp
 800737a:	f000 fbb7 	bl	8007aec <_Bfree>
 800737e:	2d00      	cmp	r5, #0
 8007380:	d0dc      	beq.n	800733c <_dtoa_r+0x65c>
 8007382:	b12f      	cbz	r7, 8007390 <_dtoa_r+0x6b0>
 8007384:	42af      	cmp	r7, r5
 8007386:	d003      	beq.n	8007390 <_dtoa_r+0x6b0>
 8007388:	4639      	mov	r1, r7
 800738a:	4658      	mov	r0, fp
 800738c:	f000 fbae 	bl	8007aec <_Bfree>
 8007390:	4629      	mov	r1, r5
 8007392:	4658      	mov	r0, fp
 8007394:	f000 fbaa 	bl	8007aec <_Bfree>
 8007398:	e7d0      	b.n	800733c <_dtoa_r+0x65c>
 800739a:	9704      	str	r7, [sp, #16]
 800739c:	4633      	mov	r3, r6
 800739e:	461e      	mov	r6, r3
 80073a0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80073a4:	2a39      	cmp	r2, #57	@ 0x39
 80073a6:	d107      	bne.n	80073b8 <_dtoa_r+0x6d8>
 80073a8:	459a      	cmp	sl, r3
 80073aa:	d1f8      	bne.n	800739e <_dtoa_r+0x6be>
 80073ac:	9a04      	ldr	r2, [sp, #16]
 80073ae:	3201      	adds	r2, #1
 80073b0:	9204      	str	r2, [sp, #16]
 80073b2:	2230      	movs	r2, #48	@ 0x30
 80073b4:	f88a 2000 	strb.w	r2, [sl]
 80073b8:	781a      	ldrb	r2, [r3, #0]
 80073ba:	3201      	adds	r2, #1
 80073bc:	701a      	strb	r2, [r3, #0]
 80073be:	e7bd      	b.n	800733c <_dtoa_r+0x65c>
 80073c0:	2200      	movs	r2, #0
 80073c2:	4b09      	ldr	r3, [pc, #36]	@ (80073e8 <_dtoa_r+0x708>)
 80073c4:	f7f9 f888 	bl	80004d8 <__aeabi_dmul>
 80073c8:	2200      	movs	r2, #0
 80073ca:	2300      	movs	r3, #0
 80073cc:	4604      	mov	r4, r0
 80073ce:	460d      	mov	r5, r1
 80073d0:	f7f9 faea 	bl	80009a8 <__aeabi_dcmpeq>
 80073d4:	2800      	cmp	r0, #0
 80073d6:	f43f aebc 	beq.w	8007152 <_dtoa_r+0x472>
 80073da:	e6f1      	b.n	80071c0 <_dtoa_r+0x4e0>
 80073dc:	0800ad20 	.word	0x0800ad20
 80073e0:	3fe00000 	.word	0x3fe00000
 80073e4:	3ff00000 	.word	0x3ff00000
 80073e8:	40240000 	.word	0x40240000
 80073ec:	40140000 	.word	0x40140000
 80073f0:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80073f2:	2a00      	cmp	r2, #0
 80073f4:	f000 80db 	beq.w	80075ae <_dtoa_r+0x8ce>
 80073f8:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80073fa:	2a01      	cmp	r2, #1
 80073fc:	f300 80bf 	bgt.w	800757e <_dtoa_r+0x89e>
 8007400:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8007402:	2a00      	cmp	r2, #0
 8007404:	f000 80b7 	beq.w	8007576 <_dtoa_r+0x896>
 8007408:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800740c:	4646      	mov	r6, r8
 800740e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007410:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007412:	2101      	movs	r1, #1
 8007414:	441a      	add	r2, r3
 8007416:	4658      	mov	r0, fp
 8007418:	4498      	add	r8, r3
 800741a:	9209      	str	r2, [sp, #36]	@ 0x24
 800741c:	f000 fc64 	bl	8007ce8 <__i2b>
 8007420:	4605      	mov	r5, r0
 8007422:	b15e      	cbz	r6, 800743c <_dtoa_r+0x75c>
 8007424:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007426:	2b00      	cmp	r3, #0
 8007428:	dd08      	ble.n	800743c <_dtoa_r+0x75c>
 800742a:	42b3      	cmp	r3, r6
 800742c:	bfa8      	it	ge
 800742e:	4633      	movge	r3, r6
 8007430:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007432:	eba8 0803 	sub.w	r8, r8, r3
 8007436:	1af6      	subs	r6, r6, r3
 8007438:	1ad3      	subs	r3, r2, r3
 800743a:	9309      	str	r3, [sp, #36]	@ 0x24
 800743c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800743e:	b1f3      	cbz	r3, 800747e <_dtoa_r+0x79e>
 8007440:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007442:	2b00      	cmp	r3, #0
 8007444:	f000 80b7 	beq.w	80075b6 <_dtoa_r+0x8d6>
 8007448:	b18c      	cbz	r4, 800746e <_dtoa_r+0x78e>
 800744a:	4629      	mov	r1, r5
 800744c:	4622      	mov	r2, r4
 800744e:	4658      	mov	r0, fp
 8007450:	f000 fd08 	bl	8007e64 <__pow5mult>
 8007454:	464a      	mov	r2, r9
 8007456:	4601      	mov	r1, r0
 8007458:	4605      	mov	r5, r0
 800745a:	4658      	mov	r0, fp
 800745c:	f000 fc5a 	bl	8007d14 <__multiply>
 8007460:	4649      	mov	r1, r9
 8007462:	9004      	str	r0, [sp, #16]
 8007464:	4658      	mov	r0, fp
 8007466:	f000 fb41 	bl	8007aec <_Bfree>
 800746a:	9b04      	ldr	r3, [sp, #16]
 800746c:	4699      	mov	r9, r3
 800746e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007470:	1b1a      	subs	r2, r3, r4
 8007472:	d004      	beq.n	800747e <_dtoa_r+0x79e>
 8007474:	4649      	mov	r1, r9
 8007476:	4658      	mov	r0, fp
 8007478:	f000 fcf4 	bl	8007e64 <__pow5mult>
 800747c:	4681      	mov	r9, r0
 800747e:	2101      	movs	r1, #1
 8007480:	4658      	mov	r0, fp
 8007482:	f000 fc31 	bl	8007ce8 <__i2b>
 8007486:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007488:	4604      	mov	r4, r0
 800748a:	2b00      	cmp	r3, #0
 800748c:	f000 81c9 	beq.w	8007822 <_dtoa_r+0xb42>
 8007490:	461a      	mov	r2, r3
 8007492:	4601      	mov	r1, r0
 8007494:	4658      	mov	r0, fp
 8007496:	f000 fce5 	bl	8007e64 <__pow5mult>
 800749a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800749c:	4604      	mov	r4, r0
 800749e:	2b01      	cmp	r3, #1
 80074a0:	f300 808f 	bgt.w	80075c2 <_dtoa_r+0x8e2>
 80074a4:	9b02      	ldr	r3, [sp, #8]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	f040 8087 	bne.w	80075ba <_dtoa_r+0x8da>
 80074ac:	9b03      	ldr	r3, [sp, #12]
 80074ae:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	f040 8083 	bne.w	80075be <_dtoa_r+0x8de>
 80074b8:	9b03      	ldr	r3, [sp, #12]
 80074ba:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80074be:	0d1b      	lsrs	r3, r3, #20
 80074c0:	051b      	lsls	r3, r3, #20
 80074c2:	b12b      	cbz	r3, 80074d0 <_dtoa_r+0x7f0>
 80074c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80074c6:	f108 0801 	add.w	r8, r8, #1
 80074ca:	3301      	adds	r3, #1
 80074cc:	9309      	str	r3, [sp, #36]	@ 0x24
 80074ce:	2301      	movs	r3, #1
 80074d0:	930a      	str	r3, [sp, #40]	@ 0x28
 80074d2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	f000 81aa 	beq.w	800782e <_dtoa_r+0xb4e>
 80074da:	6923      	ldr	r3, [r4, #16]
 80074dc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80074e0:	6918      	ldr	r0, [r3, #16]
 80074e2:	f000 fbb5 	bl	8007c50 <__hi0bits>
 80074e6:	f1c0 0020 	rsb	r0, r0, #32
 80074ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80074ec:	4418      	add	r0, r3
 80074ee:	f010 001f 	ands.w	r0, r0, #31
 80074f2:	d071      	beq.n	80075d8 <_dtoa_r+0x8f8>
 80074f4:	f1c0 0320 	rsb	r3, r0, #32
 80074f8:	2b04      	cmp	r3, #4
 80074fa:	dd65      	ble.n	80075c8 <_dtoa_r+0x8e8>
 80074fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80074fe:	f1c0 001c 	rsb	r0, r0, #28
 8007502:	4403      	add	r3, r0
 8007504:	4480      	add	r8, r0
 8007506:	4406      	add	r6, r0
 8007508:	9309      	str	r3, [sp, #36]	@ 0x24
 800750a:	f1b8 0f00 	cmp.w	r8, #0
 800750e:	dd05      	ble.n	800751c <_dtoa_r+0x83c>
 8007510:	4649      	mov	r1, r9
 8007512:	4642      	mov	r2, r8
 8007514:	4658      	mov	r0, fp
 8007516:	f000 fcff 	bl	8007f18 <__lshift>
 800751a:	4681      	mov	r9, r0
 800751c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800751e:	2b00      	cmp	r3, #0
 8007520:	dd05      	ble.n	800752e <_dtoa_r+0x84e>
 8007522:	4621      	mov	r1, r4
 8007524:	461a      	mov	r2, r3
 8007526:	4658      	mov	r0, fp
 8007528:	f000 fcf6 	bl	8007f18 <__lshift>
 800752c:	4604      	mov	r4, r0
 800752e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007530:	2b00      	cmp	r3, #0
 8007532:	d053      	beq.n	80075dc <_dtoa_r+0x8fc>
 8007534:	4621      	mov	r1, r4
 8007536:	4648      	mov	r0, r9
 8007538:	f000 fd5a 	bl	8007ff0 <__mcmp>
 800753c:	2800      	cmp	r0, #0
 800753e:	da4d      	bge.n	80075dc <_dtoa_r+0x8fc>
 8007540:	1e7b      	subs	r3, r7, #1
 8007542:	4649      	mov	r1, r9
 8007544:	9304      	str	r3, [sp, #16]
 8007546:	220a      	movs	r2, #10
 8007548:	2300      	movs	r3, #0
 800754a:	4658      	mov	r0, fp
 800754c:	f000 faf0 	bl	8007b30 <__multadd>
 8007550:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007552:	4681      	mov	r9, r0
 8007554:	2b00      	cmp	r3, #0
 8007556:	f000 816c 	beq.w	8007832 <_dtoa_r+0xb52>
 800755a:	2300      	movs	r3, #0
 800755c:	4629      	mov	r1, r5
 800755e:	220a      	movs	r2, #10
 8007560:	4658      	mov	r0, fp
 8007562:	f000 fae5 	bl	8007b30 <__multadd>
 8007566:	9b08      	ldr	r3, [sp, #32]
 8007568:	4605      	mov	r5, r0
 800756a:	2b00      	cmp	r3, #0
 800756c:	dc61      	bgt.n	8007632 <_dtoa_r+0x952>
 800756e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007570:	2b02      	cmp	r3, #2
 8007572:	dc3b      	bgt.n	80075ec <_dtoa_r+0x90c>
 8007574:	e05d      	b.n	8007632 <_dtoa_r+0x952>
 8007576:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007578:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800757c:	e746      	b.n	800740c <_dtoa_r+0x72c>
 800757e:	9b07      	ldr	r3, [sp, #28]
 8007580:	1e5c      	subs	r4, r3, #1
 8007582:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007584:	42a3      	cmp	r3, r4
 8007586:	bfbf      	itttt	lt
 8007588:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800758a:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 800758c:	1ae3      	sublt	r3, r4, r3
 800758e:	18d2      	addlt	r2, r2, r3
 8007590:	bfa8      	it	ge
 8007592:	1b1c      	subge	r4, r3, r4
 8007594:	9b07      	ldr	r3, [sp, #28]
 8007596:	bfbe      	ittt	lt
 8007598:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800759a:	920e      	strlt	r2, [sp, #56]	@ 0x38
 800759c:	2400      	movlt	r4, #0
 800759e:	2b00      	cmp	r3, #0
 80075a0:	bfb5      	itete	lt
 80075a2:	eba8 0603 	sublt.w	r6, r8, r3
 80075a6:	4646      	movge	r6, r8
 80075a8:	2300      	movlt	r3, #0
 80075aa:	9b07      	ldrge	r3, [sp, #28]
 80075ac:	e730      	b.n	8007410 <_dtoa_r+0x730>
 80075ae:	4646      	mov	r6, r8
 80075b0:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80075b2:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80075b4:	e735      	b.n	8007422 <_dtoa_r+0x742>
 80075b6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80075b8:	e75c      	b.n	8007474 <_dtoa_r+0x794>
 80075ba:	2300      	movs	r3, #0
 80075bc:	e788      	b.n	80074d0 <_dtoa_r+0x7f0>
 80075be:	9b02      	ldr	r3, [sp, #8]
 80075c0:	e786      	b.n	80074d0 <_dtoa_r+0x7f0>
 80075c2:	2300      	movs	r3, #0
 80075c4:	930a      	str	r3, [sp, #40]	@ 0x28
 80075c6:	e788      	b.n	80074da <_dtoa_r+0x7fa>
 80075c8:	d09f      	beq.n	800750a <_dtoa_r+0x82a>
 80075ca:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80075cc:	331c      	adds	r3, #28
 80075ce:	441a      	add	r2, r3
 80075d0:	4498      	add	r8, r3
 80075d2:	441e      	add	r6, r3
 80075d4:	9209      	str	r2, [sp, #36]	@ 0x24
 80075d6:	e798      	b.n	800750a <_dtoa_r+0x82a>
 80075d8:	4603      	mov	r3, r0
 80075da:	e7f6      	b.n	80075ca <_dtoa_r+0x8ea>
 80075dc:	9b07      	ldr	r3, [sp, #28]
 80075de:	9704      	str	r7, [sp, #16]
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	dc20      	bgt.n	8007626 <_dtoa_r+0x946>
 80075e4:	9308      	str	r3, [sp, #32]
 80075e6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80075e8:	2b02      	cmp	r3, #2
 80075ea:	dd1e      	ble.n	800762a <_dtoa_r+0x94a>
 80075ec:	9b08      	ldr	r3, [sp, #32]
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	f47f aebc 	bne.w	800736c <_dtoa_r+0x68c>
 80075f4:	4621      	mov	r1, r4
 80075f6:	2205      	movs	r2, #5
 80075f8:	4658      	mov	r0, fp
 80075fa:	f000 fa99 	bl	8007b30 <__multadd>
 80075fe:	4601      	mov	r1, r0
 8007600:	4604      	mov	r4, r0
 8007602:	4648      	mov	r0, r9
 8007604:	f000 fcf4 	bl	8007ff0 <__mcmp>
 8007608:	2800      	cmp	r0, #0
 800760a:	f77f aeaf 	ble.w	800736c <_dtoa_r+0x68c>
 800760e:	2331      	movs	r3, #49	@ 0x31
 8007610:	4656      	mov	r6, sl
 8007612:	f806 3b01 	strb.w	r3, [r6], #1
 8007616:	9b04      	ldr	r3, [sp, #16]
 8007618:	3301      	adds	r3, #1
 800761a:	9304      	str	r3, [sp, #16]
 800761c:	e6aa      	b.n	8007374 <_dtoa_r+0x694>
 800761e:	9c07      	ldr	r4, [sp, #28]
 8007620:	9704      	str	r7, [sp, #16]
 8007622:	4625      	mov	r5, r4
 8007624:	e7f3      	b.n	800760e <_dtoa_r+0x92e>
 8007626:	9b07      	ldr	r3, [sp, #28]
 8007628:	9308      	str	r3, [sp, #32]
 800762a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800762c:	2b00      	cmp	r3, #0
 800762e:	f000 8104 	beq.w	800783a <_dtoa_r+0xb5a>
 8007632:	2e00      	cmp	r6, #0
 8007634:	dd05      	ble.n	8007642 <_dtoa_r+0x962>
 8007636:	4629      	mov	r1, r5
 8007638:	4632      	mov	r2, r6
 800763a:	4658      	mov	r0, fp
 800763c:	f000 fc6c 	bl	8007f18 <__lshift>
 8007640:	4605      	mov	r5, r0
 8007642:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007644:	2b00      	cmp	r3, #0
 8007646:	d05a      	beq.n	80076fe <_dtoa_r+0xa1e>
 8007648:	4658      	mov	r0, fp
 800764a:	6869      	ldr	r1, [r5, #4]
 800764c:	f000 fa0e 	bl	8007a6c <_Balloc>
 8007650:	4606      	mov	r6, r0
 8007652:	b928      	cbnz	r0, 8007660 <_dtoa_r+0x980>
 8007654:	4602      	mov	r2, r0
 8007656:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800765a:	4b83      	ldr	r3, [pc, #524]	@ (8007868 <_dtoa_r+0xb88>)
 800765c:	f7ff bb54 	b.w	8006d08 <_dtoa_r+0x28>
 8007660:	692a      	ldr	r2, [r5, #16]
 8007662:	f105 010c 	add.w	r1, r5, #12
 8007666:	3202      	adds	r2, #2
 8007668:	0092      	lsls	r2, r2, #2
 800766a:	300c      	adds	r0, #12
 800766c:	f002 fae6 	bl	8009c3c <memcpy>
 8007670:	2201      	movs	r2, #1
 8007672:	4631      	mov	r1, r6
 8007674:	4658      	mov	r0, fp
 8007676:	f000 fc4f 	bl	8007f18 <__lshift>
 800767a:	462f      	mov	r7, r5
 800767c:	4605      	mov	r5, r0
 800767e:	f10a 0301 	add.w	r3, sl, #1
 8007682:	9307      	str	r3, [sp, #28]
 8007684:	9b08      	ldr	r3, [sp, #32]
 8007686:	4453      	add	r3, sl
 8007688:	930b      	str	r3, [sp, #44]	@ 0x2c
 800768a:	9b02      	ldr	r3, [sp, #8]
 800768c:	f003 0301 	and.w	r3, r3, #1
 8007690:	930a      	str	r3, [sp, #40]	@ 0x28
 8007692:	9b07      	ldr	r3, [sp, #28]
 8007694:	4621      	mov	r1, r4
 8007696:	3b01      	subs	r3, #1
 8007698:	4648      	mov	r0, r9
 800769a:	9302      	str	r3, [sp, #8]
 800769c:	f7ff fa96 	bl	8006bcc <quorem>
 80076a0:	4639      	mov	r1, r7
 80076a2:	9008      	str	r0, [sp, #32]
 80076a4:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80076a8:	4648      	mov	r0, r9
 80076aa:	f000 fca1 	bl	8007ff0 <__mcmp>
 80076ae:	462a      	mov	r2, r5
 80076b0:	9009      	str	r0, [sp, #36]	@ 0x24
 80076b2:	4621      	mov	r1, r4
 80076b4:	4658      	mov	r0, fp
 80076b6:	f000 fcb7 	bl	8008028 <__mdiff>
 80076ba:	68c2      	ldr	r2, [r0, #12]
 80076bc:	4606      	mov	r6, r0
 80076be:	bb02      	cbnz	r2, 8007702 <_dtoa_r+0xa22>
 80076c0:	4601      	mov	r1, r0
 80076c2:	4648      	mov	r0, r9
 80076c4:	f000 fc94 	bl	8007ff0 <__mcmp>
 80076c8:	4602      	mov	r2, r0
 80076ca:	4631      	mov	r1, r6
 80076cc:	4658      	mov	r0, fp
 80076ce:	920c      	str	r2, [sp, #48]	@ 0x30
 80076d0:	f000 fa0c 	bl	8007aec <_Bfree>
 80076d4:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80076d6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80076d8:	9e07      	ldr	r6, [sp, #28]
 80076da:	ea43 0102 	orr.w	r1, r3, r2
 80076de:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80076e0:	4319      	orrs	r1, r3
 80076e2:	d110      	bne.n	8007706 <_dtoa_r+0xa26>
 80076e4:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80076e8:	d029      	beq.n	800773e <_dtoa_r+0xa5e>
 80076ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	dd02      	ble.n	80076f6 <_dtoa_r+0xa16>
 80076f0:	9b08      	ldr	r3, [sp, #32]
 80076f2:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80076f6:	9b02      	ldr	r3, [sp, #8]
 80076f8:	f883 8000 	strb.w	r8, [r3]
 80076fc:	e63b      	b.n	8007376 <_dtoa_r+0x696>
 80076fe:	4628      	mov	r0, r5
 8007700:	e7bb      	b.n	800767a <_dtoa_r+0x99a>
 8007702:	2201      	movs	r2, #1
 8007704:	e7e1      	b.n	80076ca <_dtoa_r+0x9ea>
 8007706:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007708:	2b00      	cmp	r3, #0
 800770a:	db04      	blt.n	8007716 <_dtoa_r+0xa36>
 800770c:	9920      	ldr	r1, [sp, #128]	@ 0x80
 800770e:	430b      	orrs	r3, r1
 8007710:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007712:	430b      	orrs	r3, r1
 8007714:	d120      	bne.n	8007758 <_dtoa_r+0xa78>
 8007716:	2a00      	cmp	r2, #0
 8007718:	dded      	ble.n	80076f6 <_dtoa_r+0xa16>
 800771a:	4649      	mov	r1, r9
 800771c:	2201      	movs	r2, #1
 800771e:	4658      	mov	r0, fp
 8007720:	f000 fbfa 	bl	8007f18 <__lshift>
 8007724:	4621      	mov	r1, r4
 8007726:	4681      	mov	r9, r0
 8007728:	f000 fc62 	bl	8007ff0 <__mcmp>
 800772c:	2800      	cmp	r0, #0
 800772e:	dc03      	bgt.n	8007738 <_dtoa_r+0xa58>
 8007730:	d1e1      	bne.n	80076f6 <_dtoa_r+0xa16>
 8007732:	f018 0f01 	tst.w	r8, #1
 8007736:	d0de      	beq.n	80076f6 <_dtoa_r+0xa16>
 8007738:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800773c:	d1d8      	bne.n	80076f0 <_dtoa_r+0xa10>
 800773e:	2339      	movs	r3, #57	@ 0x39
 8007740:	9a02      	ldr	r2, [sp, #8]
 8007742:	7013      	strb	r3, [r2, #0]
 8007744:	4633      	mov	r3, r6
 8007746:	461e      	mov	r6, r3
 8007748:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800774c:	3b01      	subs	r3, #1
 800774e:	2a39      	cmp	r2, #57	@ 0x39
 8007750:	d052      	beq.n	80077f8 <_dtoa_r+0xb18>
 8007752:	3201      	adds	r2, #1
 8007754:	701a      	strb	r2, [r3, #0]
 8007756:	e60e      	b.n	8007376 <_dtoa_r+0x696>
 8007758:	2a00      	cmp	r2, #0
 800775a:	dd07      	ble.n	800776c <_dtoa_r+0xa8c>
 800775c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007760:	d0ed      	beq.n	800773e <_dtoa_r+0xa5e>
 8007762:	9a02      	ldr	r2, [sp, #8]
 8007764:	f108 0301 	add.w	r3, r8, #1
 8007768:	7013      	strb	r3, [r2, #0]
 800776a:	e604      	b.n	8007376 <_dtoa_r+0x696>
 800776c:	9b07      	ldr	r3, [sp, #28]
 800776e:	9a07      	ldr	r2, [sp, #28]
 8007770:	f803 8c01 	strb.w	r8, [r3, #-1]
 8007774:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007776:	4293      	cmp	r3, r2
 8007778:	d028      	beq.n	80077cc <_dtoa_r+0xaec>
 800777a:	4649      	mov	r1, r9
 800777c:	2300      	movs	r3, #0
 800777e:	220a      	movs	r2, #10
 8007780:	4658      	mov	r0, fp
 8007782:	f000 f9d5 	bl	8007b30 <__multadd>
 8007786:	42af      	cmp	r7, r5
 8007788:	4681      	mov	r9, r0
 800778a:	f04f 0300 	mov.w	r3, #0
 800778e:	f04f 020a 	mov.w	r2, #10
 8007792:	4639      	mov	r1, r7
 8007794:	4658      	mov	r0, fp
 8007796:	d107      	bne.n	80077a8 <_dtoa_r+0xac8>
 8007798:	f000 f9ca 	bl	8007b30 <__multadd>
 800779c:	4607      	mov	r7, r0
 800779e:	4605      	mov	r5, r0
 80077a0:	9b07      	ldr	r3, [sp, #28]
 80077a2:	3301      	adds	r3, #1
 80077a4:	9307      	str	r3, [sp, #28]
 80077a6:	e774      	b.n	8007692 <_dtoa_r+0x9b2>
 80077a8:	f000 f9c2 	bl	8007b30 <__multadd>
 80077ac:	4629      	mov	r1, r5
 80077ae:	4607      	mov	r7, r0
 80077b0:	2300      	movs	r3, #0
 80077b2:	220a      	movs	r2, #10
 80077b4:	4658      	mov	r0, fp
 80077b6:	f000 f9bb 	bl	8007b30 <__multadd>
 80077ba:	4605      	mov	r5, r0
 80077bc:	e7f0      	b.n	80077a0 <_dtoa_r+0xac0>
 80077be:	9b08      	ldr	r3, [sp, #32]
 80077c0:	2700      	movs	r7, #0
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	bfcc      	ite	gt
 80077c6:	461e      	movgt	r6, r3
 80077c8:	2601      	movle	r6, #1
 80077ca:	4456      	add	r6, sl
 80077cc:	4649      	mov	r1, r9
 80077ce:	2201      	movs	r2, #1
 80077d0:	4658      	mov	r0, fp
 80077d2:	f000 fba1 	bl	8007f18 <__lshift>
 80077d6:	4621      	mov	r1, r4
 80077d8:	4681      	mov	r9, r0
 80077da:	f000 fc09 	bl	8007ff0 <__mcmp>
 80077de:	2800      	cmp	r0, #0
 80077e0:	dcb0      	bgt.n	8007744 <_dtoa_r+0xa64>
 80077e2:	d102      	bne.n	80077ea <_dtoa_r+0xb0a>
 80077e4:	f018 0f01 	tst.w	r8, #1
 80077e8:	d1ac      	bne.n	8007744 <_dtoa_r+0xa64>
 80077ea:	4633      	mov	r3, r6
 80077ec:	461e      	mov	r6, r3
 80077ee:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80077f2:	2a30      	cmp	r2, #48	@ 0x30
 80077f4:	d0fa      	beq.n	80077ec <_dtoa_r+0xb0c>
 80077f6:	e5be      	b.n	8007376 <_dtoa_r+0x696>
 80077f8:	459a      	cmp	sl, r3
 80077fa:	d1a4      	bne.n	8007746 <_dtoa_r+0xa66>
 80077fc:	9b04      	ldr	r3, [sp, #16]
 80077fe:	3301      	adds	r3, #1
 8007800:	9304      	str	r3, [sp, #16]
 8007802:	2331      	movs	r3, #49	@ 0x31
 8007804:	f88a 3000 	strb.w	r3, [sl]
 8007808:	e5b5      	b.n	8007376 <_dtoa_r+0x696>
 800780a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800780c:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800786c <_dtoa_r+0xb8c>
 8007810:	b11b      	cbz	r3, 800781a <_dtoa_r+0xb3a>
 8007812:	f10a 0308 	add.w	r3, sl, #8
 8007816:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8007818:	6013      	str	r3, [r2, #0]
 800781a:	4650      	mov	r0, sl
 800781c:	b017      	add	sp, #92	@ 0x5c
 800781e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007822:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007824:	2b01      	cmp	r3, #1
 8007826:	f77f ae3d 	ble.w	80074a4 <_dtoa_r+0x7c4>
 800782a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800782c:	930a      	str	r3, [sp, #40]	@ 0x28
 800782e:	2001      	movs	r0, #1
 8007830:	e65b      	b.n	80074ea <_dtoa_r+0x80a>
 8007832:	9b08      	ldr	r3, [sp, #32]
 8007834:	2b00      	cmp	r3, #0
 8007836:	f77f aed6 	ble.w	80075e6 <_dtoa_r+0x906>
 800783a:	4656      	mov	r6, sl
 800783c:	4621      	mov	r1, r4
 800783e:	4648      	mov	r0, r9
 8007840:	f7ff f9c4 	bl	8006bcc <quorem>
 8007844:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007848:	9b08      	ldr	r3, [sp, #32]
 800784a:	f806 8b01 	strb.w	r8, [r6], #1
 800784e:	eba6 020a 	sub.w	r2, r6, sl
 8007852:	4293      	cmp	r3, r2
 8007854:	ddb3      	ble.n	80077be <_dtoa_r+0xade>
 8007856:	4649      	mov	r1, r9
 8007858:	2300      	movs	r3, #0
 800785a:	220a      	movs	r2, #10
 800785c:	4658      	mov	r0, fp
 800785e:	f000 f967 	bl	8007b30 <__multadd>
 8007862:	4681      	mov	r9, r0
 8007864:	e7ea      	b.n	800783c <_dtoa_r+0xb5c>
 8007866:	bf00      	nop
 8007868:	0800ac7d 	.word	0x0800ac7d
 800786c:	0800ac01 	.word	0x0800ac01

08007870 <_free_r>:
 8007870:	b538      	push	{r3, r4, r5, lr}
 8007872:	4605      	mov	r5, r0
 8007874:	2900      	cmp	r1, #0
 8007876:	d040      	beq.n	80078fa <_free_r+0x8a>
 8007878:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800787c:	1f0c      	subs	r4, r1, #4
 800787e:	2b00      	cmp	r3, #0
 8007880:	bfb8      	it	lt
 8007882:	18e4      	addlt	r4, r4, r3
 8007884:	f000 f8e6 	bl	8007a54 <__malloc_lock>
 8007888:	4a1c      	ldr	r2, [pc, #112]	@ (80078fc <_free_r+0x8c>)
 800788a:	6813      	ldr	r3, [r2, #0]
 800788c:	b933      	cbnz	r3, 800789c <_free_r+0x2c>
 800788e:	6063      	str	r3, [r4, #4]
 8007890:	6014      	str	r4, [r2, #0]
 8007892:	4628      	mov	r0, r5
 8007894:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007898:	f000 b8e2 	b.w	8007a60 <__malloc_unlock>
 800789c:	42a3      	cmp	r3, r4
 800789e:	d908      	bls.n	80078b2 <_free_r+0x42>
 80078a0:	6820      	ldr	r0, [r4, #0]
 80078a2:	1821      	adds	r1, r4, r0
 80078a4:	428b      	cmp	r3, r1
 80078a6:	bf01      	itttt	eq
 80078a8:	6819      	ldreq	r1, [r3, #0]
 80078aa:	685b      	ldreq	r3, [r3, #4]
 80078ac:	1809      	addeq	r1, r1, r0
 80078ae:	6021      	streq	r1, [r4, #0]
 80078b0:	e7ed      	b.n	800788e <_free_r+0x1e>
 80078b2:	461a      	mov	r2, r3
 80078b4:	685b      	ldr	r3, [r3, #4]
 80078b6:	b10b      	cbz	r3, 80078bc <_free_r+0x4c>
 80078b8:	42a3      	cmp	r3, r4
 80078ba:	d9fa      	bls.n	80078b2 <_free_r+0x42>
 80078bc:	6811      	ldr	r1, [r2, #0]
 80078be:	1850      	adds	r0, r2, r1
 80078c0:	42a0      	cmp	r0, r4
 80078c2:	d10b      	bne.n	80078dc <_free_r+0x6c>
 80078c4:	6820      	ldr	r0, [r4, #0]
 80078c6:	4401      	add	r1, r0
 80078c8:	1850      	adds	r0, r2, r1
 80078ca:	4283      	cmp	r3, r0
 80078cc:	6011      	str	r1, [r2, #0]
 80078ce:	d1e0      	bne.n	8007892 <_free_r+0x22>
 80078d0:	6818      	ldr	r0, [r3, #0]
 80078d2:	685b      	ldr	r3, [r3, #4]
 80078d4:	4408      	add	r0, r1
 80078d6:	6010      	str	r0, [r2, #0]
 80078d8:	6053      	str	r3, [r2, #4]
 80078da:	e7da      	b.n	8007892 <_free_r+0x22>
 80078dc:	d902      	bls.n	80078e4 <_free_r+0x74>
 80078de:	230c      	movs	r3, #12
 80078e0:	602b      	str	r3, [r5, #0]
 80078e2:	e7d6      	b.n	8007892 <_free_r+0x22>
 80078e4:	6820      	ldr	r0, [r4, #0]
 80078e6:	1821      	adds	r1, r4, r0
 80078e8:	428b      	cmp	r3, r1
 80078ea:	bf01      	itttt	eq
 80078ec:	6819      	ldreq	r1, [r3, #0]
 80078ee:	685b      	ldreq	r3, [r3, #4]
 80078f0:	1809      	addeq	r1, r1, r0
 80078f2:	6021      	streq	r1, [r4, #0]
 80078f4:	6063      	str	r3, [r4, #4]
 80078f6:	6054      	str	r4, [r2, #4]
 80078f8:	e7cb      	b.n	8007892 <_free_r+0x22>
 80078fa:	bd38      	pop	{r3, r4, r5, pc}
 80078fc:	20000a0c 	.word	0x20000a0c

08007900 <malloc>:
 8007900:	4b02      	ldr	r3, [pc, #8]	@ (800790c <malloc+0xc>)
 8007902:	4601      	mov	r1, r0
 8007904:	6818      	ldr	r0, [r3, #0]
 8007906:	f000 b825 	b.w	8007954 <_malloc_r>
 800790a:	bf00      	nop
 800790c:	2000001c 	.word	0x2000001c

08007910 <sbrk_aligned>:
 8007910:	b570      	push	{r4, r5, r6, lr}
 8007912:	4e0f      	ldr	r6, [pc, #60]	@ (8007950 <sbrk_aligned+0x40>)
 8007914:	460c      	mov	r4, r1
 8007916:	6831      	ldr	r1, [r6, #0]
 8007918:	4605      	mov	r5, r0
 800791a:	b911      	cbnz	r1, 8007922 <sbrk_aligned+0x12>
 800791c:	f002 f97e 	bl	8009c1c <_sbrk_r>
 8007920:	6030      	str	r0, [r6, #0]
 8007922:	4621      	mov	r1, r4
 8007924:	4628      	mov	r0, r5
 8007926:	f002 f979 	bl	8009c1c <_sbrk_r>
 800792a:	1c43      	adds	r3, r0, #1
 800792c:	d103      	bne.n	8007936 <sbrk_aligned+0x26>
 800792e:	f04f 34ff 	mov.w	r4, #4294967295
 8007932:	4620      	mov	r0, r4
 8007934:	bd70      	pop	{r4, r5, r6, pc}
 8007936:	1cc4      	adds	r4, r0, #3
 8007938:	f024 0403 	bic.w	r4, r4, #3
 800793c:	42a0      	cmp	r0, r4
 800793e:	d0f8      	beq.n	8007932 <sbrk_aligned+0x22>
 8007940:	1a21      	subs	r1, r4, r0
 8007942:	4628      	mov	r0, r5
 8007944:	f002 f96a 	bl	8009c1c <_sbrk_r>
 8007948:	3001      	adds	r0, #1
 800794a:	d1f2      	bne.n	8007932 <sbrk_aligned+0x22>
 800794c:	e7ef      	b.n	800792e <sbrk_aligned+0x1e>
 800794e:	bf00      	nop
 8007950:	20000a08 	.word	0x20000a08

08007954 <_malloc_r>:
 8007954:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007958:	1ccd      	adds	r5, r1, #3
 800795a:	f025 0503 	bic.w	r5, r5, #3
 800795e:	3508      	adds	r5, #8
 8007960:	2d0c      	cmp	r5, #12
 8007962:	bf38      	it	cc
 8007964:	250c      	movcc	r5, #12
 8007966:	2d00      	cmp	r5, #0
 8007968:	4606      	mov	r6, r0
 800796a:	db01      	blt.n	8007970 <_malloc_r+0x1c>
 800796c:	42a9      	cmp	r1, r5
 800796e:	d904      	bls.n	800797a <_malloc_r+0x26>
 8007970:	230c      	movs	r3, #12
 8007972:	6033      	str	r3, [r6, #0]
 8007974:	2000      	movs	r0, #0
 8007976:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800797a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007a50 <_malloc_r+0xfc>
 800797e:	f000 f869 	bl	8007a54 <__malloc_lock>
 8007982:	f8d8 3000 	ldr.w	r3, [r8]
 8007986:	461c      	mov	r4, r3
 8007988:	bb44      	cbnz	r4, 80079dc <_malloc_r+0x88>
 800798a:	4629      	mov	r1, r5
 800798c:	4630      	mov	r0, r6
 800798e:	f7ff ffbf 	bl	8007910 <sbrk_aligned>
 8007992:	1c43      	adds	r3, r0, #1
 8007994:	4604      	mov	r4, r0
 8007996:	d158      	bne.n	8007a4a <_malloc_r+0xf6>
 8007998:	f8d8 4000 	ldr.w	r4, [r8]
 800799c:	4627      	mov	r7, r4
 800799e:	2f00      	cmp	r7, #0
 80079a0:	d143      	bne.n	8007a2a <_malloc_r+0xd6>
 80079a2:	2c00      	cmp	r4, #0
 80079a4:	d04b      	beq.n	8007a3e <_malloc_r+0xea>
 80079a6:	6823      	ldr	r3, [r4, #0]
 80079a8:	4639      	mov	r1, r7
 80079aa:	4630      	mov	r0, r6
 80079ac:	eb04 0903 	add.w	r9, r4, r3
 80079b0:	f002 f934 	bl	8009c1c <_sbrk_r>
 80079b4:	4581      	cmp	r9, r0
 80079b6:	d142      	bne.n	8007a3e <_malloc_r+0xea>
 80079b8:	6821      	ldr	r1, [r4, #0]
 80079ba:	4630      	mov	r0, r6
 80079bc:	1a6d      	subs	r5, r5, r1
 80079be:	4629      	mov	r1, r5
 80079c0:	f7ff ffa6 	bl	8007910 <sbrk_aligned>
 80079c4:	3001      	adds	r0, #1
 80079c6:	d03a      	beq.n	8007a3e <_malloc_r+0xea>
 80079c8:	6823      	ldr	r3, [r4, #0]
 80079ca:	442b      	add	r3, r5
 80079cc:	6023      	str	r3, [r4, #0]
 80079ce:	f8d8 3000 	ldr.w	r3, [r8]
 80079d2:	685a      	ldr	r2, [r3, #4]
 80079d4:	bb62      	cbnz	r2, 8007a30 <_malloc_r+0xdc>
 80079d6:	f8c8 7000 	str.w	r7, [r8]
 80079da:	e00f      	b.n	80079fc <_malloc_r+0xa8>
 80079dc:	6822      	ldr	r2, [r4, #0]
 80079de:	1b52      	subs	r2, r2, r5
 80079e0:	d420      	bmi.n	8007a24 <_malloc_r+0xd0>
 80079e2:	2a0b      	cmp	r2, #11
 80079e4:	d917      	bls.n	8007a16 <_malloc_r+0xc2>
 80079e6:	1961      	adds	r1, r4, r5
 80079e8:	42a3      	cmp	r3, r4
 80079ea:	6025      	str	r5, [r4, #0]
 80079ec:	bf18      	it	ne
 80079ee:	6059      	strne	r1, [r3, #4]
 80079f0:	6863      	ldr	r3, [r4, #4]
 80079f2:	bf08      	it	eq
 80079f4:	f8c8 1000 	streq.w	r1, [r8]
 80079f8:	5162      	str	r2, [r4, r5]
 80079fa:	604b      	str	r3, [r1, #4]
 80079fc:	4630      	mov	r0, r6
 80079fe:	f000 f82f 	bl	8007a60 <__malloc_unlock>
 8007a02:	f104 000b 	add.w	r0, r4, #11
 8007a06:	1d23      	adds	r3, r4, #4
 8007a08:	f020 0007 	bic.w	r0, r0, #7
 8007a0c:	1ac2      	subs	r2, r0, r3
 8007a0e:	bf1c      	itt	ne
 8007a10:	1a1b      	subne	r3, r3, r0
 8007a12:	50a3      	strne	r3, [r4, r2]
 8007a14:	e7af      	b.n	8007976 <_malloc_r+0x22>
 8007a16:	6862      	ldr	r2, [r4, #4]
 8007a18:	42a3      	cmp	r3, r4
 8007a1a:	bf0c      	ite	eq
 8007a1c:	f8c8 2000 	streq.w	r2, [r8]
 8007a20:	605a      	strne	r2, [r3, #4]
 8007a22:	e7eb      	b.n	80079fc <_malloc_r+0xa8>
 8007a24:	4623      	mov	r3, r4
 8007a26:	6864      	ldr	r4, [r4, #4]
 8007a28:	e7ae      	b.n	8007988 <_malloc_r+0x34>
 8007a2a:	463c      	mov	r4, r7
 8007a2c:	687f      	ldr	r7, [r7, #4]
 8007a2e:	e7b6      	b.n	800799e <_malloc_r+0x4a>
 8007a30:	461a      	mov	r2, r3
 8007a32:	685b      	ldr	r3, [r3, #4]
 8007a34:	42a3      	cmp	r3, r4
 8007a36:	d1fb      	bne.n	8007a30 <_malloc_r+0xdc>
 8007a38:	2300      	movs	r3, #0
 8007a3a:	6053      	str	r3, [r2, #4]
 8007a3c:	e7de      	b.n	80079fc <_malloc_r+0xa8>
 8007a3e:	230c      	movs	r3, #12
 8007a40:	4630      	mov	r0, r6
 8007a42:	6033      	str	r3, [r6, #0]
 8007a44:	f000 f80c 	bl	8007a60 <__malloc_unlock>
 8007a48:	e794      	b.n	8007974 <_malloc_r+0x20>
 8007a4a:	6005      	str	r5, [r0, #0]
 8007a4c:	e7d6      	b.n	80079fc <_malloc_r+0xa8>
 8007a4e:	bf00      	nop
 8007a50:	20000a0c 	.word	0x20000a0c

08007a54 <__malloc_lock>:
 8007a54:	4801      	ldr	r0, [pc, #4]	@ (8007a5c <__malloc_lock+0x8>)
 8007a56:	f7ff b8a4 	b.w	8006ba2 <__retarget_lock_acquire_recursive>
 8007a5a:	bf00      	nop
 8007a5c:	20000a04 	.word	0x20000a04

08007a60 <__malloc_unlock>:
 8007a60:	4801      	ldr	r0, [pc, #4]	@ (8007a68 <__malloc_unlock+0x8>)
 8007a62:	f7ff b89f 	b.w	8006ba4 <__retarget_lock_release_recursive>
 8007a66:	bf00      	nop
 8007a68:	20000a04 	.word	0x20000a04

08007a6c <_Balloc>:
 8007a6c:	b570      	push	{r4, r5, r6, lr}
 8007a6e:	69c6      	ldr	r6, [r0, #28]
 8007a70:	4604      	mov	r4, r0
 8007a72:	460d      	mov	r5, r1
 8007a74:	b976      	cbnz	r6, 8007a94 <_Balloc+0x28>
 8007a76:	2010      	movs	r0, #16
 8007a78:	f7ff ff42 	bl	8007900 <malloc>
 8007a7c:	4602      	mov	r2, r0
 8007a7e:	61e0      	str	r0, [r4, #28]
 8007a80:	b920      	cbnz	r0, 8007a8c <_Balloc+0x20>
 8007a82:	216b      	movs	r1, #107	@ 0x6b
 8007a84:	4b17      	ldr	r3, [pc, #92]	@ (8007ae4 <_Balloc+0x78>)
 8007a86:	4818      	ldr	r0, [pc, #96]	@ (8007ae8 <_Balloc+0x7c>)
 8007a88:	f002 f8ec 	bl	8009c64 <__assert_func>
 8007a8c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007a90:	6006      	str	r6, [r0, #0]
 8007a92:	60c6      	str	r6, [r0, #12]
 8007a94:	69e6      	ldr	r6, [r4, #28]
 8007a96:	68f3      	ldr	r3, [r6, #12]
 8007a98:	b183      	cbz	r3, 8007abc <_Balloc+0x50>
 8007a9a:	69e3      	ldr	r3, [r4, #28]
 8007a9c:	68db      	ldr	r3, [r3, #12]
 8007a9e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007aa2:	b9b8      	cbnz	r0, 8007ad4 <_Balloc+0x68>
 8007aa4:	2101      	movs	r1, #1
 8007aa6:	fa01 f605 	lsl.w	r6, r1, r5
 8007aaa:	1d72      	adds	r2, r6, #5
 8007aac:	4620      	mov	r0, r4
 8007aae:	0092      	lsls	r2, r2, #2
 8007ab0:	f002 f8f6 	bl	8009ca0 <_calloc_r>
 8007ab4:	b160      	cbz	r0, 8007ad0 <_Balloc+0x64>
 8007ab6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007aba:	e00e      	b.n	8007ada <_Balloc+0x6e>
 8007abc:	2221      	movs	r2, #33	@ 0x21
 8007abe:	2104      	movs	r1, #4
 8007ac0:	4620      	mov	r0, r4
 8007ac2:	f002 f8ed 	bl	8009ca0 <_calloc_r>
 8007ac6:	69e3      	ldr	r3, [r4, #28]
 8007ac8:	60f0      	str	r0, [r6, #12]
 8007aca:	68db      	ldr	r3, [r3, #12]
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d1e4      	bne.n	8007a9a <_Balloc+0x2e>
 8007ad0:	2000      	movs	r0, #0
 8007ad2:	bd70      	pop	{r4, r5, r6, pc}
 8007ad4:	6802      	ldr	r2, [r0, #0]
 8007ad6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007ada:	2300      	movs	r3, #0
 8007adc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007ae0:	e7f7      	b.n	8007ad2 <_Balloc+0x66>
 8007ae2:	bf00      	nop
 8007ae4:	0800ac0e 	.word	0x0800ac0e
 8007ae8:	0800ac8e 	.word	0x0800ac8e

08007aec <_Bfree>:
 8007aec:	b570      	push	{r4, r5, r6, lr}
 8007aee:	69c6      	ldr	r6, [r0, #28]
 8007af0:	4605      	mov	r5, r0
 8007af2:	460c      	mov	r4, r1
 8007af4:	b976      	cbnz	r6, 8007b14 <_Bfree+0x28>
 8007af6:	2010      	movs	r0, #16
 8007af8:	f7ff ff02 	bl	8007900 <malloc>
 8007afc:	4602      	mov	r2, r0
 8007afe:	61e8      	str	r0, [r5, #28]
 8007b00:	b920      	cbnz	r0, 8007b0c <_Bfree+0x20>
 8007b02:	218f      	movs	r1, #143	@ 0x8f
 8007b04:	4b08      	ldr	r3, [pc, #32]	@ (8007b28 <_Bfree+0x3c>)
 8007b06:	4809      	ldr	r0, [pc, #36]	@ (8007b2c <_Bfree+0x40>)
 8007b08:	f002 f8ac 	bl	8009c64 <__assert_func>
 8007b0c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007b10:	6006      	str	r6, [r0, #0]
 8007b12:	60c6      	str	r6, [r0, #12]
 8007b14:	b13c      	cbz	r4, 8007b26 <_Bfree+0x3a>
 8007b16:	69eb      	ldr	r3, [r5, #28]
 8007b18:	6862      	ldr	r2, [r4, #4]
 8007b1a:	68db      	ldr	r3, [r3, #12]
 8007b1c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007b20:	6021      	str	r1, [r4, #0]
 8007b22:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007b26:	bd70      	pop	{r4, r5, r6, pc}
 8007b28:	0800ac0e 	.word	0x0800ac0e
 8007b2c:	0800ac8e 	.word	0x0800ac8e

08007b30 <__multadd>:
 8007b30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b34:	4607      	mov	r7, r0
 8007b36:	460c      	mov	r4, r1
 8007b38:	461e      	mov	r6, r3
 8007b3a:	2000      	movs	r0, #0
 8007b3c:	690d      	ldr	r5, [r1, #16]
 8007b3e:	f101 0c14 	add.w	ip, r1, #20
 8007b42:	f8dc 3000 	ldr.w	r3, [ip]
 8007b46:	3001      	adds	r0, #1
 8007b48:	b299      	uxth	r1, r3
 8007b4a:	fb02 6101 	mla	r1, r2, r1, r6
 8007b4e:	0c1e      	lsrs	r6, r3, #16
 8007b50:	0c0b      	lsrs	r3, r1, #16
 8007b52:	fb02 3306 	mla	r3, r2, r6, r3
 8007b56:	b289      	uxth	r1, r1
 8007b58:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007b5c:	4285      	cmp	r5, r0
 8007b5e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007b62:	f84c 1b04 	str.w	r1, [ip], #4
 8007b66:	dcec      	bgt.n	8007b42 <__multadd+0x12>
 8007b68:	b30e      	cbz	r6, 8007bae <__multadd+0x7e>
 8007b6a:	68a3      	ldr	r3, [r4, #8]
 8007b6c:	42ab      	cmp	r3, r5
 8007b6e:	dc19      	bgt.n	8007ba4 <__multadd+0x74>
 8007b70:	6861      	ldr	r1, [r4, #4]
 8007b72:	4638      	mov	r0, r7
 8007b74:	3101      	adds	r1, #1
 8007b76:	f7ff ff79 	bl	8007a6c <_Balloc>
 8007b7a:	4680      	mov	r8, r0
 8007b7c:	b928      	cbnz	r0, 8007b8a <__multadd+0x5a>
 8007b7e:	4602      	mov	r2, r0
 8007b80:	21ba      	movs	r1, #186	@ 0xba
 8007b82:	4b0c      	ldr	r3, [pc, #48]	@ (8007bb4 <__multadd+0x84>)
 8007b84:	480c      	ldr	r0, [pc, #48]	@ (8007bb8 <__multadd+0x88>)
 8007b86:	f002 f86d 	bl	8009c64 <__assert_func>
 8007b8a:	6922      	ldr	r2, [r4, #16]
 8007b8c:	f104 010c 	add.w	r1, r4, #12
 8007b90:	3202      	adds	r2, #2
 8007b92:	0092      	lsls	r2, r2, #2
 8007b94:	300c      	adds	r0, #12
 8007b96:	f002 f851 	bl	8009c3c <memcpy>
 8007b9a:	4621      	mov	r1, r4
 8007b9c:	4638      	mov	r0, r7
 8007b9e:	f7ff ffa5 	bl	8007aec <_Bfree>
 8007ba2:	4644      	mov	r4, r8
 8007ba4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007ba8:	3501      	adds	r5, #1
 8007baa:	615e      	str	r6, [r3, #20]
 8007bac:	6125      	str	r5, [r4, #16]
 8007bae:	4620      	mov	r0, r4
 8007bb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007bb4:	0800ac7d 	.word	0x0800ac7d
 8007bb8:	0800ac8e 	.word	0x0800ac8e

08007bbc <__s2b>:
 8007bbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007bc0:	4615      	mov	r5, r2
 8007bc2:	2209      	movs	r2, #9
 8007bc4:	461f      	mov	r7, r3
 8007bc6:	3308      	adds	r3, #8
 8007bc8:	460c      	mov	r4, r1
 8007bca:	fb93 f3f2 	sdiv	r3, r3, r2
 8007bce:	4606      	mov	r6, r0
 8007bd0:	2201      	movs	r2, #1
 8007bd2:	2100      	movs	r1, #0
 8007bd4:	429a      	cmp	r2, r3
 8007bd6:	db09      	blt.n	8007bec <__s2b+0x30>
 8007bd8:	4630      	mov	r0, r6
 8007bda:	f7ff ff47 	bl	8007a6c <_Balloc>
 8007bde:	b940      	cbnz	r0, 8007bf2 <__s2b+0x36>
 8007be0:	4602      	mov	r2, r0
 8007be2:	21d3      	movs	r1, #211	@ 0xd3
 8007be4:	4b18      	ldr	r3, [pc, #96]	@ (8007c48 <__s2b+0x8c>)
 8007be6:	4819      	ldr	r0, [pc, #100]	@ (8007c4c <__s2b+0x90>)
 8007be8:	f002 f83c 	bl	8009c64 <__assert_func>
 8007bec:	0052      	lsls	r2, r2, #1
 8007bee:	3101      	adds	r1, #1
 8007bf0:	e7f0      	b.n	8007bd4 <__s2b+0x18>
 8007bf2:	9b08      	ldr	r3, [sp, #32]
 8007bf4:	2d09      	cmp	r5, #9
 8007bf6:	6143      	str	r3, [r0, #20]
 8007bf8:	f04f 0301 	mov.w	r3, #1
 8007bfc:	6103      	str	r3, [r0, #16]
 8007bfe:	dd16      	ble.n	8007c2e <__s2b+0x72>
 8007c00:	f104 0909 	add.w	r9, r4, #9
 8007c04:	46c8      	mov	r8, r9
 8007c06:	442c      	add	r4, r5
 8007c08:	f818 3b01 	ldrb.w	r3, [r8], #1
 8007c0c:	4601      	mov	r1, r0
 8007c0e:	220a      	movs	r2, #10
 8007c10:	4630      	mov	r0, r6
 8007c12:	3b30      	subs	r3, #48	@ 0x30
 8007c14:	f7ff ff8c 	bl	8007b30 <__multadd>
 8007c18:	45a0      	cmp	r8, r4
 8007c1a:	d1f5      	bne.n	8007c08 <__s2b+0x4c>
 8007c1c:	f1a5 0408 	sub.w	r4, r5, #8
 8007c20:	444c      	add	r4, r9
 8007c22:	1b2d      	subs	r5, r5, r4
 8007c24:	1963      	adds	r3, r4, r5
 8007c26:	42bb      	cmp	r3, r7
 8007c28:	db04      	blt.n	8007c34 <__s2b+0x78>
 8007c2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007c2e:	2509      	movs	r5, #9
 8007c30:	340a      	adds	r4, #10
 8007c32:	e7f6      	b.n	8007c22 <__s2b+0x66>
 8007c34:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007c38:	4601      	mov	r1, r0
 8007c3a:	220a      	movs	r2, #10
 8007c3c:	4630      	mov	r0, r6
 8007c3e:	3b30      	subs	r3, #48	@ 0x30
 8007c40:	f7ff ff76 	bl	8007b30 <__multadd>
 8007c44:	e7ee      	b.n	8007c24 <__s2b+0x68>
 8007c46:	bf00      	nop
 8007c48:	0800ac7d 	.word	0x0800ac7d
 8007c4c:	0800ac8e 	.word	0x0800ac8e

08007c50 <__hi0bits>:
 8007c50:	4603      	mov	r3, r0
 8007c52:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8007c56:	bf3a      	itte	cc
 8007c58:	0403      	lslcc	r3, r0, #16
 8007c5a:	2010      	movcc	r0, #16
 8007c5c:	2000      	movcs	r0, #0
 8007c5e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007c62:	bf3c      	itt	cc
 8007c64:	021b      	lslcc	r3, r3, #8
 8007c66:	3008      	addcc	r0, #8
 8007c68:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007c6c:	bf3c      	itt	cc
 8007c6e:	011b      	lslcc	r3, r3, #4
 8007c70:	3004      	addcc	r0, #4
 8007c72:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007c76:	bf3c      	itt	cc
 8007c78:	009b      	lslcc	r3, r3, #2
 8007c7a:	3002      	addcc	r0, #2
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	db05      	blt.n	8007c8c <__hi0bits+0x3c>
 8007c80:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007c84:	f100 0001 	add.w	r0, r0, #1
 8007c88:	bf08      	it	eq
 8007c8a:	2020      	moveq	r0, #32
 8007c8c:	4770      	bx	lr

08007c8e <__lo0bits>:
 8007c8e:	6803      	ldr	r3, [r0, #0]
 8007c90:	4602      	mov	r2, r0
 8007c92:	f013 0007 	ands.w	r0, r3, #7
 8007c96:	d00b      	beq.n	8007cb0 <__lo0bits+0x22>
 8007c98:	07d9      	lsls	r1, r3, #31
 8007c9a:	d421      	bmi.n	8007ce0 <__lo0bits+0x52>
 8007c9c:	0798      	lsls	r0, r3, #30
 8007c9e:	bf49      	itett	mi
 8007ca0:	085b      	lsrmi	r3, r3, #1
 8007ca2:	089b      	lsrpl	r3, r3, #2
 8007ca4:	2001      	movmi	r0, #1
 8007ca6:	6013      	strmi	r3, [r2, #0]
 8007ca8:	bf5c      	itt	pl
 8007caa:	2002      	movpl	r0, #2
 8007cac:	6013      	strpl	r3, [r2, #0]
 8007cae:	4770      	bx	lr
 8007cb0:	b299      	uxth	r1, r3
 8007cb2:	b909      	cbnz	r1, 8007cb8 <__lo0bits+0x2a>
 8007cb4:	2010      	movs	r0, #16
 8007cb6:	0c1b      	lsrs	r3, r3, #16
 8007cb8:	b2d9      	uxtb	r1, r3
 8007cba:	b909      	cbnz	r1, 8007cc0 <__lo0bits+0x32>
 8007cbc:	3008      	adds	r0, #8
 8007cbe:	0a1b      	lsrs	r3, r3, #8
 8007cc0:	0719      	lsls	r1, r3, #28
 8007cc2:	bf04      	itt	eq
 8007cc4:	091b      	lsreq	r3, r3, #4
 8007cc6:	3004      	addeq	r0, #4
 8007cc8:	0799      	lsls	r1, r3, #30
 8007cca:	bf04      	itt	eq
 8007ccc:	089b      	lsreq	r3, r3, #2
 8007cce:	3002      	addeq	r0, #2
 8007cd0:	07d9      	lsls	r1, r3, #31
 8007cd2:	d403      	bmi.n	8007cdc <__lo0bits+0x4e>
 8007cd4:	085b      	lsrs	r3, r3, #1
 8007cd6:	f100 0001 	add.w	r0, r0, #1
 8007cda:	d003      	beq.n	8007ce4 <__lo0bits+0x56>
 8007cdc:	6013      	str	r3, [r2, #0]
 8007cde:	4770      	bx	lr
 8007ce0:	2000      	movs	r0, #0
 8007ce2:	4770      	bx	lr
 8007ce4:	2020      	movs	r0, #32
 8007ce6:	4770      	bx	lr

08007ce8 <__i2b>:
 8007ce8:	b510      	push	{r4, lr}
 8007cea:	460c      	mov	r4, r1
 8007cec:	2101      	movs	r1, #1
 8007cee:	f7ff febd 	bl	8007a6c <_Balloc>
 8007cf2:	4602      	mov	r2, r0
 8007cf4:	b928      	cbnz	r0, 8007d02 <__i2b+0x1a>
 8007cf6:	f240 1145 	movw	r1, #325	@ 0x145
 8007cfa:	4b04      	ldr	r3, [pc, #16]	@ (8007d0c <__i2b+0x24>)
 8007cfc:	4804      	ldr	r0, [pc, #16]	@ (8007d10 <__i2b+0x28>)
 8007cfe:	f001 ffb1 	bl	8009c64 <__assert_func>
 8007d02:	2301      	movs	r3, #1
 8007d04:	6144      	str	r4, [r0, #20]
 8007d06:	6103      	str	r3, [r0, #16]
 8007d08:	bd10      	pop	{r4, pc}
 8007d0a:	bf00      	nop
 8007d0c:	0800ac7d 	.word	0x0800ac7d
 8007d10:	0800ac8e 	.word	0x0800ac8e

08007d14 <__multiply>:
 8007d14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d18:	4614      	mov	r4, r2
 8007d1a:	690a      	ldr	r2, [r1, #16]
 8007d1c:	6923      	ldr	r3, [r4, #16]
 8007d1e:	460f      	mov	r7, r1
 8007d20:	429a      	cmp	r2, r3
 8007d22:	bfa2      	ittt	ge
 8007d24:	4623      	movge	r3, r4
 8007d26:	460c      	movge	r4, r1
 8007d28:	461f      	movge	r7, r3
 8007d2a:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8007d2e:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8007d32:	68a3      	ldr	r3, [r4, #8]
 8007d34:	6861      	ldr	r1, [r4, #4]
 8007d36:	eb0a 0609 	add.w	r6, sl, r9
 8007d3a:	42b3      	cmp	r3, r6
 8007d3c:	b085      	sub	sp, #20
 8007d3e:	bfb8      	it	lt
 8007d40:	3101      	addlt	r1, #1
 8007d42:	f7ff fe93 	bl	8007a6c <_Balloc>
 8007d46:	b930      	cbnz	r0, 8007d56 <__multiply+0x42>
 8007d48:	4602      	mov	r2, r0
 8007d4a:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8007d4e:	4b43      	ldr	r3, [pc, #268]	@ (8007e5c <__multiply+0x148>)
 8007d50:	4843      	ldr	r0, [pc, #268]	@ (8007e60 <__multiply+0x14c>)
 8007d52:	f001 ff87 	bl	8009c64 <__assert_func>
 8007d56:	f100 0514 	add.w	r5, r0, #20
 8007d5a:	462b      	mov	r3, r5
 8007d5c:	2200      	movs	r2, #0
 8007d5e:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007d62:	4543      	cmp	r3, r8
 8007d64:	d321      	bcc.n	8007daa <__multiply+0x96>
 8007d66:	f107 0114 	add.w	r1, r7, #20
 8007d6a:	f104 0214 	add.w	r2, r4, #20
 8007d6e:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8007d72:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8007d76:	9302      	str	r3, [sp, #8]
 8007d78:	1b13      	subs	r3, r2, r4
 8007d7a:	3b15      	subs	r3, #21
 8007d7c:	f023 0303 	bic.w	r3, r3, #3
 8007d80:	3304      	adds	r3, #4
 8007d82:	f104 0715 	add.w	r7, r4, #21
 8007d86:	42ba      	cmp	r2, r7
 8007d88:	bf38      	it	cc
 8007d8a:	2304      	movcc	r3, #4
 8007d8c:	9301      	str	r3, [sp, #4]
 8007d8e:	9b02      	ldr	r3, [sp, #8]
 8007d90:	9103      	str	r1, [sp, #12]
 8007d92:	428b      	cmp	r3, r1
 8007d94:	d80c      	bhi.n	8007db0 <__multiply+0x9c>
 8007d96:	2e00      	cmp	r6, #0
 8007d98:	dd03      	ble.n	8007da2 <__multiply+0x8e>
 8007d9a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d05a      	beq.n	8007e58 <__multiply+0x144>
 8007da2:	6106      	str	r6, [r0, #16]
 8007da4:	b005      	add	sp, #20
 8007da6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007daa:	f843 2b04 	str.w	r2, [r3], #4
 8007dae:	e7d8      	b.n	8007d62 <__multiply+0x4e>
 8007db0:	f8b1 a000 	ldrh.w	sl, [r1]
 8007db4:	f1ba 0f00 	cmp.w	sl, #0
 8007db8:	d023      	beq.n	8007e02 <__multiply+0xee>
 8007dba:	46a9      	mov	r9, r5
 8007dbc:	f04f 0c00 	mov.w	ip, #0
 8007dc0:	f104 0e14 	add.w	lr, r4, #20
 8007dc4:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007dc8:	f8d9 3000 	ldr.w	r3, [r9]
 8007dcc:	fa1f fb87 	uxth.w	fp, r7
 8007dd0:	b29b      	uxth	r3, r3
 8007dd2:	fb0a 330b 	mla	r3, sl, fp, r3
 8007dd6:	4463      	add	r3, ip
 8007dd8:	f8d9 c000 	ldr.w	ip, [r9]
 8007ddc:	0c3f      	lsrs	r7, r7, #16
 8007dde:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8007de2:	fb0a c707 	mla	r7, sl, r7, ip
 8007de6:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8007dea:	b29b      	uxth	r3, r3
 8007dec:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007df0:	4572      	cmp	r2, lr
 8007df2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007df6:	f849 3b04 	str.w	r3, [r9], #4
 8007dfa:	d8e3      	bhi.n	8007dc4 <__multiply+0xb0>
 8007dfc:	9b01      	ldr	r3, [sp, #4]
 8007dfe:	f845 c003 	str.w	ip, [r5, r3]
 8007e02:	9b03      	ldr	r3, [sp, #12]
 8007e04:	3104      	adds	r1, #4
 8007e06:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8007e0a:	f1b9 0f00 	cmp.w	r9, #0
 8007e0e:	d021      	beq.n	8007e54 <__multiply+0x140>
 8007e10:	46ae      	mov	lr, r5
 8007e12:	f04f 0a00 	mov.w	sl, #0
 8007e16:	682b      	ldr	r3, [r5, #0]
 8007e18:	f104 0c14 	add.w	ip, r4, #20
 8007e1c:	f8bc b000 	ldrh.w	fp, [ip]
 8007e20:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8007e24:	b29b      	uxth	r3, r3
 8007e26:	fb09 770b 	mla	r7, r9, fp, r7
 8007e2a:	4457      	add	r7, sl
 8007e2c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007e30:	f84e 3b04 	str.w	r3, [lr], #4
 8007e34:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007e38:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007e3c:	f8be 3000 	ldrh.w	r3, [lr]
 8007e40:	4562      	cmp	r2, ip
 8007e42:	fb09 330a 	mla	r3, r9, sl, r3
 8007e46:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8007e4a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007e4e:	d8e5      	bhi.n	8007e1c <__multiply+0x108>
 8007e50:	9f01      	ldr	r7, [sp, #4]
 8007e52:	51eb      	str	r3, [r5, r7]
 8007e54:	3504      	adds	r5, #4
 8007e56:	e79a      	b.n	8007d8e <__multiply+0x7a>
 8007e58:	3e01      	subs	r6, #1
 8007e5a:	e79c      	b.n	8007d96 <__multiply+0x82>
 8007e5c:	0800ac7d 	.word	0x0800ac7d
 8007e60:	0800ac8e 	.word	0x0800ac8e

08007e64 <__pow5mult>:
 8007e64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007e68:	4615      	mov	r5, r2
 8007e6a:	f012 0203 	ands.w	r2, r2, #3
 8007e6e:	4607      	mov	r7, r0
 8007e70:	460e      	mov	r6, r1
 8007e72:	d007      	beq.n	8007e84 <__pow5mult+0x20>
 8007e74:	4c25      	ldr	r4, [pc, #148]	@ (8007f0c <__pow5mult+0xa8>)
 8007e76:	3a01      	subs	r2, #1
 8007e78:	2300      	movs	r3, #0
 8007e7a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007e7e:	f7ff fe57 	bl	8007b30 <__multadd>
 8007e82:	4606      	mov	r6, r0
 8007e84:	10ad      	asrs	r5, r5, #2
 8007e86:	d03d      	beq.n	8007f04 <__pow5mult+0xa0>
 8007e88:	69fc      	ldr	r4, [r7, #28]
 8007e8a:	b97c      	cbnz	r4, 8007eac <__pow5mult+0x48>
 8007e8c:	2010      	movs	r0, #16
 8007e8e:	f7ff fd37 	bl	8007900 <malloc>
 8007e92:	4602      	mov	r2, r0
 8007e94:	61f8      	str	r0, [r7, #28]
 8007e96:	b928      	cbnz	r0, 8007ea4 <__pow5mult+0x40>
 8007e98:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007e9c:	4b1c      	ldr	r3, [pc, #112]	@ (8007f10 <__pow5mult+0xac>)
 8007e9e:	481d      	ldr	r0, [pc, #116]	@ (8007f14 <__pow5mult+0xb0>)
 8007ea0:	f001 fee0 	bl	8009c64 <__assert_func>
 8007ea4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007ea8:	6004      	str	r4, [r0, #0]
 8007eaa:	60c4      	str	r4, [r0, #12]
 8007eac:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007eb0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007eb4:	b94c      	cbnz	r4, 8007eca <__pow5mult+0x66>
 8007eb6:	f240 2171 	movw	r1, #625	@ 0x271
 8007eba:	4638      	mov	r0, r7
 8007ebc:	f7ff ff14 	bl	8007ce8 <__i2b>
 8007ec0:	2300      	movs	r3, #0
 8007ec2:	4604      	mov	r4, r0
 8007ec4:	f8c8 0008 	str.w	r0, [r8, #8]
 8007ec8:	6003      	str	r3, [r0, #0]
 8007eca:	f04f 0900 	mov.w	r9, #0
 8007ece:	07eb      	lsls	r3, r5, #31
 8007ed0:	d50a      	bpl.n	8007ee8 <__pow5mult+0x84>
 8007ed2:	4631      	mov	r1, r6
 8007ed4:	4622      	mov	r2, r4
 8007ed6:	4638      	mov	r0, r7
 8007ed8:	f7ff ff1c 	bl	8007d14 <__multiply>
 8007edc:	4680      	mov	r8, r0
 8007ede:	4631      	mov	r1, r6
 8007ee0:	4638      	mov	r0, r7
 8007ee2:	f7ff fe03 	bl	8007aec <_Bfree>
 8007ee6:	4646      	mov	r6, r8
 8007ee8:	106d      	asrs	r5, r5, #1
 8007eea:	d00b      	beq.n	8007f04 <__pow5mult+0xa0>
 8007eec:	6820      	ldr	r0, [r4, #0]
 8007eee:	b938      	cbnz	r0, 8007f00 <__pow5mult+0x9c>
 8007ef0:	4622      	mov	r2, r4
 8007ef2:	4621      	mov	r1, r4
 8007ef4:	4638      	mov	r0, r7
 8007ef6:	f7ff ff0d 	bl	8007d14 <__multiply>
 8007efa:	6020      	str	r0, [r4, #0]
 8007efc:	f8c0 9000 	str.w	r9, [r0]
 8007f00:	4604      	mov	r4, r0
 8007f02:	e7e4      	b.n	8007ece <__pow5mult+0x6a>
 8007f04:	4630      	mov	r0, r6
 8007f06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007f0a:	bf00      	nop
 8007f0c:	0800ace8 	.word	0x0800ace8
 8007f10:	0800ac0e 	.word	0x0800ac0e
 8007f14:	0800ac8e 	.word	0x0800ac8e

08007f18 <__lshift>:
 8007f18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f1c:	460c      	mov	r4, r1
 8007f1e:	4607      	mov	r7, r0
 8007f20:	4691      	mov	r9, r2
 8007f22:	6923      	ldr	r3, [r4, #16]
 8007f24:	6849      	ldr	r1, [r1, #4]
 8007f26:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007f2a:	68a3      	ldr	r3, [r4, #8]
 8007f2c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007f30:	f108 0601 	add.w	r6, r8, #1
 8007f34:	42b3      	cmp	r3, r6
 8007f36:	db0b      	blt.n	8007f50 <__lshift+0x38>
 8007f38:	4638      	mov	r0, r7
 8007f3a:	f7ff fd97 	bl	8007a6c <_Balloc>
 8007f3e:	4605      	mov	r5, r0
 8007f40:	b948      	cbnz	r0, 8007f56 <__lshift+0x3e>
 8007f42:	4602      	mov	r2, r0
 8007f44:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8007f48:	4b27      	ldr	r3, [pc, #156]	@ (8007fe8 <__lshift+0xd0>)
 8007f4a:	4828      	ldr	r0, [pc, #160]	@ (8007fec <__lshift+0xd4>)
 8007f4c:	f001 fe8a 	bl	8009c64 <__assert_func>
 8007f50:	3101      	adds	r1, #1
 8007f52:	005b      	lsls	r3, r3, #1
 8007f54:	e7ee      	b.n	8007f34 <__lshift+0x1c>
 8007f56:	2300      	movs	r3, #0
 8007f58:	f100 0114 	add.w	r1, r0, #20
 8007f5c:	f100 0210 	add.w	r2, r0, #16
 8007f60:	4618      	mov	r0, r3
 8007f62:	4553      	cmp	r3, sl
 8007f64:	db33      	blt.n	8007fce <__lshift+0xb6>
 8007f66:	6920      	ldr	r0, [r4, #16]
 8007f68:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007f6c:	f104 0314 	add.w	r3, r4, #20
 8007f70:	f019 091f 	ands.w	r9, r9, #31
 8007f74:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007f78:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007f7c:	d02b      	beq.n	8007fd6 <__lshift+0xbe>
 8007f7e:	468a      	mov	sl, r1
 8007f80:	2200      	movs	r2, #0
 8007f82:	f1c9 0e20 	rsb	lr, r9, #32
 8007f86:	6818      	ldr	r0, [r3, #0]
 8007f88:	fa00 f009 	lsl.w	r0, r0, r9
 8007f8c:	4310      	orrs	r0, r2
 8007f8e:	f84a 0b04 	str.w	r0, [sl], #4
 8007f92:	f853 2b04 	ldr.w	r2, [r3], #4
 8007f96:	459c      	cmp	ip, r3
 8007f98:	fa22 f20e 	lsr.w	r2, r2, lr
 8007f9c:	d8f3      	bhi.n	8007f86 <__lshift+0x6e>
 8007f9e:	ebac 0304 	sub.w	r3, ip, r4
 8007fa2:	3b15      	subs	r3, #21
 8007fa4:	f023 0303 	bic.w	r3, r3, #3
 8007fa8:	3304      	adds	r3, #4
 8007faa:	f104 0015 	add.w	r0, r4, #21
 8007fae:	4584      	cmp	ip, r0
 8007fb0:	bf38      	it	cc
 8007fb2:	2304      	movcc	r3, #4
 8007fb4:	50ca      	str	r2, [r1, r3]
 8007fb6:	b10a      	cbz	r2, 8007fbc <__lshift+0xa4>
 8007fb8:	f108 0602 	add.w	r6, r8, #2
 8007fbc:	3e01      	subs	r6, #1
 8007fbe:	4638      	mov	r0, r7
 8007fc0:	4621      	mov	r1, r4
 8007fc2:	612e      	str	r6, [r5, #16]
 8007fc4:	f7ff fd92 	bl	8007aec <_Bfree>
 8007fc8:	4628      	mov	r0, r5
 8007fca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007fce:	f842 0f04 	str.w	r0, [r2, #4]!
 8007fd2:	3301      	adds	r3, #1
 8007fd4:	e7c5      	b.n	8007f62 <__lshift+0x4a>
 8007fd6:	3904      	subs	r1, #4
 8007fd8:	f853 2b04 	ldr.w	r2, [r3], #4
 8007fdc:	459c      	cmp	ip, r3
 8007fde:	f841 2f04 	str.w	r2, [r1, #4]!
 8007fe2:	d8f9      	bhi.n	8007fd8 <__lshift+0xc0>
 8007fe4:	e7ea      	b.n	8007fbc <__lshift+0xa4>
 8007fe6:	bf00      	nop
 8007fe8:	0800ac7d 	.word	0x0800ac7d
 8007fec:	0800ac8e 	.word	0x0800ac8e

08007ff0 <__mcmp>:
 8007ff0:	4603      	mov	r3, r0
 8007ff2:	690a      	ldr	r2, [r1, #16]
 8007ff4:	6900      	ldr	r0, [r0, #16]
 8007ff6:	b530      	push	{r4, r5, lr}
 8007ff8:	1a80      	subs	r0, r0, r2
 8007ffa:	d10e      	bne.n	800801a <__mcmp+0x2a>
 8007ffc:	3314      	adds	r3, #20
 8007ffe:	3114      	adds	r1, #20
 8008000:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008004:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008008:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800800c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008010:	4295      	cmp	r5, r2
 8008012:	d003      	beq.n	800801c <__mcmp+0x2c>
 8008014:	d205      	bcs.n	8008022 <__mcmp+0x32>
 8008016:	f04f 30ff 	mov.w	r0, #4294967295
 800801a:	bd30      	pop	{r4, r5, pc}
 800801c:	42a3      	cmp	r3, r4
 800801e:	d3f3      	bcc.n	8008008 <__mcmp+0x18>
 8008020:	e7fb      	b.n	800801a <__mcmp+0x2a>
 8008022:	2001      	movs	r0, #1
 8008024:	e7f9      	b.n	800801a <__mcmp+0x2a>
	...

08008028 <__mdiff>:
 8008028:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800802c:	4689      	mov	r9, r1
 800802e:	4606      	mov	r6, r0
 8008030:	4611      	mov	r1, r2
 8008032:	4648      	mov	r0, r9
 8008034:	4614      	mov	r4, r2
 8008036:	f7ff ffdb 	bl	8007ff0 <__mcmp>
 800803a:	1e05      	subs	r5, r0, #0
 800803c:	d112      	bne.n	8008064 <__mdiff+0x3c>
 800803e:	4629      	mov	r1, r5
 8008040:	4630      	mov	r0, r6
 8008042:	f7ff fd13 	bl	8007a6c <_Balloc>
 8008046:	4602      	mov	r2, r0
 8008048:	b928      	cbnz	r0, 8008056 <__mdiff+0x2e>
 800804a:	f240 2137 	movw	r1, #567	@ 0x237
 800804e:	4b3e      	ldr	r3, [pc, #248]	@ (8008148 <__mdiff+0x120>)
 8008050:	483e      	ldr	r0, [pc, #248]	@ (800814c <__mdiff+0x124>)
 8008052:	f001 fe07 	bl	8009c64 <__assert_func>
 8008056:	2301      	movs	r3, #1
 8008058:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800805c:	4610      	mov	r0, r2
 800805e:	b003      	add	sp, #12
 8008060:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008064:	bfbc      	itt	lt
 8008066:	464b      	movlt	r3, r9
 8008068:	46a1      	movlt	r9, r4
 800806a:	4630      	mov	r0, r6
 800806c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008070:	bfba      	itte	lt
 8008072:	461c      	movlt	r4, r3
 8008074:	2501      	movlt	r5, #1
 8008076:	2500      	movge	r5, #0
 8008078:	f7ff fcf8 	bl	8007a6c <_Balloc>
 800807c:	4602      	mov	r2, r0
 800807e:	b918      	cbnz	r0, 8008088 <__mdiff+0x60>
 8008080:	f240 2145 	movw	r1, #581	@ 0x245
 8008084:	4b30      	ldr	r3, [pc, #192]	@ (8008148 <__mdiff+0x120>)
 8008086:	e7e3      	b.n	8008050 <__mdiff+0x28>
 8008088:	f100 0b14 	add.w	fp, r0, #20
 800808c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008090:	f109 0310 	add.w	r3, r9, #16
 8008094:	60c5      	str	r5, [r0, #12]
 8008096:	f04f 0c00 	mov.w	ip, #0
 800809a:	f109 0514 	add.w	r5, r9, #20
 800809e:	46d9      	mov	r9, fp
 80080a0:	6926      	ldr	r6, [r4, #16]
 80080a2:	f104 0e14 	add.w	lr, r4, #20
 80080a6:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80080aa:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80080ae:	9301      	str	r3, [sp, #4]
 80080b0:	9b01      	ldr	r3, [sp, #4]
 80080b2:	f85e 0b04 	ldr.w	r0, [lr], #4
 80080b6:	f853 af04 	ldr.w	sl, [r3, #4]!
 80080ba:	b281      	uxth	r1, r0
 80080bc:	9301      	str	r3, [sp, #4]
 80080be:	fa1f f38a 	uxth.w	r3, sl
 80080c2:	1a5b      	subs	r3, r3, r1
 80080c4:	0c00      	lsrs	r0, r0, #16
 80080c6:	4463      	add	r3, ip
 80080c8:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80080cc:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80080d0:	b29b      	uxth	r3, r3
 80080d2:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80080d6:	4576      	cmp	r6, lr
 80080d8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80080dc:	f849 3b04 	str.w	r3, [r9], #4
 80080e0:	d8e6      	bhi.n	80080b0 <__mdiff+0x88>
 80080e2:	1b33      	subs	r3, r6, r4
 80080e4:	3b15      	subs	r3, #21
 80080e6:	f023 0303 	bic.w	r3, r3, #3
 80080ea:	3415      	adds	r4, #21
 80080ec:	3304      	adds	r3, #4
 80080ee:	42a6      	cmp	r6, r4
 80080f0:	bf38      	it	cc
 80080f2:	2304      	movcc	r3, #4
 80080f4:	441d      	add	r5, r3
 80080f6:	445b      	add	r3, fp
 80080f8:	461e      	mov	r6, r3
 80080fa:	462c      	mov	r4, r5
 80080fc:	4544      	cmp	r4, r8
 80080fe:	d30e      	bcc.n	800811e <__mdiff+0xf6>
 8008100:	f108 0103 	add.w	r1, r8, #3
 8008104:	1b49      	subs	r1, r1, r5
 8008106:	f021 0103 	bic.w	r1, r1, #3
 800810a:	3d03      	subs	r5, #3
 800810c:	45a8      	cmp	r8, r5
 800810e:	bf38      	it	cc
 8008110:	2100      	movcc	r1, #0
 8008112:	440b      	add	r3, r1
 8008114:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008118:	b199      	cbz	r1, 8008142 <__mdiff+0x11a>
 800811a:	6117      	str	r7, [r2, #16]
 800811c:	e79e      	b.n	800805c <__mdiff+0x34>
 800811e:	46e6      	mov	lr, ip
 8008120:	f854 1b04 	ldr.w	r1, [r4], #4
 8008124:	fa1f fc81 	uxth.w	ip, r1
 8008128:	44f4      	add	ip, lr
 800812a:	0c08      	lsrs	r0, r1, #16
 800812c:	4471      	add	r1, lr
 800812e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8008132:	b289      	uxth	r1, r1
 8008134:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008138:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800813c:	f846 1b04 	str.w	r1, [r6], #4
 8008140:	e7dc      	b.n	80080fc <__mdiff+0xd4>
 8008142:	3f01      	subs	r7, #1
 8008144:	e7e6      	b.n	8008114 <__mdiff+0xec>
 8008146:	bf00      	nop
 8008148:	0800ac7d 	.word	0x0800ac7d
 800814c:	0800ac8e 	.word	0x0800ac8e

08008150 <__ulp>:
 8008150:	4b0e      	ldr	r3, [pc, #56]	@ (800818c <__ulp+0x3c>)
 8008152:	400b      	ands	r3, r1
 8008154:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8008158:	2b00      	cmp	r3, #0
 800815a:	dc08      	bgt.n	800816e <__ulp+0x1e>
 800815c:	425b      	negs	r3, r3
 800815e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8008162:	ea4f 5223 	mov.w	r2, r3, asr #20
 8008166:	da04      	bge.n	8008172 <__ulp+0x22>
 8008168:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800816c:	4113      	asrs	r3, r2
 800816e:	2200      	movs	r2, #0
 8008170:	e008      	b.n	8008184 <__ulp+0x34>
 8008172:	f1a2 0314 	sub.w	r3, r2, #20
 8008176:	2b1e      	cmp	r3, #30
 8008178:	bfd6      	itet	le
 800817a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800817e:	2201      	movgt	r2, #1
 8008180:	40da      	lsrle	r2, r3
 8008182:	2300      	movs	r3, #0
 8008184:	4619      	mov	r1, r3
 8008186:	4610      	mov	r0, r2
 8008188:	4770      	bx	lr
 800818a:	bf00      	nop
 800818c:	7ff00000 	.word	0x7ff00000

08008190 <__b2d>:
 8008190:	6902      	ldr	r2, [r0, #16]
 8008192:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008194:	f100 0614 	add.w	r6, r0, #20
 8008198:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 800819c:	f852 4c04 	ldr.w	r4, [r2, #-4]
 80081a0:	4f1e      	ldr	r7, [pc, #120]	@ (800821c <__b2d+0x8c>)
 80081a2:	4620      	mov	r0, r4
 80081a4:	f7ff fd54 	bl	8007c50 <__hi0bits>
 80081a8:	4603      	mov	r3, r0
 80081aa:	f1c0 0020 	rsb	r0, r0, #32
 80081ae:	2b0a      	cmp	r3, #10
 80081b0:	f1a2 0504 	sub.w	r5, r2, #4
 80081b4:	6008      	str	r0, [r1, #0]
 80081b6:	dc12      	bgt.n	80081de <__b2d+0x4e>
 80081b8:	42ae      	cmp	r6, r5
 80081ba:	bf2c      	ite	cs
 80081bc:	2200      	movcs	r2, #0
 80081be:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 80081c2:	f1c3 0c0b 	rsb	ip, r3, #11
 80081c6:	3315      	adds	r3, #21
 80081c8:	fa24 fe0c 	lsr.w	lr, r4, ip
 80081cc:	fa04 f303 	lsl.w	r3, r4, r3
 80081d0:	fa22 f20c 	lsr.w	r2, r2, ip
 80081d4:	ea4e 0107 	orr.w	r1, lr, r7
 80081d8:	431a      	orrs	r2, r3
 80081da:	4610      	mov	r0, r2
 80081dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80081de:	42ae      	cmp	r6, r5
 80081e0:	bf36      	itet	cc
 80081e2:	f1a2 0508 	subcc.w	r5, r2, #8
 80081e6:	2200      	movcs	r2, #0
 80081e8:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 80081ec:	3b0b      	subs	r3, #11
 80081ee:	d012      	beq.n	8008216 <__b2d+0x86>
 80081f0:	f1c3 0720 	rsb	r7, r3, #32
 80081f4:	fa22 f107 	lsr.w	r1, r2, r7
 80081f8:	409c      	lsls	r4, r3
 80081fa:	430c      	orrs	r4, r1
 80081fc:	42b5      	cmp	r5, r6
 80081fe:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 8008202:	bf94      	ite	ls
 8008204:	2400      	movls	r4, #0
 8008206:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 800820a:	409a      	lsls	r2, r3
 800820c:	40fc      	lsrs	r4, r7
 800820e:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8008212:	4322      	orrs	r2, r4
 8008214:	e7e1      	b.n	80081da <__b2d+0x4a>
 8008216:	ea44 0107 	orr.w	r1, r4, r7
 800821a:	e7de      	b.n	80081da <__b2d+0x4a>
 800821c:	3ff00000 	.word	0x3ff00000

08008220 <__d2b>:
 8008220:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8008224:	2101      	movs	r1, #1
 8008226:	4690      	mov	r8, r2
 8008228:	4699      	mov	r9, r3
 800822a:	9e08      	ldr	r6, [sp, #32]
 800822c:	f7ff fc1e 	bl	8007a6c <_Balloc>
 8008230:	4604      	mov	r4, r0
 8008232:	b930      	cbnz	r0, 8008242 <__d2b+0x22>
 8008234:	4602      	mov	r2, r0
 8008236:	f240 310f 	movw	r1, #783	@ 0x30f
 800823a:	4b23      	ldr	r3, [pc, #140]	@ (80082c8 <__d2b+0xa8>)
 800823c:	4823      	ldr	r0, [pc, #140]	@ (80082cc <__d2b+0xac>)
 800823e:	f001 fd11 	bl	8009c64 <__assert_func>
 8008242:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008246:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800824a:	b10d      	cbz	r5, 8008250 <__d2b+0x30>
 800824c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008250:	9301      	str	r3, [sp, #4]
 8008252:	f1b8 0300 	subs.w	r3, r8, #0
 8008256:	d024      	beq.n	80082a2 <__d2b+0x82>
 8008258:	4668      	mov	r0, sp
 800825a:	9300      	str	r3, [sp, #0]
 800825c:	f7ff fd17 	bl	8007c8e <__lo0bits>
 8008260:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008264:	b1d8      	cbz	r0, 800829e <__d2b+0x7e>
 8008266:	f1c0 0320 	rsb	r3, r0, #32
 800826a:	fa02 f303 	lsl.w	r3, r2, r3
 800826e:	430b      	orrs	r3, r1
 8008270:	40c2      	lsrs	r2, r0
 8008272:	6163      	str	r3, [r4, #20]
 8008274:	9201      	str	r2, [sp, #4]
 8008276:	9b01      	ldr	r3, [sp, #4]
 8008278:	2b00      	cmp	r3, #0
 800827a:	bf0c      	ite	eq
 800827c:	2201      	moveq	r2, #1
 800827e:	2202      	movne	r2, #2
 8008280:	61a3      	str	r3, [r4, #24]
 8008282:	6122      	str	r2, [r4, #16]
 8008284:	b1ad      	cbz	r5, 80082b2 <__d2b+0x92>
 8008286:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800828a:	4405      	add	r5, r0
 800828c:	6035      	str	r5, [r6, #0]
 800828e:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008292:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008294:	6018      	str	r0, [r3, #0]
 8008296:	4620      	mov	r0, r4
 8008298:	b002      	add	sp, #8
 800829a:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800829e:	6161      	str	r1, [r4, #20]
 80082a0:	e7e9      	b.n	8008276 <__d2b+0x56>
 80082a2:	a801      	add	r0, sp, #4
 80082a4:	f7ff fcf3 	bl	8007c8e <__lo0bits>
 80082a8:	9b01      	ldr	r3, [sp, #4]
 80082aa:	2201      	movs	r2, #1
 80082ac:	6163      	str	r3, [r4, #20]
 80082ae:	3020      	adds	r0, #32
 80082b0:	e7e7      	b.n	8008282 <__d2b+0x62>
 80082b2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80082b6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80082ba:	6030      	str	r0, [r6, #0]
 80082bc:	6918      	ldr	r0, [r3, #16]
 80082be:	f7ff fcc7 	bl	8007c50 <__hi0bits>
 80082c2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80082c6:	e7e4      	b.n	8008292 <__d2b+0x72>
 80082c8:	0800ac7d 	.word	0x0800ac7d
 80082cc:	0800ac8e 	.word	0x0800ac8e

080082d0 <__ratio>:
 80082d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082d4:	b085      	sub	sp, #20
 80082d6:	e9cd 1000 	strd	r1, r0, [sp]
 80082da:	a902      	add	r1, sp, #8
 80082dc:	f7ff ff58 	bl	8008190 <__b2d>
 80082e0:	468b      	mov	fp, r1
 80082e2:	4606      	mov	r6, r0
 80082e4:	460f      	mov	r7, r1
 80082e6:	9800      	ldr	r0, [sp, #0]
 80082e8:	a903      	add	r1, sp, #12
 80082ea:	f7ff ff51 	bl	8008190 <__b2d>
 80082ee:	460d      	mov	r5, r1
 80082f0:	9b01      	ldr	r3, [sp, #4]
 80082f2:	4689      	mov	r9, r1
 80082f4:	6919      	ldr	r1, [r3, #16]
 80082f6:	9b00      	ldr	r3, [sp, #0]
 80082f8:	4604      	mov	r4, r0
 80082fa:	691b      	ldr	r3, [r3, #16]
 80082fc:	4630      	mov	r0, r6
 80082fe:	1ac9      	subs	r1, r1, r3
 8008300:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8008304:	1a9b      	subs	r3, r3, r2
 8008306:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800830a:	2b00      	cmp	r3, #0
 800830c:	bfcd      	iteet	gt
 800830e:	463a      	movgt	r2, r7
 8008310:	462a      	movle	r2, r5
 8008312:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008316:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800831a:	bfd8      	it	le
 800831c:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8008320:	464b      	mov	r3, r9
 8008322:	4622      	mov	r2, r4
 8008324:	4659      	mov	r1, fp
 8008326:	f7f8 fa01 	bl	800072c <__aeabi_ddiv>
 800832a:	b005      	add	sp, #20
 800832c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008330 <__copybits>:
 8008330:	3901      	subs	r1, #1
 8008332:	b570      	push	{r4, r5, r6, lr}
 8008334:	1149      	asrs	r1, r1, #5
 8008336:	6914      	ldr	r4, [r2, #16]
 8008338:	3101      	adds	r1, #1
 800833a:	f102 0314 	add.w	r3, r2, #20
 800833e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008342:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008346:	1f05      	subs	r5, r0, #4
 8008348:	42a3      	cmp	r3, r4
 800834a:	d30c      	bcc.n	8008366 <__copybits+0x36>
 800834c:	1aa3      	subs	r3, r4, r2
 800834e:	3b11      	subs	r3, #17
 8008350:	f023 0303 	bic.w	r3, r3, #3
 8008354:	3211      	adds	r2, #17
 8008356:	42a2      	cmp	r2, r4
 8008358:	bf88      	it	hi
 800835a:	2300      	movhi	r3, #0
 800835c:	4418      	add	r0, r3
 800835e:	2300      	movs	r3, #0
 8008360:	4288      	cmp	r0, r1
 8008362:	d305      	bcc.n	8008370 <__copybits+0x40>
 8008364:	bd70      	pop	{r4, r5, r6, pc}
 8008366:	f853 6b04 	ldr.w	r6, [r3], #4
 800836a:	f845 6f04 	str.w	r6, [r5, #4]!
 800836e:	e7eb      	b.n	8008348 <__copybits+0x18>
 8008370:	f840 3b04 	str.w	r3, [r0], #4
 8008374:	e7f4      	b.n	8008360 <__copybits+0x30>

08008376 <__any_on>:
 8008376:	f100 0214 	add.w	r2, r0, #20
 800837a:	6900      	ldr	r0, [r0, #16]
 800837c:	114b      	asrs	r3, r1, #5
 800837e:	4298      	cmp	r0, r3
 8008380:	b510      	push	{r4, lr}
 8008382:	db11      	blt.n	80083a8 <__any_on+0x32>
 8008384:	dd0a      	ble.n	800839c <__any_on+0x26>
 8008386:	f011 011f 	ands.w	r1, r1, #31
 800838a:	d007      	beq.n	800839c <__any_on+0x26>
 800838c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008390:	fa24 f001 	lsr.w	r0, r4, r1
 8008394:	fa00 f101 	lsl.w	r1, r0, r1
 8008398:	428c      	cmp	r4, r1
 800839a:	d10b      	bne.n	80083b4 <__any_on+0x3e>
 800839c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80083a0:	4293      	cmp	r3, r2
 80083a2:	d803      	bhi.n	80083ac <__any_on+0x36>
 80083a4:	2000      	movs	r0, #0
 80083a6:	bd10      	pop	{r4, pc}
 80083a8:	4603      	mov	r3, r0
 80083aa:	e7f7      	b.n	800839c <__any_on+0x26>
 80083ac:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80083b0:	2900      	cmp	r1, #0
 80083b2:	d0f5      	beq.n	80083a0 <__any_on+0x2a>
 80083b4:	2001      	movs	r0, #1
 80083b6:	e7f6      	b.n	80083a6 <__any_on+0x30>

080083b8 <sulp>:
 80083b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80083bc:	460f      	mov	r7, r1
 80083be:	4690      	mov	r8, r2
 80083c0:	f7ff fec6 	bl	8008150 <__ulp>
 80083c4:	4604      	mov	r4, r0
 80083c6:	460d      	mov	r5, r1
 80083c8:	f1b8 0f00 	cmp.w	r8, #0
 80083cc:	d011      	beq.n	80083f2 <sulp+0x3a>
 80083ce:	f3c7 530a 	ubfx	r3, r7, #20, #11
 80083d2:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	dd0b      	ble.n	80083f2 <sulp+0x3a>
 80083da:	2400      	movs	r4, #0
 80083dc:	051b      	lsls	r3, r3, #20
 80083de:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 80083e2:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 80083e6:	4622      	mov	r2, r4
 80083e8:	462b      	mov	r3, r5
 80083ea:	f7f8 f875 	bl	80004d8 <__aeabi_dmul>
 80083ee:	4604      	mov	r4, r0
 80083f0:	460d      	mov	r5, r1
 80083f2:	4620      	mov	r0, r4
 80083f4:	4629      	mov	r1, r5
 80083f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80083fa:	0000      	movs	r0, r0
 80083fc:	0000      	movs	r0, r0
	...

08008400 <_strtod_l>:
 8008400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008404:	b09f      	sub	sp, #124	@ 0x7c
 8008406:	9217      	str	r2, [sp, #92]	@ 0x5c
 8008408:	2200      	movs	r2, #0
 800840a:	460c      	mov	r4, r1
 800840c:	921a      	str	r2, [sp, #104]	@ 0x68
 800840e:	f04f 0a00 	mov.w	sl, #0
 8008412:	f04f 0b00 	mov.w	fp, #0
 8008416:	460a      	mov	r2, r1
 8008418:	9005      	str	r0, [sp, #20]
 800841a:	9219      	str	r2, [sp, #100]	@ 0x64
 800841c:	7811      	ldrb	r1, [r2, #0]
 800841e:	292b      	cmp	r1, #43	@ 0x2b
 8008420:	d048      	beq.n	80084b4 <_strtod_l+0xb4>
 8008422:	d836      	bhi.n	8008492 <_strtod_l+0x92>
 8008424:	290d      	cmp	r1, #13
 8008426:	d830      	bhi.n	800848a <_strtod_l+0x8a>
 8008428:	2908      	cmp	r1, #8
 800842a:	d830      	bhi.n	800848e <_strtod_l+0x8e>
 800842c:	2900      	cmp	r1, #0
 800842e:	d039      	beq.n	80084a4 <_strtod_l+0xa4>
 8008430:	2200      	movs	r2, #0
 8008432:	920b      	str	r2, [sp, #44]	@ 0x2c
 8008434:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8008436:	782a      	ldrb	r2, [r5, #0]
 8008438:	2a30      	cmp	r2, #48	@ 0x30
 800843a:	f040 80b1 	bne.w	80085a0 <_strtod_l+0x1a0>
 800843e:	786a      	ldrb	r2, [r5, #1]
 8008440:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8008444:	2a58      	cmp	r2, #88	@ 0x58
 8008446:	d16c      	bne.n	8008522 <_strtod_l+0x122>
 8008448:	9302      	str	r3, [sp, #8]
 800844a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800844c:	4a8e      	ldr	r2, [pc, #568]	@ (8008688 <_strtod_l+0x288>)
 800844e:	9301      	str	r3, [sp, #4]
 8008450:	ab1a      	add	r3, sp, #104	@ 0x68
 8008452:	9300      	str	r3, [sp, #0]
 8008454:	9805      	ldr	r0, [sp, #20]
 8008456:	ab1b      	add	r3, sp, #108	@ 0x6c
 8008458:	a919      	add	r1, sp, #100	@ 0x64
 800845a:	f001 fc9d 	bl	8009d98 <__gethex>
 800845e:	f010 060f 	ands.w	r6, r0, #15
 8008462:	4604      	mov	r4, r0
 8008464:	d005      	beq.n	8008472 <_strtod_l+0x72>
 8008466:	2e06      	cmp	r6, #6
 8008468:	d126      	bne.n	80084b8 <_strtod_l+0xb8>
 800846a:	2300      	movs	r3, #0
 800846c:	3501      	adds	r5, #1
 800846e:	9519      	str	r5, [sp, #100]	@ 0x64
 8008470:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008472:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008474:	2b00      	cmp	r3, #0
 8008476:	f040 8584 	bne.w	8008f82 <_strtod_l+0xb82>
 800847a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800847c:	b1bb      	cbz	r3, 80084ae <_strtod_l+0xae>
 800847e:	4650      	mov	r0, sl
 8008480:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 8008484:	b01f      	add	sp, #124	@ 0x7c
 8008486:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800848a:	2920      	cmp	r1, #32
 800848c:	d1d0      	bne.n	8008430 <_strtod_l+0x30>
 800848e:	3201      	adds	r2, #1
 8008490:	e7c3      	b.n	800841a <_strtod_l+0x1a>
 8008492:	292d      	cmp	r1, #45	@ 0x2d
 8008494:	d1cc      	bne.n	8008430 <_strtod_l+0x30>
 8008496:	2101      	movs	r1, #1
 8008498:	910b      	str	r1, [sp, #44]	@ 0x2c
 800849a:	1c51      	adds	r1, r2, #1
 800849c:	9119      	str	r1, [sp, #100]	@ 0x64
 800849e:	7852      	ldrb	r2, [r2, #1]
 80084a0:	2a00      	cmp	r2, #0
 80084a2:	d1c7      	bne.n	8008434 <_strtod_l+0x34>
 80084a4:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80084a6:	9419      	str	r4, [sp, #100]	@ 0x64
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	f040 8568 	bne.w	8008f7e <_strtod_l+0xb7e>
 80084ae:	4650      	mov	r0, sl
 80084b0:	4659      	mov	r1, fp
 80084b2:	e7e7      	b.n	8008484 <_strtod_l+0x84>
 80084b4:	2100      	movs	r1, #0
 80084b6:	e7ef      	b.n	8008498 <_strtod_l+0x98>
 80084b8:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80084ba:	b13a      	cbz	r2, 80084cc <_strtod_l+0xcc>
 80084bc:	2135      	movs	r1, #53	@ 0x35
 80084be:	a81c      	add	r0, sp, #112	@ 0x70
 80084c0:	f7ff ff36 	bl	8008330 <__copybits>
 80084c4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80084c6:	9805      	ldr	r0, [sp, #20]
 80084c8:	f7ff fb10 	bl	8007aec <_Bfree>
 80084cc:	3e01      	subs	r6, #1
 80084ce:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80084d0:	2e04      	cmp	r6, #4
 80084d2:	d806      	bhi.n	80084e2 <_strtod_l+0xe2>
 80084d4:	e8df f006 	tbb	[pc, r6]
 80084d8:	201d0314 	.word	0x201d0314
 80084dc:	14          	.byte	0x14
 80084dd:	00          	.byte	0x00
 80084de:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 80084e2:	05e1      	lsls	r1, r4, #23
 80084e4:	bf48      	it	mi
 80084e6:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 80084ea:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80084ee:	0d1b      	lsrs	r3, r3, #20
 80084f0:	051b      	lsls	r3, r3, #20
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d1bd      	bne.n	8008472 <_strtod_l+0x72>
 80084f6:	f7fe fb29 	bl	8006b4c <__errno>
 80084fa:	2322      	movs	r3, #34	@ 0x22
 80084fc:	6003      	str	r3, [r0, #0]
 80084fe:	e7b8      	b.n	8008472 <_strtod_l+0x72>
 8008500:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8008504:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8008508:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800850c:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8008510:	e7e7      	b.n	80084e2 <_strtod_l+0xe2>
 8008512:	f8df b178 	ldr.w	fp, [pc, #376]	@ 800868c <_strtod_l+0x28c>
 8008516:	e7e4      	b.n	80084e2 <_strtod_l+0xe2>
 8008518:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800851c:	f04f 3aff 	mov.w	sl, #4294967295
 8008520:	e7df      	b.n	80084e2 <_strtod_l+0xe2>
 8008522:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008524:	1c5a      	adds	r2, r3, #1
 8008526:	9219      	str	r2, [sp, #100]	@ 0x64
 8008528:	785b      	ldrb	r3, [r3, #1]
 800852a:	2b30      	cmp	r3, #48	@ 0x30
 800852c:	d0f9      	beq.n	8008522 <_strtod_l+0x122>
 800852e:	2b00      	cmp	r3, #0
 8008530:	d09f      	beq.n	8008472 <_strtod_l+0x72>
 8008532:	2301      	movs	r3, #1
 8008534:	9309      	str	r3, [sp, #36]	@ 0x24
 8008536:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008538:	220a      	movs	r2, #10
 800853a:	930c      	str	r3, [sp, #48]	@ 0x30
 800853c:	2300      	movs	r3, #0
 800853e:	461f      	mov	r7, r3
 8008540:	9308      	str	r3, [sp, #32]
 8008542:	930a      	str	r3, [sp, #40]	@ 0x28
 8008544:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8008546:	7805      	ldrb	r5, [r0, #0]
 8008548:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800854c:	b2d9      	uxtb	r1, r3
 800854e:	2909      	cmp	r1, #9
 8008550:	d928      	bls.n	80085a4 <_strtod_l+0x1a4>
 8008552:	2201      	movs	r2, #1
 8008554:	494e      	ldr	r1, [pc, #312]	@ (8008690 <_strtod_l+0x290>)
 8008556:	f001 fb4e 	bl	8009bf6 <strncmp>
 800855a:	2800      	cmp	r0, #0
 800855c:	d032      	beq.n	80085c4 <_strtod_l+0x1c4>
 800855e:	2000      	movs	r0, #0
 8008560:	462a      	mov	r2, r5
 8008562:	4681      	mov	r9, r0
 8008564:	463d      	mov	r5, r7
 8008566:	4603      	mov	r3, r0
 8008568:	2a65      	cmp	r2, #101	@ 0x65
 800856a:	d001      	beq.n	8008570 <_strtod_l+0x170>
 800856c:	2a45      	cmp	r2, #69	@ 0x45
 800856e:	d114      	bne.n	800859a <_strtod_l+0x19a>
 8008570:	b91d      	cbnz	r5, 800857a <_strtod_l+0x17a>
 8008572:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008574:	4302      	orrs	r2, r0
 8008576:	d095      	beq.n	80084a4 <_strtod_l+0xa4>
 8008578:	2500      	movs	r5, #0
 800857a:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800857c:	1c62      	adds	r2, r4, #1
 800857e:	9219      	str	r2, [sp, #100]	@ 0x64
 8008580:	7862      	ldrb	r2, [r4, #1]
 8008582:	2a2b      	cmp	r2, #43	@ 0x2b
 8008584:	d077      	beq.n	8008676 <_strtod_l+0x276>
 8008586:	2a2d      	cmp	r2, #45	@ 0x2d
 8008588:	d07b      	beq.n	8008682 <_strtod_l+0x282>
 800858a:	f04f 0c00 	mov.w	ip, #0
 800858e:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8008592:	2909      	cmp	r1, #9
 8008594:	f240 8082 	bls.w	800869c <_strtod_l+0x29c>
 8008598:	9419      	str	r4, [sp, #100]	@ 0x64
 800859a:	f04f 0800 	mov.w	r8, #0
 800859e:	e0a2      	b.n	80086e6 <_strtod_l+0x2e6>
 80085a0:	2300      	movs	r3, #0
 80085a2:	e7c7      	b.n	8008534 <_strtod_l+0x134>
 80085a4:	2f08      	cmp	r7, #8
 80085a6:	bfd5      	itete	le
 80085a8:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 80085aa:	9908      	ldrgt	r1, [sp, #32]
 80085ac:	fb02 3301 	mlale	r3, r2, r1, r3
 80085b0:	fb02 3301 	mlagt	r3, r2, r1, r3
 80085b4:	f100 0001 	add.w	r0, r0, #1
 80085b8:	bfd4      	ite	le
 80085ba:	930a      	strle	r3, [sp, #40]	@ 0x28
 80085bc:	9308      	strgt	r3, [sp, #32]
 80085be:	3701      	adds	r7, #1
 80085c0:	9019      	str	r0, [sp, #100]	@ 0x64
 80085c2:	e7bf      	b.n	8008544 <_strtod_l+0x144>
 80085c4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80085c6:	1c5a      	adds	r2, r3, #1
 80085c8:	9219      	str	r2, [sp, #100]	@ 0x64
 80085ca:	785a      	ldrb	r2, [r3, #1]
 80085cc:	b37f      	cbz	r7, 800862e <_strtod_l+0x22e>
 80085ce:	4681      	mov	r9, r0
 80085d0:	463d      	mov	r5, r7
 80085d2:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 80085d6:	2b09      	cmp	r3, #9
 80085d8:	d912      	bls.n	8008600 <_strtod_l+0x200>
 80085da:	2301      	movs	r3, #1
 80085dc:	e7c4      	b.n	8008568 <_strtod_l+0x168>
 80085de:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80085e0:	3001      	adds	r0, #1
 80085e2:	1c5a      	adds	r2, r3, #1
 80085e4:	9219      	str	r2, [sp, #100]	@ 0x64
 80085e6:	785a      	ldrb	r2, [r3, #1]
 80085e8:	2a30      	cmp	r2, #48	@ 0x30
 80085ea:	d0f8      	beq.n	80085de <_strtod_l+0x1de>
 80085ec:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 80085f0:	2b08      	cmp	r3, #8
 80085f2:	f200 84cb 	bhi.w	8008f8c <_strtod_l+0xb8c>
 80085f6:	4681      	mov	r9, r0
 80085f8:	2000      	movs	r0, #0
 80085fa:	4605      	mov	r5, r0
 80085fc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80085fe:	930c      	str	r3, [sp, #48]	@ 0x30
 8008600:	3a30      	subs	r2, #48	@ 0x30
 8008602:	f100 0301 	add.w	r3, r0, #1
 8008606:	d02a      	beq.n	800865e <_strtod_l+0x25e>
 8008608:	4499      	add	r9, r3
 800860a:	210a      	movs	r1, #10
 800860c:	462b      	mov	r3, r5
 800860e:	eb00 0c05 	add.w	ip, r0, r5
 8008612:	4563      	cmp	r3, ip
 8008614:	d10d      	bne.n	8008632 <_strtod_l+0x232>
 8008616:	1c69      	adds	r1, r5, #1
 8008618:	4401      	add	r1, r0
 800861a:	4428      	add	r0, r5
 800861c:	2808      	cmp	r0, #8
 800861e:	dc16      	bgt.n	800864e <_strtod_l+0x24e>
 8008620:	230a      	movs	r3, #10
 8008622:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008624:	fb03 2300 	mla	r3, r3, r0, r2
 8008628:	930a      	str	r3, [sp, #40]	@ 0x28
 800862a:	2300      	movs	r3, #0
 800862c:	e018      	b.n	8008660 <_strtod_l+0x260>
 800862e:	4638      	mov	r0, r7
 8008630:	e7da      	b.n	80085e8 <_strtod_l+0x1e8>
 8008632:	2b08      	cmp	r3, #8
 8008634:	f103 0301 	add.w	r3, r3, #1
 8008638:	dc03      	bgt.n	8008642 <_strtod_l+0x242>
 800863a:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800863c:	434e      	muls	r6, r1
 800863e:	960a      	str	r6, [sp, #40]	@ 0x28
 8008640:	e7e7      	b.n	8008612 <_strtod_l+0x212>
 8008642:	2b10      	cmp	r3, #16
 8008644:	bfde      	ittt	le
 8008646:	9e08      	ldrle	r6, [sp, #32]
 8008648:	434e      	mulle	r6, r1
 800864a:	9608      	strle	r6, [sp, #32]
 800864c:	e7e1      	b.n	8008612 <_strtod_l+0x212>
 800864e:	280f      	cmp	r0, #15
 8008650:	dceb      	bgt.n	800862a <_strtod_l+0x22a>
 8008652:	230a      	movs	r3, #10
 8008654:	9808      	ldr	r0, [sp, #32]
 8008656:	fb03 2300 	mla	r3, r3, r0, r2
 800865a:	9308      	str	r3, [sp, #32]
 800865c:	e7e5      	b.n	800862a <_strtod_l+0x22a>
 800865e:	4629      	mov	r1, r5
 8008660:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008662:	460d      	mov	r5, r1
 8008664:	1c50      	adds	r0, r2, #1
 8008666:	9019      	str	r0, [sp, #100]	@ 0x64
 8008668:	7852      	ldrb	r2, [r2, #1]
 800866a:	4618      	mov	r0, r3
 800866c:	e7b1      	b.n	80085d2 <_strtod_l+0x1d2>
 800866e:	f04f 0900 	mov.w	r9, #0
 8008672:	2301      	movs	r3, #1
 8008674:	e77d      	b.n	8008572 <_strtod_l+0x172>
 8008676:	f04f 0c00 	mov.w	ip, #0
 800867a:	1ca2      	adds	r2, r4, #2
 800867c:	9219      	str	r2, [sp, #100]	@ 0x64
 800867e:	78a2      	ldrb	r2, [r4, #2]
 8008680:	e785      	b.n	800858e <_strtod_l+0x18e>
 8008682:	f04f 0c01 	mov.w	ip, #1
 8008686:	e7f8      	b.n	800867a <_strtod_l+0x27a>
 8008688:	0800ae00 	.word	0x0800ae00
 800868c:	7ff00000 	.word	0x7ff00000
 8008690:	0800ade8 	.word	0x0800ade8
 8008694:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008696:	1c51      	adds	r1, r2, #1
 8008698:	9119      	str	r1, [sp, #100]	@ 0x64
 800869a:	7852      	ldrb	r2, [r2, #1]
 800869c:	2a30      	cmp	r2, #48	@ 0x30
 800869e:	d0f9      	beq.n	8008694 <_strtod_l+0x294>
 80086a0:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 80086a4:	2908      	cmp	r1, #8
 80086a6:	f63f af78 	bhi.w	800859a <_strtod_l+0x19a>
 80086aa:	f04f 080a 	mov.w	r8, #10
 80086ae:	3a30      	subs	r2, #48	@ 0x30
 80086b0:	920e      	str	r2, [sp, #56]	@ 0x38
 80086b2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80086b4:	920f      	str	r2, [sp, #60]	@ 0x3c
 80086b6:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80086b8:	1c56      	adds	r6, r2, #1
 80086ba:	9619      	str	r6, [sp, #100]	@ 0x64
 80086bc:	7852      	ldrb	r2, [r2, #1]
 80086be:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 80086c2:	f1be 0f09 	cmp.w	lr, #9
 80086c6:	d939      	bls.n	800873c <_strtod_l+0x33c>
 80086c8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80086ca:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 80086ce:	1a76      	subs	r6, r6, r1
 80086d0:	2e08      	cmp	r6, #8
 80086d2:	dc03      	bgt.n	80086dc <_strtod_l+0x2dc>
 80086d4:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80086d6:	4588      	cmp	r8, r1
 80086d8:	bfa8      	it	ge
 80086da:	4688      	movge	r8, r1
 80086dc:	f1bc 0f00 	cmp.w	ip, #0
 80086e0:	d001      	beq.n	80086e6 <_strtod_l+0x2e6>
 80086e2:	f1c8 0800 	rsb	r8, r8, #0
 80086e6:	2d00      	cmp	r5, #0
 80086e8:	d14e      	bne.n	8008788 <_strtod_l+0x388>
 80086ea:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80086ec:	4308      	orrs	r0, r1
 80086ee:	f47f aec0 	bne.w	8008472 <_strtod_l+0x72>
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	f47f aed6 	bne.w	80084a4 <_strtod_l+0xa4>
 80086f8:	2a69      	cmp	r2, #105	@ 0x69
 80086fa:	d028      	beq.n	800874e <_strtod_l+0x34e>
 80086fc:	dc25      	bgt.n	800874a <_strtod_l+0x34a>
 80086fe:	2a49      	cmp	r2, #73	@ 0x49
 8008700:	d025      	beq.n	800874e <_strtod_l+0x34e>
 8008702:	2a4e      	cmp	r2, #78	@ 0x4e
 8008704:	f47f aece 	bne.w	80084a4 <_strtod_l+0xa4>
 8008708:	499a      	ldr	r1, [pc, #616]	@ (8008974 <_strtod_l+0x574>)
 800870a:	a819      	add	r0, sp, #100	@ 0x64
 800870c:	f001 fd66 	bl	800a1dc <__match>
 8008710:	2800      	cmp	r0, #0
 8008712:	f43f aec7 	beq.w	80084a4 <_strtod_l+0xa4>
 8008716:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008718:	781b      	ldrb	r3, [r3, #0]
 800871a:	2b28      	cmp	r3, #40	@ 0x28
 800871c:	d12e      	bne.n	800877c <_strtod_l+0x37c>
 800871e:	4996      	ldr	r1, [pc, #600]	@ (8008978 <_strtod_l+0x578>)
 8008720:	aa1c      	add	r2, sp, #112	@ 0x70
 8008722:	a819      	add	r0, sp, #100	@ 0x64
 8008724:	f001 fd6e 	bl	800a204 <__hexnan>
 8008728:	2805      	cmp	r0, #5
 800872a:	d127      	bne.n	800877c <_strtod_l+0x37c>
 800872c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800872e:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8008732:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8008736:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800873a:	e69a      	b.n	8008472 <_strtod_l+0x72>
 800873c:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800873e:	fb08 2101 	mla	r1, r8, r1, r2
 8008742:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8008746:	920e      	str	r2, [sp, #56]	@ 0x38
 8008748:	e7b5      	b.n	80086b6 <_strtod_l+0x2b6>
 800874a:	2a6e      	cmp	r2, #110	@ 0x6e
 800874c:	e7da      	b.n	8008704 <_strtod_l+0x304>
 800874e:	498b      	ldr	r1, [pc, #556]	@ (800897c <_strtod_l+0x57c>)
 8008750:	a819      	add	r0, sp, #100	@ 0x64
 8008752:	f001 fd43 	bl	800a1dc <__match>
 8008756:	2800      	cmp	r0, #0
 8008758:	f43f aea4 	beq.w	80084a4 <_strtod_l+0xa4>
 800875c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800875e:	4988      	ldr	r1, [pc, #544]	@ (8008980 <_strtod_l+0x580>)
 8008760:	3b01      	subs	r3, #1
 8008762:	a819      	add	r0, sp, #100	@ 0x64
 8008764:	9319      	str	r3, [sp, #100]	@ 0x64
 8008766:	f001 fd39 	bl	800a1dc <__match>
 800876a:	b910      	cbnz	r0, 8008772 <_strtod_l+0x372>
 800876c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800876e:	3301      	adds	r3, #1
 8008770:	9319      	str	r3, [sp, #100]	@ 0x64
 8008772:	f04f 0a00 	mov.w	sl, #0
 8008776:	f8df b20c 	ldr.w	fp, [pc, #524]	@ 8008984 <_strtod_l+0x584>
 800877a:	e67a      	b.n	8008472 <_strtod_l+0x72>
 800877c:	4882      	ldr	r0, [pc, #520]	@ (8008988 <_strtod_l+0x588>)
 800877e:	f001 fa6b 	bl	8009c58 <nan>
 8008782:	4682      	mov	sl, r0
 8008784:	468b      	mov	fp, r1
 8008786:	e674      	b.n	8008472 <_strtod_l+0x72>
 8008788:	eba8 0309 	sub.w	r3, r8, r9
 800878c:	2f00      	cmp	r7, #0
 800878e:	bf08      	it	eq
 8008790:	462f      	moveq	r7, r5
 8008792:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008794:	2d10      	cmp	r5, #16
 8008796:	462c      	mov	r4, r5
 8008798:	9309      	str	r3, [sp, #36]	@ 0x24
 800879a:	bfa8      	it	ge
 800879c:	2410      	movge	r4, #16
 800879e:	f7f7 fe21 	bl	80003e4 <__aeabi_ui2d>
 80087a2:	2d09      	cmp	r5, #9
 80087a4:	4682      	mov	sl, r0
 80087a6:	468b      	mov	fp, r1
 80087a8:	dc11      	bgt.n	80087ce <_strtod_l+0x3ce>
 80087aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	f43f ae60 	beq.w	8008472 <_strtod_l+0x72>
 80087b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80087b4:	dd76      	ble.n	80088a4 <_strtod_l+0x4a4>
 80087b6:	2b16      	cmp	r3, #22
 80087b8:	dc5d      	bgt.n	8008876 <_strtod_l+0x476>
 80087ba:	4974      	ldr	r1, [pc, #464]	@ (800898c <_strtod_l+0x58c>)
 80087bc:	4652      	mov	r2, sl
 80087be:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80087c2:	465b      	mov	r3, fp
 80087c4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80087c8:	f7f7 fe86 	bl	80004d8 <__aeabi_dmul>
 80087cc:	e7d9      	b.n	8008782 <_strtod_l+0x382>
 80087ce:	4b6f      	ldr	r3, [pc, #444]	@ (800898c <_strtod_l+0x58c>)
 80087d0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80087d4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 80087d8:	f7f7 fe7e 	bl	80004d8 <__aeabi_dmul>
 80087dc:	4682      	mov	sl, r0
 80087de:	9808      	ldr	r0, [sp, #32]
 80087e0:	468b      	mov	fp, r1
 80087e2:	f7f7 fdff 	bl	80003e4 <__aeabi_ui2d>
 80087e6:	4602      	mov	r2, r0
 80087e8:	460b      	mov	r3, r1
 80087ea:	4650      	mov	r0, sl
 80087ec:	4659      	mov	r1, fp
 80087ee:	f7f7 fcbd 	bl	800016c <__adddf3>
 80087f2:	2d0f      	cmp	r5, #15
 80087f4:	4682      	mov	sl, r0
 80087f6:	468b      	mov	fp, r1
 80087f8:	ddd7      	ble.n	80087aa <_strtod_l+0x3aa>
 80087fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80087fc:	1b2c      	subs	r4, r5, r4
 80087fe:	441c      	add	r4, r3
 8008800:	2c00      	cmp	r4, #0
 8008802:	f340 8096 	ble.w	8008932 <_strtod_l+0x532>
 8008806:	f014 030f 	ands.w	r3, r4, #15
 800880a:	d00a      	beq.n	8008822 <_strtod_l+0x422>
 800880c:	495f      	ldr	r1, [pc, #380]	@ (800898c <_strtod_l+0x58c>)
 800880e:	4652      	mov	r2, sl
 8008810:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008814:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008818:	465b      	mov	r3, fp
 800881a:	f7f7 fe5d 	bl	80004d8 <__aeabi_dmul>
 800881e:	4682      	mov	sl, r0
 8008820:	468b      	mov	fp, r1
 8008822:	f034 040f 	bics.w	r4, r4, #15
 8008826:	d073      	beq.n	8008910 <_strtod_l+0x510>
 8008828:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800882c:	dd48      	ble.n	80088c0 <_strtod_l+0x4c0>
 800882e:	2400      	movs	r4, #0
 8008830:	46a0      	mov	r8, r4
 8008832:	46a1      	mov	r9, r4
 8008834:	940a      	str	r4, [sp, #40]	@ 0x28
 8008836:	2322      	movs	r3, #34	@ 0x22
 8008838:	f04f 0a00 	mov.w	sl, #0
 800883c:	9a05      	ldr	r2, [sp, #20]
 800883e:	f8df b144 	ldr.w	fp, [pc, #324]	@ 8008984 <_strtod_l+0x584>
 8008842:	6013      	str	r3, [r2, #0]
 8008844:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008846:	2b00      	cmp	r3, #0
 8008848:	f43f ae13 	beq.w	8008472 <_strtod_l+0x72>
 800884c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800884e:	9805      	ldr	r0, [sp, #20]
 8008850:	f7ff f94c 	bl	8007aec <_Bfree>
 8008854:	4649      	mov	r1, r9
 8008856:	9805      	ldr	r0, [sp, #20]
 8008858:	f7ff f948 	bl	8007aec <_Bfree>
 800885c:	4641      	mov	r1, r8
 800885e:	9805      	ldr	r0, [sp, #20]
 8008860:	f7ff f944 	bl	8007aec <_Bfree>
 8008864:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008866:	9805      	ldr	r0, [sp, #20]
 8008868:	f7ff f940 	bl	8007aec <_Bfree>
 800886c:	4621      	mov	r1, r4
 800886e:	9805      	ldr	r0, [sp, #20]
 8008870:	f7ff f93c 	bl	8007aec <_Bfree>
 8008874:	e5fd      	b.n	8008472 <_strtod_l+0x72>
 8008876:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008878:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800887c:	4293      	cmp	r3, r2
 800887e:	dbbc      	blt.n	80087fa <_strtod_l+0x3fa>
 8008880:	4c42      	ldr	r4, [pc, #264]	@ (800898c <_strtod_l+0x58c>)
 8008882:	f1c5 050f 	rsb	r5, r5, #15
 8008886:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800888a:	4652      	mov	r2, sl
 800888c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008890:	465b      	mov	r3, fp
 8008892:	f7f7 fe21 	bl	80004d8 <__aeabi_dmul>
 8008896:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008898:	1b5d      	subs	r5, r3, r5
 800889a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800889e:	e9d4 2300 	ldrd	r2, r3, [r4]
 80088a2:	e791      	b.n	80087c8 <_strtod_l+0x3c8>
 80088a4:	3316      	adds	r3, #22
 80088a6:	dba8      	blt.n	80087fa <_strtod_l+0x3fa>
 80088a8:	4b38      	ldr	r3, [pc, #224]	@ (800898c <_strtod_l+0x58c>)
 80088aa:	eba9 0808 	sub.w	r8, r9, r8
 80088ae:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 80088b2:	4650      	mov	r0, sl
 80088b4:	e9d8 2300 	ldrd	r2, r3, [r8]
 80088b8:	4659      	mov	r1, fp
 80088ba:	f7f7 ff37 	bl	800072c <__aeabi_ddiv>
 80088be:	e760      	b.n	8008782 <_strtod_l+0x382>
 80088c0:	4b33      	ldr	r3, [pc, #204]	@ (8008990 <_strtod_l+0x590>)
 80088c2:	4650      	mov	r0, sl
 80088c4:	9308      	str	r3, [sp, #32]
 80088c6:	2300      	movs	r3, #0
 80088c8:	4659      	mov	r1, fp
 80088ca:	461e      	mov	r6, r3
 80088cc:	1124      	asrs	r4, r4, #4
 80088ce:	2c01      	cmp	r4, #1
 80088d0:	dc21      	bgt.n	8008916 <_strtod_l+0x516>
 80088d2:	b10b      	cbz	r3, 80088d8 <_strtod_l+0x4d8>
 80088d4:	4682      	mov	sl, r0
 80088d6:	468b      	mov	fp, r1
 80088d8:	492d      	ldr	r1, [pc, #180]	@ (8008990 <_strtod_l+0x590>)
 80088da:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 80088de:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 80088e2:	4652      	mov	r2, sl
 80088e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80088e8:	465b      	mov	r3, fp
 80088ea:	f7f7 fdf5 	bl	80004d8 <__aeabi_dmul>
 80088ee:	4b25      	ldr	r3, [pc, #148]	@ (8008984 <_strtod_l+0x584>)
 80088f0:	460a      	mov	r2, r1
 80088f2:	400b      	ands	r3, r1
 80088f4:	4927      	ldr	r1, [pc, #156]	@ (8008994 <_strtod_l+0x594>)
 80088f6:	4682      	mov	sl, r0
 80088f8:	428b      	cmp	r3, r1
 80088fa:	d898      	bhi.n	800882e <_strtod_l+0x42e>
 80088fc:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8008900:	428b      	cmp	r3, r1
 8008902:	bf86      	itte	hi
 8008904:	f04f 3aff 	movhi.w	sl, #4294967295
 8008908:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 8008998 <_strtod_l+0x598>
 800890c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8008910:	2300      	movs	r3, #0
 8008912:	9308      	str	r3, [sp, #32]
 8008914:	e07a      	b.n	8008a0c <_strtod_l+0x60c>
 8008916:	07e2      	lsls	r2, r4, #31
 8008918:	d505      	bpl.n	8008926 <_strtod_l+0x526>
 800891a:	9b08      	ldr	r3, [sp, #32]
 800891c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008920:	f7f7 fdda 	bl	80004d8 <__aeabi_dmul>
 8008924:	2301      	movs	r3, #1
 8008926:	9a08      	ldr	r2, [sp, #32]
 8008928:	3601      	adds	r6, #1
 800892a:	3208      	adds	r2, #8
 800892c:	1064      	asrs	r4, r4, #1
 800892e:	9208      	str	r2, [sp, #32]
 8008930:	e7cd      	b.n	80088ce <_strtod_l+0x4ce>
 8008932:	d0ed      	beq.n	8008910 <_strtod_l+0x510>
 8008934:	4264      	negs	r4, r4
 8008936:	f014 020f 	ands.w	r2, r4, #15
 800893a:	d00a      	beq.n	8008952 <_strtod_l+0x552>
 800893c:	4b13      	ldr	r3, [pc, #76]	@ (800898c <_strtod_l+0x58c>)
 800893e:	4650      	mov	r0, sl
 8008940:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008944:	4659      	mov	r1, fp
 8008946:	e9d3 2300 	ldrd	r2, r3, [r3]
 800894a:	f7f7 feef 	bl	800072c <__aeabi_ddiv>
 800894e:	4682      	mov	sl, r0
 8008950:	468b      	mov	fp, r1
 8008952:	1124      	asrs	r4, r4, #4
 8008954:	d0dc      	beq.n	8008910 <_strtod_l+0x510>
 8008956:	2c1f      	cmp	r4, #31
 8008958:	dd20      	ble.n	800899c <_strtod_l+0x59c>
 800895a:	2400      	movs	r4, #0
 800895c:	46a0      	mov	r8, r4
 800895e:	46a1      	mov	r9, r4
 8008960:	940a      	str	r4, [sp, #40]	@ 0x28
 8008962:	2322      	movs	r3, #34	@ 0x22
 8008964:	9a05      	ldr	r2, [sp, #20]
 8008966:	f04f 0a00 	mov.w	sl, #0
 800896a:	f04f 0b00 	mov.w	fp, #0
 800896e:	6013      	str	r3, [r2, #0]
 8008970:	e768      	b.n	8008844 <_strtod_l+0x444>
 8008972:	bf00      	nop
 8008974:	0800abd7 	.word	0x0800abd7
 8008978:	0800adec 	.word	0x0800adec
 800897c:	0800abcf 	.word	0x0800abcf
 8008980:	0800ac04 	.word	0x0800ac04
 8008984:	7ff00000 	.word	0x7ff00000
 8008988:	0800afb0 	.word	0x0800afb0
 800898c:	0800ad20 	.word	0x0800ad20
 8008990:	0800acf8 	.word	0x0800acf8
 8008994:	7ca00000 	.word	0x7ca00000
 8008998:	7fefffff 	.word	0x7fefffff
 800899c:	f014 0310 	ands.w	r3, r4, #16
 80089a0:	bf18      	it	ne
 80089a2:	236a      	movne	r3, #106	@ 0x6a
 80089a4:	4650      	mov	r0, sl
 80089a6:	9308      	str	r3, [sp, #32]
 80089a8:	4659      	mov	r1, fp
 80089aa:	2300      	movs	r3, #0
 80089ac:	4ea9      	ldr	r6, [pc, #676]	@ (8008c54 <_strtod_l+0x854>)
 80089ae:	07e2      	lsls	r2, r4, #31
 80089b0:	d504      	bpl.n	80089bc <_strtod_l+0x5bc>
 80089b2:	e9d6 2300 	ldrd	r2, r3, [r6]
 80089b6:	f7f7 fd8f 	bl	80004d8 <__aeabi_dmul>
 80089ba:	2301      	movs	r3, #1
 80089bc:	1064      	asrs	r4, r4, #1
 80089be:	f106 0608 	add.w	r6, r6, #8
 80089c2:	d1f4      	bne.n	80089ae <_strtod_l+0x5ae>
 80089c4:	b10b      	cbz	r3, 80089ca <_strtod_l+0x5ca>
 80089c6:	4682      	mov	sl, r0
 80089c8:	468b      	mov	fp, r1
 80089ca:	9b08      	ldr	r3, [sp, #32]
 80089cc:	b1b3      	cbz	r3, 80089fc <_strtod_l+0x5fc>
 80089ce:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80089d2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	4659      	mov	r1, fp
 80089da:	dd0f      	ble.n	80089fc <_strtod_l+0x5fc>
 80089dc:	2b1f      	cmp	r3, #31
 80089de:	dd57      	ble.n	8008a90 <_strtod_l+0x690>
 80089e0:	2b34      	cmp	r3, #52	@ 0x34
 80089e2:	bfd8      	it	le
 80089e4:	f04f 33ff 	movle.w	r3, #4294967295
 80089e8:	f04f 0a00 	mov.w	sl, #0
 80089ec:	bfcf      	iteee	gt
 80089ee:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 80089f2:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 80089f6:	4093      	lslle	r3, r2
 80089f8:	ea03 0b01 	andle.w	fp, r3, r1
 80089fc:	2200      	movs	r2, #0
 80089fe:	2300      	movs	r3, #0
 8008a00:	4650      	mov	r0, sl
 8008a02:	4659      	mov	r1, fp
 8008a04:	f7f7 ffd0 	bl	80009a8 <__aeabi_dcmpeq>
 8008a08:	2800      	cmp	r0, #0
 8008a0a:	d1a6      	bne.n	800895a <_strtod_l+0x55a>
 8008a0c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008a0e:	463a      	mov	r2, r7
 8008a10:	9300      	str	r3, [sp, #0]
 8008a12:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8008a14:	462b      	mov	r3, r5
 8008a16:	9805      	ldr	r0, [sp, #20]
 8008a18:	f7ff f8d0 	bl	8007bbc <__s2b>
 8008a1c:	900a      	str	r0, [sp, #40]	@ 0x28
 8008a1e:	2800      	cmp	r0, #0
 8008a20:	f43f af05 	beq.w	800882e <_strtod_l+0x42e>
 8008a24:	2400      	movs	r4, #0
 8008a26:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008a28:	eba9 0308 	sub.w	r3, r9, r8
 8008a2c:	2a00      	cmp	r2, #0
 8008a2e:	bfa8      	it	ge
 8008a30:	2300      	movge	r3, #0
 8008a32:	46a0      	mov	r8, r4
 8008a34:	9312      	str	r3, [sp, #72]	@ 0x48
 8008a36:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8008a3a:	9316      	str	r3, [sp, #88]	@ 0x58
 8008a3c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008a3e:	9805      	ldr	r0, [sp, #20]
 8008a40:	6859      	ldr	r1, [r3, #4]
 8008a42:	f7ff f813 	bl	8007a6c <_Balloc>
 8008a46:	4681      	mov	r9, r0
 8008a48:	2800      	cmp	r0, #0
 8008a4a:	f43f aef4 	beq.w	8008836 <_strtod_l+0x436>
 8008a4e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008a50:	300c      	adds	r0, #12
 8008a52:	691a      	ldr	r2, [r3, #16]
 8008a54:	f103 010c 	add.w	r1, r3, #12
 8008a58:	3202      	adds	r2, #2
 8008a5a:	0092      	lsls	r2, r2, #2
 8008a5c:	f001 f8ee 	bl	8009c3c <memcpy>
 8008a60:	ab1c      	add	r3, sp, #112	@ 0x70
 8008a62:	9301      	str	r3, [sp, #4]
 8008a64:	ab1b      	add	r3, sp, #108	@ 0x6c
 8008a66:	9300      	str	r3, [sp, #0]
 8008a68:	4652      	mov	r2, sl
 8008a6a:	465b      	mov	r3, fp
 8008a6c:	9805      	ldr	r0, [sp, #20]
 8008a6e:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8008a72:	f7ff fbd5 	bl	8008220 <__d2b>
 8008a76:	901a      	str	r0, [sp, #104]	@ 0x68
 8008a78:	2800      	cmp	r0, #0
 8008a7a:	f43f aedc 	beq.w	8008836 <_strtod_l+0x436>
 8008a7e:	2101      	movs	r1, #1
 8008a80:	9805      	ldr	r0, [sp, #20]
 8008a82:	f7ff f931 	bl	8007ce8 <__i2b>
 8008a86:	4680      	mov	r8, r0
 8008a88:	b948      	cbnz	r0, 8008a9e <_strtod_l+0x69e>
 8008a8a:	f04f 0800 	mov.w	r8, #0
 8008a8e:	e6d2      	b.n	8008836 <_strtod_l+0x436>
 8008a90:	f04f 32ff 	mov.w	r2, #4294967295
 8008a94:	fa02 f303 	lsl.w	r3, r2, r3
 8008a98:	ea03 0a0a 	and.w	sl, r3, sl
 8008a9c:	e7ae      	b.n	80089fc <_strtod_l+0x5fc>
 8008a9e:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8008aa0:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8008aa2:	2d00      	cmp	r5, #0
 8008aa4:	bfab      	itete	ge
 8008aa6:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8008aa8:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8008aaa:	18ef      	addge	r7, r5, r3
 8008aac:	1b5e      	sublt	r6, r3, r5
 8008aae:	9b08      	ldr	r3, [sp, #32]
 8008ab0:	bfa8      	it	ge
 8008ab2:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8008ab4:	eba5 0503 	sub.w	r5, r5, r3
 8008ab8:	4415      	add	r5, r2
 8008aba:	4b67      	ldr	r3, [pc, #412]	@ (8008c58 <_strtod_l+0x858>)
 8008abc:	f105 35ff 	add.w	r5, r5, #4294967295
 8008ac0:	bfb8      	it	lt
 8008ac2:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8008ac4:	429d      	cmp	r5, r3
 8008ac6:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8008aca:	da50      	bge.n	8008b6e <_strtod_l+0x76e>
 8008acc:	1b5b      	subs	r3, r3, r5
 8008ace:	2b1f      	cmp	r3, #31
 8008ad0:	f04f 0101 	mov.w	r1, #1
 8008ad4:	eba2 0203 	sub.w	r2, r2, r3
 8008ad8:	dc3d      	bgt.n	8008b56 <_strtod_l+0x756>
 8008ada:	fa01 f303 	lsl.w	r3, r1, r3
 8008ade:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008ae0:	2300      	movs	r3, #0
 8008ae2:	9310      	str	r3, [sp, #64]	@ 0x40
 8008ae4:	18bd      	adds	r5, r7, r2
 8008ae6:	9b08      	ldr	r3, [sp, #32]
 8008ae8:	42af      	cmp	r7, r5
 8008aea:	4416      	add	r6, r2
 8008aec:	441e      	add	r6, r3
 8008aee:	463b      	mov	r3, r7
 8008af0:	bfa8      	it	ge
 8008af2:	462b      	movge	r3, r5
 8008af4:	42b3      	cmp	r3, r6
 8008af6:	bfa8      	it	ge
 8008af8:	4633      	movge	r3, r6
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	bfc2      	ittt	gt
 8008afe:	1aed      	subgt	r5, r5, r3
 8008b00:	1af6      	subgt	r6, r6, r3
 8008b02:	1aff      	subgt	r7, r7, r3
 8008b04:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	dd16      	ble.n	8008b38 <_strtod_l+0x738>
 8008b0a:	4641      	mov	r1, r8
 8008b0c:	461a      	mov	r2, r3
 8008b0e:	9805      	ldr	r0, [sp, #20]
 8008b10:	f7ff f9a8 	bl	8007e64 <__pow5mult>
 8008b14:	4680      	mov	r8, r0
 8008b16:	2800      	cmp	r0, #0
 8008b18:	d0b7      	beq.n	8008a8a <_strtod_l+0x68a>
 8008b1a:	4601      	mov	r1, r0
 8008b1c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8008b1e:	9805      	ldr	r0, [sp, #20]
 8008b20:	f7ff f8f8 	bl	8007d14 <__multiply>
 8008b24:	900e      	str	r0, [sp, #56]	@ 0x38
 8008b26:	2800      	cmp	r0, #0
 8008b28:	f43f ae85 	beq.w	8008836 <_strtod_l+0x436>
 8008b2c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008b2e:	9805      	ldr	r0, [sp, #20]
 8008b30:	f7fe ffdc 	bl	8007aec <_Bfree>
 8008b34:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008b36:	931a      	str	r3, [sp, #104]	@ 0x68
 8008b38:	2d00      	cmp	r5, #0
 8008b3a:	dc1d      	bgt.n	8008b78 <_strtod_l+0x778>
 8008b3c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	dd23      	ble.n	8008b8a <_strtod_l+0x78a>
 8008b42:	4649      	mov	r1, r9
 8008b44:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8008b46:	9805      	ldr	r0, [sp, #20]
 8008b48:	f7ff f98c 	bl	8007e64 <__pow5mult>
 8008b4c:	4681      	mov	r9, r0
 8008b4e:	b9e0      	cbnz	r0, 8008b8a <_strtod_l+0x78a>
 8008b50:	f04f 0900 	mov.w	r9, #0
 8008b54:	e66f      	b.n	8008836 <_strtod_l+0x436>
 8008b56:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8008b5a:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8008b5e:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8008b62:	35e2      	adds	r5, #226	@ 0xe2
 8008b64:	fa01 f305 	lsl.w	r3, r1, r5
 8008b68:	9310      	str	r3, [sp, #64]	@ 0x40
 8008b6a:	9113      	str	r1, [sp, #76]	@ 0x4c
 8008b6c:	e7ba      	b.n	8008ae4 <_strtod_l+0x6e4>
 8008b6e:	2300      	movs	r3, #0
 8008b70:	9310      	str	r3, [sp, #64]	@ 0x40
 8008b72:	2301      	movs	r3, #1
 8008b74:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008b76:	e7b5      	b.n	8008ae4 <_strtod_l+0x6e4>
 8008b78:	462a      	mov	r2, r5
 8008b7a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008b7c:	9805      	ldr	r0, [sp, #20]
 8008b7e:	f7ff f9cb 	bl	8007f18 <__lshift>
 8008b82:	901a      	str	r0, [sp, #104]	@ 0x68
 8008b84:	2800      	cmp	r0, #0
 8008b86:	d1d9      	bne.n	8008b3c <_strtod_l+0x73c>
 8008b88:	e655      	b.n	8008836 <_strtod_l+0x436>
 8008b8a:	2e00      	cmp	r6, #0
 8008b8c:	dd07      	ble.n	8008b9e <_strtod_l+0x79e>
 8008b8e:	4649      	mov	r1, r9
 8008b90:	4632      	mov	r2, r6
 8008b92:	9805      	ldr	r0, [sp, #20]
 8008b94:	f7ff f9c0 	bl	8007f18 <__lshift>
 8008b98:	4681      	mov	r9, r0
 8008b9a:	2800      	cmp	r0, #0
 8008b9c:	d0d8      	beq.n	8008b50 <_strtod_l+0x750>
 8008b9e:	2f00      	cmp	r7, #0
 8008ba0:	dd08      	ble.n	8008bb4 <_strtod_l+0x7b4>
 8008ba2:	4641      	mov	r1, r8
 8008ba4:	463a      	mov	r2, r7
 8008ba6:	9805      	ldr	r0, [sp, #20]
 8008ba8:	f7ff f9b6 	bl	8007f18 <__lshift>
 8008bac:	4680      	mov	r8, r0
 8008bae:	2800      	cmp	r0, #0
 8008bb0:	f43f ae41 	beq.w	8008836 <_strtod_l+0x436>
 8008bb4:	464a      	mov	r2, r9
 8008bb6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008bb8:	9805      	ldr	r0, [sp, #20]
 8008bba:	f7ff fa35 	bl	8008028 <__mdiff>
 8008bbe:	4604      	mov	r4, r0
 8008bc0:	2800      	cmp	r0, #0
 8008bc2:	f43f ae38 	beq.w	8008836 <_strtod_l+0x436>
 8008bc6:	68c3      	ldr	r3, [r0, #12]
 8008bc8:	4641      	mov	r1, r8
 8008bca:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008bcc:	2300      	movs	r3, #0
 8008bce:	60c3      	str	r3, [r0, #12]
 8008bd0:	f7ff fa0e 	bl	8007ff0 <__mcmp>
 8008bd4:	2800      	cmp	r0, #0
 8008bd6:	da45      	bge.n	8008c64 <_strtod_l+0x864>
 8008bd8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008bda:	ea53 030a 	orrs.w	r3, r3, sl
 8008bde:	d16b      	bne.n	8008cb8 <_strtod_l+0x8b8>
 8008be0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d167      	bne.n	8008cb8 <_strtod_l+0x8b8>
 8008be8:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008bec:	0d1b      	lsrs	r3, r3, #20
 8008bee:	051b      	lsls	r3, r3, #20
 8008bf0:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8008bf4:	d960      	bls.n	8008cb8 <_strtod_l+0x8b8>
 8008bf6:	6963      	ldr	r3, [r4, #20]
 8008bf8:	b913      	cbnz	r3, 8008c00 <_strtod_l+0x800>
 8008bfa:	6923      	ldr	r3, [r4, #16]
 8008bfc:	2b01      	cmp	r3, #1
 8008bfe:	dd5b      	ble.n	8008cb8 <_strtod_l+0x8b8>
 8008c00:	4621      	mov	r1, r4
 8008c02:	2201      	movs	r2, #1
 8008c04:	9805      	ldr	r0, [sp, #20]
 8008c06:	f7ff f987 	bl	8007f18 <__lshift>
 8008c0a:	4641      	mov	r1, r8
 8008c0c:	4604      	mov	r4, r0
 8008c0e:	f7ff f9ef 	bl	8007ff0 <__mcmp>
 8008c12:	2800      	cmp	r0, #0
 8008c14:	dd50      	ble.n	8008cb8 <_strtod_l+0x8b8>
 8008c16:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008c1a:	9a08      	ldr	r2, [sp, #32]
 8008c1c:	0d1b      	lsrs	r3, r3, #20
 8008c1e:	051b      	lsls	r3, r3, #20
 8008c20:	2a00      	cmp	r2, #0
 8008c22:	d06a      	beq.n	8008cfa <_strtod_l+0x8fa>
 8008c24:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8008c28:	d867      	bhi.n	8008cfa <_strtod_l+0x8fa>
 8008c2a:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8008c2e:	f67f ae98 	bls.w	8008962 <_strtod_l+0x562>
 8008c32:	4650      	mov	r0, sl
 8008c34:	4659      	mov	r1, fp
 8008c36:	4b09      	ldr	r3, [pc, #36]	@ (8008c5c <_strtod_l+0x85c>)
 8008c38:	2200      	movs	r2, #0
 8008c3a:	f7f7 fc4d 	bl	80004d8 <__aeabi_dmul>
 8008c3e:	4b08      	ldr	r3, [pc, #32]	@ (8008c60 <_strtod_l+0x860>)
 8008c40:	4682      	mov	sl, r0
 8008c42:	400b      	ands	r3, r1
 8008c44:	468b      	mov	fp, r1
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	f47f ae00 	bne.w	800884c <_strtod_l+0x44c>
 8008c4c:	2322      	movs	r3, #34	@ 0x22
 8008c4e:	9a05      	ldr	r2, [sp, #20]
 8008c50:	6013      	str	r3, [r2, #0]
 8008c52:	e5fb      	b.n	800884c <_strtod_l+0x44c>
 8008c54:	0800ae18 	.word	0x0800ae18
 8008c58:	fffffc02 	.word	0xfffffc02
 8008c5c:	39500000 	.word	0x39500000
 8008c60:	7ff00000 	.word	0x7ff00000
 8008c64:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8008c68:	d165      	bne.n	8008d36 <_strtod_l+0x936>
 8008c6a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8008c6c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008c70:	b35a      	cbz	r2, 8008cca <_strtod_l+0x8ca>
 8008c72:	4a99      	ldr	r2, [pc, #612]	@ (8008ed8 <_strtod_l+0xad8>)
 8008c74:	4293      	cmp	r3, r2
 8008c76:	d12b      	bne.n	8008cd0 <_strtod_l+0x8d0>
 8008c78:	9b08      	ldr	r3, [sp, #32]
 8008c7a:	4651      	mov	r1, sl
 8008c7c:	b303      	cbz	r3, 8008cc0 <_strtod_l+0x8c0>
 8008c7e:	465a      	mov	r2, fp
 8008c80:	4b96      	ldr	r3, [pc, #600]	@ (8008edc <_strtod_l+0xadc>)
 8008c82:	4013      	ands	r3, r2
 8008c84:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8008c88:	f04f 32ff 	mov.w	r2, #4294967295
 8008c8c:	d81b      	bhi.n	8008cc6 <_strtod_l+0x8c6>
 8008c8e:	0d1b      	lsrs	r3, r3, #20
 8008c90:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8008c94:	fa02 f303 	lsl.w	r3, r2, r3
 8008c98:	4299      	cmp	r1, r3
 8008c9a:	d119      	bne.n	8008cd0 <_strtod_l+0x8d0>
 8008c9c:	4b90      	ldr	r3, [pc, #576]	@ (8008ee0 <_strtod_l+0xae0>)
 8008c9e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008ca0:	429a      	cmp	r2, r3
 8008ca2:	d102      	bne.n	8008caa <_strtod_l+0x8aa>
 8008ca4:	3101      	adds	r1, #1
 8008ca6:	f43f adc6 	beq.w	8008836 <_strtod_l+0x436>
 8008caa:	f04f 0a00 	mov.w	sl, #0
 8008cae:	4b8b      	ldr	r3, [pc, #556]	@ (8008edc <_strtod_l+0xadc>)
 8008cb0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008cb2:	401a      	ands	r2, r3
 8008cb4:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8008cb8:	9b08      	ldr	r3, [sp, #32]
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d1b9      	bne.n	8008c32 <_strtod_l+0x832>
 8008cbe:	e5c5      	b.n	800884c <_strtod_l+0x44c>
 8008cc0:	f04f 33ff 	mov.w	r3, #4294967295
 8008cc4:	e7e8      	b.n	8008c98 <_strtod_l+0x898>
 8008cc6:	4613      	mov	r3, r2
 8008cc8:	e7e6      	b.n	8008c98 <_strtod_l+0x898>
 8008cca:	ea53 030a 	orrs.w	r3, r3, sl
 8008cce:	d0a2      	beq.n	8008c16 <_strtod_l+0x816>
 8008cd0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008cd2:	b1db      	cbz	r3, 8008d0c <_strtod_l+0x90c>
 8008cd4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008cd6:	4213      	tst	r3, r2
 8008cd8:	d0ee      	beq.n	8008cb8 <_strtod_l+0x8b8>
 8008cda:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008cdc:	4650      	mov	r0, sl
 8008cde:	4659      	mov	r1, fp
 8008ce0:	9a08      	ldr	r2, [sp, #32]
 8008ce2:	b1bb      	cbz	r3, 8008d14 <_strtod_l+0x914>
 8008ce4:	f7ff fb68 	bl	80083b8 <sulp>
 8008ce8:	4602      	mov	r2, r0
 8008cea:	460b      	mov	r3, r1
 8008cec:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008cf0:	f7f7 fa3c 	bl	800016c <__adddf3>
 8008cf4:	4682      	mov	sl, r0
 8008cf6:	468b      	mov	fp, r1
 8008cf8:	e7de      	b.n	8008cb8 <_strtod_l+0x8b8>
 8008cfa:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8008cfe:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8008d02:	f04f 3aff 	mov.w	sl, #4294967295
 8008d06:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8008d0a:	e7d5      	b.n	8008cb8 <_strtod_l+0x8b8>
 8008d0c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008d0e:	ea13 0f0a 	tst.w	r3, sl
 8008d12:	e7e1      	b.n	8008cd8 <_strtod_l+0x8d8>
 8008d14:	f7ff fb50 	bl	80083b8 <sulp>
 8008d18:	4602      	mov	r2, r0
 8008d1a:	460b      	mov	r3, r1
 8008d1c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008d20:	f7f7 fa22 	bl	8000168 <__aeabi_dsub>
 8008d24:	2200      	movs	r2, #0
 8008d26:	2300      	movs	r3, #0
 8008d28:	4682      	mov	sl, r0
 8008d2a:	468b      	mov	fp, r1
 8008d2c:	f7f7 fe3c 	bl	80009a8 <__aeabi_dcmpeq>
 8008d30:	2800      	cmp	r0, #0
 8008d32:	d0c1      	beq.n	8008cb8 <_strtod_l+0x8b8>
 8008d34:	e615      	b.n	8008962 <_strtod_l+0x562>
 8008d36:	4641      	mov	r1, r8
 8008d38:	4620      	mov	r0, r4
 8008d3a:	f7ff fac9 	bl	80082d0 <__ratio>
 8008d3e:	2200      	movs	r2, #0
 8008d40:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8008d44:	4606      	mov	r6, r0
 8008d46:	460f      	mov	r7, r1
 8008d48:	f7f7 fe42 	bl	80009d0 <__aeabi_dcmple>
 8008d4c:	2800      	cmp	r0, #0
 8008d4e:	d06d      	beq.n	8008e2c <_strtod_l+0xa2c>
 8008d50:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d178      	bne.n	8008e48 <_strtod_l+0xa48>
 8008d56:	f1ba 0f00 	cmp.w	sl, #0
 8008d5a:	d156      	bne.n	8008e0a <_strtod_l+0xa0a>
 8008d5c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008d5e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d158      	bne.n	8008e18 <_strtod_l+0xa18>
 8008d66:	2200      	movs	r2, #0
 8008d68:	4630      	mov	r0, r6
 8008d6a:	4639      	mov	r1, r7
 8008d6c:	4b5d      	ldr	r3, [pc, #372]	@ (8008ee4 <_strtod_l+0xae4>)
 8008d6e:	f7f7 fe25 	bl	80009bc <__aeabi_dcmplt>
 8008d72:	2800      	cmp	r0, #0
 8008d74:	d157      	bne.n	8008e26 <_strtod_l+0xa26>
 8008d76:	4630      	mov	r0, r6
 8008d78:	4639      	mov	r1, r7
 8008d7a:	2200      	movs	r2, #0
 8008d7c:	4b5a      	ldr	r3, [pc, #360]	@ (8008ee8 <_strtod_l+0xae8>)
 8008d7e:	f7f7 fbab 	bl	80004d8 <__aeabi_dmul>
 8008d82:	4606      	mov	r6, r0
 8008d84:	460f      	mov	r7, r1
 8008d86:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8008d8a:	9606      	str	r6, [sp, #24]
 8008d8c:	9307      	str	r3, [sp, #28]
 8008d8e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008d92:	4d52      	ldr	r5, [pc, #328]	@ (8008edc <_strtod_l+0xadc>)
 8008d94:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8008d98:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008d9a:	401d      	ands	r5, r3
 8008d9c:	4b53      	ldr	r3, [pc, #332]	@ (8008eec <_strtod_l+0xaec>)
 8008d9e:	429d      	cmp	r5, r3
 8008da0:	f040 80aa 	bne.w	8008ef8 <_strtod_l+0xaf8>
 8008da4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008da6:	4650      	mov	r0, sl
 8008da8:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8008dac:	4659      	mov	r1, fp
 8008dae:	f7ff f9cf 	bl	8008150 <__ulp>
 8008db2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008db6:	f7f7 fb8f 	bl	80004d8 <__aeabi_dmul>
 8008dba:	4652      	mov	r2, sl
 8008dbc:	465b      	mov	r3, fp
 8008dbe:	f7f7 f9d5 	bl	800016c <__adddf3>
 8008dc2:	460b      	mov	r3, r1
 8008dc4:	4945      	ldr	r1, [pc, #276]	@ (8008edc <_strtod_l+0xadc>)
 8008dc6:	4a4a      	ldr	r2, [pc, #296]	@ (8008ef0 <_strtod_l+0xaf0>)
 8008dc8:	4019      	ands	r1, r3
 8008dca:	4291      	cmp	r1, r2
 8008dcc:	4682      	mov	sl, r0
 8008dce:	d942      	bls.n	8008e56 <_strtod_l+0xa56>
 8008dd0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008dd2:	4b43      	ldr	r3, [pc, #268]	@ (8008ee0 <_strtod_l+0xae0>)
 8008dd4:	429a      	cmp	r2, r3
 8008dd6:	d103      	bne.n	8008de0 <_strtod_l+0x9e0>
 8008dd8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008dda:	3301      	adds	r3, #1
 8008ddc:	f43f ad2b 	beq.w	8008836 <_strtod_l+0x436>
 8008de0:	f04f 3aff 	mov.w	sl, #4294967295
 8008de4:	f8df b0f8 	ldr.w	fp, [pc, #248]	@ 8008ee0 <_strtod_l+0xae0>
 8008de8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008dea:	9805      	ldr	r0, [sp, #20]
 8008dec:	f7fe fe7e 	bl	8007aec <_Bfree>
 8008df0:	4649      	mov	r1, r9
 8008df2:	9805      	ldr	r0, [sp, #20]
 8008df4:	f7fe fe7a 	bl	8007aec <_Bfree>
 8008df8:	4641      	mov	r1, r8
 8008dfa:	9805      	ldr	r0, [sp, #20]
 8008dfc:	f7fe fe76 	bl	8007aec <_Bfree>
 8008e00:	4621      	mov	r1, r4
 8008e02:	9805      	ldr	r0, [sp, #20]
 8008e04:	f7fe fe72 	bl	8007aec <_Bfree>
 8008e08:	e618      	b.n	8008a3c <_strtod_l+0x63c>
 8008e0a:	f1ba 0f01 	cmp.w	sl, #1
 8008e0e:	d103      	bne.n	8008e18 <_strtod_l+0xa18>
 8008e10:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	f43f ada5 	beq.w	8008962 <_strtod_l+0x562>
 8008e18:	2200      	movs	r2, #0
 8008e1a:	4b36      	ldr	r3, [pc, #216]	@ (8008ef4 <_strtod_l+0xaf4>)
 8008e1c:	2600      	movs	r6, #0
 8008e1e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008e22:	4f30      	ldr	r7, [pc, #192]	@ (8008ee4 <_strtod_l+0xae4>)
 8008e24:	e7b3      	b.n	8008d8e <_strtod_l+0x98e>
 8008e26:	2600      	movs	r6, #0
 8008e28:	4f2f      	ldr	r7, [pc, #188]	@ (8008ee8 <_strtod_l+0xae8>)
 8008e2a:	e7ac      	b.n	8008d86 <_strtod_l+0x986>
 8008e2c:	4630      	mov	r0, r6
 8008e2e:	4639      	mov	r1, r7
 8008e30:	4b2d      	ldr	r3, [pc, #180]	@ (8008ee8 <_strtod_l+0xae8>)
 8008e32:	2200      	movs	r2, #0
 8008e34:	f7f7 fb50 	bl	80004d8 <__aeabi_dmul>
 8008e38:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008e3a:	4606      	mov	r6, r0
 8008e3c:	460f      	mov	r7, r1
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d0a1      	beq.n	8008d86 <_strtod_l+0x986>
 8008e42:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8008e46:	e7a2      	b.n	8008d8e <_strtod_l+0x98e>
 8008e48:	2200      	movs	r2, #0
 8008e4a:	4b26      	ldr	r3, [pc, #152]	@ (8008ee4 <_strtod_l+0xae4>)
 8008e4c:	4616      	mov	r6, r2
 8008e4e:	461f      	mov	r7, r3
 8008e50:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008e54:	e79b      	b.n	8008d8e <_strtod_l+0x98e>
 8008e56:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8008e5a:	9b08      	ldr	r3, [sp, #32]
 8008e5c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d1c1      	bne.n	8008de8 <_strtod_l+0x9e8>
 8008e64:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008e68:	0d1b      	lsrs	r3, r3, #20
 8008e6a:	051b      	lsls	r3, r3, #20
 8008e6c:	429d      	cmp	r5, r3
 8008e6e:	d1bb      	bne.n	8008de8 <_strtod_l+0x9e8>
 8008e70:	4630      	mov	r0, r6
 8008e72:	4639      	mov	r1, r7
 8008e74:	f7f8 f94c 	bl	8001110 <__aeabi_d2lz>
 8008e78:	f7f7 fb00 	bl	800047c <__aeabi_l2d>
 8008e7c:	4602      	mov	r2, r0
 8008e7e:	460b      	mov	r3, r1
 8008e80:	4630      	mov	r0, r6
 8008e82:	4639      	mov	r1, r7
 8008e84:	f7f7 f970 	bl	8000168 <__aeabi_dsub>
 8008e88:	460b      	mov	r3, r1
 8008e8a:	4602      	mov	r2, r0
 8008e8c:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8008e90:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8008e94:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008e96:	ea46 060a 	orr.w	r6, r6, sl
 8008e9a:	431e      	orrs	r6, r3
 8008e9c:	d069      	beq.n	8008f72 <_strtod_l+0xb72>
 8008e9e:	a30a      	add	r3, pc, #40	@ (adr r3, 8008ec8 <_strtod_l+0xac8>)
 8008ea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ea4:	f7f7 fd8a 	bl	80009bc <__aeabi_dcmplt>
 8008ea8:	2800      	cmp	r0, #0
 8008eaa:	f47f accf 	bne.w	800884c <_strtod_l+0x44c>
 8008eae:	a308      	add	r3, pc, #32	@ (adr r3, 8008ed0 <_strtod_l+0xad0>)
 8008eb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008eb4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008eb8:	f7f7 fd9e 	bl	80009f8 <__aeabi_dcmpgt>
 8008ebc:	2800      	cmp	r0, #0
 8008ebe:	d093      	beq.n	8008de8 <_strtod_l+0x9e8>
 8008ec0:	e4c4      	b.n	800884c <_strtod_l+0x44c>
 8008ec2:	bf00      	nop
 8008ec4:	f3af 8000 	nop.w
 8008ec8:	94a03595 	.word	0x94a03595
 8008ecc:	3fdfffff 	.word	0x3fdfffff
 8008ed0:	35afe535 	.word	0x35afe535
 8008ed4:	3fe00000 	.word	0x3fe00000
 8008ed8:	000fffff 	.word	0x000fffff
 8008edc:	7ff00000 	.word	0x7ff00000
 8008ee0:	7fefffff 	.word	0x7fefffff
 8008ee4:	3ff00000 	.word	0x3ff00000
 8008ee8:	3fe00000 	.word	0x3fe00000
 8008eec:	7fe00000 	.word	0x7fe00000
 8008ef0:	7c9fffff 	.word	0x7c9fffff
 8008ef4:	bff00000 	.word	0xbff00000
 8008ef8:	9b08      	ldr	r3, [sp, #32]
 8008efa:	b323      	cbz	r3, 8008f46 <_strtod_l+0xb46>
 8008efc:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8008f00:	d821      	bhi.n	8008f46 <_strtod_l+0xb46>
 8008f02:	a327      	add	r3, pc, #156	@ (adr r3, 8008fa0 <_strtod_l+0xba0>)
 8008f04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f08:	4630      	mov	r0, r6
 8008f0a:	4639      	mov	r1, r7
 8008f0c:	f7f7 fd60 	bl	80009d0 <__aeabi_dcmple>
 8008f10:	b1a0      	cbz	r0, 8008f3c <_strtod_l+0xb3c>
 8008f12:	4639      	mov	r1, r7
 8008f14:	4630      	mov	r0, r6
 8008f16:	f7f7 fdb7 	bl	8000a88 <__aeabi_d2uiz>
 8008f1a:	2801      	cmp	r0, #1
 8008f1c:	bf38      	it	cc
 8008f1e:	2001      	movcc	r0, #1
 8008f20:	f7f7 fa60 	bl	80003e4 <__aeabi_ui2d>
 8008f24:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008f26:	4606      	mov	r6, r0
 8008f28:	460f      	mov	r7, r1
 8008f2a:	b9fb      	cbnz	r3, 8008f6c <_strtod_l+0xb6c>
 8008f2c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008f30:	9014      	str	r0, [sp, #80]	@ 0x50
 8008f32:	9315      	str	r3, [sp, #84]	@ 0x54
 8008f34:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8008f38:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8008f3c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008f3e:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8008f42:	1b5b      	subs	r3, r3, r5
 8008f44:	9311      	str	r3, [sp, #68]	@ 0x44
 8008f46:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008f4a:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8008f4e:	f7ff f8ff 	bl	8008150 <__ulp>
 8008f52:	4602      	mov	r2, r0
 8008f54:	460b      	mov	r3, r1
 8008f56:	4650      	mov	r0, sl
 8008f58:	4659      	mov	r1, fp
 8008f5a:	f7f7 fabd 	bl	80004d8 <__aeabi_dmul>
 8008f5e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8008f62:	f7f7 f903 	bl	800016c <__adddf3>
 8008f66:	4682      	mov	sl, r0
 8008f68:	468b      	mov	fp, r1
 8008f6a:	e776      	b.n	8008e5a <_strtod_l+0xa5a>
 8008f6c:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8008f70:	e7e0      	b.n	8008f34 <_strtod_l+0xb34>
 8008f72:	a30d      	add	r3, pc, #52	@ (adr r3, 8008fa8 <_strtod_l+0xba8>)
 8008f74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f78:	f7f7 fd20 	bl	80009bc <__aeabi_dcmplt>
 8008f7c:	e79e      	b.n	8008ebc <_strtod_l+0xabc>
 8008f7e:	2300      	movs	r3, #0
 8008f80:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008f82:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008f84:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8008f86:	6013      	str	r3, [r2, #0]
 8008f88:	f7ff ba77 	b.w	800847a <_strtod_l+0x7a>
 8008f8c:	2a65      	cmp	r2, #101	@ 0x65
 8008f8e:	f43f ab6e 	beq.w	800866e <_strtod_l+0x26e>
 8008f92:	2a45      	cmp	r2, #69	@ 0x45
 8008f94:	f43f ab6b 	beq.w	800866e <_strtod_l+0x26e>
 8008f98:	2301      	movs	r3, #1
 8008f9a:	f7ff bba6 	b.w	80086ea <_strtod_l+0x2ea>
 8008f9e:	bf00      	nop
 8008fa0:	ffc00000 	.word	0xffc00000
 8008fa4:	41dfffff 	.word	0x41dfffff
 8008fa8:	94a03595 	.word	0x94a03595
 8008fac:	3fcfffff 	.word	0x3fcfffff

08008fb0 <_strtod_r>:
 8008fb0:	4b01      	ldr	r3, [pc, #4]	@ (8008fb8 <_strtod_r+0x8>)
 8008fb2:	f7ff ba25 	b.w	8008400 <_strtod_l>
 8008fb6:	bf00      	nop
 8008fb8:	2000006c 	.word	0x2000006c

08008fbc <_strtol_l.constprop.0>:
 8008fbc:	2b24      	cmp	r3, #36	@ 0x24
 8008fbe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008fc2:	4686      	mov	lr, r0
 8008fc4:	4690      	mov	r8, r2
 8008fc6:	d801      	bhi.n	8008fcc <_strtol_l.constprop.0+0x10>
 8008fc8:	2b01      	cmp	r3, #1
 8008fca:	d106      	bne.n	8008fda <_strtol_l.constprop.0+0x1e>
 8008fcc:	f7fd fdbe 	bl	8006b4c <__errno>
 8008fd0:	2316      	movs	r3, #22
 8008fd2:	6003      	str	r3, [r0, #0]
 8008fd4:	2000      	movs	r0, #0
 8008fd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008fda:	460d      	mov	r5, r1
 8008fdc:	4833      	ldr	r0, [pc, #204]	@ (80090ac <_strtol_l.constprop.0+0xf0>)
 8008fde:	462a      	mov	r2, r5
 8008fe0:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008fe4:	5d06      	ldrb	r6, [r0, r4]
 8008fe6:	f016 0608 	ands.w	r6, r6, #8
 8008fea:	d1f8      	bne.n	8008fde <_strtol_l.constprop.0+0x22>
 8008fec:	2c2d      	cmp	r4, #45	@ 0x2d
 8008fee:	d12d      	bne.n	800904c <_strtol_l.constprop.0+0x90>
 8008ff0:	2601      	movs	r6, #1
 8008ff2:	782c      	ldrb	r4, [r5, #0]
 8008ff4:	1c95      	adds	r5, r2, #2
 8008ff6:	f033 0210 	bics.w	r2, r3, #16
 8008ffa:	d109      	bne.n	8009010 <_strtol_l.constprop.0+0x54>
 8008ffc:	2c30      	cmp	r4, #48	@ 0x30
 8008ffe:	d12a      	bne.n	8009056 <_strtol_l.constprop.0+0x9a>
 8009000:	782a      	ldrb	r2, [r5, #0]
 8009002:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009006:	2a58      	cmp	r2, #88	@ 0x58
 8009008:	d125      	bne.n	8009056 <_strtol_l.constprop.0+0x9a>
 800900a:	2310      	movs	r3, #16
 800900c:	786c      	ldrb	r4, [r5, #1]
 800900e:	3502      	adds	r5, #2
 8009010:	2200      	movs	r2, #0
 8009012:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8009016:	f10c 3cff 	add.w	ip, ip, #4294967295
 800901a:	fbbc f9f3 	udiv	r9, ip, r3
 800901e:	4610      	mov	r0, r2
 8009020:	fb03 ca19 	mls	sl, r3, r9, ip
 8009024:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8009028:	2f09      	cmp	r7, #9
 800902a:	d81b      	bhi.n	8009064 <_strtol_l.constprop.0+0xa8>
 800902c:	463c      	mov	r4, r7
 800902e:	42a3      	cmp	r3, r4
 8009030:	dd27      	ble.n	8009082 <_strtol_l.constprop.0+0xc6>
 8009032:	1c57      	adds	r7, r2, #1
 8009034:	d007      	beq.n	8009046 <_strtol_l.constprop.0+0x8a>
 8009036:	4581      	cmp	r9, r0
 8009038:	d320      	bcc.n	800907c <_strtol_l.constprop.0+0xc0>
 800903a:	d101      	bne.n	8009040 <_strtol_l.constprop.0+0x84>
 800903c:	45a2      	cmp	sl, r4
 800903e:	db1d      	blt.n	800907c <_strtol_l.constprop.0+0xc0>
 8009040:	2201      	movs	r2, #1
 8009042:	fb00 4003 	mla	r0, r0, r3, r4
 8009046:	f815 4b01 	ldrb.w	r4, [r5], #1
 800904a:	e7eb      	b.n	8009024 <_strtol_l.constprop.0+0x68>
 800904c:	2c2b      	cmp	r4, #43	@ 0x2b
 800904e:	bf04      	itt	eq
 8009050:	782c      	ldrbeq	r4, [r5, #0]
 8009052:	1c95      	addeq	r5, r2, #2
 8009054:	e7cf      	b.n	8008ff6 <_strtol_l.constprop.0+0x3a>
 8009056:	2b00      	cmp	r3, #0
 8009058:	d1da      	bne.n	8009010 <_strtol_l.constprop.0+0x54>
 800905a:	2c30      	cmp	r4, #48	@ 0x30
 800905c:	bf0c      	ite	eq
 800905e:	2308      	moveq	r3, #8
 8009060:	230a      	movne	r3, #10
 8009062:	e7d5      	b.n	8009010 <_strtol_l.constprop.0+0x54>
 8009064:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8009068:	2f19      	cmp	r7, #25
 800906a:	d801      	bhi.n	8009070 <_strtol_l.constprop.0+0xb4>
 800906c:	3c37      	subs	r4, #55	@ 0x37
 800906e:	e7de      	b.n	800902e <_strtol_l.constprop.0+0x72>
 8009070:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8009074:	2f19      	cmp	r7, #25
 8009076:	d804      	bhi.n	8009082 <_strtol_l.constprop.0+0xc6>
 8009078:	3c57      	subs	r4, #87	@ 0x57
 800907a:	e7d8      	b.n	800902e <_strtol_l.constprop.0+0x72>
 800907c:	f04f 32ff 	mov.w	r2, #4294967295
 8009080:	e7e1      	b.n	8009046 <_strtol_l.constprop.0+0x8a>
 8009082:	1c53      	adds	r3, r2, #1
 8009084:	d108      	bne.n	8009098 <_strtol_l.constprop.0+0xdc>
 8009086:	2322      	movs	r3, #34	@ 0x22
 8009088:	4660      	mov	r0, ip
 800908a:	f8ce 3000 	str.w	r3, [lr]
 800908e:	f1b8 0f00 	cmp.w	r8, #0
 8009092:	d0a0      	beq.n	8008fd6 <_strtol_l.constprop.0+0x1a>
 8009094:	1e69      	subs	r1, r5, #1
 8009096:	e006      	b.n	80090a6 <_strtol_l.constprop.0+0xea>
 8009098:	b106      	cbz	r6, 800909c <_strtol_l.constprop.0+0xe0>
 800909a:	4240      	negs	r0, r0
 800909c:	f1b8 0f00 	cmp.w	r8, #0
 80090a0:	d099      	beq.n	8008fd6 <_strtol_l.constprop.0+0x1a>
 80090a2:	2a00      	cmp	r2, #0
 80090a4:	d1f6      	bne.n	8009094 <_strtol_l.constprop.0+0xd8>
 80090a6:	f8c8 1000 	str.w	r1, [r8]
 80090aa:	e794      	b.n	8008fd6 <_strtol_l.constprop.0+0x1a>
 80090ac:	0800ae41 	.word	0x0800ae41

080090b0 <_strtol_r>:
 80090b0:	f7ff bf84 	b.w	8008fbc <_strtol_l.constprop.0>

080090b4 <__ssputs_r>:
 80090b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80090b8:	461f      	mov	r7, r3
 80090ba:	688e      	ldr	r6, [r1, #8]
 80090bc:	4682      	mov	sl, r0
 80090be:	42be      	cmp	r6, r7
 80090c0:	460c      	mov	r4, r1
 80090c2:	4690      	mov	r8, r2
 80090c4:	680b      	ldr	r3, [r1, #0]
 80090c6:	d82d      	bhi.n	8009124 <__ssputs_r+0x70>
 80090c8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80090cc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80090d0:	d026      	beq.n	8009120 <__ssputs_r+0x6c>
 80090d2:	6965      	ldr	r5, [r4, #20]
 80090d4:	6909      	ldr	r1, [r1, #16]
 80090d6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80090da:	eba3 0901 	sub.w	r9, r3, r1
 80090de:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80090e2:	1c7b      	adds	r3, r7, #1
 80090e4:	444b      	add	r3, r9
 80090e6:	106d      	asrs	r5, r5, #1
 80090e8:	429d      	cmp	r5, r3
 80090ea:	bf38      	it	cc
 80090ec:	461d      	movcc	r5, r3
 80090ee:	0553      	lsls	r3, r2, #21
 80090f0:	d527      	bpl.n	8009142 <__ssputs_r+0x8e>
 80090f2:	4629      	mov	r1, r5
 80090f4:	f7fe fc2e 	bl	8007954 <_malloc_r>
 80090f8:	4606      	mov	r6, r0
 80090fa:	b360      	cbz	r0, 8009156 <__ssputs_r+0xa2>
 80090fc:	464a      	mov	r2, r9
 80090fe:	6921      	ldr	r1, [r4, #16]
 8009100:	f000 fd9c 	bl	8009c3c <memcpy>
 8009104:	89a3      	ldrh	r3, [r4, #12]
 8009106:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800910a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800910e:	81a3      	strh	r3, [r4, #12]
 8009110:	6126      	str	r6, [r4, #16]
 8009112:	444e      	add	r6, r9
 8009114:	6026      	str	r6, [r4, #0]
 8009116:	463e      	mov	r6, r7
 8009118:	6165      	str	r5, [r4, #20]
 800911a:	eba5 0509 	sub.w	r5, r5, r9
 800911e:	60a5      	str	r5, [r4, #8]
 8009120:	42be      	cmp	r6, r7
 8009122:	d900      	bls.n	8009126 <__ssputs_r+0x72>
 8009124:	463e      	mov	r6, r7
 8009126:	4632      	mov	r2, r6
 8009128:	4641      	mov	r1, r8
 800912a:	6820      	ldr	r0, [r4, #0]
 800912c:	f000 fd49 	bl	8009bc2 <memmove>
 8009130:	2000      	movs	r0, #0
 8009132:	68a3      	ldr	r3, [r4, #8]
 8009134:	1b9b      	subs	r3, r3, r6
 8009136:	60a3      	str	r3, [r4, #8]
 8009138:	6823      	ldr	r3, [r4, #0]
 800913a:	4433      	add	r3, r6
 800913c:	6023      	str	r3, [r4, #0]
 800913e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009142:	462a      	mov	r2, r5
 8009144:	f001 f90b 	bl	800a35e <_realloc_r>
 8009148:	4606      	mov	r6, r0
 800914a:	2800      	cmp	r0, #0
 800914c:	d1e0      	bne.n	8009110 <__ssputs_r+0x5c>
 800914e:	4650      	mov	r0, sl
 8009150:	6921      	ldr	r1, [r4, #16]
 8009152:	f7fe fb8d 	bl	8007870 <_free_r>
 8009156:	230c      	movs	r3, #12
 8009158:	f8ca 3000 	str.w	r3, [sl]
 800915c:	89a3      	ldrh	r3, [r4, #12]
 800915e:	f04f 30ff 	mov.w	r0, #4294967295
 8009162:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009166:	81a3      	strh	r3, [r4, #12]
 8009168:	e7e9      	b.n	800913e <__ssputs_r+0x8a>
	...

0800916c <_svfiprintf_r>:
 800916c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009170:	4698      	mov	r8, r3
 8009172:	898b      	ldrh	r3, [r1, #12]
 8009174:	4607      	mov	r7, r0
 8009176:	061b      	lsls	r3, r3, #24
 8009178:	460d      	mov	r5, r1
 800917a:	4614      	mov	r4, r2
 800917c:	b09d      	sub	sp, #116	@ 0x74
 800917e:	d510      	bpl.n	80091a2 <_svfiprintf_r+0x36>
 8009180:	690b      	ldr	r3, [r1, #16]
 8009182:	b973      	cbnz	r3, 80091a2 <_svfiprintf_r+0x36>
 8009184:	2140      	movs	r1, #64	@ 0x40
 8009186:	f7fe fbe5 	bl	8007954 <_malloc_r>
 800918a:	6028      	str	r0, [r5, #0]
 800918c:	6128      	str	r0, [r5, #16]
 800918e:	b930      	cbnz	r0, 800919e <_svfiprintf_r+0x32>
 8009190:	230c      	movs	r3, #12
 8009192:	603b      	str	r3, [r7, #0]
 8009194:	f04f 30ff 	mov.w	r0, #4294967295
 8009198:	b01d      	add	sp, #116	@ 0x74
 800919a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800919e:	2340      	movs	r3, #64	@ 0x40
 80091a0:	616b      	str	r3, [r5, #20]
 80091a2:	2300      	movs	r3, #0
 80091a4:	9309      	str	r3, [sp, #36]	@ 0x24
 80091a6:	2320      	movs	r3, #32
 80091a8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80091ac:	2330      	movs	r3, #48	@ 0x30
 80091ae:	f04f 0901 	mov.w	r9, #1
 80091b2:	f8cd 800c 	str.w	r8, [sp, #12]
 80091b6:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8009350 <_svfiprintf_r+0x1e4>
 80091ba:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80091be:	4623      	mov	r3, r4
 80091c0:	469a      	mov	sl, r3
 80091c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80091c6:	b10a      	cbz	r2, 80091cc <_svfiprintf_r+0x60>
 80091c8:	2a25      	cmp	r2, #37	@ 0x25
 80091ca:	d1f9      	bne.n	80091c0 <_svfiprintf_r+0x54>
 80091cc:	ebba 0b04 	subs.w	fp, sl, r4
 80091d0:	d00b      	beq.n	80091ea <_svfiprintf_r+0x7e>
 80091d2:	465b      	mov	r3, fp
 80091d4:	4622      	mov	r2, r4
 80091d6:	4629      	mov	r1, r5
 80091d8:	4638      	mov	r0, r7
 80091da:	f7ff ff6b 	bl	80090b4 <__ssputs_r>
 80091de:	3001      	adds	r0, #1
 80091e0:	f000 80a7 	beq.w	8009332 <_svfiprintf_r+0x1c6>
 80091e4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80091e6:	445a      	add	r2, fp
 80091e8:	9209      	str	r2, [sp, #36]	@ 0x24
 80091ea:	f89a 3000 	ldrb.w	r3, [sl]
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	f000 809f 	beq.w	8009332 <_svfiprintf_r+0x1c6>
 80091f4:	2300      	movs	r3, #0
 80091f6:	f04f 32ff 	mov.w	r2, #4294967295
 80091fa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80091fe:	f10a 0a01 	add.w	sl, sl, #1
 8009202:	9304      	str	r3, [sp, #16]
 8009204:	9307      	str	r3, [sp, #28]
 8009206:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800920a:	931a      	str	r3, [sp, #104]	@ 0x68
 800920c:	4654      	mov	r4, sl
 800920e:	2205      	movs	r2, #5
 8009210:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009214:	484e      	ldr	r0, [pc, #312]	@ (8009350 <_svfiprintf_r+0x1e4>)
 8009216:	f7fd fcc6 	bl	8006ba6 <memchr>
 800921a:	9a04      	ldr	r2, [sp, #16]
 800921c:	b9d8      	cbnz	r0, 8009256 <_svfiprintf_r+0xea>
 800921e:	06d0      	lsls	r0, r2, #27
 8009220:	bf44      	itt	mi
 8009222:	2320      	movmi	r3, #32
 8009224:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009228:	0711      	lsls	r1, r2, #28
 800922a:	bf44      	itt	mi
 800922c:	232b      	movmi	r3, #43	@ 0x2b
 800922e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009232:	f89a 3000 	ldrb.w	r3, [sl]
 8009236:	2b2a      	cmp	r3, #42	@ 0x2a
 8009238:	d015      	beq.n	8009266 <_svfiprintf_r+0xfa>
 800923a:	4654      	mov	r4, sl
 800923c:	2000      	movs	r0, #0
 800923e:	f04f 0c0a 	mov.w	ip, #10
 8009242:	9a07      	ldr	r2, [sp, #28]
 8009244:	4621      	mov	r1, r4
 8009246:	f811 3b01 	ldrb.w	r3, [r1], #1
 800924a:	3b30      	subs	r3, #48	@ 0x30
 800924c:	2b09      	cmp	r3, #9
 800924e:	d94b      	bls.n	80092e8 <_svfiprintf_r+0x17c>
 8009250:	b1b0      	cbz	r0, 8009280 <_svfiprintf_r+0x114>
 8009252:	9207      	str	r2, [sp, #28]
 8009254:	e014      	b.n	8009280 <_svfiprintf_r+0x114>
 8009256:	eba0 0308 	sub.w	r3, r0, r8
 800925a:	fa09 f303 	lsl.w	r3, r9, r3
 800925e:	4313      	orrs	r3, r2
 8009260:	46a2      	mov	sl, r4
 8009262:	9304      	str	r3, [sp, #16]
 8009264:	e7d2      	b.n	800920c <_svfiprintf_r+0xa0>
 8009266:	9b03      	ldr	r3, [sp, #12]
 8009268:	1d19      	adds	r1, r3, #4
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	9103      	str	r1, [sp, #12]
 800926e:	2b00      	cmp	r3, #0
 8009270:	bfbb      	ittet	lt
 8009272:	425b      	neglt	r3, r3
 8009274:	f042 0202 	orrlt.w	r2, r2, #2
 8009278:	9307      	strge	r3, [sp, #28]
 800927a:	9307      	strlt	r3, [sp, #28]
 800927c:	bfb8      	it	lt
 800927e:	9204      	strlt	r2, [sp, #16]
 8009280:	7823      	ldrb	r3, [r4, #0]
 8009282:	2b2e      	cmp	r3, #46	@ 0x2e
 8009284:	d10a      	bne.n	800929c <_svfiprintf_r+0x130>
 8009286:	7863      	ldrb	r3, [r4, #1]
 8009288:	2b2a      	cmp	r3, #42	@ 0x2a
 800928a:	d132      	bne.n	80092f2 <_svfiprintf_r+0x186>
 800928c:	9b03      	ldr	r3, [sp, #12]
 800928e:	3402      	adds	r4, #2
 8009290:	1d1a      	adds	r2, r3, #4
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	9203      	str	r2, [sp, #12]
 8009296:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800929a:	9305      	str	r3, [sp, #20]
 800929c:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8009354 <_svfiprintf_r+0x1e8>
 80092a0:	2203      	movs	r2, #3
 80092a2:	4650      	mov	r0, sl
 80092a4:	7821      	ldrb	r1, [r4, #0]
 80092a6:	f7fd fc7e 	bl	8006ba6 <memchr>
 80092aa:	b138      	cbz	r0, 80092bc <_svfiprintf_r+0x150>
 80092ac:	2240      	movs	r2, #64	@ 0x40
 80092ae:	9b04      	ldr	r3, [sp, #16]
 80092b0:	eba0 000a 	sub.w	r0, r0, sl
 80092b4:	4082      	lsls	r2, r0
 80092b6:	4313      	orrs	r3, r2
 80092b8:	3401      	adds	r4, #1
 80092ba:	9304      	str	r3, [sp, #16]
 80092bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80092c0:	2206      	movs	r2, #6
 80092c2:	4825      	ldr	r0, [pc, #148]	@ (8009358 <_svfiprintf_r+0x1ec>)
 80092c4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80092c8:	f7fd fc6d 	bl	8006ba6 <memchr>
 80092cc:	2800      	cmp	r0, #0
 80092ce:	d036      	beq.n	800933e <_svfiprintf_r+0x1d2>
 80092d0:	4b22      	ldr	r3, [pc, #136]	@ (800935c <_svfiprintf_r+0x1f0>)
 80092d2:	bb1b      	cbnz	r3, 800931c <_svfiprintf_r+0x1b0>
 80092d4:	9b03      	ldr	r3, [sp, #12]
 80092d6:	3307      	adds	r3, #7
 80092d8:	f023 0307 	bic.w	r3, r3, #7
 80092dc:	3308      	adds	r3, #8
 80092de:	9303      	str	r3, [sp, #12]
 80092e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80092e2:	4433      	add	r3, r6
 80092e4:	9309      	str	r3, [sp, #36]	@ 0x24
 80092e6:	e76a      	b.n	80091be <_svfiprintf_r+0x52>
 80092e8:	460c      	mov	r4, r1
 80092ea:	2001      	movs	r0, #1
 80092ec:	fb0c 3202 	mla	r2, ip, r2, r3
 80092f0:	e7a8      	b.n	8009244 <_svfiprintf_r+0xd8>
 80092f2:	2300      	movs	r3, #0
 80092f4:	f04f 0c0a 	mov.w	ip, #10
 80092f8:	4619      	mov	r1, r3
 80092fa:	3401      	adds	r4, #1
 80092fc:	9305      	str	r3, [sp, #20]
 80092fe:	4620      	mov	r0, r4
 8009300:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009304:	3a30      	subs	r2, #48	@ 0x30
 8009306:	2a09      	cmp	r2, #9
 8009308:	d903      	bls.n	8009312 <_svfiprintf_r+0x1a6>
 800930a:	2b00      	cmp	r3, #0
 800930c:	d0c6      	beq.n	800929c <_svfiprintf_r+0x130>
 800930e:	9105      	str	r1, [sp, #20]
 8009310:	e7c4      	b.n	800929c <_svfiprintf_r+0x130>
 8009312:	4604      	mov	r4, r0
 8009314:	2301      	movs	r3, #1
 8009316:	fb0c 2101 	mla	r1, ip, r1, r2
 800931a:	e7f0      	b.n	80092fe <_svfiprintf_r+0x192>
 800931c:	ab03      	add	r3, sp, #12
 800931e:	9300      	str	r3, [sp, #0]
 8009320:	462a      	mov	r2, r5
 8009322:	4638      	mov	r0, r7
 8009324:	4b0e      	ldr	r3, [pc, #56]	@ (8009360 <_svfiprintf_r+0x1f4>)
 8009326:	a904      	add	r1, sp, #16
 8009328:	f7fc fc54 	bl	8005bd4 <_printf_float>
 800932c:	1c42      	adds	r2, r0, #1
 800932e:	4606      	mov	r6, r0
 8009330:	d1d6      	bne.n	80092e0 <_svfiprintf_r+0x174>
 8009332:	89ab      	ldrh	r3, [r5, #12]
 8009334:	065b      	lsls	r3, r3, #25
 8009336:	f53f af2d 	bmi.w	8009194 <_svfiprintf_r+0x28>
 800933a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800933c:	e72c      	b.n	8009198 <_svfiprintf_r+0x2c>
 800933e:	ab03      	add	r3, sp, #12
 8009340:	9300      	str	r3, [sp, #0]
 8009342:	462a      	mov	r2, r5
 8009344:	4638      	mov	r0, r7
 8009346:	4b06      	ldr	r3, [pc, #24]	@ (8009360 <_svfiprintf_r+0x1f4>)
 8009348:	a904      	add	r1, sp, #16
 800934a:	f7fc fee1 	bl	8006110 <_printf_i>
 800934e:	e7ed      	b.n	800932c <_svfiprintf_r+0x1c0>
 8009350:	0800af41 	.word	0x0800af41
 8009354:	0800af47 	.word	0x0800af47
 8009358:	0800af4b 	.word	0x0800af4b
 800935c:	08005bd5 	.word	0x08005bd5
 8009360:	080090b5 	.word	0x080090b5

08009364 <_sungetc_r>:
 8009364:	b538      	push	{r3, r4, r5, lr}
 8009366:	1c4b      	adds	r3, r1, #1
 8009368:	4614      	mov	r4, r2
 800936a:	d103      	bne.n	8009374 <_sungetc_r+0x10>
 800936c:	f04f 35ff 	mov.w	r5, #4294967295
 8009370:	4628      	mov	r0, r5
 8009372:	bd38      	pop	{r3, r4, r5, pc}
 8009374:	8993      	ldrh	r3, [r2, #12]
 8009376:	b2cd      	uxtb	r5, r1
 8009378:	f023 0320 	bic.w	r3, r3, #32
 800937c:	8193      	strh	r3, [r2, #12]
 800937e:	6853      	ldr	r3, [r2, #4]
 8009380:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8009382:	b18a      	cbz	r2, 80093a8 <_sungetc_r+0x44>
 8009384:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8009386:	429a      	cmp	r2, r3
 8009388:	dd08      	ble.n	800939c <_sungetc_r+0x38>
 800938a:	6823      	ldr	r3, [r4, #0]
 800938c:	1e5a      	subs	r2, r3, #1
 800938e:	6022      	str	r2, [r4, #0]
 8009390:	f803 5c01 	strb.w	r5, [r3, #-1]
 8009394:	6863      	ldr	r3, [r4, #4]
 8009396:	3301      	adds	r3, #1
 8009398:	6063      	str	r3, [r4, #4]
 800939a:	e7e9      	b.n	8009370 <_sungetc_r+0xc>
 800939c:	4621      	mov	r1, r4
 800939e:	f000 fbd8 	bl	8009b52 <__submore>
 80093a2:	2800      	cmp	r0, #0
 80093a4:	d0f1      	beq.n	800938a <_sungetc_r+0x26>
 80093a6:	e7e1      	b.n	800936c <_sungetc_r+0x8>
 80093a8:	6921      	ldr	r1, [r4, #16]
 80093aa:	6822      	ldr	r2, [r4, #0]
 80093ac:	b141      	cbz	r1, 80093c0 <_sungetc_r+0x5c>
 80093ae:	4291      	cmp	r1, r2
 80093b0:	d206      	bcs.n	80093c0 <_sungetc_r+0x5c>
 80093b2:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 80093b6:	42a9      	cmp	r1, r5
 80093b8:	d102      	bne.n	80093c0 <_sungetc_r+0x5c>
 80093ba:	3a01      	subs	r2, #1
 80093bc:	6022      	str	r2, [r4, #0]
 80093be:	e7ea      	b.n	8009396 <_sungetc_r+0x32>
 80093c0:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 80093c4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80093c8:	6363      	str	r3, [r4, #52]	@ 0x34
 80093ca:	2303      	movs	r3, #3
 80093cc:	63a3      	str	r3, [r4, #56]	@ 0x38
 80093ce:	4623      	mov	r3, r4
 80093d0:	f803 5f46 	strb.w	r5, [r3, #70]!
 80093d4:	6023      	str	r3, [r4, #0]
 80093d6:	2301      	movs	r3, #1
 80093d8:	e7de      	b.n	8009398 <_sungetc_r+0x34>

080093da <__ssrefill_r>:
 80093da:	b510      	push	{r4, lr}
 80093dc:	460c      	mov	r4, r1
 80093de:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 80093e0:	b169      	cbz	r1, 80093fe <__ssrefill_r+0x24>
 80093e2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80093e6:	4299      	cmp	r1, r3
 80093e8:	d001      	beq.n	80093ee <__ssrefill_r+0x14>
 80093ea:	f7fe fa41 	bl	8007870 <_free_r>
 80093ee:	2000      	movs	r0, #0
 80093f0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80093f2:	6360      	str	r0, [r4, #52]	@ 0x34
 80093f4:	6063      	str	r3, [r4, #4]
 80093f6:	b113      	cbz	r3, 80093fe <__ssrefill_r+0x24>
 80093f8:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80093fa:	6023      	str	r3, [r4, #0]
 80093fc:	bd10      	pop	{r4, pc}
 80093fe:	6923      	ldr	r3, [r4, #16]
 8009400:	f04f 30ff 	mov.w	r0, #4294967295
 8009404:	6023      	str	r3, [r4, #0]
 8009406:	2300      	movs	r3, #0
 8009408:	6063      	str	r3, [r4, #4]
 800940a:	89a3      	ldrh	r3, [r4, #12]
 800940c:	f043 0320 	orr.w	r3, r3, #32
 8009410:	81a3      	strh	r3, [r4, #12]
 8009412:	e7f3      	b.n	80093fc <__ssrefill_r+0x22>

08009414 <__ssvfiscanf_r>:
 8009414:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009418:	460c      	mov	r4, r1
 800941a:	2100      	movs	r1, #0
 800941c:	4606      	mov	r6, r0
 800941e:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 8009422:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 8009426:	49aa      	ldr	r1, [pc, #680]	@ (80096d0 <__ssvfiscanf_r+0x2bc>)
 8009428:	f10d 0804 	add.w	r8, sp, #4
 800942c:	91a0      	str	r1, [sp, #640]	@ 0x280
 800942e:	49a9      	ldr	r1, [pc, #676]	@ (80096d4 <__ssvfiscanf_r+0x2c0>)
 8009430:	4fa9      	ldr	r7, [pc, #676]	@ (80096d8 <__ssvfiscanf_r+0x2c4>)
 8009432:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 8009436:	91a1      	str	r1, [sp, #644]	@ 0x284
 8009438:	9300      	str	r3, [sp, #0]
 800943a:	7813      	ldrb	r3, [r2, #0]
 800943c:	2b00      	cmp	r3, #0
 800943e:	f000 8159 	beq.w	80096f4 <__ssvfiscanf_r+0x2e0>
 8009442:	5cf9      	ldrb	r1, [r7, r3]
 8009444:	1c55      	adds	r5, r2, #1
 8009446:	f011 0108 	ands.w	r1, r1, #8
 800944a:	d019      	beq.n	8009480 <__ssvfiscanf_r+0x6c>
 800944c:	6863      	ldr	r3, [r4, #4]
 800944e:	2b00      	cmp	r3, #0
 8009450:	dd0f      	ble.n	8009472 <__ssvfiscanf_r+0x5e>
 8009452:	6823      	ldr	r3, [r4, #0]
 8009454:	781a      	ldrb	r2, [r3, #0]
 8009456:	5cba      	ldrb	r2, [r7, r2]
 8009458:	0712      	lsls	r2, r2, #28
 800945a:	d401      	bmi.n	8009460 <__ssvfiscanf_r+0x4c>
 800945c:	462a      	mov	r2, r5
 800945e:	e7ec      	b.n	800943a <__ssvfiscanf_r+0x26>
 8009460:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8009462:	3301      	adds	r3, #1
 8009464:	3201      	adds	r2, #1
 8009466:	9245      	str	r2, [sp, #276]	@ 0x114
 8009468:	6862      	ldr	r2, [r4, #4]
 800946a:	6023      	str	r3, [r4, #0]
 800946c:	3a01      	subs	r2, #1
 800946e:	6062      	str	r2, [r4, #4]
 8009470:	e7ec      	b.n	800944c <__ssvfiscanf_r+0x38>
 8009472:	4621      	mov	r1, r4
 8009474:	4630      	mov	r0, r6
 8009476:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8009478:	4798      	blx	r3
 800947a:	2800      	cmp	r0, #0
 800947c:	d0e9      	beq.n	8009452 <__ssvfiscanf_r+0x3e>
 800947e:	e7ed      	b.n	800945c <__ssvfiscanf_r+0x48>
 8009480:	2b25      	cmp	r3, #37	@ 0x25
 8009482:	d012      	beq.n	80094aa <__ssvfiscanf_r+0x96>
 8009484:	4699      	mov	r9, r3
 8009486:	6863      	ldr	r3, [r4, #4]
 8009488:	2b00      	cmp	r3, #0
 800948a:	f340 8094 	ble.w	80095b6 <__ssvfiscanf_r+0x1a2>
 800948e:	6822      	ldr	r2, [r4, #0]
 8009490:	7813      	ldrb	r3, [r2, #0]
 8009492:	454b      	cmp	r3, r9
 8009494:	f040 812e 	bne.w	80096f4 <__ssvfiscanf_r+0x2e0>
 8009498:	6863      	ldr	r3, [r4, #4]
 800949a:	3201      	adds	r2, #1
 800949c:	3b01      	subs	r3, #1
 800949e:	6063      	str	r3, [r4, #4]
 80094a0:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 80094a2:	6022      	str	r2, [r4, #0]
 80094a4:	3301      	adds	r3, #1
 80094a6:	9345      	str	r3, [sp, #276]	@ 0x114
 80094a8:	e7d8      	b.n	800945c <__ssvfiscanf_r+0x48>
 80094aa:	9141      	str	r1, [sp, #260]	@ 0x104
 80094ac:	9143      	str	r1, [sp, #268]	@ 0x10c
 80094ae:	7853      	ldrb	r3, [r2, #1]
 80094b0:	2b2a      	cmp	r3, #42	@ 0x2a
 80094b2:	bf04      	itt	eq
 80094b4:	2310      	moveq	r3, #16
 80094b6:	1c95      	addeq	r5, r2, #2
 80094b8:	f04f 020a 	mov.w	r2, #10
 80094bc:	bf08      	it	eq
 80094be:	9341      	streq	r3, [sp, #260]	@ 0x104
 80094c0:	46a9      	mov	r9, r5
 80094c2:	f819 1b01 	ldrb.w	r1, [r9], #1
 80094c6:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 80094ca:	2b09      	cmp	r3, #9
 80094cc:	d91e      	bls.n	800950c <__ssvfiscanf_r+0xf8>
 80094ce:	f8df a20c 	ldr.w	sl, [pc, #524]	@ 80096dc <__ssvfiscanf_r+0x2c8>
 80094d2:	2203      	movs	r2, #3
 80094d4:	4650      	mov	r0, sl
 80094d6:	f7fd fb66 	bl	8006ba6 <memchr>
 80094da:	b138      	cbz	r0, 80094ec <__ssvfiscanf_r+0xd8>
 80094dc:	2301      	movs	r3, #1
 80094de:	464d      	mov	r5, r9
 80094e0:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80094e2:	eba0 000a 	sub.w	r0, r0, sl
 80094e6:	4083      	lsls	r3, r0
 80094e8:	4313      	orrs	r3, r2
 80094ea:	9341      	str	r3, [sp, #260]	@ 0x104
 80094ec:	f815 3b01 	ldrb.w	r3, [r5], #1
 80094f0:	2b78      	cmp	r3, #120	@ 0x78
 80094f2:	d806      	bhi.n	8009502 <__ssvfiscanf_r+0xee>
 80094f4:	2b57      	cmp	r3, #87	@ 0x57
 80094f6:	d810      	bhi.n	800951a <__ssvfiscanf_r+0x106>
 80094f8:	2b25      	cmp	r3, #37	@ 0x25
 80094fa:	d0c3      	beq.n	8009484 <__ssvfiscanf_r+0x70>
 80094fc:	d856      	bhi.n	80095ac <__ssvfiscanf_r+0x198>
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d064      	beq.n	80095cc <__ssvfiscanf_r+0x1b8>
 8009502:	2303      	movs	r3, #3
 8009504:	9347      	str	r3, [sp, #284]	@ 0x11c
 8009506:	230a      	movs	r3, #10
 8009508:	9342      	str	r3, [sp, #264]	@ 0x108
 800950a:	e077      	b.n	80095fc <__ssvfiscanf_r+0x1e8>
 800950c:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 800950e:	464d      	mov	r5, r9
 8009510:	fb02 1103 	mla	r1, r2, r3, r1
 8009514:	3930      	subs	r1, #48	@ 0x30
 8009516:	9143      	str	r1, [sp, #268]	@ 0x10c
 8009518:	e7d2      	b.n	80094c0 <__ssvfiscanf_r+0xac>
 800951a:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 800951e:	2a20      	cmp	r2, #32
 8009520:	d8ef      	bhi.n	8009502 <__ssvfiscanf_r+0xee>
 8009522:	a101      	add	r1, pc, #4	@ (adr r1, 8009528 <__ssvfiscanf_r+0x114>)
 8009524:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8009528:	080095db 	.word	0x080095db
 800952c:	08009503 	.word	0x08009503
 8009530:	08009503 	.word	0x08009503
 8009534:	08009635 	.word	0x08009635
 8009538:	08009503 	.word	0x08009503
 800953c:	08009503 	.word	0x08009503
 8009540:	08009503 	.word	0x08009503
 8009544:	08009503 	.word	0x08009503
 8009548:	08009503 	.word	0x08009503
 800954c:	08009503 	.word	0x08009503
 8009550:	08009503 	.word	0x08009503
 8009554:	0800964b 	.word	0x0800964b
 8009558:	08009631 	.word	0x08009631
 800955c:	080095b3 	.word	0x080095b3
 8009560:	080095b3 	.word	0x080095b3
 8009564:	080095b3 	.word	0x080095b3
 8009568:	08009503 	.word	0x08009503
 800956c:	080095ed 	.word	0x080095ed
 8009570:	08009503 	.word	0x08009503
 8009574:	08009503 	.word	0x08009503
 8009578:	08009503 	.word	0x08009503
 800957c:	08009503 	.word	0x08009503
 8009580:	0800965b 	.word	0x0800965b
 8009584:	080095f5 	.word	0x080095f5
 8009588:	080095d3 	.word	0x080095d3
 800958c:	08009503 	.word	0x08009503
 8009590:	08009503 	.word	0x08009503
 8009594:	08009657 	.word	0x08009657
 8009598:	08009503 	.word	0x08009503
 800959c:	08009631 	.word	0x08009631
 80095a0:	08009503 	.word	0x08009503
 80095a4:	08009503 	.word	0x08009503
 80095a8:	080095db 	.word	0x080095db
 80095ac:	3b45      	subs	r3, #69	@ 0x45
 80095ae:	2b02      	cmp	r3, #2
 80095b0:	d8a7      	bhi.n	8009502 <__ssvfiscanf_r+0xee>
 80095b2:	2305      	movs	r3, #5
 80095b4:	e021      	b.n	80095fa <__ssvfiscanf_r+0x1e6>
 80095b6:	4621      	mov	r1, r4
 80095b8:	4630      	mov	r0, r6
 80095ba:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80095bc:	4798      	blx	r3
 80095be:	2800      	cmp	r0, #0
 80095c0:	f43f af65 	beq.w	800948e <__ssvfiscanf_r+0x7a>
 80095c4:	9844      	ldr	r0, [sp, #272]	@ 0x110
 80095c6:	2800      	cmp	r0, #0
 80095c8:	f040 808c 	bne.w	80096e4 <__ssvfiscanf_r+0x2d0>
 80095cc:	f04f 30ff 	mov.w	r0, #4294967295
 80095d0:	e08c      	b.n	80096ec <__ssvfiscanf_r+0x2d8>
 80095d2:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80095d4:	f042 0220 	orr.w	r2, r2, #32
 80095d8:	9241      	str	r2, [sp, #260]	@ 0x104
 80095da:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80095dc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80095e0:	9241      	str	r2, [sp, #260]	@ 0x104
 80095e2:	2210      	movs	r2, #16
 80095e4:	2b6e      	cmp	r3, #110	@ 0x6e
 80095e6:	9242      	str	r2, [sp, #264]	@ 0x108
 80095e8:	d902      	bls.n	80095f0 <__ssvfiscanf_r+0x1dc>
 80095ea:	e005      	b.n	80095f8 <__ssvfiscanf_r+0x1e4>
 80095ec:	2300      	movs	r3, #0
 80095ee:	9342      	str	r3, [sp, #264]	@ 0x108
 80095f0:	2303      	movs	r3, #3
 80095f2:	e002      	b.n	80095fa <__ssvfiscanf_r+0x1e6>
 80095f4:	2308      	movs	r3, #8
 80095f6:	9342      	str	r3, [sp, #264]	@ 0x108
 80095f8:	2304      	movs	r3, #4
 80095fa:	9347      	str	r3, [sp, #284]	@ 0x11c
 80095fc:	6863      	ldr	r3, [r4, #4]
 80095fe:	2b00      	cmp	r3, #0
 8009600:	dd39      	ble.n	8009676 <__ssvfiscanf_r+0x262>
 8009602:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8009604:	0659      	lsls	r1, r3, #25
 8009606:	d404      	bmi.n	8009612 <__ssvfiscanf_r+0x1fe>
 8009608:	6823      	ldr	r3, [r4, #0]
 800960a:	781a      	ldrb	r2, [r3, #0]
 800960c:	5cba      	ldrb	r2, [r7, r2]
 800960e:	0712      	lsls	r2, r2, #28
 8009610:	d438      	bmi.n	8009684 <__ssvfiscanf_r+0x270>
 8009612:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 8009614:	2b02      	cmp	r3, #2
 8009616:	dc47      	bgt.n	80096a8 <__ssvfiscanf_r+0x294>
 8009618:	466b      	mov	r3, sp
 800961a:	4622      	mov	r2, r4
 800961c:	4630      	mov	r0, r6
 800961e:	a941      	add	r1, sp, #260	@ 0x104
 8009620:	f000 f86a 	bl	80096f8 <_scanf_chars>
 8009624:	2801      	cmp	r0, #1
 8009626:	d065      	beq.n	80096f4 <__ssvfiscanf_r+0x2e0>
 8009628:	2802      	cmp	r0, #2
 800962a:	f47f af17 	bne.w	800945c <__ssvfiscanf_r+0x48>
 800962e:	e7c9      	b.n	80095c4 <__ssvfiscanf_r+0x1b0>
 8009630:	220a      	movs	r2, #10
 8009632:	e7d7      	b.n	80095e4 <__ssvfiscanf_r+0x1d0>
 8009634:	4629      	mov	r1, r5
 8009636:	4640      	mov	r0, r8
 8009638:	f000 fa52 	bl	8009ae0 <__sccl>
 800963c:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800963e:	4605      	mov	r5, r0
 8009640:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009644:	9341      	str	r3, [sp, #260]	@ 0x104
 8009646:	2301      	movs	r3, #1
 8009648:	e7d7      	b.n	80095fa <__ssvfiscanf_r+0x1e6>
 800964a:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800964c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009650:	9341      	str	r3, [sp, #260]	@ 0x104
 8009652:	2300      	movs	r3, #0
 8009654:	e7d1      	b.n	80095fa <__ssvfiscanf_r+0x1e6>
 8009656:	2302      	movs	r3, #2
 8009658:	e7cf      	b.n	80095fa <__ssvfiscanf_r+0x1e6>
 800965a:	9841      	ldr	r0, [sp, #260]	@ 0x104
 800965c:	06c3      	lsls	r3, r0, #27
 800965e:	f53f aefd 	bmi.w	800945c <__ssvfiscanf_r+0x48>
 8009662:	9b00      	ldr	r3, [sp, #0]
 8009664:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8009666:	1d19      	adds	r1, r3, #4
 8009668:	9100      	str	r1, [sp, #0]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	07c0      	lsls	r0, r0, #31
 800966e:	bf4c      	ite	mi
 8009670:	801a      	strhmi	r2, [r3, #0]
 8009672:	601a      	strpl	r2, [r3, #0]
 8009674:	e6f2      	b.n	800945c <__ssvfiscanf_r+0x48>
 8009676:	4621      	mov	r1, r4
 8009678:	4630      	mov	r0, r6
 800967a:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800967c:	4798      	blx	r3
 800967e:	2800      	cmp	r0, #0
 8009680:	d0bf      	beq.n	8009602 <__ssvfiscanf_r+0x1ee>
 8009682:	e79f      	b.n	80095c4 <__ssvfiscanf_r+0x1b0>
 8009684:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8009686:	3201      	adds	r2, #1
 8009688:	9245      	str	r2, [sp, #276]	@ 0x114
 800968a:	6862      	ldr	r2, [r4, #4]
 800968c:	3a01      	subs	r2, #1
 800968e:	2a00      	cmp	r2, #0
 8009690:	6062      	str	r2, [r4, #4]
 8009692:	dd02      	ble.n	800969a <__ssvfiscanf_r+0x286>
 8009694:	3301      	adds	r3, #1
 8009696:	6023      	str	r3, [r4, #0]
 8009698:	e7b6      	b.n	8009608 <__ssvfiscanf_r+0x1f4>
 800969a:	4621      	mov	r1, r4
 800969c:	4630      	mov	r0, r6
 800969e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80096a0:	4798      	blx	r3
 80096a2:	2800      	cmp	r0, #0
 80096a4:	d0b0      	beq.n	8009608 <__ssvfiscanf_r+0x1f4>
 80096a6:	e78d      	b.n	80095c4 <__ssvfiscanf_r+0x1b0>
 80096a8:	2b04      	cmp	r3, #4
 80096aa:	dc06      	bgt.n	80096ba <__ssvfiscanf_r+0x2a6>
 80096ac:	466b      	mov	r3, sp
 80096ae:	4622      	mov	r2, r4
 80096b0:	4630      	mov	r0, r6
 80096b2:	a941      	add	r1, sp, #260	@ 0x104
 80096b4:	f000 f87a 	bl	80097ac <_scanf_i>
 80096b8:	e7b4      	b.n	8009624 <__ssvfiscanf_r+0x210>
 80096ba:	4b09      	ldr	r3, [pc, #36]	@ (80096e0 <__ssvfiscanf_r+0x2cc>)
 80096bc:	2b00      	cmp	r3, #0
 80096be:	f43f aecd 	beq.w	800945c <__ssvfiscanf_r+0x48>
 80096c2:	466b      	mov	r3, sp
 80096c4:	4622      	mov	r2, r4
 80096c6:	4630      	mov	r0, r6
 80096c8:	a941      	add	r1, sp, #260	@ 0x104
 80096ca:	f7fc fe41 	bl	8006350 <_scanf_float>
 80096ce:	e7a9      	b.n	8009624 <__ssvfiscanf_r+0x210>
 80096d0:	08009365 	.word	0x08009365
 80096d4:	080093db 	.word	0x080093db
 80096d8:	0800ae41 	.word	0x0800ae41
 80096dc:	0800af47 	.word	0x0800af47
 80096e0:	08006351 	.word	0x08006351
 80096e4:	89a3      	ldrh	r3, [r4, #12]
 80096e6:	065b      	lsls	r3, r3, #25
 80096e8:	f53f af70 	bmi.w	80095cc <__ssvfiscanf_r+0x1b8>
 80096ec:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 80096f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80096f4:	9844      	ldr	r0, [sp, #272]	@ 0x110
 80096f6:	e7f9      	b.n	80096ec <__ssvfiscanf_r+0x2d8>

080096f8 <_scanf_chars>:
 80096f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80096fc:	4615      	mov	r5, r2
 80096fe:	688a      	ldr	r2, [r1, #8]
 8009700:	4680      	mov	r8, r0
 8009702:	460c      	mov	r4, r1
 8009704:	b932      	cbnz	r2, 8009714 <_scanf_chars+0x1c>
 8009706:	698a      	ldr	r2, [r1, #24]
 8009708:	2a00      	cmp	r2, #0
 800970a:	bf14      	ite	ne
 800970c:	f04f 32ff 	movne.w	r2, #4294967295
 8009710:	2201      	moveq	r2, #1
 8009712:	608a      	str	r2, [r1, #8]
 8009714:	2700      	movs	r7, #0
 8009716:	6822      	ldr	r2, [r4, #0]
 8009718:	f8df 908c 	ldr.w	r9, [pc, #140]	@ 80097a8 <_scanf_chars+0xb0>
 800971c:	06d1      	lsls	r1, r2, #27
 800971e:	bf5f      	itttt	pl
 8009720:	681a      	ldrpl	r2, [r3, #0]
 8009722:	1d11      	addpl	r1, r2, #4
 8009724:	6019      	strpl	r1, [r3, #0]
 8009726:	6816      	ldrpl	r6, [r2, #0]
 8009728:	69a0      	ldr	r0, [r4, #24]
 800972a:	b188      	cbz	r0, 8009750 <_scanf_chars+0x58>
 800972c:	2801      	cmp	r0, #1
 800972e:	d107      	bne.n	8009740 <_scanf_chars+0x48>
 8009730:	682b      	ldr	r3, [r5, #0]
 8009732:	781a      	ldrb	r2, [r3, #0]
 8009734:	6963      	ldr	r3, [r4, #20]
 8009736:	5c9b      	ldrb	r3, [r3, r2]
 8009738:	b953      	cbnz	r3, 8009750 <_scanf_chars+0x58>
 800973a:	2f00      	cmp	r7, #0
 800973c:	d031      	beq.n	80097a2 <_scanf_chars+0xaa>
 800973e:	e022      	b.n	8009786 <_scanf_chars+0x8e>
 8009740:	2802      	cmp	r0, #2
 8009742:	d120      	bne.n	8009786 <_scanf_chars+0x8e>
 8009744:	682b      	ldr	r3, [r5, #0]
 8009746:	781b      	ldrb	r3, [r3, #0]
 8009748:	f819 3003 	ldrb.w	r3, [r9, r3]
 800974c:	071b      	lsls	r3, r3, #28
 800974e:	d41a      	bmi.n	8009786 <_scanf_chars+0x8e>
 8009750:	6823      	ldr	r3, [r4, #0]
 8009752:	3701      	adds	r7, #1
 8009754:	06da      	lsls	r2, r3, #27
 8009756:	bf5e      	ittt	pl
 8009758:	682b      	ldrpl	r3, [r5, #0]
 800975a:	781b      	ldrbpl	r3, [r3, #0]
 800975c:	f806 3b01 	strbpl.w	r3, [r6], #1
 8009760:	682a      	ldr	r2, [r5, #0]
 8009762:	686b      	ldr	r3, [r5, #4]
 8009764:	3201      	adds	r2, #1
 8009766:	602a      	str	r2, [r5, #0]
 8009768:	68a2      	ldr	r2, [r4, #8]
 800976a:	3b01      	subs	r3, #1
 800976c:	3a01      	subs	r2, #1
 800976e:	606b      	str	r3, [r5, #4]
 8009770:	60a2      	str	r2, [r4, #8]
 8009772:	b142      	cbz	r2, 8009786 <_scanf_chars+0x8e>
 8009774:	2b00      	cmp	r3, #0
 8009776:	dcd7      	bgt.n	8009728 <_scanf_chars+0x30>
 8009778:	4629      	mov	r1, r5
 800977a:	4640      	mov	r0, r8
 800977c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8009780:	4798      	blx	r3
 8009782:	2800      	cmp	r0, #0
 8009784:	d0d0      	beq.n	8009728 <_scanf_chars+0x30>
 8009786:	6823      	ldr	r3, [r4, #0]
 8009788:	f013 0310 	ands.w	r3, r3, #16
 800978c:	d105      	bne.n	800979a <_scanf_chars+0xa2>
 800978e:	68e2      	ldr	r2, [r4, #12]
 8009790:	3201      	adds	r2, #1
 8009792:	60e2      	str	r2, [r4, #12]
 8009794:	69a2      	ldr	r2, [r4, #24]
 8009796:	b102      	cbz	r2, 800979a <_scanf_chars+0xa2>
 8009798:	7033      	strb	r3, [r6, #0]
 800979a:	2000      	movs	r0, #0
 800979c:	6923      	ldr	r3, [r4, #16]
 800979e:	443b      	add	r3, r7
 80097a0:	6123      	str	r3, [r4, #16]
 80097a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80097a6:	bf00      	nop
 80097a8:	0800ae41 	.word	0x0800ae41

080097ac <_scanf_i>:
 80097ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097b0:	460c      	mov	r4, r1
 80097b2:	4698      	mov	r8, r3
 80097b4:	4b72      	ldr	r3, [pc, #456]	@ (8009980 <_scanf_i+0x1d4>)
 80097b6:	b087      	sub	sp, #28
 80097b8:	4682      	mov	sl, r0
 80097ba:	4616      	mov	r6, r2
 80097bc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80097c0:	ab03      	add	r3, sp, #12
 80097c2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80097c6:	4b6f      	ldr	r3, [pc, #444]	@ (8009984 <_scanf_i+0x1d8>)
 80097c8:	69a1      	ldr	r1, [r4, #24]
 80097ca:	4a6f      	ldr	r2, [pc, #444]	@ (8009988 <_scanf_i+0x1dc>)
 80097cc:	4627      	mov	r7, r4
 80097ce:	2903      	cmp	r1, #3
 80097d0:	bf08      	it	eq
 80097d2:	461a      	moveq	r2, r3
 80097d4:	68a3      	ldr	r3, [r4, #8]
 80097d6:	9201      	str	r2, [sp, #4]
 80097d8:	1e5a      	subs	r2, r3, #1
 80097da:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80097de:	bf81      	itttt	hi
 80097e0:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80097e4:	eb03 0905 	addhi.w	r9, r3, r5
 80097e8:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80097ec:	60a3      	strhi	r3, [r4, #8]
 80097ee:	f857 3b1c 	ldr.w	r3, [r7], #28
 80097f2:	bf98      	it	ls
 80097f4:	f04f 0900 	movls.w	r9, #0
 80097f8:	463d      	mov	r5, r7
 80097fa:	f04f 0b00 	mov.w	fp, #0
 80097fe:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 8009802:	6023      	str	r3, [r4, #0]
 8009804:	6831      	ldr	r1, [r6, #0]
 8009806:	ab03      	add	r3, sp, #12
 8009808:	2202      	movs	r2, #2
 800980a:	7809      	ldrb	r1, [r1, #0]
 800980c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8009810:	f7fd f9c9 	bl	8006ba6 <memchr>
 8009814:	b328      	cbz	r0, 8009862 <_scanf_i+0xb6>
 8009816:	f1bb 0f01 	cmp.w	fp, #1
 800981a:	d159      	bne.n	80098d0 <_scanf_i+0x124>
 800981c:	6862      	ldr	r2, [r4, #4]
 800981e:	b92a      	cbnz	r2, 800982c <_scanf_i+0x80>
 8009820:	2108      	movs	r1, #8
 8009822:	6822      	ldr	r2, [r4, #0]
 8009824:	6061      	str	r1, [r4, #4]
 8009826:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800982a:	6022      	str	r2, [r4, #0]
 800982c:	6822      	ldr	r2, [r4, #0]
 800982e:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 8009832:	6022      	str	r2, [r4, #0]
 8009834:	68a2      	ldr	r2, [r4, #8]
 8009836:	1e51      	subs	r1, r2, #1
 8009838:	60a1      	str	r1, [r4, #8]
 800983a:	b192      	cbz	r2, 8009862 <_scanf_i+0xb6>
 800983c:	6832      	ldr	r2, [r6, #0]
 800983e:	1c51      	adds	r1, r2, #1
 8009840:	6031      	str	r1, [r6, #0]
 8009842:	7812      	ldrb	r2, [r2, #0]
 8009844:	f805 2b01 	strb.w	r2, [r5], #1
 8009848:	6872      	ldr	r2, [r6, #4]
 800984a:	3a01      	subs	r2, #1
 800984c:	2a00      	cmp	r2, #0
 800984e:	6072      	str	r2, [r6, #4]
 8009850:	dc07      	bgt.n	8009862 <_scanf_i+0xb6>
 8009852:	4631      	mov	r1, r6
 8009854:	4650      	mov	r0, sl
 8009856:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 800985a:	4790      	blx	r2
 800985c:	2800      	cmp	r0, #0
 800985e:	f040 8085 	bne.w	800996c <_scanf_i+0x1c0>
 8009862:	f10b 0b01 	add.w	fp, fp, #1
 8009866:	f1bb 0f03 	cmp.w	fp, #3
 800986a:	d1cb      	bne.n	8009804 <_scanf_i+0x58>
 800986c:	6863      	ldr	r3, [r4, #4]
 800986e:	b90b      	cbnz	r3, 8009874 <_scanf_i+0xc8>
 8009870:	230a      	movs	r3, #10
 8009872:	6063      	str	r3, [r4, #4]
 8009874:	6863      	ldr	r3, [r4, #4]
 8009876:	4945      	ldr	r1, [pc, #276]	@ (800998c <_scanf_i+0x1e0>)
 8009878:	6960      	ldr	r0, [r4, #20]
 800987a:	1ac9      	subs	r1, r1, r3
 800987c:	f000 f930 	bl	8009ae0 <__sccl>
 8009880:	f04f 0b00 	mov.w	fp, #0
 8009884:	68a3      	ldr	r3, [r4, #8]
 8009886:	6822      	ldr	r2, [r4, #0]
 8009888:	2b00      	cmp	r3, #0
 800988a:	d03d      	beq.n	8009908 <_scanf_i+0x15c>
 800988c:	6831      	ldr	r1, [r6, #0]
 800988e:	6960      	ldr	r0, [r4, #20]
 8009890:	f891 c000 	ldrb.w	ip, [r1]
 8009894:	f810 000c 	ldrb.w	r0, [r0, ip]
 8009898:	2800      	cmp	r0, #0
 800989a:	d035      	beq.n	8009908 <_scanf_i+0x15c>
 800989c:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 80098a0:	d124      	bne.n	80098ec <_scanf_i+0x140>
 80098a2:	0510      	lsls	r0, r2, #20
 80098a4:	d522      	bpl.n	80098ec <_scanf_i+0x140>
 80098a6:	f10b 0b01 	add.w	fp, fp, #1
 80098aa:	f1b9 0f00 	cmp.w	r9, #0
 80098ae:	d003      	beq.n	80098b8 <_scanf_i+0x10c>
 80098b0:	3301      	adds	r3, #1
 80098b2:	f109 39ff 	add.w	r9, r9, #4294967295
 80098b6:	60a3      	str	r3, [r4, #8]
 80098b8:	6873      	ldr	r3, [r6, #4]
 80098ba:	3b01      	subs	r3, #1
 80098bc:	2b00      	cmp	r3, #0
 80098be:	6073      	str	r3, [r6, #4]
 80098c0:	dd1b      	ble.n	80098fa <_scanf_i+0x14e>
 80098c2:	6833      	ldr	r3, [r6, #0]
 80098c4:	3301      	adds	r3, #1
 80098c6:	6033      	str	r3, [r6, #0]
 80098c8:	68a3      	ldr	r3, [r4, #8]
 80098ca:	3b01      	subs	r3, #1
 80098cc:	60a3      	str	r3, [r4, #8]
 80098ce:	e7d9      	b.n	8009884 <_scanf_i+0xd8>
 80098d0:	f1bb 0f02 	cmp.w	fp, #2
 80098d4:	d1ae      	bne.n	8009834 <_scanf_i+0x88>
 80098d6:	6822      	ldr	r2, [r4, #0]
 80098d8:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 80098dc:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 80098e0:	d1bf      	bne.n	8009862 <_scanf_i+0xb6>
 80098e2:	2110      	movs	r1, #16
 80098e4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80098e8:	6061      	str	r1, [r4, #4]
 80098ea:	e7a2      	b.n	8009832 <_scanf_i+0x86>
 80098ec:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 80098f0:	6022      	str	r2, [r4, #0]
 80098f2:	780b      	ldrb	r3, [r1, #0]
 80098f4:	f805 3b01 	strb.w	r3, [r5], #1
 80098f8:	e7de      	b.n	80098b8 <_scanf_i+0x10c>
 80098fa:	4631      	mov	r1, r6
 80098fc:	4650      	mov	r0, sl
 80098fe:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8009902:	4798      	blx	r3
 8009904:	2800      	cmp	r0, #0
 8009906:	d0df      	beq.n	80098c8 <_scanf_i+0x11c>
 8009908:	6823      	ldr	r3, [r4, #0]
 800990a:	05d9      	lsls	r1, r3, #23
 800990c:	d50d      	bpl.n	800992a <_scanf_i+0x17e>
 800990e:	42bd      	cmp	r5, r7
 8009910:	d909      	bls.n	8009926 <_scanf_i+0x17a>
 8009912:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8009916:	4632      	mov	r2, r6
 8009918:	4650      	mov	r0, sl
 800991a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800991e:	f105 39ff 	add.w	r9, r5, #4294967295
 8009922:	4798      	blx	r3
 8009924:	464d      	mov	r5, r9
 8009926:	42bd      	cmp	r5, r7
 8009928:	d028      	beq.n	800997c <_scanf_i+0x1d0>
 800992a:	6822      	ldr	r2, [r4, #0]
 800992c:	f012 0210 	ands.w	r2, r2, #16
 8009930:	d113      	bne.n	800995a <_scanf_i+0x1ae>
 8009932:	702a      	strb	r2, [r5, #0]
 8009934:	4639      	mov	r1, r7
 8009936:	6863      	ldr	r3, [r4, #4]
 8009938:	4650      	mov	r0, sl
 800993a:	9e01      	ldr	r6, [sp, #4]
 800993c:	47b0      	blx	r6
 800993e:	f8d8 3000 	ldr.w	r3, [r8]
 8009942:	6821      	ldr	r1, [r4, #0]
 8009944:	1d1a      	adds	r2, r3, #4
 8009946:	f8c8 2000 	str.w	r2, [r8]
 800994a:	f011 0f20 	tst.w	r1, #32
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	d00f      	beq.n	8009972 <_scanf_i+0x1c6>
 8009952:	6018      	str	r0, [r3, #0]
 8009954:	68e3      	ldr	r3, [r4, #12]
 8009956:	3301      	adds	r3, #1
 8009958:	60e3      	str	r3, [r4, #12]
 800995a:	2000      	movs	r0, #0
 800995c:	6923      	ldr	r3, [r4, #16]
 800995e:	1bed      	subs	r5, r5, r7
 8009960:	445d      	add	r5, fp
 8009962:	442b      	add	r3, r5
 8009964:	6123      	str	r3, [r4, #16]
 8009966:	b007      	add	sp, #28
 8009968:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800996c:	f04f 0b00 	mov.w	fp, #0
 8009970:	e7ca      	b.n	8009908 <_scanf_i+0x15c>
 8009972:	07ca      	lsls	r2, r1, #31
 8009974:	bf4c      	ite	mi
 8009976:	8018      	strhmi	r0, [r3, #0]
 8009978:	6018      	strpl	r0, [r3, #0]
 800997a:	e7eb      	b.n	8009954 <_scanf_i+0x1a8>
 800997c:	2001      	movs	r0, #1
 800997e:	e7f2      	b.n	8009966 <_scanf_i+0x1ba>
 8009980:	0800ab94 	.word	0x0800ab94
 8009984:	080090b1 	.word	0x080090b1
 8009988:	0800a499 	.word	0x0800a499
 800998c:	0800af62 	.word	0x0800af62

08009990 <__sflush_r>:
 8009990:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009996:	0716      	lsls	r6, r2, #28
 8009998:	4605      	mov	r5, r0
 800999a:	460c      	mov	r4, r1
 800999c:	d454      	bmi.n	8009a48 <__sflush_r+0xb8>
 800999e:	684b      	ldr	r3, [r1, #4]
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	dc02      	bgt.n	80099aa <__sflush_r+0x1a>
 80099a4:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	dd48      	ble.n	8009a3c <__sflush_r+0xac>
 80099aa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80099ac:	2e00      	cmp	r6, #0
 80099ae:	d045      	beq.n	8009a3c <__sflush_r+0xac>
 80099b0:	2300      	movs	r3, #0
 80099b2:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80099b6:	682f      	ldr	r7, [r5, #0]
 80099b8:	6a21      	ldr	r1, [r4, #32]
 80099ba:	602b      	str	r3, [r5, #0]
 80099bc:	d030      	beq.n	8009a20 <__sflush_r+0x90>
 80099be:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80099c0:	89a3      	ldrh	r3, [r4, #12]
 80099c2:	0759      	lsls	r1, r3, #29
 80099c4:	d505      	bpl.n	80099d2 <__sflush_r+0x42>
 80099c6:	6863      	ldr	r3, [r4, #4]
 80099c8:	1ad2      	subs	r2, r2, r3
 80099ca:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80099cc:	b10b      	cbz	r3, 80099d2 <__sflush_r+0x42>
 80099ce:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80099d0:	1ad2      	subs	r2, r2, r3
 80099d2:	2300      	movs	r3, #0
 80099d4:	4628      	mov	r0, r5
 80099d6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80099d8:	6a21      	ldr	r1, [r4, #32]
 80099da:	47b0      	blx	r6
 80099dc:	1c43      	adds	r3, r0, #1
 80099de:	89a3      	ldrh	r3, [r4, #12]
 80099e0:	d106      	bne.n	80099f0 <__sflush_r+0x60>
 80099e2:	6829      	ldr	r1, [r5, #0]
 80099e4:	291d      	cmp	r1, #29
 80099e6:	d82b      	bhi.n	8009a40 <__sflush_r+0xb0>
 80099e8:	4a28      	ldr	r2, [pc, #160]	@ (8009a8c <__sflush_r+0xfc>)
 80099ea:	410a      	asrs	r2, r1
 80099ec:	07d6      	lsls	r6, r2, #31
 80099ee:	d427      	bmi.n	8009a40 <__sflush_r+0xb0>
 80099f0:	2200      	movs	r2, #0
 80099f2:	6062      	str	r2, [r4, #4]
 80099f4:	6922      	ldr	r2, [r4, #16]
 80099f6:	04d9      	lsls	r1, r3, #19
 80099f8:	6022      	str	r2, [r4, #0]
 80099fa:	d504      	bpl.n	8009a06 <__sflush_r+0x76>
 80099fc:	1c42      	adds	r2, r0, #1
 80099fe:	d101      	bne.n	8009a04 <__sflush_r+0x74>
 8009a00:	682b      	ldr	r3, [r5, #0]
 8009a02:	b903      	cbnz	r3, 8009a06 <__sflush_r+0x76>
 8009a04:	6560      	str	r0, [r4, #84]	@ 0x54
 8009a06:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009a08:	602f      	str	r7, [r5, #0]
 8009a0a:	b1b9      	cbz	r1, 8009a3c <__sflush_r+0xac>
 8009a0c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009a10:	4299      	cmp	r1, r3
 8009a12:	d002      	beq.n	8009a1a <__sflush_r+0x8a>
 8009a14:	4628      	mov	r0, r5
 8009a16:	f7fd ff2b 	bl	8007870 <_free_r>
 8009a1a:	2300      	movs	r3, #0
 8009a1c:	6363      	str	r3, [r4, #52]	@ 0x34
 8009a1e:	e00d      	b.n	8009a3c <__sflush_r+0xac>
 8009a20:	2301      	movs	r3, #1
 8009a22:	4628      	mov	r0, r5
 8009a24:	47b0      	blx	r6
 8009a26:	4602      	mov	r2, r0
 8009a28:	1c50      	adds	r0, r2, #1
 8009a2a:	d1c9      	bne.n	80099c0 <__sflush_r+0x30>
 8009a2c:	682b      	ldr	r3, [r5, #0]
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d0c6      	beq.n	80099c0 <__sflush_r+0x30>
 8009a32:	2b1d      	cmp	r3, #29
 8009a34:	d001      	beq.n	8009a3a <__sflush_r+0xaa>
 8009a36:	2b16      	cmp	r3, #22
 8009a38:	d11d      	bne.n	8009a76 <__sflush_r+0xe6>
 8009a3a:	602f      	str	r7, [r5, #0]
 8009a3c:	2000      	movs	r0, #0
 8009a3e:	e021      	b.n	8009a84 <__sflush_r+0xf4>
 8009a40:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009a44:	b21b      	sxth	r3, r3
 8009a46:	e01a      	b.n	8009a7e <__sflush_r+0xee>
 8009a48:	690f      	ldr	r7, [r1, #16]
 8009a4a:	2f00      	cmp	r7, #0
 8009a4c:	d0f6      	beq.n	8009a3c <__sflush_r+0xac>
 8009a4e:	0793      	lsls	r3, r2, #30
 8009a50:	bf18      	it	ne
 8009a52:	2300      	movne	r3, #0
 8009a54:	680e      	ldr	r6, [r1, #0]
 8009a56:	bf08      	it	eq
 8009a58:	694b      	ldreq	r3, [r1, #20]
 8009a5a:	1bf6      	subs	r6, r6, r7
 8009a5c:	600f      	str	r7, [r1, #0]
 8009a5e:	608b      	str	r3, [r1, #8]
 8009a60:	2e00      	cmp	r6, #0
 8009a62:	ddeb      	ble.n	8009a3c <__sflush_r+0xac>
 8009a64:	4633      	mov	r3, r6
 8009a66:	463a      	mov	r2, r7
 8009a68:	4628      	mov	r0, r5
 8009a6a:	6a21      	ldr	r1, [r4, #32]
 8009a6c:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8009a70:	47e0      	blx	ip
 8009a72:	2800      	cmp	r0, #0
 8009a74:	dc07      	bgt.n	8009a86 <__sflush_r+0xf6>
 8009a76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009a7a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009a7e:	f04f 30ff 	mov.w	r0, #4294967295
 8009a82:	81a3      	strh	r3, [r4, #12]
 8009a84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009a86:	4407      	add	r7, r0
 8009a88:	1a36      	subs	r6, r6, r0
 8009a8a:	e7e9      	b.n	8009a60 <__sflush_r+0xd0>
 8009a8c:	dfbffffe 	.word	0xdfbffffe

08009a90 <_fflush_r>:
 8009a90:	b538      	push	{r3, r4, r5, lr}
 8009a92:	690b      	ldr	r3, [r1, #16]
 8009a94:	4605      	mov	r5, r0
 8009a96:	460c      	mov	r4, r1
 8009a98:	b913      	cbnz	r3, 8009aa0 <_fflush_r+0x10>
 8009a9a:	2500      	movs	r5, #0
 8009a9c:	4628      	mov	r0, r5
 8009a9e:	bd38      	pop	{r3, r4, r5, pc}
 8009aa0:	b118      	cbz	r0, 8009aaa <_fflush_r+0x1a>
 8009aa2:	6a03      	ldr	r3, [r0, #32]
 8009aa4:	b90b      	cbnz	r3, 8009aaa <_fflush_r+0x1a>
 8009aa6:	f7fc feef 	bl	8006888 <__sinit>
 8009aaa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d0f3      	beq.n	8009a9a <_fflush_r+0xa>
 8009ab2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009ab4:	07d0      	lsls	r0, r2, #31
 8009ab6:	d404      	bmi.n	8009ac2 <_fflush_r+0x32>
 8009ab8:	0599      	lsls	r1, r3, #22
 8009aba:	d402      	bmi.n	8009ac2 <_fflush_r+0x32>
 8009abc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009abe:	f7fd f870 	bl	8006ba2 <__retarget_lock_acquire_recursive>
 8009ac2:	4628      	mov	r0, r5
 8009ac4:	4621      	mov	r1, r4
 8009ac6:	f7ff ff63 	bl	8009990 <__sflush_r>
 8009aca:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009acc:	4605      	mov	r5, r0
 8009ace:	07da      	lsls	r2, r3, #31
 8009ad0:	d4e4      	bmi.n	8009a9c <_fflush_r+0xc>
 8009ad2:	89a3      	ldrh	r3, [r4, #12]
 8009ad4:	059b      	lsls	r3, r3, #22
 8009ad6:	d4e1      	bmi.n	8009a9c <_fflush_r+0xc>
 8009ad8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009ada:	f7fd f863 	bl	8006ba4 <__retarget_lock_release_recursive>
 8009ade:	e7dd      	b.n	8009a9c <_fflush_r+0xc>

08009ae0 <__sccl>:
 8009ae0:	b570      	push	{r4, r5, r6, lr}
 8009ae2:	780b      	ldrb	r3, [r1, #0]
 8009ae4:	4604      	mov	r4, r0
 8009ae6:	2b5e      	cmp	r3, #94	@ 0x5e
 8009ae8:	bf0b      	itete	eq
 8009aea:	784b      	ldrbeq	r3, [r1, #1]
 8009aec:	1c4a      	addne	r2, r1, #1
 8009aee:	1c8a      	addeq	r2, r1, #2
 8009af0:	2100      	movne	r1, #0
 8009af2:	bf08      	it	eq
 8009af4:	2101      	moveq	r1, #1
 8009af6:	3801      	subs	r0, #1
 8009af8:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8009afc:	f800 1f01 	strb.w	r1, [r0, #1]!
 8009b00:	42a8      	cmp	r0, r5
 8009b02:	d1fb      	bne.n	8009afc <__sccl+0x1c>
 8009b04:	b90b      	cbnz	r3, 8009b0a <__sccl+0x2a>
 8009b06:	1e50      	subs	r0, r2, #1
 8009b08:	bd70      	pop	{r4, r5, r6, pc}
 8009b0a:	f081 0101 	eor.w	r1, r1, #1
 8009b0e:	4610      	mov	r0, r2
 8009b10:	54e1      	strb	r1, [r4, r3]
 8009b12:	4602      	mov	r2, r0
 8009b14:	f812 5b01 	ldrb.w	r5, [r2], #1
 8009b18:	2d2d      	cmp	r5, #45	@ 0x2d
 8009b1a:	d005      	beq.n	8009b28 <__sccl+0x48>
 8009b1c:	2d5d      	cmp	r5, #93	@ 0x5d
 8009b1e:	d016      	beq.n	8009b4e <__sccl+0x6e>
 8009b20:	2d00      	cmp	r5, #0
 8009b22:	d0f1      	beq.n	8009b08 <__sccl+0x28>
 8009b24:	462b      	mov	r3, r5
 8009b26:	e7f2      	b.n	8009b0e <__sccl+0x2e>
 8009b28:	7846      	ldrb	r6, [r0, #1]
 8009b2a:	2e5d      	cmp	r6, #93	@ 0x5d
 8009b2c:	d0fa      	beq.n	8009b24 <__sccl+0x44>
 8009b2e:	42b3      	cmp	r3, r6
 8009b30:	dcf8      	bgt.n	8009b24 <__sccl+0x44>
 8009b32:	461a      	mov	r2, r3
 8009b34:	3002      	adds	r0, #2
 8009b36:	3201      	adds	r2, #1
 8009b38:	4296      	cmp	r6, r2
 8009b3a:	54a1      	strb	r1, [r4, r2]
 8009b3c:	dcfb      	bgt.n	8009b36 <__sccl+0x56>
 8009b3e:	1af2      	subs	r2, r6, r3
 8009b40:	3a01      	subs	r2, #1
 8009b42:	42b3      	cmp	r3, r6
 8009b44:	bfa8      	it	ge
 8009b46:	2200      	movge	r2, #0
 8009b48:	1c5d      	adds	r5, r3, #1
 8009b4a:	18ab      	adds	r3, r5, r2
 8009b4c:	e7e1      	b.n	8009b12 <__sccl+0x32>
 8009b4e:	4610      	mov	r0, r2
 8009b50:	e7da      	b.n	8009b08 <__sccl+0x28>

08009b52 <__submore>:
 8009b52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b56:	460c      	mov	r4, r1
 8009b58:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8009b5a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009b5e:	4299      	cmp	r1, r3
 8009b60:	d11b      	bne.n	8009b9a <__submore+0x48>
 8009b62:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8009b66:	f7fd fef5 	bl	8007954 <_malloc_r>
 8009b6a:	b918      	cbnz	r0, 8009b74 <__submore+0x22>
 8009b6c:	f04f 30ff 	mov.w	r0, #4294967295
 8009b70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b74:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009b78:	63a3      	str	r3, [r4, #56]	@ 0x38
 8009b7a:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 8009b7e:	6360      	str	r0, [r4, #52]	@ 0x34
 8009b80:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 8009b84:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8009b88:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 8009b8c:	7043      	strb	r3, [r0, #1]
 8009b8e:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8009b92:	7003      	strb	r3, [r0, #0]
 8009b94:	6020      	str	r0, [r4, #0]
 8009b96:	2000      	movs	r0, #0
 8009b98:	e7ea      	b.n	8009b70 <__submore+0x1e>
 8009b9a:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8009b9c:	0077      	lsls	r7, r6, #1
 8009b9e:	463a      	mov	r2, r7
 8009ba0:	f000 fbdd 	bl	800a35e <_realloc_r>
 8009ba4:	4605      	mov	r5, r0
 8009ba6:	2800      	cmp	r0, #0
 8009ba8:	d0e0      	beq.n	8009b6c <__submore+0x1a>
 8009baa:	eb00 0806 	add.w	r8, r0, r6
 8009bae:	4601      	mov	r1, r0
 8009bb0:	4632      	mov	r2, r6
 8009bb2:	4640      	mov	r0, r8
 8009bb4:	f000 f842 	bl	8009c3c <memcpy>
 8009bb8:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 8009bbc:	f8c4 8000 	str.w	r8, [r4]
 8009bc0:	e7e9      	b.n	8009b96 <__submore+0x44>

08009bc2 <memmove>:
 8009bc2:	4288      	cmp	r0, r1
 8009bc4:	b510      	push	{r4, lr}
 8009bc6:	eb01 0402 	add.w	r4, r1, r2
 8009bca:	d902      	bls.n	8009bd2 <memmove+0x10>
 8009bcc:	4284      	cmp	r4, r0
 8009bce:	4623      	mov	r3, r4
 8009bd0:	d807      	bhi.n	8009be2 <memmove+0x20>
 8009bd2:	1e43      	subs	r3, r0, #1
 8009bd4:	42a1      	cmp	r1, r4
 8009bd6:	d008      	beq.n	8009bea <memmove+0x28>
 8009bd8:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009bdc:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009be0:	e7f8      	b.n	8009bd4 <memmove+0x12>
 8009be2:	4601      	mov	r1, r0
 8009be4:	4402      	add	r2, r0
 8009be6:	428a      	cmp	r2, r1
 8009be8:	d100      	bne.n	8009bec <memmove+0x2a>
 8009bea:	bd10      	pop	{r4, pc}
 8009bec:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009bf0:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009bf4:	e7f7      	b.n	8009be6 <memmove+0x24>

08009bf6 <strncmp>:
 8009bf6:	b510      	push	{r4, lr}
 8009bf8:	b16a      	cbz	r2, 8009c16 <strncmp+0x20>
 8009bfa:	3901      	subs	r1, #1
 8009bfc:	1884      	adds	r4, r0, r2
 8009bfe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009c02:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8009c06:	429a      	cmp	r2, r3
 8009c08:	d103      	bne.n	8009c12 <strncmp+0x1c>
 8009c0a:	42a0      	cmp	r0, r4
 8009c0c:	d001      	beq.n	8009c12 <strncmp+0x1c>
 8009c0e:	2a00      	cmp	r2, #0
 8009c10:	d1f5      	bne.n	8009bfe <strncmp+0x8>
 8009c12:	1ad0      	subs	r0, r2, r3
 8009c14:	bd10      	pop	{r4, pc}
 8009c16:	4610      	mov	r0, r2
 8009c18:	e7fc      	b.n	8009c14 <strncmp+0x1e>
	...

08009c1c <_sbrk_r>:
 8009c1c:	b538      	push	{r3, r4, r5, lr}
 8009c1e:	2300      	movs	r3, #0
 8009c20:	4d05      	ldr	r5, [pc, #20]	@ (8009c38 <_sbrk_r+0x1c>)
 8009c22:	4604      	mov	r4, r0
 8009c24:	4608      	mov	r0, r1
 8009c26:	602b      	str	r3, [r5, #0]
 8009c28:	f7f9 f908 	bl	8002e3c <_sbrk>
 8009c2c:	1c43      	adds	r3, r0, #1
 8009c2e:	d102      	bne.n	8009c36 <_sbrk_r+0x1a>
 8009c30:	682b      	ldr	r3, [r5, #0]
 8009c32:	b103      	cbz	r3, 8009c36 <_sbrk_r+0x1a>
 8009c34:	6023      	str	r3, [r4, #0]
 8009c36:	bd38      	pop	{r3, r4, r5, pc}
 8009c38:	20000a00 	.word	0x20000a00

08009c3c <memcpy>:
 8009c3c:	440a      	add	r2, r1
 8009c3e:	4291      	cmp	r1, r2
 8009c40:	f100 33ff 	add.w	r3, r0, #4294967295
 8009c44:	d100      	bne.n	8009c48 <memcpy+0xc>
 8009c46:	4770      	bx	lr
 8009c48:	b510      	push	{r4, lr}
 8009c4a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009c4e:	4291      	cmp	r1, r2
 8009c50:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009c54:	d1f9      	bne.n	8009c4a <memcpy+0xe>
 8009c56:	bd10      	pop	{r4, pc}

08009c58 <nan>:
 8009c58:	2000      	movs	r0, #0
 8009c5a:	4901      	ldr	r1, [pc, #4]	@ (8009c60 <nan+0x8>)
 8009c5c:	4770      	bx	lr
 8009c5e:	bf00      	nop
 8009c60:	7ff80000 	.word	0x7ff80000

08009c64 <__assert_func>:
 8009c64:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009c66:	4614      	mov	r4, r2
 8009c68:	461a      	mov	r2, r3
 8009c6a:	4b09      	ldr	r3, [pc, #36]	@ (8009c90 <__assert_func+0x2c>)
 8009c6c:	4605      	mov	r5, r0
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	68d8      	ldr	r0, [r3, #12]
 8009c72:	b954      	cbnz	r4, 8009c8a <__assert_func+0x26>
 8009c74:	4b07      	ldr	r3, [pc, #28]	@ (8009c94 <__assert_func+0x30>)
 8009c76:	461c      	mov	r4, r3
 8009c78:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009c7c:	9100      	str	r1, [sp, #0]
 8009c7e:	462b      	mov	r3, r5
 8009c80:	4905      	ldr	r1, [pc, #20]	@ (8009c98 <__assert_func+0x34>)
 8009c82:	f000 fc19 	bl	800a4b8 <fiprintf>
 8009c86:	f000 fc29 	bl	800a4dc <abort>
 8009c8a:	4b04      	ldr	r3, [pc, #16]	@ (8009c9c <__assert_func+0x38>)
 8009c8c:	e7f4      	b.n	8009c78 <__assert_func+0x14>
 8009c8e:	bf00      	nop
 8009c90:	2000001c 	.word	0x2000001c
 8009c94:	0800afb0 	.word	0x0800afb0
 8009c98:	0800af82 	.word	0x0800af82
 8009c9c:	0800af75 	.word	0x0800af75

08009ca0 <_calloc_r>:
 8009ca0:	b570      	push	{r4, r5, r6, lr}
 8009ca2:	fba1 5402 	umull	r5, r4, r1, r2
 8009ca6:	b93c      	cbnz	r4, 8009cb8 <_calloc_r+0x18>
 8009ca8:	4629      	mov	r1, r5
 8009caa:	f7fd fe53 	bl	8007954 <_malloc_r>
 8009cae:	4606      	mov	r6, r0
 8009cb0:	b928      	cbnz	r0, 8009cbe <_calloc_r+0x1e>
 8009cb2:	2600      	movs	r6, #0
 8009cb4:	4630      	mov	r0, r6
 8009cb6:	bd70      	pop	{r4, r5, r6, pc}
 8009cb8:	220c      	movs	r2, #12
 8009cba:	6002      	str	r2, [r0, #0]
 8009cbc:	e7f9      	b.n	8009cb2 <_calloc_r+0x12>
 8009cbe:	462a      	mov	r2, r5
 8009cc0:	4621      	mov	r1, r4
 8009cc2:	f7fc feda 	bl	8006a7a <memset>
 8009cc6:	e7f5      	b.n	8009cb4 <_calloc_r+0x14>

08009cc8 <rshift>:
 8009cc8:	6903      	ldr	r3, [r0, #16]
 8009cca:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009cce:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009cd2:	f100 0414 	add.w	r4, r0, #20
 8009cd6:	ea4f 1261 	mov.w	r2, r1, asr #5
 8009cda:	dd46      	ble.n	8009d6a <rshift+0xa2>
 8009cdc:	f011 011f 	ands.w	r1, r1, #31
 8009ce0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009ce4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009ce8:	d10c      	bne.n	8009d04 <rshift+0x3c>
 8009cea:	4629      	mov	r1, r5
 8009cec:	f100 0710 	add.w	r7, r0, #16
 8009cf0:	42b1      	cmp	r1, r6
 8009cf2:	d335      	bcc.n	8009d60 <rshift+0x98>
 8009cf4:	1a9b      	subs	r3, r3, r2
 8009cf6:	009b      	lsls	r3, r3, #2
 8009cf8:	1eea      	subs	r2, r5, #3
 8009cfa:	4296      	cmp	r6, r2
 8009cfc:	bf38      	it	cc
 8009cfe:	2300      	movcc	r3, #0
 8009d00:	4423      	add	r3, r4
 8009d02:	e015      	b.n	8009d30 <rshift+0x68>
 8009d04:	46a1      	mov	r9, r4
 8009d06:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009d0a:	f1c1 0820 	rsb	r8, r1, #32
 8009d0e:	40cf      	lsrs	r7, r1
 8009d10:	f105 0e04 	add.w	lr, r5, #4
 8009d14:	4576      	cmp	r6, lr
 8009d16:	46f4      	mov	ip, lr
 8009d18:	d816      	bhi.n	8009d48 <rshift+0x80>
 8009d1a:	1a9a      	subs	r2, r3, r2
 8009d1c:	0092      	lsls	r2, r2, #2
 8009d1e:	3a04      	subs	r2, #4
 8009d20:	3501      	adds	r5, #1
 8009d22:	42ae      	cmp	r6, r5
 8009d24:	bf38      	it	cc
 8009d26:	2200      	movcc	r2, #0
 8009d28:	18a3      	adds	r3, r4, r2
 8009d2a:	50a7      	str	r7, [r4, r2]
 8009d2c:	b107      	cbz	r7, 8009d30 <rshift+0x68>
 8009d2e:	3304      	adds	r3, #4
 8009d30:	42a3      	cmp	r3, r4
 8009d32:	eba3 0204 	sub.w	r2, r3, r4
 8009d36:	bf08      	it	eq
 8009d38:	2300      	moveq	r3, #0
 8009d3a:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009d3e:	6102      	str	r2, [r0, #16]
 8009d40:	bf08      	it	eq
 8009d42:	6143      	streq	r3, [r0, #20]
 8009d44:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009d48:	f8dc c000 	ldr.w	ip, [ip]
 8009d4c:	fa0c fc08 	lsl.w	ip, ip, r8
 8009d50:	ea4c 0707 	orr.w	r7, ip, r7
 8009d54:	f849 7b04 	str.w	r7, [r9], #4
 8009d58:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009d5c:	40cf      	lsrs	r7, r1
 8009d5e:	e7d9      	b.n	8009d14 <rshift+0x4c>
 8009d60:	f851 cb04 	ldr.w	ip, [r1], #4
 8009d64:	f847 cf04 	str.w	ip, [r7, #4]!
 8009d68:	e7c2      	b.n	8009cf0 <rshift+0x28>
 8009d6a:	4623      	mov	r3, r4
 8009d6c:	e7e0      	b.n	8009d30 <rshift+0x68>

08009d6e <__hexdig_fun>:
 8009d6e:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8009d72:	2b09      	cmp	r3, #9
 8009d74:	d802      	bhi.n	8009d7c <__hexdig_fun+0xe>
 8009d76:	3820      	subs	r0, #32
 8009d78:	b2c0      	uxtb	r0, r0
 8009d7a:	4770      	bx	lr
 8009d7c:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8009d80:	2b05      	cmp	r3, #5
 8009d82:	d801      	bhi.n	8009d88 <__hexdig_fun+0x1a>
 8009d84:	3847      	subs	r0, #71	@ 0x47
 8009d86:	e7f7      	b.n	8009d78 <__hexdig_fun+0xa>
 8009d88:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8009d8c:	2b05      	cmp	r3, #5
 8009d8e:	d801      	bhi.n	8009d94 <__hexdig_fun+0x26>
 8009d90:	3827      	subs	r0, #39	@ 0x27
 8009d92:	e7f1      	b.n	8009d78 <__hexdig_fun+0xa>
 8009d94:	2000      	movs	r0, #0
 8009d96:	4770      	bx	lr

08009d98 <__gethex>:
 8009d98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d9c:	468a      	mov	sl, r1
 8009d9e:	4690      	mov	r8, r2
 8009da0:	b085      	sub	sp, #20
 8009da2:	9302      	str	r3, [sp, #8]
 8009da4:	680b      	ldr	r3, [r1, #0]
 8009da6:	9001      	str	r0, [sp, #4]
 8009da8:	1c9c      	adds	r4, r3, #2
 8009daa:	46a1      	mov	r9, r4
 8009dac:	f814 0b01 	ldrb.w	r0, [r4], #1
 8009db0:	2830      	cmp	r0, #48	@ 0x30
 8009db2:	d0fa      	beq.n	8009daa <__gethex+0x12>
 8009db4:	eba9 0303 	sub.w	r3, r9, r3
 8009db8:	f1a3 0b02 	sub.w	fp, r3, #2
 8009dbc:	f7ff ffd7 	bl	8009d6e <__hexdig_fun>
 8009dc0:	4605      	mov	r5, r0
 8009dc2:	2800      	cmp	r0, #0
 8009dc4:	d168      	bne.n	8009e98 <__gethex+0x100>
 8009dc6:	2201      	movs	r2, #1
 8009dc8:	4648      	mov	r0, r9
 8009dca:	499f      	ldr	r1, [pc, #636]	@ (800a048 <__gethex+0x2b0>)
 8009dcc:	f7ff ff13 	bl	8009bf6 <strncmp>
 8009dd0:	4607      	mov	r7, r0
 8009dd2:	2800      	cmp	r0, #0
 8009dd4:	d167      	bne.n	8009ea6 <__gethex+0x10e>
 8009dd6:	f899 0001 	ldrb.w	r0, [r9, #1]
 8009dda:	4626      	mov	r6, r4
 8009ddc:	f7ff ffc7 	bl	8009d6e <__hexdig_fun>
 8009de0:	2800      	cmp	r0, #0
 8009de2:	d062      	beq.n	8009eaa <__gethex+0x112>
 8009de4:	4623      	mov	r3, r4
 8009de6:	7818      	ldrb	r0, [r3, #0]
 8009de8:	4699      	mov	r9, r3
 8009dea:	2830      	cmp	r0, #48	@ 0x30
 8009dec:	f103 0301 	add.w	r3, r3, #1
 8009df0:	d0f9      	beq.n	8009de6 <__gethex+0x4e>
 8009df2:	f7ff ffbc 	bl	8009d6e <__hexdig_fun>
 8009df6:	fab0 f580 	clz	r5, r0
 8009dfa:	f04f 0b01 	mov.w	fp, #1
 8009dfe:	096d      	lsrs	r5, r5, #5
 8009e00:	464a      	mov	r2, r9
 8009e02:	4616      	mov	r6, r2
 8009e04:	7830      	ldrb	r0, [r6, #0]
 8009e06:	3201      	adds	r2, #1
 8009e08:	f7ff ffb1 	bl	8009d6e <__hexdig_fun>
 8009e0c:	2800      	cmp	r0, #0
 8009e0e:	d1f8      	bne.n	8009e02 <__gethex+0x6a>
 8009e10:	2201      	movs	r2, #1
 8009e12:	4630      	mov	r0, r6
 8009e14:	498c      	ldr	r1, [pc, #560]	@ (800a048 <__gethex+0x2b0>)
 8009e16:	f7ff feee 	bl	8009bf6 <strncmp>
 8009e1a:	2800      	cmp	r0, #0
 8009e1c:	d13f      	bne.n	8009e9e <__gethex+0x106>
 8009e1e:	b944      	cbnz	r4, 8009e32 <__gethex+0x9a>
 8009e20:	1c74      	adds	r4, r6, #1
 8009e22:	4622      	mov	r2, r4
 8009e24:	4616      	mov	r6, r2
 8009e26:	7830      	ldrb	r0, [r6, #0]
 8009e28:	3201      	adds	r2, #1
 8009e2a:	f7ff ffa0 	bl	8009d6e <__hexdig_fun>
 8009e2e:	2800      	cmp	r0, #0
 8009e30:	d1f8      	bne.n	8009e24 <__gethex+0x8c>
 8009e32:	1ba4      	subs	r4, r4, r6
 8009e34:	00a7      	lsls	r7, r4, #2
 8009e36:	7833      	ldrb	r3, [r6, #0]
 8009e38:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8009e3c:	2b50      	cmp	r3, #80	@ 0x50
 8009e3e:	d13e      	bne.n	8009ebe <__gethex+0x126>
 8009e40:	7873      	ldrb	r3, [r6, #1]
 8009e42:	2b2b      	cmp	r3, #43	@ 0x2b
 8009e44:	d033      	beq.n	8009eae <__gethex+0x116>
 8009e46:	2b2d      	cmp	r3, #45	@ 0x2d
 8009e48:	d034      	beq.n	8009eb4 <__gethex+0x11c>
 8009e4a:	2400      	movs	r4, #0
 8009e4c:	1c71      	adds	r1, r6, #1
 8009e4e:	7808      	ldrb	r0, [r1, #0]
 8009e50:	f7ff ff8d 	bl	8009d6e <__hexdig_fun>
 8009e54:	1e43      	subs	r3, r0, #1
 8009e56:	b2db      	uxtb	r3, r3
 8009e58:	2b18      	cmp	r3, #24
 8009e5a:	d830      	bhi.n	8009ebe <__gethex+0x126>
 8009e5c:	f1a0 0210 	sub.w	r2, r0, #16
 8009e60:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009e64:	f7ff ff83 	bl	8009d6e <__hexdig_fun>
 8009e68:	f100 3cff 	add.w	ip, r0, #4294967295
 8009e6c:	fa5f fc8c 	uxtb.w	ip, ip
 8009e70:	f1bc 0f18 	cmp.w	ip, #24
 8009e74:	f04f 030a 	mov.w	r3, #10
 8009e78:	d91e      	bls.n	8009eb8 <__gethex+0x120>
 8009e7a:	b104      	cbz	r4, 8009e7e <__gethex+0xe6>
 8009e7c:	4252      	negs	r2, r2
 8009e7e:	4417      	add	r7, r2
 8009e80:	f8ca 1000 	str.w	r1, [sl]
 8009e84:	b1ed      	cbz	r5, 8009ec2 <__gethex+0x12a>
 8009e86:	f1bb 0f00 	cmp.w	fp, #0
 8009e8a:	bf0c      	ite	eq
 8009e8c:	2506      	moveq	r5, #6
 8009e8e:	2500      	movne	r5, #0
 8009e90:	4628      	mov	r0, r5
 8009e92:	b005      	add	sp, #20
 8009e94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e98:	2500      	movs	r5, #0
 8009e9a:	462c      	mov	r4, r5
 8009e9c:	e7b0      	b.n	8009e00 <__gethex+0x68>
 8009e9e:	2c00      	cmp	r4, #0
 8009ea0:	d1c7      	bne.n	8009e32 <__gethex+0x9a>
 8009ea2:	4627      	mov	r7, r4
 8009ea4:	e7c7      	b.n	8009e36 <__gethex+0x9e>
 8009ea6:	464e      	mov	r6, r9
 8009ea8:	462f      	mov	r7, r5
 8009eaa:	2501      	movs	r5, #1
 8009eac:	e7c3      	b.n	8009e36 <__gethex+0x9e>
 8009eae:	2400      	movs	r4, #0
 8009eb0:	1cb1      	adds	r1, r6, #2
 8009eb2:	e7cc      	b.n	8009e4e <__gethex+0xb6>
 8009eb4:	2401      	movs	r4, #1
 8009eb6:	e7fb      	b.n	8009eb0 <__gethex+0x118>
 8009eb8:	fb03 0002 	mla	r0, r3, r2, r0
 8009ebc:	e7ce      	b.n	8009e5c <__gethex+0xc4>
 8009ebe:	4631      	mov	r1, r6
 8009ec0:	e7de      	b.n	8009e80 <__gethex+0xe8>
 8009ec2:	4629      	mov	r1, r5
 8009ec4:	eba6 0309 	sub.w	r3, r6, r9
 8009ec8:	3b01      	subs	r3, #1
 8009eca:	2b07      	cmp	r3, #7
 8009ecc:	dc0a      	bgt.n	8009ee4 <__gethex+0x14c>
 8009ece:	9801      	ldr	r0, [sp, #4]
 8009ed0:	f7fd fdcc 	bl	8007a6c <_Balloc>
 8009ed4:	4604      	mov	r4, r0
 8009ed6:	b940      	cbnz	r0, 8009eea <__gethex+0x152>
 8009ed8:	4602      	mov	r2, r0
 8009eda:	21e4      	movs	r1, #228	@ 0xe4
 8009edc:	4b5b      	ldr	r3, [pc, #364]	@ (800a04c <__gethex+0x2b4>)
 8009ede:	485c      	ldr	r0, [pc, #368]	@ (800a050 <__gethex+0x2b8>)
 8009ee0:	f7ff fec0 	bl	8009c64 <__assert_func>
 8009ee4:	3101      	adds	r1, #1
 8009ee6:	105b      	asrs	r3, r3, #1
 8009ee8:	e7ef      	b.n	8009eca <__gethex+0x132>
 8009eea:	2300      	movs	r3, #0
 8009eec:	f100 0a14 	add.w	sl, r0, #20
 8009ef0:	4655      	mov	r5, sl
 8009ef2:	469b      	mov	fp, r3
 8009ef4:	45b1      	cmp	r9, r6
 8009ef6:	d337      	bcc.n	8009f68 <__gethex+0x1d0>
 8009ef8:	f845 bb04 	str.w	fp, [r5], #4
 8009efc:	eba5 050a 	sub.w	r5, r5, sl
 8009f00:	10ad      	asrs	r5, r5, #2
 8009f02:	6125      	str	r5, [r4, #16]
 8009f04:	4658      	mov	r0, fp
 8009f06:	f7fd fea3 	bl	8007c50 <__hi0bits>
 8009f0a:	016d      	lsls	r5, r5, #5
 8009f0c:	f8d8 6000 	ldr.w	r6, [r8]
 8009f10:	1a2d      	subs	r5, r5, r0
 8009f12:	42b5      	cmp	r5, r6
 8009f14:	dd54      	ble.n	8009fc0 <__gethex+0x228>
 8009f16:	1bad      	subs	r5, r5, r6
 8009f18:	4629      	mov	r1, r5
 8009f1a:	4620      	mov	r0, r4
 8009f1c:	f7fe fa2b 	bl	8008376 <__any_on>
 8009f20:	4681      	mov	r9, r0
 8009f22:	b178      	cbz	r0, 8009f44 <__gethex+0x1ac>
 8009f24:	f04f 0901 	mov.w	r9, #1
 8009f28:	1e6b      	subs	r3, r5, #1
 8009f2a:	1159      	asrs	r1, r3, #5
 8009f2c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8009f30:	f003 021f 	and.w	r2, r3, #31
 8009f34:	fa09 f202 	lsl.w	r2, r9, r2
 8009f38:	420a      	tst	r2, r1
 8009f3a:	d003      	beq.n	8009f44 <__gethex+0x1ac>
 8009f3c:	454b      	cmp	r3, r9
 8009f3e:	dc36      	bgt.n	8009fae <__gethex+0x216>
 8009f40:	f04f 0902 	mov.w	r9, #2
 8009f44:	4629      	mov	r1, r5
 8009f46:	4620      	mov	r0, r4
 8009f48:	f7ff febe 	bl	8009cc8 <rshift>
 8009f4c:	442f      	add	r7, r5
 8009f4e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009f52:	42bb      	cmp	r3, r7
 8009f54:	da42      	bge.n	8009fdc <__gethex+0x244>
 8009f56:	4621      	mov	r1, r4
 8009f58:	9801      	ldr	r0, [sp, #4]
 8009f5a:	f7fd fdc7 	bl	8007aec <_Bfree>
 8009f5e:	2300      	movs	r3, #0
 8009f60:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009f62:	25a3      	movs	r5, #163	@ 0xa3
 8009f64:	6013      	str	r3, [r2, #0]
 8009f66:	e793      	b.n	8009e90 <__gethex+0xf8>
 8009f68:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8009f6c:	2a2e      	cmp	r2, #46	@ 0x2e
 8009f6e:	d012      	beq.n	8009f96 <__gethex+0x1fe>
 8009f70:	2b20      	cmp	r3, #32
 8009f72:	d104      	bne.n	8009f7e <__gethex+0x1e6>
 8009f74:	f845 bb04 	str.w	fp, [r5], #4
 8009f78:	f04f 0b00 	mov.w	fp, #0
 8009f7c:	465b      	mov	r3, fp
 8009f7e:	7830      	ldrb	r0, [r6, #0]
 8009f80:	9303      	str	r3, [sp, #12]
 8009f82:	f7ff fef4 	bl	8009d6e <__hexdig_fun>
 8009f86:	9b03      	ldr	r3, [sp, #12]
 8009f88:	f000 000f 	and.w	r0, r0, #15
 8009f8c:	4098      	lsls	r0, r3
 8009f8e:	ea4b 0b00 	orr.w	fp, fp, r0
 8009f92:	3304      	adds	r3, #4
 8009f94:	e7ae      	b.n	8009ef4 <__gethex+0x15c>
 8009f96:	45b1      	cmp	r9, r6
 8009f98:	d8ea      	bhi.n	8009f70 <__gethex+0x1d8>
 8009f9a:	2201      	movs	r2, #1
 8009f9c:	4630      	mov	r0, r6
 8009f9e:	492a      	ldr	r1, [pc, #168]	@ (800a048 <__gethex+0x2b0>)
 8009fa0:	9303      	str	r3, [sp, #12]
 8009fa2:	f7ff fe28 	bl	8009bf6 <strncmp>
 8009fa6:	9b03      	ldr	r3, [sp, #12]
 8009fa8:	2800      	cmp	r0, #0
 8009faa:	d1e1      	bne.n	8009f70 <__gethex+0x1d8>
 8009fac:	e7a2      	b.n	8009ef4 <__gethex+0x15c>
 8009fae:	4620      	mov	r0, r4
 8009fb0:	1ea9      	subs	r1, r5, #2
 8009fb2:	f7fe f9e0 	bl	8008376 <__any_on>
 8009fb6:	2800      	cmp	r0, #0
 8009fb8:	d0c2      	beq.n	8009f40 <__gethex+0x1a8>
 8009fba:	f04f 0903 	mov.w	r9, #3
 8009fbe:	e7c1      	b.n	8009f44 <__gethex+0x1ac>
 8009fc0:	da09      	bge.n	8009fd6 <__gethex+0x23e>
 8009fc2:	1b75      	subs	r5, r6, r5
 8009fc4:	4621      	mov	r1, r4
 8009fc6:	462a      	mov	r2, r5
 8009fc8:	9801      	ldr	r0, [sp, #4]
 8009fca:	f7fd ffa5 	bl	8007f18 <__lshift>
 8009fce:	4604      	mov	r4, r0
 8009fd0:	1b7f      	subs	r7, r7, r5
 8009fd2:	f100 0a14 	add.w	sl, r0, #20
 8009fd6:	f04f 0900 	mov.w	r9, #0
 8009fda:	e7b8      	b.n	8009f4e <__gethex+0x1b6>
 8009fdc:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8009fe0:	42bd      	cmp	r5, r7
 8009fe2:	dd6f      	ble.n	800a0c4 <__gethex+0x32c>
 8009fe4:	1bed      	subs	r5, r5, r7
 8009fe6:	42ae      	cmp	r6, r5
 8009fe8:	dc34      	bgt.n	800a054 <__gethex+0x2bc>
 8009fea:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009fee:	2b02      	cmp	r3, #2
 8009ff0:	d022      	beq.n	800a038 <__gethex+0x2a0>
 8009ff2:	2b03      	cmp	r3, #3
 8009ff4:	d024      	beq.n	800a040 <__gethex+0x2a8>
 8009ff6:	2b01      	cmp	r3, #1
 8009ff8:	d115      	bne.n	800a026 <__gethex+0x28e>
 8009ffa:	42ae      	cmp	r6, r5
 8009ffc:	d113      	bne.n	800a026 <__gethex+0x28e>
 8009ffe:	2e01      	cmp	r6, #1
 800a000:	d10b      	bne.n	800a01a <__gethex+0x282>
 800a002:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a006:	9a02      	ldr	r2, [sp, #8]
 800a008:	2562      	movs	r5, #98	@ 0x62
 800a00a:	6013      	str	r3, [r2, #0]
 800a00c:	2301      	movs	r3, #1
 800a00e:	6123      	str	r3, [r4, #16]
 800a010:	f8ca 3000 	str.w	r3, [sl]
 800a014:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a016:	601c      	str	r4, [r3, #0]
 800a018:	e73a      	b.n	8009e90 <__gethex+0xf8>
 800a01a:	4620      	mov	r0, r4
 800a01c:	1e71      	subs	r1, r6, #1
 800a01e:	f7fe f9aa 	bl	8008376 <__any_on>
 800a022:	2800      	cmp	r0, #0
 800a024:	d1ed      	bne.n	800a002 <__gethex+0x26a>
 800a026:	4621      	mov	r1, r4
 800a028:	9801      	ldr	r0, [sp, #4]
 800a02a:	f7fd fd5f 	bl	8007aec <_Bfree>
 800a02e:	2300      	movs	r3, #0
 800a030:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a032:	2550      	movs	r5, #80	@ 0x50
 800a034:	6013      	str	r3, [r2, #0]
 800a036:	e72b      	b.n	8009e90 <__gethex+0xf8>
 800a038:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d1f3      	bne.n	800a026 <__gethex+0x28e>
 800a03e:	e7e0      	b.n	800a002 <__gethex+0x26a>
 800a040:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a042:	2b00      	cmp	r3, #0
 800a044:	d1dd      	bne.n	800a002 <__gethex+0x26a>
 800a046:	e7ee      	b.n	800a026 <__gethex+0x28e>
 800a048:	0800ade8 	.word	0x0800ade8
 800a04c:	0800ac7d 	.word	0x0800ac7d
 800a050:	0800afb1 	.word	0x0800afb1
 800a054:	1e6f      	subs	r7, r5, #1
 800a056:	f1b9 0f00 	cmp.w	r9, #0
 800a05a:	d130      	bne.n	800a0be <__gethex+0x326>
 800a05c:	b127      	cbz	r7, 800a068 <__gethex+0x2d0>
 800a05e:	4639      	mov	r1, r7
 800a060:	4620      	mov	r0, r4
 800a062:	f7fe f988 	bl	8008376 <__any_on>
 800a066:	4681      	mov	r9, r0
 800a068:	2301      	movs	r3, #1
 800a06a:	4629      	mov	r1, r5
 800a06c:	1b76      	subs	r6, r6, r5
 800a06e:	2502      	movs	r5, #2
 800a070:	117a      	asrs	r2, r7, #5
 800a072:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800a076:	f007 071f 	and.w	r7, r7, #31
 800a07a:	40bb      	lsls	r3, r7
 800a07c:	4213      	tst	r3, r2
 800a07e:	4620      	mov	r0, r4
 800a080:	bf18      	it	ne
 800a082:	f049 0902 	orrne.w	r9, r9, #2
 800a086:	f7ff fe1f 	bl	8009cc8 <rshift>
 800a08a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800a08e:	f1b9 0f00 	cmp.w	r9, #0
 800a092:	d047      	beq.n	800a124 <__gethex+0x38c>
 800a094:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a098:	2b02      	cmp	r3, #2
 800a09a:	d015      	beq.n	800a0c8 <__gethex+0x330>
 800a09c:	2b03      	cmp	r3, #3
 800a09e:	d017      	beq.n	800a0d0 <__gethex+0x338>
 800a0a0:	2b01      	cmp	r3, #1
 800a0a2:	d109      	bne.n	800a0b8 <__gethex+0x320>
 800a0a4:	f019 0f02 	tst.w	r9, #2
 800a0a8:	d006      	beq.n	800a0b8 <__gethex+0x320>
 800a0aa:	f8da 3000 	ldr.w	r3, [sl]
 800a0ae:	ea49 0903 	orr.w	r9, r9, r3
 800a0b2:	f019 0f01 	tst.w	r9, #1
 800a0b6:	d10e      	bne.n	800a0d6 <__gethex+0x33e>
 800a0b8:	f045 0510 	orr.w	r5, r5, #16
 800a0bc:	e032      	b.n	800a124 <__gethex+0x38c>
 800a0be:	f04f 0901 	mov.w	r9, #1
 800a0c2:	e7d1      	b.n	800a068 <__gethex+0x2d0>
 800a0c4:	2501      	movs	r5, #1
 800a0c6:	e7e2      	b.n	800a08e <__gethex+0x2f6>
 800a0c8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a0ca:	f1c3 0301 	rsb	r3, r3, #1
 800a0ce:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a0d0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d0f0      	beq.n	800a0b8 <__gethex+0x320>
 800a0d6:	f04f 0c00 	mov.w	ip, #0
 800a0da:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a0de:	f104 0314 	add.w	r3, r4, #20
 800a0e2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800a0e6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800a0ea:	4618      	mov	r0, r3
 800a0ec:	f853 2b04 	ldr.w	r2, [r3], #4
 800a0f0:	f1b2 3fff 	cmp.w	r2, #4294967295
 800a0f4:	d01b      	beq.n	800a12e <__gethex+0x396>
 800a0f6:	3201      	adds	r2, #1
 800a0f8:	6002      	str	r2, [r0, #0]
 800a0fa:	2d02      	cmp	r5, #2
 800a0fc:	f104 0314 	add.w	r3, r4, #20
 800a100:	d13c      	bne.n	800a17c <__gethex+0x3e4>
 800a102:	f8d8 2000 	ldr.w	r2, [r8]
 800a106:	3a01      	subs	r2, #1
 800a108:	42b2      	cmp	r2, r6
 800a10a:	d109      	bne.n	800a120 <__gethex+0x388>
 800a10c:	2201      	movs	r2, #1
 800a10e:	1171      	asrs	r1, r6, #5
 800a110:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a114:	f006 061f 	and.w	r6, r6, #31
 800a118:	fa02 f606 	lsl.w	r6, r2, r6
 800a11c:	421e      	tst	r6, r3
 800a11e:	d13a      	bne.n	800a196 <__gethex+0x3fe>
 800a120:	f045 0520 	orr.w	r5, r5, #32
 800a124:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a126:	601c      	str	r4, [r3, #0]
 800a128:	9b02      	ldr	r3, [sp, #8]
 800a12a:	601f      	str	r7, [r3, #0]
 800a12c:	e6b0      	b.n	8009e90 <__gethex+0xf8>
 800a12e:	4299      	cmp	r1, r3
 800a130:	f843 cc04 	str.w	ip, [r3, #-4]
 800a134:	d8d9      	bhi.n	800a0ea <__gethex+0x352>
 800a136:	68a3      	ldr	r3, [r4, #8]
 800a138:	459b      	cmp	fp, r3
 800a13a:	db17      	blt.n	800a16c <__gethex+0x3d4>
 800a13c:	6861      	ldr	r1, [r4, #4]
 800a13e:	9801      	ldr	r0, [sp, #4]
 800a140:	3101      	adds	r1, #1
 800a142:	f7fd fc93 	bl	8007a6c <_Balloc>
 800a146:	4681      	mov	r9, r0
 800a148:	b918      	cbnz	r0, 800a152 <__gethex+0x3ba>
 800a14a:	4602      	mov	r2, r0
 800a14c:	2184      	movs	r1, #132	@ 0x84
 800a14e:	4b19      	ldr	r3, [pc, #100]	@ (800a1b4 <__gethex+0x41c>)
 800a150:	e6c5      	b.n	8009ede <__gethex+0x146>
 800a152:	6922      	ldr	r2, [r4, #16]
 800a154:	f104 010c 	add.w	r1, r4, #12
 800a158:	3202      	adds	r2, #2
 800a15a:	0092      	lsls	r2, r2, #2
 800a15c:	300c      	adds	r0, #12
 800a15e:	f7ff fd6d 	bl	8009c3c <memcpy>
 800a162:	4621      	mov	r1, r4
 800a164:	9801      	ldr	r0, [sp, #4]
 800a166:	f7fd fcc1 	bl	8007aec <_Bfree>
 800a16a:	464c      	mov	r4, r9
 800a16c:	6923      	ldr	r3, [r4, #16]
 800a16e:	1c5a      	adds	r2, r3, #1
 800a170:	6122      	str	r2, [r4, #16]
 800a172:	2201      	movs	r2, #1
 800a174:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a178:	615a      	str	r2, [r3, #20]
 800a17a:	e7be      	b.n	800a0fa <__gethex+0x362>
 800a17c:	6922      	ldr	r2, [r4, #16]
 800a17e:	455a      	cmp	r2, fp
 800a180:	dd0b      	ble.n	800a19a <__gethex+0x402>
 800a182:	2101      	movs	r1, #1
 800a184:	4620      	mov	r0, r4
 800a186:	f7ff fd9f 	bl	8009cc8 <rshift>
 800a18a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a18e:	3701      	adds	r7, #1
 800a190:	42bb      	cmp	r3, r7
 800a192:	f6ff aee0 	blt.w	8009f56 <__gethex+0x1be>
 800a196:	2501      	movs	r5, #1
 800a198:	e7c2      	b.n	800a120 <__gethex+0x388>
 800a19a:	f016 061f 	ands.w	r6, r6, #31
 800a19e:	d0fa      	beq.n	800a196 <__gethex+0x3fe>
 800a1a0:	4453      	add	r3, sl
 800a1a2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800a1a6:	f7fd fd53 	bl	8007c50 <__hi0bits>
 800a1aa:	f1c6 0620 	rsb	r6, r6, #32
 800a1ae:	42b0      	cmp	r0, r6
 800a1b0:	dbe7      	blt.n	800a182 <__gethex+0x3ea>
 800a1b2:	e7f0      	b.n	800a196 <__gethex+0x3fe>
 800a1b4:	0800ac7d 	.word	0x0800ac7d

0800a1b8 <L_shift>:
 800a1b8:	f1c2 0208 	rsb	r2, r2, #8
 800a1bc:	0092      	lsls	r2, r2, #2
 800a1be:	b570      	push	{r4, r5, r6, lr}
 800a1c0:	f1c2 0620 	rsb	r6, r2, #32
 800a1c4:	6843      	ldr	r3, [r0, #4]
 800a1c6:	6804      	ldr	r4, [r0, #0]
 800a1c8:	fa03 f506 	lsl.w	r5, r3, r6
 800a1cc:	432c      	orrs	r4, r5
 800a1ce:	40d3      	lsrs	r3, r2
 800a1d0:	6004      	str	r4, [r0, #0]
 800a1d2:	f840 3f04 	str.w	r3, [r0, #4]!
 800a1d6:	4288      	cmp	r0, r1
 800a1d8:	d3f4      	bcc.n	800a1c4 <L_shift+0xc>
 800a1da:	bd70      	pop	{r4, r5, r6, pc}

0800a1dc <__match>:
 800a1dc:	b530      	push	{r4, r5, lr}
 800a1de:	6803      	ldr	r3, [r0, #0]
 800a1e0:	3301      	adds	r3, #1
 800a1e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a1e6:	b914      	cbnz	r4, 800a1ee <__match+0x12>
 800a1e8:	6003      	str	r3, [r0, #0]
 800a1ea:	2001      	movs	r0, #1
 800a1ec:	bd30      	pop	{r4, r5, pc}
 800a1ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a1f2:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800a1f6:	2d19      	cmp	r5, #25
 800a1f8:	bf98      	it	ls
 800a1fa:	3220      	addls	r2, #32
 800a1fc:	42a2      	cmp	r2, r4
 800a1fe:	d0f0      	beq.n	800a1e2 <__match+0x6>
 800a200:	2000      	movs	r0, #0
 800a202:	e7f3      	b.n	800a1ec <__match+0x10>

0800a204 <__hexnan>:
 800a204:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a208:	2500      	movs	r5, #0
 800a20a:	680b      	ldr	r3, [r1, #0]
 800a20c:	4682      	mov	sl, r0
 800a20e:	115e      	asrs	r6, r3, #5
 800a210:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a214:	f013 031f 	ands.w	r3, r3, #31
 800a218:	bf18      	it	ne
 800a21a:	3604      	addne	r6, #4
 800a21c:	1f37      	subs	r7, r6, #4
 800a21e:	4690      	mov	r8, r2
 800a220:	46b9      	mov	r9, r7
 800a222:	463c      	mov	r4, r7
 800a224:	46ab      	mov	fp, r5
 800a226:	b087      	sub	sp, #28
 800a228:	6801      	ldr	r1, [r0, #0]
 800a22a:	9301      	str	r3, [sp, #4]
 800a22c:	f846 5c04 	str.w	r5, [r6, #-4]
 800a230:	9502      	str	r5, [sp, #8]
 800a232:	784a      	ldrb	r2, [r1, #1]
 800a234:	1c4b      	adds	r3, r1, #1
 800a236:	9303      	str	r3, [sp, #12]
 800a238:	b342      	cbz	r2, 800a28c <__hexnan+0x88>
 800a23a:	4610      	mov	r0, r2
 800a23c:	9105      	str	r1, [sp, #20]
 800a23e:	9204      	str	r2, [sp, #16]
 800a240:	f7ff fd95 	bl	8009d6e <__hexdig_fun>
 800a244:	2800      	cmp	r0, #0
 800a246:	d151      	bne.n	800a2ec <__hexnan+0xe8>
 800a248:	9a04      	ldr	r2, [sp, #16]
 800a24a:	9905      	ldr	r1, [sp, #20]
 800a24c:	2a20      	cmp	r2, #32
 800a24e:	d818      	bhi.n	800a282 <__hexnan+0x7e>
 800a250:	9b02      	ldr	r3, [sp, #8]
 800a252:	459b      	cmp	fp, r3
 800a254:	dd13      	ble.n	800a27e <__hexnan+0x7a>
 800a256:	454c      	cmp	r4, r9
 800a258:	d206      	bcs.n	800a268 <__hexnan+0x64>
 800a25a:	2d07      	cmp	r5, #7
 800a25c:	dc04      	bgt.n	800a268 <__hexnan+0x64>
 800a25e:	462a      	mov	r2, r5
 800a260:	4649      	mov	r1, r9
 800a262:	4620      	mov	r0, r4
 800a264:	f7ff ffa8 	bl	800a1b8 <L_shift>
 800a268:	4544      	cmp	r4, r8
 800a26a:	d952      	bls.n	800a312 <__hexnan+0x10e>
 800a26c:	2300      	movs	r3, #0
 800a26e:	f1a4 0904 	sub.w	r9, r4, #4
 800a272:	f844 3c04 	str.w	r3, [r4, #-4]
 800a276:	461d      	mov	r5, r3
 800a278:	464c      	mov	r4, r9
 800a27a:	f8cd b008 	str.w	fp, [sp, #8]
 800a27e:	9903      	ldr	r1, [sp, #12]
 800a280:	e7d7      	b.n	800a232 <__hexnan+0x2e>
 800a282:	2a29      	cmp	r2, #41	@ 0x29
 800a284:	d157      	bne.n	800a336 <__hexnan+0x132>
 800a286:	3102      	adds	r1, #2
 800a288:	f8ca 1000 	str.w	r1, [sl]
 800a28c:	f1bb 0f00 	cmp.w	fp, #0
 800a290:	d051      	beq.n	800a336 <__hexnan+0x132>
 800a292:	454c      	cmp	r4, r9
 800a294:	d206      	bcs.n	800a2a4 <__hexnan+0xa0>
 800a296:	2d07      	cmp	r5, #7
 800a298:	dc04      	bgt.n	800a2a4 <__hexnan+0xa0>
 800a29a:	462a      	mov	r2, r5
 800a29c:	4649      	mov	r1, r9
 800a29e:	4620      	mov	r0, r4
 800a2a0:	f7ff ff8a 	bl	800a1b8 <L_shift>
 800a2a4:	4544      	cmp	r4, r8
 800a2a6:	d936      	bls.n	800a316 <__hexnan+0x112>
 800a2a8:	4623      	mov	r3, r4
 800a2aa:	f1a8 0204 	sub.w	r2, r8, #4
 800a2ae:	f853 1b04 	ldr.w	r1, [r3], #4
 800a2b2:	429f      	cmp	r7, r3
 800a2b4:	f842 1f04 	str.w	r1, [r2, #4]!
 800a2b8:	d2f9      	bcs.n	800a2ae <__hexnan+0xaa>
 800a2ba:	1b3b      	subs	r3, r7, r4
 800a2bc:	f023 0303 	bic.w	r3, r3, #3
 800a2c0:	3304      	adds	r3, #4
 800a2c2:	3401      	adds	r4, #1
 800a2c4:	3e03      	subs	r6, #3
 800a2c6:	42b4      	cmp	r4, r6
 800a2c8:	bf88      	it	hi
 800a2ca:	2304      	movhi	r3, #4
 800a2cc:	2200      	movs	r2, #0
 800a2ce:	4443      	add	r3, r8
 800a2d0:	f843 2b04 	str.w	r2, [r3], #4
 800a2d4:	429f      	cmp	r7, r3
 800a2d6:	d2fb      	bcs.n	800a2d0 <__hexnan+0xcc>
 800a2d8:	683b      	ldr	r3, [r7, #0]
 800a2da:	b91b      	cbnz	r3, 800a2e4 <__hexnan+0xe0>
 800a2dc:	4547      	cmp	r7, r8
 800a2de:	d128      	bne.n	800a332 <__hexnan+0x12e>
 800a2e0:	2301      	movs	r3, #1
 800a2e2:	603b      	str	r3, [r7, #0]
 800a2e4:	2005      	movs	r0, #5
 800a2e6:	b007      	add	sp, #28
 800a2e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2ec:	3501      	adds	r5, #1
 800a2ee:	2d08      	cmp	r5, #8
 800a2f0:	f10b 0b01 	add.w	fp, fp, #1
 800a2f4:	dd06      	ble.n	800a304 <__hexnan+0x100>
 800a2f6:	4544      	cmp	r4, r8
 800a2f8:	d9c1      	bls.n	800a27e <__hexnan+0x7a>
 800a2fa:	2300      	movs	r3, #0
 800a2fc:	2501      	movs	r5, #1
 800a2fe:	f844 3c04 	str.w	r3, [r4, #-4]
 800a302:	3c04      	subs	r4, #4
 800a304:	6822      	ldr	r2, [r4, #0]
 800a306:	f000 000f 	and.w	r0, r0, #15
 800a30a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800a30e:	6020      	str	r0, [r4, #0]
 800a310:	e7b5      	b.n	800a27e <__hexnan+0x7a>
 800a312:	2508      	movs	r5, #8
 800a314:	e7b3      	b.n	800a27e <__hexnan+0x7a>
 800a316:	9b01      	ldr	r3, [sp, #4]
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d0dd      	beq.n	800a2d8 <__hexnan+0xd4>
 800a31c:	f04f 32ff 	mov.w	r2, #4294967295
 800a320:	f1c3 0320 	rsb	r3, r3, #32
 800a324:	40da      	lsrs	r2, r3
 800a326:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800a32a:	4013      	ands	r3, r2
 800a32c:	f846 3c04 	str.w	r3, [r6, #-4]
 800a330:	e7d2      	b.n	800a2d8 <__hexnan+0xd4>
 800a332:	3f04      	subs	r7, #4
 800a334:	e7d0      	b.n	800a2d8 <__hexnan+0xd4>
 800a336:	2004      	movs	r0, #4
 800a338:	e7d5      	b.n	800a2e6 <__hexnan+0xe2>

0800a33a <__ascii_mbtowc>:
 800a33a:	b082      	sub	sp, #8
 800a33c:	b901      	cbnz	r1, 800a340 <__ascii_mbtowc+0x6>
 800a33e:	a901      	add	r1, sp, #4
 800a340:	b142      	cbz	r2, 800a354 <__ascii_mbtowc+0x1a>
 800a342:	b14b      	cbz	r3, 800a358 <__ascii_mbtowc+0x1e>
 800a344:	7813      	ldrb	r3, [r2, #0]
 800a346:	600b      	str	r3, [r1, #0]
 800a348:	7812      	ldrb	r2, [r2, #0]
 800a34a:	1e10      	subs	r0, r2, #0
 800a34c:	bf18      	it	ne
 800a34e:	2001      	movne	r0, #1
 800a350:	b002      	add	sp, #8
 800a352:	4770      	bx	lr
 800a354:	4610      	mov	r0, r2
 800a356:	e7fb      	b.n	800a350 <__ascii_mbtowc+0x16>
 800a358:	f06f 0001 	mvn.w	r0, #1
 800a35c:	e7f8      	b.n	800a350 <__ascii_mbtowc+0x16>

0800a35e <_realloc_r>:
 800a35e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a362:	4680      	mov	r8, r0
 800a364:	4615      	mov	r5, r2
 800a366:	460c      	mov	r4, r1
 800a368:	b921      	cbnz	r1, 800a374 <_realloc_r+0x16>
 800a36a:	4611      	mov	r1, r2
 800a36c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a370:	f7fd baf0 	b.w	8007954 <_malloc_r>
 800a374:	b92a      	cbnz	r2, 800a382 <_realloc_r+0x24>
 800a376:	f7fd fa7b 	bl	8007870 <_free_r>
 800a37a:	2400      	movs	r4, #0
 800a37c:	4620      	mov	r0, r4
 800a37e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a382:	f000 f8b2 	bl	800a4ea <_malloc_usable_size_r>
 800a386:	4285      	cmp	r5, r0
 800a388:	4606      	mov	r6, r0
 800a38a:	d802      	bhi.n	800a392 <_realloc_r+0x34>
 800a38c:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800a390:	d8f4      	bhi.n	800a37c <_realloc_r+0x1e>
 800a392:	4629      	mov	r1, r5
 800a394:	4640      	mov	r0, r8
 800a396:	f7fd fadd 	bl	8007954 <_malloc_r>
 800a39a:	4607      	mov	r7, r0
 800a39c:	2800      	cmp	r0, #0
 800a39e:	d0ec      	beq.n	800a37a <_realloc_r+0x1c>
 800a3a0:	42b5      	cmp	r5, r6
 800a3a2:	462a      	mov	r2, r5
 800a3a4:	4621      	mov	r1, r4
 800a3a6:	bf28      	it	cs
 800a3a8:	4632      	movcs	r2, r6
 800a3aa:	f7ff fc47 	bl	8009c3c <memcpy>
 800a3ae:	4621      	mov	r1, r4
 800a3b0:	4640      	mov	r0, r8
 800a3b2:	f7fd fa5d 	bl	8007870 <_free_r>
 800a3b6:	463c      	mov	r4, r7
 800a3b8:	e7e0      	b.n	800a37c <_realloc_r+0x1e>
	...

0800a3bc <_strtoul_l.constprop.0>:
 800a3bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a3c0:	4686      	mov	lr, r0
 800a3c2:	460d      	mov	r5, r1
 800a3c4:	4e33      	ldr	r6, [pc, #204]	@ (800a494 <_strtoul_l.constprop.0+0xd8>)
 800a3c6:	4628      	mov	r0, r5
 800a3c8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a3cc:	5d37      	ldrb	r7, [r6, r4]
 800a3ce:	f017 0708 	ands.w	r7, r7, #8
 800a3d2:	d1f8      	bne.n	800a3c6 <_strtoul_l.constprop.0+0xa>
 800a3d4:	2c2d      	cmp	r4, #45	@ 0x2d
 800a3d6:	d12f      	bne.n	800a438 <_strtoul_l.constprop.0+0x7c>
 800a3d8:	2701      	movs	r7, #1
 800a3da:	782c      	ldrb	r4, [r5, #0]
 800a3dc:	1c85      	adds	r5, r0, #2
 800a3de:	f033 0010 	bics.w	r0, r3, #16
 800a3e2:	d109      	bne.n	800a3f8 <_strtoul_l.constprop.0+0x3c>
 800a3e4:	2c30      	cmp	r4, #48	@ 0x30
 800a3e6:	d12c      	bne.n	800a442 <_strtoul_l.constprop.0+0x86>
 800a3e8:	7828      	ldrb	r0, [r5, #0]
 800a3ea:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800a3ee:	2858      	cmp	r0, #88	@ 0x58
 800a3f0:	d127      	bne.n	800a442 <_strtoul_l.constprop.0+0x86>
 800a3f2:	2310      	movs	r3, #16
 800a3f4:	786c      	ldrb	r4, [r5, #1]
 800a3f6:	3502      	adds	r5, #2
 800a3f8:	f04f 38ff 	mov.w	r8, #4294967295
 800a3fc:	fbb8 f8f3 	udiv	r8, r8, r3
 800a400:	2600      	movs	r6, #0
 800a402:	fb03 f908 	mul.w	r9, r3, r8
 800a406:	4630      	mov	r0, r6
 800a408:	ea6f 0909 	mvn.w	r9, r9
 800a40c:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800a410:	f1bc 0f09 	cmp.w	ip, #9
 800a414:	d81c      	bhi.n	800a450 <_strtoul_l.constprop.0+0x94>
 800a416:	4664      	mov	r4, ip
 800a418:	42a3      	cmp	r3, r4
 800a41a:	dd2a      	ble.n	800a472 <_strtoul_l.constprop.0+0xb6>
 800a41c:	f1b6 3fff 	cmp.w	r6, #4294967295
 800a420:	d007      	beq.n	800a432 <_strtoul_l.constprop.0+0x76>
 800a422:	4580      	cmp	r8, r0
 800a424:	d322      	bcc.n	800a46c <_strtoul_l.constprop.0+0xb0>
 800a426:	d101      	bne.n	800a42c <_strtoul_l.constprop.0+0x70>
 800a428:	45a1      	cmp	r9, r4
 800a42a:	db1f      	blt.n	800a46c <_strtoul_l.constprop.0+0xb0>
 800a42c:	2601      	movs	r6, #1
 800a42e:	fb00 4003 	mla	r0, r0, r3, r4
 800a432:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a436:	e7e9      	b.n	800a40c <_strtoul_l.constprop.0+0x50>
 800a438:	2c2b      	cmp	r4, #43	@ 0x2b
 800a43a:	bf04      	itt	eq
 800a43c:	782c      	ldrbeq	r4, [r5, #0]
 800a43e:	1c85      	addeq	r5, r0, #2
 800a440:	e7cd      	b.n	800a3de <_strtoul_l.constprop.0+0x22>
 800a442:	2b00      	cmp	r3, #0
 800a444:	d1d8      	bne.n	800a3f8 <_strtoul_l.constprop.0+0x3c>
 800a446:	2c30      	cmp	r4, #48	@ 0x30
 800a448:	bf0c      	ite	eq
 800a44a:	2308      	moveq	r3, #8
 800a44c:	230a      	movne	r3, #10
 800a44e:	e7d3      	b.n	800a3f8 <_strtoul_l.constprop.0+0x3c>
 800a450:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 800a454:	f1bc 0f19 	cmp.w	ip, #25
 800a458:	d801      	bhi.n	800a45e <_strtoul_l.constprop.0+0xa2>
 800a45a:	3c37      	subs	r4, #55	@ 0x37
 800a45c:	e7dc      	b.n	800a418 <_strtoul_l.constprop.0+0x5c>
 800a45e:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800a462:	f1bc 0f19 	cmp.w	ip, #25
 800a466:	d804      	bhi.n	800a472 <_strtoul_l.constprop.0+0xb6>
 800a468:	3c57      	subs	r4, #87	@ 0x57
 800a46a:	e7d5      	b.n	800a418 <_strtoul_l.constprop.0+0x5c>
 800a46c:	f04f 36ff 	mov.w	r6, #4294967295
 800a470:	e7df      	b.n	800a432 <_strtoul_l.constprop.0+0x76>
 800a472:	1c73      	adds	r3, r6, #1
 800a474:	d106      	bne.n	800a484 <_strtoul_l.constprop.0+0xc8>
 800a476:	2322      	movs	r3, #34	@ 0x22
 800a478:	4630      	mov	r0, r6
 800a47a:	f8ce 3000 	str.w	r3, [lr]
 800a47e:	b932      	cbnz	r2, 800a48e <_strtoul_l.constprop.0+0xd2>
 800a480:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a484:	b107      	cbz	r7, 800a488 <_strtoul_l.constprop.0+0xcc>
 800a486:	4240      	negs	r0, r0
 800a488:	2a00      	cmp	r2, #0
 800a48a:	d0f9      	beq.n	800a480 <_strtoul_l.constprop.0+0xc4>
 800a48c:	b106      	cbz	r6, 800a490 <_strtoul_l.constprop.0+0xd4>
 800a48e:	1e69      	subs	r1, r5, #1
 800a490:	6011      	str	r1, [r2, #0]
 800a492:	e7f5      	b.n	800a480 <_strtoul_l.constprop.0+0xc4>
 800a494:	0800ae41 	.word	0x0800ae41

0800a498 <_strtoul_r>:
 800a498:	f7ff bf90 	b.w	800a3bc <_strtoul_l.constprop.0>

0800a49c <__ascii_wctomb>:
 800a49c:	4603      	mov	r3, r0
 800a49e:	4608      	mov	r0, r1
 800a4a0:	b141      	cbz	r1, 800a4b4 <__ascii_wctomb+0x18>
 800a4a2:	2aff      	cmp	r2, #255	@ 0xff
 800a4a4:	d904      	bls.n	800a4b0 <__ascii_wctomb+0x14>
 800a4a6:	228a      	movs	r2, #138	@ 0x8a
 800a4a8:	f04f 30ff 	mov.w	r0, #4294967295
 800a4ac:	601a      	str	r2, [r3, #0]
 800a4ae:	4770      	bx	lr
 800a4b0:	2001      	movs	r0, #1
 800a4b2:	700a      	strb	r2, [r1, #0]
 800a4b4:	4770      	bx	lr
	...

0800a4b8 <fiprintf>:
 800a4b8:	b40e      	push	{r1, r2, r3}
 800a4ba:	b503      	push	{r0, r1, lr}
 800a4bc:	4601      	mov	r1, r0
 800a4be:	ab03      	add	r3, sp, #12
 800a4c0:	4805      	ldr	r0, [pc, #20]	@ (800a4d8 <fiprintf+0x20>)
 800a4c2:	f853 2b04 	ldr.w	r2, [r3], #4
 800a4c6:	6800      	ldr	r0, [r0, #0]
 800a4c8:	9301      	str	r3, [sp, #4]
 800a4ca:	f000 f83d 	bl	800a548 <_vfiprintf_r>
 800a4ce:	b002      	add	sp, #8
 800a4d0:	f85d eb04 	ldr.w	lr, [sp], #4
 800a4d4:	b003      	add	sp, #12
 800a4d6:	4770      	bx	lr
 800a4d8:	2000001c 	.word	0x2000001c

0800a4dc <abort>:
 800a4dc:	2006      	movs	r0, #6
 800a4de:	b508      	push	{r3, lr}
 800a4e0:	f000 fa06 	bl	800a8f0 <raise>
 800a4e4:	2001      	movs	r0, #1
 800a4e6:	f7f8 fc34 	bl	8002d52 <_exit>

0800a4ea <_malloc_usable_size_r>:
 800a4ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a4ee:	1f18      	subs	r0, r3, #4
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	bfbc      	itt	lt
 800a4f4:	580b      	ldrlt	r3, [r1, r0]
 800a4f6:	18c0      	addlt	r0, r0, r3
 800a4f8:	4770      	bx	lr

0800a4fa <__sfputc_r>:
 800a4fa:	6893      	ldr	r3, [r2, #8]
 800a4fc:	b410      	push	{r4}
 800a4fe:	3b01      	subs	r3, #1
 800a500:	2b00      	cmp	r3, #0
 800a502:	6093      	str	r3, [r2, #8]
 800a504:	da07      	bge.n	800a516 <__sfputc_r+0x1c>
 800a506:	6994      	ldr	r4, [r2, #24]
 800a508:	42a3      	cmp	r3, r4
 800a50a:	db01      	blt.n	800a510 <__sfputc_r+0x16>
 800a50c:	290a      	cmp	r1, #10
 800a50e:	d102      	bne.n	800a516 <__sfputc_r+0x1c>
 800a510:	bc10      	pop	{r4}
 800a512:	f000 b931 	b.w	800a778 <__swbuf_r>
 800a516:	6813      	ldr	r3, [r2, #0]
 800a518:	1c58      	adds	r0, r3, #1
 800a51a:	6010      	str	r0, [r2, #0]
 800a51c:	7019      	strb	r1, [r3, #0]
 800a51e:	4608      	mov	r0, r1
 800a520:	bc10      	pop	{r4}
 800a522:	4770      	bx	lr

0800a524 <__sfputs_r>:
 800a524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a526:	4606      	mov	r6, r0
 800a528:	460f      	mov	r7, r1
 800a52a:	4614      	mov	r4, r2
 800a52c:	18d5      	adds	r5, r2, r3
 800a52e:	42ac      	cmp	r4, r5
 800a530:	d101      	bne.n	800a536 <__sfputs_r+0x12>
 800a532:	2000      	movs	r0, #0
 800a534:	e007      	b.n	800a546 <__sfputs_r+0x22>
 800a536:	463a      	mov	r2, r7
 800a538:	4630      	mov	r0, r6
 800a53a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a53e:	f7ff ffdc 	bl	800a4fa <__sfputc_r>
 800a542:	1c43      	adds	r3, r0, #1
 800a544:	d1f3      	bne.n	800a52e <__sfputs_r+0xa>
 800a546:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a548 <_vfiprintf_r>:
 800a548:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a54c:	460d      	mov	r5, r1
 800a54e:	4614      	mov	r4, r2
 800a550:	4698      	mov	r8, r3
 800a552:	4606      	mov	r6, r0
 800a554:	b09d      	sub	sp, #116	@ 0x74
 800a556:	b118      	cbz	r0, 800a560 <_vfiprintf_r+0x18>
 800a558:	6a03      	ldr	r3, [r0, #32]
 800a55a:	b90b      	cbnz	r3, 800a560 <_vfiprintf_r+0x18>
 800a55c:	f7fc f994 	bl	8006888 <__sinit>
 800a560:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a562:	07d9      	lsls	r1, r3, #31
 800a564:	d405      	bmi.n	800a572 <_vfiprintf_r+0x2a>
 800a566:	89ab      	ldrh	r3, [r5, #12]
 800a568:	059a      	lsls	r2, r3, #22
 800a56a:	d402      	bmi.n	800a572 <_vfiprintf_r+0x2a>
 800a56c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a56e:	f7fc fb18 	bl	8006ba2 <__retarget_lock_acquire_recursive>
 800a572:	89ab      	ldrh	r3, [r5, #12]
 800a574:	071b      	lsls	r3, r3, #28
 800a576:	d501      	bpl.n	800a57c <_vfiprintf_r+0x34>
 800a578:	692b      	ldr	r3, [r5, #16]
 800a57a:	b99b      	cbnz	r3, 800a5a4 <_vfiprintf_r+0x5c>
 800a57c:	4629      	mov	r1, r5
 800a57e:	4630      	mov	r0, r6
 800a580:	f000 f938 	bl	800a7f4 <__swsetup_r>
 800a584:	b170      	cbz	r0, 800a5a4 <_vfiprintf_r+0x5c>
 800a586:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a588:	07dc      	lsls	r4, r3, #31
 800a58a:	d504      	bpl.n	800a596 <_vfiprintf_r+0x4e>
 800a58c:	f04f 30ff 	mov.w	r0, #4294967295
 800a590:	b01d      	add	sp, #116	@ 0x74
 800a592:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a596:	89ab      	ldrh	r3, [r5, #12]
 800a598:	0598      	lsls	r0, r3, #22
 800a59a:	d4f7      	bmi.n	800a58c <_vfiprintf_r+0x44>
 800a59c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a59e:	f7fc fb01 	bl	8006ba4 <__retarget_lock_release_recursive>
 800a5a2:	e7f3      	b.n	800a58c <_vfiprintf_r+0x44>
 800a5a4:	2300      	movs	r3, #0
 800a5a6:	9309      	str	r3, [sp, #36]	@ 0x24
 800a5a8:	2320      	movs	r3, #32
 800a5aa:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a5ae:	2330      	movs	r3, #48	@ 0x30
 800a5b0:	f04f 0901 	mov.w	r9, #1
 800a5b4:	f8cd 800c 	str.w	r8, [sp, #12]
 800a5b8:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800a764 <_vfiprintf_r+0x21c>
 800a5bc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a5c0:	4623      	mov	r3, r4
 800a5c2:	469a      	mov	sl, r3
 800a5c4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a5c8:	b10a      	cbz	r2, 800a5ce <_vfiprintf_r+0x86>
 800a5ca:	2a25      	cmp	r2, #37	@ 0x25
 800a5cc:	d1f9      	bne.n	800a5c2 <_vfiprintf_r+0x7a>
 800a5ce:	ebba 0b04 	subs.w	fp, sl, r4
 800a5d2:	d00b      	beq.n	800a5ec <_vfiprintf_r+0xa4>
 800a5d4:	465b      	mov	r3, fp
 800a5d6:	4622      	mov	r2, r4
 800a5d8:	4629      	mov	r1, r5
 800a5da:	4630      	mov	r0, r6
 800a5dc:	f7ff ffa2 	bl	800a524 <__sfputs_r>
 800a5e0:	3001      	adds	r0, #1
 800a5e2:	f000 80a7 	beq.w	800a734 <_vfiprintf_r+0x1ec>
 800a5e6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a5e8:	445a      	add	r2, fp
 800a5ea:	9209      	str	r2, [sp, #36]	@ 0x24
 800a5ec:	f89a 3000 	ldrb.w	r3, [sl]
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	f000 809f 	beq.w	800a734 <_vfiprintf_r+0x1ec>
 800a5f6:	2300      	movs	r3, #0
 800a5f8:	f04f 32ff 	mov.w	r2, #4294967295
 800a5fc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a600:	f10a 0a01 	add.w	sl, sl, #1
 800a604:	9304      	str	r3, [sp, #16]
 800a606:	9307      	str	r3, [sp, #28]
 800a608:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a60c:	931a      	str	r3, [sp, #104]	@ 0x68
 800a60e:	4654      	mov	r4, sl
 800a610:	2205      	movs	r2, #5
 800a612:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a616:	4853      	ldr	r0, [pc, #332]	@ (800a764 <_vfiprintf_r+0x21c>)
 800a618:	f7fc fac5 	bl	8006ba6 <memchr>
 800a61c:	9a04      	ldr	r2, [sp, #16]
 800a61e:	b9d8      	cbnz	r0, 800a658 <_vfiprintf_r+0x110>
 800a620:	06d1      	lsls	r1, r2, #27
 800a622:	bf44      	itt	mi
 800a624:	2320      	movmi	r3, #32
 800a626:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a62a:	0713      	lsls	r3, r2, #28
 800a62c:	bf44      	itt	mi
 800a62e:	232b      	movmi	r3, #43	@ 0x2b
 800a630:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a634:	f89a 3000 	ldrb.w	r3, [sl]
 800a638:	2b2a      	cmp	r3, #42	@ 0x2a
 800a63a:	d015      	beq.n	800a668 <_vfiprintf_r+0x120>
 800a63c:	4654      	mov	r4, sl
 800a63e:	2000      	movs	r0, #0
 800a640:	f04f 0c0a 	mov.w	ip, #10
 800a644:	9a07      	ldr	r2, [sp, #28]
 800a646:	4621      	mov	r1, r4
 800a648:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a64c:	3b30      	subs	r3, #48	@ 0x30
 800a64e:	2b09      	cmp	r3, #9
 800a650:	d94b      	bls.n	800a6ea <_vfiprintf_r+0x1a2>
 800a652:	b1b0      	cbz	r0, 800a682 <_vfiprintf_r+0x13a>
 800a654:	9207      	str	r2, [sp, #28]
 800a656:	e014      	b.n	800a682 <_vfiprintf_r+0x13a>
 800a658:	eba0 0308 	sub.w	r3, r0, r8
 800a65c:	fa09 f303 	lsl.w	r3, r9, r3
 800a660:	4313      	orrs	r3, r2
 800a662:	46a2      	mov	sl, r4
 800a664:	9304      	str	r3, [sp, #16]
 800a666:	e7d2      	b.n	800a60e <_vfiprintf_r+0xc6>
 800a668:	9b03      	ldr	r3, [sp, #12]
 800a66a:	1d19      	adds	r1, r3, #4
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	9103      	str	r1, [sp, #12]
 800a670:	2b00      	cmp	r3, #0
 800a672:	bfbb      	ittet	lt
 800a674:	425b      	neglt	r3, r3
 800a676:	f042 0202 	orrlt.w	r2, r2, #2
 800a67a:	9307      	strge	r3, [sp, #28]
 800a67c:	9307      	strlt	r3, [sp, #28]
 800a67e:	bfb8      	it	lt
 800a680:	9204      	strlt	r2, [sp, #16]
 800a682:	7823      	ldrb	r3, [r4, #0]
 800a684:	2b2e      	cmp	r3, #46	@ 0x2e
 800a686:	d10a      	bne.n	800a69e <_vfiprintf_r+0x156>
 800a688:	7863      	ldrb	r3, [r4, #1]
 800a68a:	2b2a      	cmp	r3, #42	@ 0x2a
 800a68c:	d132      	bne.n	800a6f4 <_vfiprintf_r+0x1ac>
 800a68e:	9b03      	ldr	r3, [sp, #12]
 800a690:	3402      	adds	r4, #2
 800a692:	1d1a      	adds	r2, r3, #4
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	9203      	str	r2, [sp, #12]
 800a698:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a69c:	9305      	str	r3, [sp, #20]
 800a69e:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800a768 <_vfiprintf_r+0x220>
 800a6a2:	2203      	movs	r2, #3
 800a6a4:	4650      	mov	r0, sl
 800a6a6:	7821      	ldrb	r1, [r4, #0]
 800a6a8:	f7fc fa7d 	bl	8006ba6 <memchr>
 800a6ac:	b138      	cbz	r0, 800a6be <_vfiprintf_r+0x176>
 800a6ae:	2240      	movs	r2, #64	@ 0x40
 800a6b0:	9b04      	ldr	r3, [sp, #16]
 800a6b2:	eba0 000a 	sub.w	r0, r0, sl
 800a6b6:	4082      	lsls	r2, r0
 800a6b8:	4313      	orrs	r3, r2
 800a6ba:	3401      	adds	r4, #1
 800a6bc:	9304      	str	r3, [sp, #16]
 800a6be:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a6c2:	2206      	movs	r2, #6
 800a6c4:	4829      	ldr	r0, [pc, #164]	@ (800a76c <_vfiprintf_r+0x224>)
 800a6c6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a6ca:	f7fc fa6c 	bl	8006ba6 <memchr>
 800a6ce:	2800      	cmp	r0, #0
 800a6d0:	d03f      	beq.n	800a752 <_vfiprintf_r+0x20a>
 800a6d2:	4b27      	ldr	r3, [pc, #156]	@ (800a770 <_vfiprintf_r+0x228>)
 800a6d4:	bb1b      	cbnz	r3, 800a71e <_vfiprintf_r+0x1d6>
 800a6d6:	9b03      	ldr	r3, [sp, #12]
 800a6d8:	3307      	adds	r3, #7
 800a6da:	f023 0307 	bic.w	r3, r3, #7
 800a6de:	3308      	adds	r3, #8
 800a6e0:	9303      	str	r3, [sp, #12]
 800a6e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a6e4:	443b      	add	r3, r7
 800a6e6:	9309      	str	r3, [sp, #36]	@ 0x24
 800a6e8:	e76a      	b.n	800a5c0 <_vfiprintf_r+0x78>
 800a6ea:	460c      	mov	r4, r1
 800a6ec:	2001      	movs	r0, #1
 800a6ee:	fb0c 3202 	mla	r2, ip, r2, r3
 800a6f2:	e7a8      	b.n	800a646 <_vfiprintf_r+0xfe>
 800a6f4:	2300      	movs	r3, #0
 800a6f6:	f04f 0c0a 	mov.w	ip, #10
 800a6fa:	4619      	mov	r1, r3
 800a6fc:	3401      	adds	r4, #1
 800a6fe:	9305      	str	r3, [sp, #20]
 800a700:	4620      	mov	r0, r4
 800a702:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a706:	3a30      	subs	r2, #48	@ 0x30
 800a708:	2a09      	cmp	r2, #9
 800a70a:	d903      	bls.n	800a714 <_vfiprintf_r+0x1cc>
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d0c6      	beq.n	800a69e <_vfiprintf_r+0x156>
 800a710:	9105      	str	r1, [sp, #20]
 800a712:	e7c4      	b.n	800a69e <_vfiprintf_r+0x156>
 800a714:	4604      	mov	r4, r0
 800a716:	2301      	movs	r3, #1
 800a718:	fb0c 2101 	mla	r1, ip, r1, r2
 800a71c:	e7f0      	b.n	800a700 <_vfiprintf_r+0x1b8>
 800a71e:	ab03      	add	r3, sp, #12
 800a720:	9300      	str	r3, [sp, #0]
 800a722:	462a      	mov	r2, r5
 800a724:	4630      	mov	r0, r6
 800a726:	4b13      	ldr	r3, [pc, #76]	@ (800a774 <_vfiprintf_r+0x22c>)
 800a728:	a904      	add	r1, sp, #16
 800a72a:	f7fb fa53 	bl	8005bd4 <_printf_float>
 800a72e:	4607      	mov	r7, r0
 800a730:	1c78      	adds	r0, r7, #1
 800a732:	d1d6      	bne.n	800a6e2 <_vfiprintf_r+0x19a>
 800a734:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a736:	07d9      	lsls	r1, r3, #31
 800a738:	d405      	bmi.n	800a746 <_vfiprintf_r+0x1fe>
 800a73a:	89ab      	ldrh	r3, [r5, #12]
 800a73c:	059a      	lsls	r2, r3, #22
 800a73e:	d402      	bmi.n	800a746 <_vfiprintf_r+0x1fe>
 800a740:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a742:	f7fc fa2f 	bl	8006ba4 <__retarget_lock_release_recursive>
 800a746:	89ab      	ldrh	r3, [r5, #12]
 800a748:	065b      	lsls	r3, r3, #25
 800a74a:	f53f af1f 	bmi.w	800a58c <_vfiprintf_r+0x44>
 800a74e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a750:	e71e      	b.n	800a590 <_vfiprintf_r+0x48>
 800a752:	ab03      	add	r3, sp, #12
 800a754:	9300      	str	r3, [sp, #0]
 800a756:	462a      	mov	r2, r5
 800a758:	4630      	mov	r0, r6
 800a75a:	4b06      	ldr	r3, [pc, #24]	@ (800a774 <_vfiprintf_r+0x22c>)
 800a75c:	a904      	add	r1, sp, #16
 800a75e:	f7fb fcd7 	bl	8006110 <_printf_i>
 800a762:	e7e4      	b.n	800a72e <_vfiprintf_r+0x1e6>
 800a764:	0800af41 	.word	0x0800af41
 800a768:	0800af47 	.word	0x0800af47
 800a76c:	0800af4b 	.word	0x0800af4b
 800a770:	08005bd5 	.word	0x08005bd5
 800a774:	0800a525 	.word	0x0800a525

0800a778 <__swbuf_r>:
 800a778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a77a:	460e      	mov	r6, r1
 800a77c:	4614      	mov	r4, r2
 800a77e:	4605      	mov	r5, r0
 800a780:	b118      	cbz	r0, 800a78a <__swbuf_r+0x12>
 800a782:	6a03      	ldr	r3, [r0, #32]
 800a784:	b90b      	cbnz	r3, 800a78a <__swbuf_r+0x12>
 800a786:	f7fc f87f 	bl	8006888 <__sinit>
 800a78a:	69a3      	ldr	r3, [r4, #24]
 800a78c:	60a3      	str	r3, [r4, #8]
 800a78e:	89a3      	ldrh	r3, [r4, #12]
 800a790:	071a      	lsls	r2, r3, #28
 800a792:	d501      	bpl.n	800a798 <__swbuf_r+0x20>
 800a794:	6923      	ldr	r3, [r4, #16]
 800a796:	b943      	cbnz	r3, 800a7aa <__swbuf_r+0x32>
 800a798:	4621      	mov	r1, r4
 800a79a:	4628      	mov	r0, r5
 800a79c:	f000 f82a 	bl	800a7f4 <__swsetup_r>
 800a7a0:	b118      	cbz	r0, 800a7aa <__swbuf_r+0x32>
 800a7a2:	f04f 37ff 	mov.w	r7, #4294967295
 800a7a6:	4638      	mov	r0, r7
 800a7a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a7aa:	6823      	ldr	r3, [r4, #0]
 800a7ac:	6922      	ldr	r2, [r4, #16]
 800a7ae:	b2f6      	uxtb	r6, r6
 800a7b0:	1a98      	subs	r0, r3, r2
 800a7b2:	6963      	ldr	r3, [r4, #20]
 800a7b4:	4637      	mov	r7, r6
 800a7b6:	4283      	cmp	r3, r0
 800a7b8:	dc05      	bgt.n	800a7c6 <__swbuf_r+0x4e>
 800a7ba:	4621      	mov	r1, r4
 800a7bc:	4628      	mov	r0, r5
 800a7be:	f7ff f967 	bl	8009a90 <_fflush_r>
 800a7c2:	2800      	cmp	r0, #0
 800a7c4:	d1ed      	bne.n	800a7a2 <__swbuf_r+0x2a>
 800a7c6:	68a3      	ldr	r3, [r4, #8]
 800a7c8:	3b01      	subs	r3, #1
 800a7ca:	60a3      	str	r3, [r4, #8]
 800a7cc:	6823      	ldr	r3, [r4, #0]
 800a7ce:	1c5a      	adds	r2, r3, #1
 800a7d0:	6022      	str	r2, [r4, #0]
 800a7d2:	701e      	strb	r6, [r3, #0]
 800a7d4:	6962      	ldr	r2, [r4, #20]
 800a7d6:	1c43      	adds	r3, r0, #1
 800a7d8:	429a      	cmp	r2, r3
 800a7da:	d004      	beq.n	800a7e6 <__swbuf_r+0x6e>
 800a7dc:	89a3      	ldrh	r3, [r4, #12]
 800a7de:	07db      	lsls	r3, r3, #31
 800a7e0:	d5e1      	bpl.n	800a7a6 <__swbuf_r+0x2e>
 800a7e2:	2e0a      	cmp	r6, #10
 800a7e4:	d1df      	bne.n	800a7a6 <__swbuf_r+0x2e>
 800a7e6:	4621      	mov	r1, r4
 800a7e8:	4628      	mov	r0, r5
 800a7ea:	f7ff f951 	bl	8009a90 <_fflush_r>
 800a7ee:	2800      	cmp	r0, #0
 800a7f0:	d0d9      	beq.n	800a7a6 <__swbuf_r+0x2e>
 800a7f2:	e7d6      	b.n	800a7a2 <__swbuf_r+0x2a>

0800a7f4 <__swsetup_r>:
 800a7f4:	b538      	push	{r3, r4, r5, lr}
 800a7f6:	4b29      	ldr	r3, [pc, #164]	@ (800a89c <__swsetup_r+0xa8>)
 800a7f8:	4605      	mov	r5, r0
 800a7fa:	6818      	ldr	r0, [r3, #0]
 800a7fc:	460c      	mov	r4, r1
 800a7fe:	b118      	cbz	r0, 800a808 <__swsetup_r+0x14>
 800a800:	6a03      	ldr	r3, [r0, #32]
 800a802:	b90b      	cbnz	r3, 800a808 <__swsetup_r+0x14>
 800a804:	f7fc f840 	bl	8006888 <__sinit>
 800a808:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a80c:	0719      	lsls	r1, r3, #28
 800a80e:	d422      	bmi.n	800a856 <__swsetup_r+0x62>
 800a810:	06da      	lsls	r2, r3, #27
 800a812:	d407      	bmi.n	800a824 <__swsetup_r+0x30>
 800a814:	2209      	movs	r2, #9
 800a816:	602a      	str	r2, [r5, #0]
 800a818:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a81c:	f04f 30ff 	mov.w	r0, #4294967295
 800a820:	81a3      	strh	r3, [r4, #12]
 800a822:	e033      	b.n	800a88c <__swsetup_r+0x98>
 800a824:	0758      	lsls	r0, r3, #29
 800a826:	d512      	bpl.n	800a84e <__swsetup_r+0x5a>
 800a828:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a82a:	b141      	cbz	r1, 800a83e <__swsetup_r+0x4a>
 800a82c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a830:	4299      	cmp	r1, r3
 800a832:	d002      	beq.n	800a83a <__swsetup_r+0x46>
 800a834:	4628      	mov	r0, r5
 800a836:	f7fd f81b 	bl	8007870 <_free_r>
 800a83a:	2300      	movs	r3, #0
 800a83c:	6363      	str	r3, [r4, #52]	@ 0x34
 800a83e:	89a3      	ldrh	r3, [r4, #12]
 800a840:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a844:	81a3      	strh	r3, [r4, #12]
 800a846:	2300      	movs	r3, #0
 800a848:	6063      	str	r3, [r4, #4]
 800a84a:	6923      	ldr	r3, [r4, #16]
 800a84c:	6023      	str	r3, [r4, #0]
 800a84e:	89a3      	ldrh	r3, [r4, #12]
 800a850:	f043 0308 	orr.w	r3, r3, #8
 800a854:	81a3      	strh	r3, [r4, #12]
 800a856:	6923      	ldr	r3, [r4, #16]
 800a858:	b94b      	cbnz	r3, 800a86e <__swsetup_r+0x7a>
 800a85a:	89a3      	ldrh	r3, [r4, #12]
 800a85c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a860:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a864:	d003      	beq.n	800a86e <__swsetup_r+0x7a>
 800a866:	4621      	mov	r1, r4
 800a868:	4628      	mov	r0, r5
 800a86a:	f000 f882 	bl	800a972 <__smakebuf_r>
 800a86e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a872:	f013 0201 	ands.w	r2, r3, #1
 800a876:	d00a      	beq.n	800a88e <__swsetup_r+0x9a>
 800a878:	2200      	movs	r2, #0
 800a87a:	60a2      	str	r2, [r4, #8]
 800a87c:	6962      	ldr	r2, [r4, #20]
 800a87e:	4252      	negs	r2, r2
 800a880:	61a2      	str	r2, [r4, #24]
 800a882:	6922      	ldr	r2, [r4, #16]
 800a884:	b942      	cbnz	r2, 800a898 <__swsetup_r+0xa4>
 800a886:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a88a:	d1c5      	bne.n	800a818 <__swsetup_r+0x24>
 800a88c:	bd38      	pop	{r3, r4, r5, pc}
 800a88e:	0799      	lsls	r1, r3, #30
 800a890:	bf58      	it	pl
 800a892:	6962      	ldrpl	r2, [r4, #20]
 800a894:	60a2      	str	r2, [r4, #8]
 800a896:	e7f4      	b.n	800a882 <__swsetup_r+0x8e>
 800a898:	2000      	movs	r0, #0
 800a89a:	e7f7      	b.n	800a88c <__swsetup_r+0x98>
 800a89c:	2000001c 	.word	0x2000001c

0800a8a0 <_raise_r>:
 800a8a0:	291f      	cmp	r1, #31
 800a8a2:	b538      	push	{r3, r4, r5, lr}
 800a8a4:	4605      	mov	r5, r0
 800a8a6:	460c      	mov	r4, r1
 800a8a8:	d904      	bls.n	800a8b4 <_raise_r+0x14>
 800a8aa:	2316      	movs	r3, #22
 800a8ac:	6003      	str	r3, [r0, #0]
 800a8ae:	f04f 30ff 	mov.w	r0, #4294967295
 800a8b2:	bd38      	pop	{r3, r4, r5, pc}
 800a8b4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800a8b6:	b112      	cbz	r2, 800a8be <_raise_r+0x1e>
 800a8b8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a8bc:	b94b      	cbnz	r3, 800a8d2 <_raise_r+0x32>
 800a8be:	4628      	mov	r0, r5
 800a8c0:	f000 f830 	bl	800a924 <_getpid_r>
 800a8c4:	4622      	mov	r2, r4
 800a8c6:	4601      	mov	r1, r0
 800a8c8:	4628      	mov	r0, r5
 800a8ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a8ce:	f000 b817 	b.w	800a900 <_kill_r>
 800a8d2:	2b01      	cmp	r3, #1
 800a8d4:	d00a      	beq.n	800a8ec <_raise_r+0x4c>
 800a8d6:	1c59      	adds	r1, r3, #1
 800a8d8:	d103      	bne.n	800a8e2 <_raise_r+0x42>
 800a8da:	2316      	movs	r3, #22
 800a8dc:	6003      	str	r3, [r0, #0]
 800a8de:	2001      	movs	r0, #1
 800a8e0:	e7e7      	b.n	800a8b2 <_raise_r+0x12>
 800a8e2:	2100      	movs	r1, #0
 800a8e4:	4620      	mov	r0, r4
 800a8e6:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800a8ea:	4798      	blx	r3
 800a8ec:	2000      	movs	r0, #0
 800a8ee:	e7e0      	b.n	800a8b2 <_raise_r+0x12>

0800a8f0 <raise>:
 800a8f0:	4b02      	ldr	r3, [pc, #8]	@ (800a8fc <raise+0xc>)
 800a8f2:	4601      	mov	r1, r0
 800a8f4:	6818      	ldr	r0, [r3, #0]
 800a8f6:	f7ff bfd3 	b.w	800a8a0 <_raise_r>
 800a8fa:	bf00      	nop
 800a8fc:	2000001c 	.word	0x2000001c

0800a900 <_kill_r>:
 800a900:	b538      	push	{r3, r4, r5, lr}
 800a902:	2300      	movs	r3, #0
 800a904:	4d06      	ldr	r5, [pc, #24]	@ (800a920 <_kill_r+0x20>)
 800a906:	4604      	mov	r4, r0
 800a908:	4608      	mov	r0, r1
 800a90a:	4611      	mov	r1, r2
 800a90c:	602b      	str	r3, [r5, #0]
 800a90e:	f7f8 fa10 	bl	8002d32 <_kill>
 800a912:	1c43      	adds	r3, r0, #1
 800a914:	d102      	bne.n	800a91c <_kill_r+0x1c>
 800a916:	682b      	ldr	r3, [r5, #0]
 800a918:	b103      	cbz	r3, 800a91c <_kill_r+0x1c>
 800a91a:	6023      	str	r3, [r4, #0]
 800a91c:	bd38      	pop	{r3, r4, r5, pc}
 800a91e:	bf00      	nop
 800a920:	20000a00 	.word	0x20000a00

0800a924 <_getpid_r>:
 800a924:	f7f8 b9fe 	b.w	8002d24 <_getpid>

0800a928 <__swhatbuf_r>:
 800a928:	b570      	push	{r4, r5, r6, lr}
 800a92a:	460c      	mov	r4, r1
 800a92c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a930:	4615      	mov	r5, r2
 800a932:	2900      	cmp	r1, #0
 800a934:	461e      	mov	r6, r3
 800a936:	b096      	sub	sp, #88	@ 0x58
 800a938:	da0c      	bge.n	800a954 <__swhatbuf_r+0x2c>
 800a93a:	89a3      	ldrh	r3, [r4, #12]
 800a93c:	2100      	movs	r1, #0
 800a93e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a942:	bf14      	ite	ne
 800a944:	2340      	movne	r3, #64	@ 0x40
 800a946:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a94a:	2000      	movs	r0, #0
 800a94c:	6031      	str	r1, [r6, #0]
 800a94e:	602b      	str	r3, [r5, #0]
 800a950:	b016      	add	sp, #88	@ 0x58
 800a952:	bd70      	pop	{r4, r5, r6, pc}
 800a954:	466a      	mov	r2, sp
 800a956:	f000 f849 	bl	800a9ec <_fstat_r>
 800a95a:	2800      	cmp	r0, #0
 800a95c:	dbed      	blt.n	800a93a <__swhatbuf_r+0x12>
 800a95e:	9901      	ldr	r1, [sp, #4]
 800a960:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a964:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a968:	4259      	negs	r1, r3
 800a96a:	4159      	adcs	r1, r3
 800a96c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a970:	e7eb      	b.n	800a94a <__swhatbuf_r+0x22>

0800a972 <__smakebuf_r>:
 800a972:	898b      	ldrh	r3, [r1, #12]
 800a974:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a976:	079d      	lsls	r5, r3, #30
 800a978:	4606      	mov	r6, r0
 800a97a:	460c      	mov	r4, r1
 800a97c:	d507      	bpl.n	800a98e <__smakebuf_r+0x1c>
 800a97e:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a982:	6023      	str	r3, [r4, #0]
 800a984:	6123      	str	r3, [r4, #16]
 800a986:	2301      	movs	r3, #1
 800a988:	6163      	str	r3, [r4, #20]
 800a98a:	b003      	add	sp, #12
 800a98c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a98e:	466a      	mov	r2, sp
 800a990:	ab01      	add	r3, sp, #4
 800a992:	f7ff ffc9 	bl	800a928 <__swhatbuf_r>
 800a996:	9f00      	ldr	r7, [sp, #0]
 800a998:	4605      	mov	r5, r0
 800a99a:	4639      	mov	r1, r7
 800a99c:	4630      	mov	r0, r6
 800a99e:	f7fc ffd9 	bl	8007954 <_malloc_r>
 800a9a2:	b948      	cbnz	r0, 800a9b8 <__smakebuf_r+0x46>
 800a9a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a9a8:	059a      	lsls	r2, r3, #22
 800a9aa:	d4ee      	bmi.n	800a98a <__smakebuf_r+0x18>
 800a9ac:	f023 0303 	bic.w	r3, r3, #3
 800a9b0:	f043 0302 	orr.w	r3, r3, #2
 800a9b4:	81a3      	strh	r3, [r4, #12]
 800a9b6:	e7e2      	b.n	800a97e <__smakebuf_r+0xc>
 800a9b8:	89a3      	ldrh	r3, [r4, #12]
 800a9ba:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a9be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a9c2:	81a3      	strh	r3, [r4, #12]
 800a9c4:	9b01      	ldr	r3, [sp, #4]
 800a9c6:	6020      	str	r0, [r4, #0]
 800a9c8:	b15b      	cbz	r3, 800a9e2 <__smakebuf_r+0x70>
 800a9ca:	4630      	mov	r0, r6
 800a9cc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a9d0:	f000 f81e 	bl	800aa10 <_isatty_r>
 800a9d4:	b128      	cbz	r0, 800a9e2 <__smakebuf_r+0x70>
 800a9d6:	89a3      	ldrh	r3, [r4, #12]
 800a9d8:	f023 0303 	bic.w	r3, r3, #3
 800a9dc:	f043 0301 	orr.w	r3, r3, #1
 800a9e0:	81a3      	strh	r3, [r4, #12]
 800a9e2:	89a3      	ldrh	r3, [r4, #12]
 800a9e4:	431d      	orrs	r5, r3
 800a9e6:	81a5      	strh	r5, [r4, #12]
 800a9e8:	e7cf      	b.n	800a98a <__smakebuf_r+0x18>
	...

0800a9ec <_fstat_r>:
 800a9ec:	b538      	push	{r3, r4, r5, lr}
 800a9ee:	2300      	movs	r3, #0
 800a9f0:	4d06      	ldr	r5, [pc, #24]	@ (800aa0c <_fstat_r+0x20>)
 800a9f2:	4604      	mov	r4, r0
 800a9f4:	4608      	mov	r0, r1
 800a9f6:	4611      	mov	r1, r2
 800a9f8:	602b      	str	r3, [r5, #0]
 800a9fa:	f7f8 f9f9 	bl	8002df0 <_fstat>
 800a9fe:	1c43      	adds	r3, r0, #1
 800aa00:	d102      	bne.n	800aa08 <_fstat_r+0x1c>
 800aa02:	682b      	ldr	r3, [r5, #0]
 800aa04:	b103      	cbz	r3, 800aa08 <_fstat_r+0x1c>
 800aa06:	6023      	str	r3, [r4, #0]
 800aa08:	bd38      	pop	{r3, r4, r5, pc}
 800aa0a:	bf00      	nop
 800aa0c:	20000a00 	.word	0x20000a00

0800aa10 <_isatty_r>:
 800aa10:	b538      	push	{r3, r4, r5, lr}
 800aa12:	2300      	movs	r3, #0
 800aa14:	4d05      	ldr	r5, [pc, #20]	@ (800aa2c <_isatty_r+0x1c>)
 800aa16:	4604      	mov	r4, r0
 800aa18:	4608      	mov	r0, r1
 800aa1a:	602b      	str	r3, [r5, #0]
 800aa1c:	f7f8 f9f7 	bl	8002e0e <_isatty>
 800aa20:	1c43      	adds	r3, r0, #1
 800aa22:	d102      	bne.n	800aa2a <_isatty_r+0x1a>
 800aa24:	682b      	ldr	r3, [r5, #0]
 800aa26:	b103      	cbz	r3, 800aa2a <_isatty_r+0x1a>
 800aa28:	6023      	str	r3, [r4, #0]
 800aa2a:	bd38      	pop	{r3, r4, r5, pc}
 800aa2c:	20000a00 	.word	0x20000a00

0800aa30 <_init>:
 800aa30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa32:	bf00      	nop
 800aa34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aa36:	bc08      	pop	{r3}
 800aa38:	469e      	mov	lr, r3
 800aa3a:	4770      	bx	lr

0800aa3c <_fini>:
 800aa3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa3e:	bf00      	nop
 800aa40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aa42:	bc08      	pop	{r3}
 800aa44:	469e      	mov	lr, r3
 800aa46:	4770      	bx	lr
