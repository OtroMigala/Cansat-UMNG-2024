
pruebabmp3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c730  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006d0  0800c840  0800c840  0000d840  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cf10  0800cf10  0000e1e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800cf10  0800cf10  0000df10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cf18  0800cf18  0000e1e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cf18  0800cf18  0000df18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800cf1c  0800cf1c  0000df1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e8  20000000  0800cf20  0000e000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008bc  200001e8  0800d108  0000e1e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000aa4  0800d108  0000eaa4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000e1e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011727  00000000  00000000  0000e211  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000282a  00000000  00000000  0001f938  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010f0  00000000  00000000  00022168  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d5c  00000000  00000000  00023258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001965a  00000000  00000000  00023fb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000145f3  00000000  00000000  0003d60e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008fc12  00000000  00000000  00051c01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e1813  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006474  00000000  00000000  000e1858  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  000e7ccc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e8 	.word	0x200001e8
 800012c:	00000000 	.word	0x00000000
 8000130:	0800c828 	.word	0x0800c828

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001ec 	.word	0x200001ec
 800014c:	0800c828 	.word	0x0800c828

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	@ 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000dd6:	2afd      	cmp	r2, #253	@ 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	@ 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	@ 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	@ 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__gesf2>:
 8001024:	f04f 3cff 	mov.w	ip, #4294967295
 8001028:	e006      	b.n	8001038 <__cmpsf2+0x4>
 800102a:	bf00      	nop

0800102c <__lesf2>:
 800102c:	f04f 0c01 	mov.w	ip, #1
 8001030:	e002      	b.n	8001038 <__cmpsf2+0x4>
 8001032:	bf00      	nop

08001034 <__cmpsf2>:
 8001034:	f04f 0c01 	mov.w	ip, #1
 8001038:	f84d cd04 	str.w	ip, [sp, #-4]!
 800103c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001040:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001044:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001048:	bf18      	it	ne
 800104a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800104e:	d011      	beq.n	8001074 <__cmpsf2+0x40>
 8001050:	b001      	add	sp, #4
 8001052:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001056:	bf18      	it	ne
 8001058:	ea90 0f01 	teqne	r0, r1
 800105c:	bf58      	it	pl
 800105e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001062:	bf88      	it	hi
 8001064:	17c8      	asrhi	r0, r1, #31
 8001066:	bf38      	it	cc
 8001068:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800106c:	bf18      	it	ne
 800106e:	f040 0001 	orrne.w	r0, r0, #1
 8001072:	4770      	bx	lr
 8001074:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001078:	d102      	bne.n	8001080 <__cmpsf2+0x4c>
 800107a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800107e:	d105      	bne.n	800108c <__cmpsf2+0x58>
 8001080:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001084:	d1e4      	bne.n	8001050 <__cmpsf2+0x1c>
 8001086:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800108a:	d0e1      	beq.n	8001050 <__cmpsf2+0x1c>
 800108c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop

08001094 <__aeabi_cfrcmple>:
 8001094:	4684      	mov	ip, r0
 8001096:	4608      	mov	r0, r1
 8001098:	4661      	mov	r1, ip
 800109a:	e7ff      	b.n	800109c <__aeabi_cfcmpeq>

0800109c <__aeabi_cfcmpeq>:
 800109c:	b50f      	push	{r0, r1, r2, r3, lr}
 800109e:	f7ff ffc9 	bl	8001034 <__cmpsf2>
 80010a2:	2800      	cmp	r0, #0
 80010a4:	bf48      	it	mi
 80010a6:	f110 0f00 	cmnmi.w	r0, #0
 80010aa:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010ac <__aeabi_fcmpeq>:
 80010ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b0:	f7ff fff4 	bl	800109c <__aeabi_cfcmpeq>
 80010b4:	bf0c      	ite	eq
 80010b6:	2001      	moveq	r0, #1
 80010b8:	2000      	movne	r0, #0
 80010ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80010be:	bf00      	nop

080010c0 <__aeabi_fcmplt>:
 80010c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c4:	f7ff ffea 	bl	800109c <__aeabi_cfcmpeq>
 80010c8:	bf34      	ite	cc
 80010ca:	2001      	movcc	r0, #1
 80010cc:	2000      	movcs	r0, #0
 80010ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d2:	bf00      	nop

080010d4 <__aeabi_fcmple>:
 80010d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d8:	f7ff ffe0 	bl	800109c <__aeabi_cfcmpeq>
 80010dc:	bf94      	ite	ls
 80010de:	2001      	movls	r0, #1
 80010e0:	2000      	movhi	r0, #0
 80010e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e6:	bf00      	nop

080010e8 <__aeabi_fcmpge>:
 80010e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ec:	f7ff ffd2 	bl	8001094 <__aeabi_cfrcmple>
 80010f0:	bf94      	ite	ls
 80010f2:	2001      	movls	r0, #1
 80010f4:	2000      	movhi	r0, #0
 80010f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fa:	bf00      	nop

080010fc <__aeabi_fcmpgt>:
 80010fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001100:	f7ff ffc8 	bl	8001094 <__aeabi_cfrcmple>
 8001104:	bf34      	ite	cc
 8001106:	2001      	movcc	r0, #1
 8001108:	2000      	movcs	r0, #0
 800110a:	f85d fb08 	ldr.w	pc, [sp], #8
 800110e:	bf00      	nop

08001110 <__aeabi_f2iz>:
 8001110:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001114:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8001118:	d30f      	bcc.n	800113a <__aeabi_f2iz+0x2a>
 800111a:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 800111e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001122:	d90d      	bls.n	8001140 <__aeabi_f2iz+0x30>
 8001124:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001128:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800112c:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8001130:	fa23 f002 	lsr.w	r0, r3, r2
 8001134:	bf18      	it	ne
 8001136:	4240      	negne	r0, r0
 8001138:	4770      	bx	lr
 800113a:	f04f 0000 	mov.w	r0, #0
 800113e:	4770      	bx	lr
 8001140:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001144:	d101      	bne.n	800114a <__aeabi_f2iz+0x3a>
 8001146:	0242      	lsls	r2, r0, #9
 8001148:	d105      	bne.n	8001156 <__aeabi_f2iz+0x46>
 800114a:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 800114e:	bf08      	it	eq
 8001150:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8001154:	4770      	bx	lr
 8001156:	f04f 0000 	mov.w	r0, #0
 800115a:	4770      	bx	lr

0800115c <__aeabi_f2uiz>:
 800115c:	0042      	lsls	r2, r0, #1
 800115e:	d20e      	bcs.n	800117e <__aeabi_f2uiz+0x22>
 8001160:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8001164:	d30b      	bcc.n	800117e <__aeabi_f2uiz+0x22>
 8001166:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 800116a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800116e:	d409      	bmi.n	8001184 <__aeabi_f2uiz+0x28>
 8001170:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001174:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001178:	fa23 f002 	lsr.w	r0, r3, r2
 800117c:	4770      	bx	lr
 800117e:	f04f 0000 	mov.w	r0, #0
 8001182:	4770      	bx	lr
 8001184:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001188:	d101      	bne.n	800118e <__aeabi_f2uiz+0x32>
 800118a:	0242      	lsls	r2, r0, #9
 800118c:	d102      	bne.n	8001194 <__aeabi_f2uiz+0x38>
 800118e:	f04f 30ff 	mov.w	r0, #4294967295
 8001192:	4770      	bx	lr
 8001194:	f04f 0000 	mov.w	r0, #0
 8001198:	4770      	bx	lr
 800119a:	bf00      	nop

0800119c <__aeabi_ldivmod>:
 800119c:	b97b      	cbnz	r3, 80011be <__aeabi_ldivmod+0x22>
 800119e:	b972      	cbnz	r2, 80011be <__aeabi_ldivmod+0x22>
 80011a0:	2900      	cmp	r1, #0
 80011a2:	bfbe      	ittt	lt
 80011a4:	2000      	movlt	r0, #0
 80011a6:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 80011aa:	e006      	blt.n	80011ba <__aeabi_ldivmod+0x1e>
 80011ac:	bf08      	it	eq
 80011ae:	2800      	cmpeq	r0, #0
 80011b0:	bf1c      	itt	ne
 80011b2:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 80011b6:	f04f 30ff 	movne.w	r0, #4294967295
 80011ba:	f000 b9d1 	b.w	8001560 <__aeabi_idiv0>
 80011be:	f1ad 0c08 	sub.w	ip, sp, #8
 80011c2:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80011c6:	2900      	cmp	r1, #0
 80011c8:	db09      	blt.n	80011de <__aeabi_ldivmod+0x42>
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	db1a      	blt.n	8001204 <__aeabi_ldivmod+0x68>
 80011ce:	f000 f86b 	bl	80012a8 <__udivmoddi4>
 80011d2:	f8dd e004 	ldr.w	lr, [sp, #4]
 80011d6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80011da:	b004      	add	sp, #16
 80011dc:	4770      	bx	lr
 80011de:	4240      	negs	r0, r0
 80011e0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	db1b      	blt.n	8001220 <__aeabi_ldivmod+0x84>
 80011e8:	f000 f85e 	bl	80012a8 <__udivmoddi4>
 80011ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80011f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80011f4:	b004      	add	sp, #16
 80011f6:	4240      	negs	r0, r0
 80011f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80011fc:	4252      	negs	r2, r2
 80011fe:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8001202:	4770      	bx	lr
 8001204:	4252      	negs	r2, r2
 8001206:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800120a:	f000 f84d 	bl	80012a8 <__udivmoddi4>
 800120e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001212:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001216:	b004      	add	sp, #16
 8001218:	4240      	negs	r0, r0
 800121a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800121e:	4770      	bx	lr
 8001220:	4252      	negs	r2, r2
 8001222:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8001226:	f000 f83f 	bl	80012a8 <__udivmoddi4>
 800122a:	f8dd e004 	ldr.w	lr, [sp, #4]
 800122e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001232:	b004      	add	sp, #16
 8001234:	4252      	negs	r2, r2
 8001236:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800123a:	4770      	bx	lr

0800123c <__aeabi_d2lz>:
 800123c:	b538      	push	{r3, r4, r5, lr}
 800123e:	2200      	movs	r2, #0
 8001240:	2300      	movs	r3, #0
 8001242:	4604      	mov	r4, r0
 8001244:	460d      	mov	r5, r1
 8001246:	f7ff fbb9 	bl	80009bc <__aeabi_dcmplt>
 800124a:	b928      	cbnz	r0, 8001258 <__aeabi_d2lz+0x1c>
 800124c:	4620      	mov	r0, r4
 800124e:	4629      	mov	r1, r5
 8001250:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001254:	f000 b80a 	b.w	800126c <__aeabi_d2ulz>
 8001258:	4620      	mov	r0, r4
 800125a:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 800125e:	f000 f805 	bl	800126c <__aeabi_d2ulz>
 8001262:	4240      	negs	r0, r0
 8001264:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001268:	bd38      	pop	{r3, r4, r5, pc}
 800126a:	bf00      	nop

0800126c <__aeabi_d2ulz>:
 800126c:	b5d0      	push	{r4, r6, r7, lr}
 800126e:	2200      	movs	r2, #0
 8001270:	4b0b      	ldr	r3, [pc, #44]	@ (80012a0 <__aeabi_d2ulz+0x34>)
 8001272:	4606      	mov	r6, r0
 8001274:	460f      	mov	r7, r1
 8001276:	f7ff f92f 	bl	80004d8 <__aeabi_dmul>
 800127a:	f7ff fc05 	bl	8000a88 <__aeabi_d2uiz>
 800127e:	4604      	mov	r4, r0
 8001280:	f7ff f8b0 	bl	80003e4 <__aeabi_ui2d>
 8001284:	2200      	movs	r2, #0
 8001286:	4b07      	ldr	r3, [pc, #28]	@ (80012a4 <__aeabi_d2ulz+0x38>)
 8001288:	f7ff f926 	bl	80004d8 <__aeabi_dmul>
 800128c:	4602      	mov	r2, r0
 800128e:	460b      	mov	r3, r1
 8001290:	4630      	mov	r0, r6
 8001292:	4639      	mov	r1, r7
 8001294:	f7fe ff68 	bl	8000168 <__aeabi_dsub>
 8001298:	f7ff fbf6 	bl	8000a88 <__aeabi_d2uiz>
 800129c:	4621      	mov	r1, r4
 800129e:	bdd0      	pop	{r4, r6, r7, pc}
 80012a0:	3df00000 	.word	0x3df00000
 80012a4:	41f00000 	.word	0x41f00000

080012a8 <__udivmoddi4>:
 80012a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80012ac:	9d08      	ldr	r5, [sp, #32]
 80012ae:	460c      	mov	r4, r1
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d14e      	bne.n	8001352 <__udivmoddi4+0xaa>
 80012b4:	4694      	mov	ip, r2
 80012b6:	458c      	cmp	ip, r1
 80012b8:	4686      	mov	lr, r0
 80012ba:	fab2 f282 	clz	r2, r2
 80012be:	d962      	bls.n	8001386 <__udivmoddi4+0xde>
 80012c0:	b14a      	cbz	r2, 80012d6 <__udivmoddi4+0x2e>
 80012c2:	f1c2 0320 	rsb	r3, r2, #32
 80012c6:	4091      	lsls	r1, r2
 80012c8:	fa20 f303 	lsr.w	r3, r0, r3
 80012cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80012d0:	4319      	orrs	r1, r3
 80012d2:	fa00 fe02 	lsl.w	lr, r0, r2
 80012d6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80012da:	fbb1 f4f7 	udiv	r4, r1, r7
 80012de:	fb07 1114 	mls	r1, r7, r4, r1
 80012e2:	fa1f f68c 	uxth.w	r6, ip
 80012e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80012ea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80012ee:	fb04 f106 	mul.w	r1, r4, r6
 80012f2:	4299      	cmp	r1, r3
 80012f4:	d90a      	bls.n	800130c <__udivmoddi4+0x64>
 80012f6:	eb1c 0303 	adds.w	r3, ip, r3
 80012fa:	f104 30ff 	add.w	r0, r4, #4294967295
 80012fe:	f080 8110 	bcs.w	8001522 <__udivmoddi4+0x27a>
 8001302:	4299      	cmp	r1, r3
 8001304:	f240 810d 	bls.w	8001522 <__udivmoddi4+0x27a>
 8001308:	3c02      	subs	r4, #2
 800130a:	4463      	add	r3, ip
 800130c:	1a59      	subs	r1, r3, r1
 800130e:	fbb1 f0f7 	udiv	r0, r1, r7
 8001312:	fb07 1110 	mls	r1, r7, r0, r1
 8001316:	fb00 f606 	mul.w	r6, r0, r6
 800131a:	fa1f f38e 	uxth.w	r3, lr
 800131e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001322:	429e      	cmp	r6, r3
 8001324:	d90a      	bls.n	800133c <__udivmoddi4+0x94>
 8001326:	eb1c 0303 	adds.w	r3, ip, r3
 800132a:	f100 31ff 	add.w	r1, r0, #4294967295
 800132e:	f080 80fa 	bcs.w	8001526 <__udivmoddi4+0x27e>
 8001332:	429e      	cmp	r6, r3
 8001334:	f240 80f7 	bls.w	8001526 <__udivmoddi4+0x27e>
 8001338:	4463      	add	r3, ip
 800133a:	3802      	subs	r0, #2
 800133c:	2100      	movs	r1, #0
 800133e:	1b9b      	subs	r3, r3, r6
 8001340:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8001344:	b11d      	cbz	r5, 800134e <__udivmoddi4+0xa6>
 8001346:	40d3      	lsrs	r3, r2
 8001348:	2200      	movs	r2, #0
 800134a:	e9c5 3200 	strd	r3, r2, [r5]
 800134e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001352:	428b      	cmp	r3, r1
 8001354:	d905      	bls.n	8001362 <__udivmoddi4+0xba>
 8001356:	b10d      	cbz	r5, 800135c <__udivmoddi4+0xb4>
 8001358:	e9c5 0100 	strd	r0, r1, [r5]
 800135c:	2100      	movs	r1, #0
 800135e:	4608      	mov	r0, r1
 8001360:	e7f5      	b.n	800134e <__udivmoddi4+0xa6>
 8001362:	fab3 f183 	clz	r1, r3
 8001366:	2900      	cmp	r1, #0
 8001368:	d146      	bne.n	80013f8 <__udivmoddi4+0x150>
 800136a:	42a3      	cmp	r3, r4
 800136c:	d302      	bcc.n	8001374 <__udivmoddi4+0xcc>
 800136e:	4290      	cmp	r0, r2
 8001370:	f0c0 80ee 	bcc.w	8001550 <__udivmoddi4+0x2a8>
 8001374:	1a86      	subs	r6, r0, r2
 8001376:	eb64 0303 	sbc.w	r3, r4, r3
 800137a:	2001      	movs	r0, #1
 800137c:	2d00      	cmp	r5, #0
 800137e:	d0e6      	beq.n	800134e <__udivmoddi4+0xa6>
 8001380:	e9c5 6300 	strd	r6, r3, [r5]
 8001384:	e7e3      	b.n	800134e <__udivmoddi4+0xa6>
 8001386:	2a00      	cmp	r2, #0
 8001388:	f040 808f 	bne.w	80014aa <__udivmoddi4+0x202>
 800138c:	eba1 040c 	sub.w	r4, r1, ip
 8001390:	2101      	movs	r1, #1
 8001392:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8001396:	fa1f f78c 	uxth.w	r7, ip
 800139a:	fbb4 f6f8 	udiv	r6, r4, r8
 800139e:	fb08 4416 	mls	r4, r8, r6, r4
 80013a2:	fb07 f006 	mul.w	r0, r7, r6
 80013a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80013aa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80013ae:	4298      	cmp	r0, r3
 80013b0:	d908      	bls.n	80013c4 <__udivmoddi4+0x11c>
 80013b2:	eb1c 0303 	adds.w	r3, ip, r3
 80013b6:	f106 34ff 	add.w	r4, r6, #4294967295
 80013ba:	d202      	bcs.n	80013c2 <__udivmoddi4+0x11a>
 80013bc:	4298      	cmp	r0, r3
 80013be:	f200 80cb 	bhi.w	8001558 <__udivmoddi4+0x2b0>
 80013c2:	4626      	mov	r6, r4
 80013c4:	1a1c      	subs	r4, r3, r0
 80013c6:	fbb4 f0f8 	udiv	r0, r4, r8
 80013ca:	fb08 4410 	mls	r4, r8, r0, r4
 80013ce:	fb00 f707 	mul.w	r7, r0, r7
 80013d2:	fa1f f38e 	uxth.w	r3, lr
 80013d6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80013da:	429f      	cmp	r7, r3
 80013dc:	d908      	bls.n	80013f0 <__udivmoddi4+0x148>
 80013de:	eb1c 0303 	adds.w	r3, ip, r3
 80013e2:	f100 34ff 	add.w	r4, r0, #4294967295
 80013e6:	d202      	bcs.n	80013ee <__udivmoddi4+0x146>
 80013e8:	429f      	cmp	r7, r3
 80013ea:	f200 80ae 	bhi.w	800154a <__udivmoddi4+0x2a2>
 80013ee:	4620      	mov	r0, r4
 80013f0:	1bdb      	subs	r3, r3, r7
 80013f2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80013f6:	e7a5      	b.n	8001344 <__udivmoddi4+0x9c>
 80013f8:	f1c1 0720 	rsb	r7, r1, #32
 80013fc:	408b      	lsls	r3, r1
 80013fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8001402:	ea4c 0c03 	orr.w	ip, ip, r3
 8001406:	fa24 f607 	lsr.w	r6, r4, r7
 800140a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800140e:	fbb6 f8f9 	udiv	r8, r6, r9
 8001412:	fa1f fe8c 	uxth.w	lr, ip
 8001416:	fb09 6618 	mls	r6, r9, r8, r6
 800141a:	fa20 f307 	lsr.w	r3, r0, r7
 800141e:	408c      	lsls	r4, r1
 8001420:	fa00 fa01 	lsl.w	sl, r0, r1
 8001424:	fb08 f00e 	mul.w	r0, r8, lr
 8001428:	431c      	orrs	r4, r3
 800142a:	0c23      	lsrs	r3, r4, #16
 800142c:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8001430:	4298      	cmp	r0, r3
 8001432:	fa02 f201 	lsl.w	r2, r2, r1
 8001436:	d90a      	bls.n	800144e <__udivmoddi4+0x1a6>
 8001438:	eb1c 0303 	adds.w	r3, ip, r3
 800143c:	f108 36ff 	add.w	r6, r8, #4294967295
 8001440:	f080 8081 	bcs.w	8001546 <__udivmoddi4+0x29e>
 8001444:	4298      	cmp	r0, r3
 8001446:	d97e      	bls.n	8001546 <__udivmoddi4+0x29e>
 8001448:	f1a8 0802 	sub.w	r8, r8, #2
 800144c:	4463      	add	r3, ip
 800144e:	1a1e      	subs	r6, r3, r0
 8001450:	fbb6 f3f9 	udiv	r3, r6, r9
 8001454:	fb09 6613 	mls	r6, r9, r3, r6
 8001458:	fb03 fe0e 	mul.w	lr, r3, lr
 800145c:	b2a4      	uxth	r4, r4
 800145e:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 8001462:	45a6      	cmp	lr, r4
 8001464:	d908      	bls.n	8001478 <__udivmoddi4+0x1d0>
 8001466:	eb1c 0404 	adds.w	r4, ip, r4
 800146a:	f103 30ff 	add.w	r0, r3, #4294967295
 800146e:	d266      	bcs.n	800153e <__udivmoddi4+0x296>
 8001470:	45a6      	cmp	lr, r4
 8001472:	d964      	bls.n	800153e <__udivmoddi4+0x296>
 8001474:	3b02      	subs	r3, #2
 8001476:	4464      	add	r4, ip
 8001478:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 800147c:	fba0 8302 	umull	r8, r3, r0, r2
 8001480:	eba4 040e 	sub.w	r4, r4, lr
 8001484:	429c      	cmp	r4, r3
 8001486:	46c6      	mov	lr, r8
 8001488:	461e      	mov	r6, r3
 800148a:	d350      	bcc.n	800152e <__udivmoddi4+0x286>
 800148c:	d04d      	beq.n	800152a <__udivmoddi4+0x282>
 800148e:	b155      	cbz	r5, 80014a6 <__udivmoddi4+0x1fe>
 8001490:	ebba 030e 	subs.w	r3, sl, lr
 8001494:	eb64 0406 	sbc.w	r4, r4, r6
 8001498:	fa04 f707 	lsl.w	r7, r4, r7
 800149c:	40cb      	lsrs	r3, r1
 800149e:	431f      	orrs	r7, r3
 80014a0:	40cc      	lsrs	r4, r1
 80014a2:	e9c5 7400 	strd	r7, r4, [r5]
 80014a6:	2100      	movs	r1, #0
 80014a8:	e751      	b.n	800134e <__udivmoddi4+0xa6>
 80014aa:	fa0c fc02 	lsl.w	ip, ip, r2
 80014ae:	f1c2 0320 	rsb	r3, r2, #32
 80014b2:	40d9      	lsrs	r1, r3
 80014b4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80014b8:	fa20 f303 	lsr.w	r3, r0, r3
 80014bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80014c0:	fbb1 f0f8 	udiv	r0, r1, r8
 80014c4:	fb08 1110 	mls	r1, r8, r0, r1
 80014c8:	4094      	lsls	r4, r2
 80014ca:	431c      	orrs	r4, r3
 80014cc:	fa1f f78c 	uxth.w	r7, ip
 80014d0:	0c23      	lsrs	r3, r4, #16
 80014d2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80014d6:	fb00 f107 	mul.w	r1, r0, r7
 80014da:	4299      	cmp	r1, r3
 80014dc:	d908      	bls.n	80014f0 <__udivmoddi4+0x248>
 80014de:	eb1c 0303 	adds.w	r3, ip, r3
 80014e2:	f100 36ff 	add.w	r6, r0, #4294967295
 80014e6:	d22c      	bcs.n	8001542 <__udivmoddi4+0x29a>
 80014e8:	4299      	cmp	r1, r3
 80014ea:	d92a      	bls.n	8001542 <__udivmoddi4+0x29a>
 80014ec:	3802      	subs	r0, #2
 80014ee:	4463      	add	r3, ip
 80014f0:	1a5b      	subs	r3, r3, r1
 80014f2:	fbb3 f1f8 	udiv	r1, r3, r8
 80014f6:	fb08 3311 	mls	r3, r8, r1, r3
 80014fa:	b2a4      	uxth	r4, r4
 80014fc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8001500:	fb01 f307 	mul.w	r3, r1, r7
 8001504:	42a3      	cmp	r3, r4
 8001506:	d908      	bls.n	800151a <__udivmoddi4+0x272>
 8001508:	eb1c 0404 	adds.w	r4, ip, r4
 800150c:	f101 36ff 	add.w	r6, r1, #4294967295
 8001510:	d213      	bcs.n	800153a <__udivmoddi4+0x292>
 8001512:	42a3      	cmp	r3, r4
 8001514:	d911      	bls.n	800153a <__udivmoddi4+0x292>
 8001516:	3902      	subs	r1, #2
 8001518:	4464      	add	r4, ip
 800151a:	1ae4      	subs	r4, r4, r3
 800151c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8001520:	e73b      	b.n	800139a <__udivmoddi4+0xf2>
 8001522:	4604      	mov	r4, r0
 8001524:	e6f2      	b.n	800130c <__udivmoddi4+0x64>
 8001526:	4608      	mov	r0, r1
 8001528:	e708      	b.n	800133c <__udivmoddi4+0x94>
 800152a:	45c2      	cmp	sl, r8
 800152c:	d2af      	bcs.n	800148e <__udivmoddi4+0x1e6>
 800152e:	ebb8 0e02 	subs.w	lr, r8, r2
 8001532:	eb63 060c 	sbc.w	r6, r3, ip
 8001536:	3801      	subs	r0, #1
 8001538:	e7a9      	b.n	800148e <__udivmoddi4+0x1e6>
 800153a:	4631      	mov	r1, r6
 800153c:	e7ed      	b.n	800151a <__udivmoddi4+0x272>
 800153e:	4603      	mov	r3, r0
 8001540:	e79a      	b.n	8001478 <__udivmoddi4+0x1d0>
 8001542:	4630      	mov	r0, r6
 8001544:	e7d4      	b.n	80014f0 <__udivmoddi4+0x248>
 8001546:	46b0      	mov	r8, r6
 8001548:	e781      	b.n	800144e <__udivmoddi4+0x1a6>
 800154a:	4463      	add	r3, ip
 800154c:	3802      	subs	r0, #2
 800154e:	e74f      	b.n	80013f0 <__udivmoddi4+0x148>
 8001550:	4606      	mov	r6, r0
 8001552:	4623      	mov	r3, r4
 8001554:	4608      	mov	r0, r1
 8001556:	e711      	b.n	800137c <__udivmoddi4+0xd4>
 8001558:	3e02      	subs	r6, #2
 800155a:	4463      	add	r3, ip
 800155c:	e732      	b.n	80013c4 <__udivmoddi4+0x11c>
 800155e:	bf00      	nop

08001560 <__aeabi_idiv0>:
 8001560:	4770      	bx	lr
 8001562:	bf00      	nop

08001564 <bmp280_init_default_params>:
int buffer_index = 0;




void bmp280_init_default_params(bmp280_params_t *params) {
 8001564:	b480      	push	{r7}
 8001566:	b083      	sub	sp, #12
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
	params->mode = BMP280_MODE_NORMAL;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	2203      	movs	r2, #3
 8001570:	701a      	strb	r2, [r3, #0]
	params->filter = BMP280_FILTER_OFF;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	2200      	movs	r2, #0
 8001576:	705a      	strb	r2, [r3, #1]
	params->oversampling_pressure = BMP280_STANDARD;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	2203      	movs	r2, #3
 800157c:	709a      	strb	r2, [r3, #2]
	params->oversampling_temperature = BMP280_STANDARD;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	2203      	movs	r2, #3
 8001582:	70da      	strb	r2, [r3, #3]
	params->oversampling_humidity = BMP280_STANDARD;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	2203      	movs	r2, #3
 8001588:	711a      	strb	r2, [r3, #4]
	params->standby = BMP280_STANDBY_250;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	2203      	movs	r2, #3
 800158e:	715a      	strb	r2, [r3, #5]
}
 8001590:	bf00      	nop
 8001592:	370c      	adds	r7, #12
 8001594:	46bd      	mov	sp, r7
 8001596:	bc80      	pop	{r7}
 8001598:	4770      	bx	lr

0800159a <read_register16>:

static bool read_register16(BMP280_HandleTypedef *dev, uint8_t addr, uint16_t *value) {
 800159a:	b580      	push	{r7, lr}
 800159c:	b08a      	sub	sp, #40	@ 0x28
 800159e:	af04      	add	r7, sp, #16
 80015a0:	60f8      	str	r0, [r7, #12]
 80015a2:	460b      	mov	r3, r1
 80015a4:	607a      	str	r2, [r7, #4]
 80015a6:	72fb      	strb	r3, [r7, #11]
	uint16_t tx_buff;
	uint8_t rx_buff[2];
	tx_buff = (dev->addr << 1);
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80015ac:	005b      	lsls	r3, r3, #1
 80015ae:	82fb      	strh	r3, [r7, #22]

	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, rx_buff, 2, 5000)
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 80015b4:	7afb      	ldrb	r3, [r7, #11]
 80015b6:	b29a      	uxth	r2, r3
 80015b8:	8af9      	ldrh	r1, [r7, #22]
 80015ba:	f241 3388 	movw	r3, #5000	@ 0x1388
 80015be:	9302      	str	r3, [sp, #8]
 80015c0:	2302      	movs	r3, #2
 80015c2:	9301      	str	r3, [sp, #4]
 80015c4:	f107 0314 	add.w	r3, r7, #20
 80015c8:	9300      	str	r3, [sp, #0]
 80015ca:	2301      	movs	r3, #1
 80015cc:	f002 ffd0 	bl	8004570 <HAL_I2C_Mem_Read>
 80015d0:	4603      	mov	r3, r0
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d10b      	bne.n	80015ee <read_register16+0x54>
			== HAL_OK) {
		*value = (uint16_t) ((rx_buff[1] << 8) | rx_buff[0]);
 80015d6:	7d7b      	ldrb	r3, [r7, #21]
 80015d8:	021b      	lsls	r3, r3, #8
 80015da:	b21a      	sxth	r2, r3
 80015dc:	7d3b      	ldrb	r3, [r7, #20]
 80015de:	b21b      	sxth	r3, r3
 80015e0:	4313      	orrs	r3, r2
 80015e2:	b21b      	sxth	r3, r3
 80015e4:	b29a      	uxth	r2, r3
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	801a      	strh	r2, [r3, #0]
		return true;
 80015ea:	2301      	movs	r3, #1
 80015ec:	e000      	b.n	80015f0 <read_register16+0x56>
	} else
		return false;
 80015ee:	2300      	movs	r3, #0

}
 80015f0:	4618      	mov	r0, r3
 80015f2:	3718      	adds	r7, #24
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}

080015f8 <read_data>:

static inline int read_data(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t *value,
		uint8_t len) {
 80015f8:	b590      	push	{r4, r7, lr}
 80015fa:	b08b      	sub	sp, #44	@ 0x2c
 80015fc:	af04      	add	r7, sp, #16
 80015fe:	60f8      	str	r0, [r7, #12]
 8001600:	607a      	str	r2, [r7, #4]
 8001602:	461a      	mov	r2, r3
 8001604:	460b      	mov	r3, r1
 8001606:	72fb      	strb	r3, [r7, #11]
 8001608:	4613      	mov	r3, r2
 800160a:	72bb      	strb	r3, [r7, #10]
	uint16_t tx_buff;
	tx_buff = (dev->addr << 1);
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8001610:	005b      	lsls	r3, r3, #1
 8001612:	82fb      	strh	r3, [r7, #22]
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8001618:	7afb      	ldrb	r3, [r7, #11]
 800161a:	b29a      	uxth	r2, r3
 800161c:	7abb      	ldrb	r3, [r7, #10]
 800161e:	b29b      	uxth	r3, r3
 8001620:	8af9      	ldrh	r1, [r7, #22]
 8001622:	f241 3488 	movw	r4, #5000	@ 0x1388
 8001626:	9402      	str	r4, [sp, #8]
 8001628:	9301      	str	r3, [sp, #4]
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	9300      	str	r3, [sp, #0]
 800162e:	2301      	movs	r3, #1
 8001630:	f002 ff9e 	bl	8004570 <HAL_I2C_Mem_Read>
 8001634:	4603      	mov	r3, r0
 8001636:	2b00      	cmp	r3, #0
 8001638:	d101      	bne.n	800163e <read_data+0x46>
		return 0;
 800163a:	2300      	movs	r3, #0
 800163c:	e000      	b.n	8001640 <read_data+0x48>
	else
		return 1;
 800163e:	2301      	movs	r3, #1

}
 8001640:	4618      	mov	r0, r3
 8001642:	371c      	adds	r7, #28
 8001644:	46bd      	mov	sp, r7
 8001646:	bd90      	pop	{r4, r7, pc}

08001648 <read_calibration_data>:

static bool read_calibration_data(BMP280_HandleTypedef *dev) {
 8001648:	b580      	push	{r7, lr}
 800164a:	b082      	sub	sp, #8
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]

	if (read_register16(dev, 0x88, &dev->dig_T1)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	461a      	mov	r2, r3
 8001654:	2188      	movs	r1, #136	@ 0x88
 8001656:	6878      	ldr	r0, [r7, #4]
 8001658:	f7ff ff9f 	bl	800159a <read_register16>
 800165c:	4603      	mov	r3, r0
 800165e:	2b00      	cmp	r3, #0
 8001660:	d06f      	beq.n	8001742 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8a, (uint16_t *) &dev->dig_T2)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	3302      	adds	r3, #2
 8001666:	461a      	mov	r2, r3
 8001668:	218a      	movs	r1, #138	@ 0x8a
 800166a:	6878      	ldr	r0, [r7, #4]
 800166c:	f7ff ff95 	bl	800159a <read_register16>
 8001670:	4603      	mov	r3, r0
 8001672:	2b00      	cmp	r3, #0
 8001674:	d065      	beq.n	8001742 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8c, (uint16_t *) &dev->dig_T3)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	3304      	adds	r3, #4
 800167a:	461a      	mov	r2, r3
 800167c:	218c      	movs	r1, #140	@ 0x8c
 800167e:	6878      	ldr	r0, [r7, #4]
 8001680:	f7ff ff8b 	bl	800159a <read_register16>
 8001684:	4603      	mov	r3, r0
 8001686:	2b00      	cmp	r3, #0
 8001688:	d05b      	beq.n	8001742 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8e, &dev->dig_P1)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	3306      	adds	r3, #6
 800168e:	461a      	mov	r2, r3
 8001690:	218e      	movs	r1, #142	@ 0x8e
 8001692:	6878      	ldr	r0, [r7, #4]
 8001694:	f7ff ff81 	bl	800159a <read_register16>
 8001698:	4603      	mov	r3, r0
 800169a:	2b00      	cmp	r3, #0
 800169c:	d051      	beq.n	8001742 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x90, (uint16_t *) &dev->dig_P2)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	3308      	adds	r3, #8
 80016a2:	461a      	mov	r2, r3
 80016a4:	2190      	movs	r1, #144	@ 0x90
 80016a6:	6878      	ldr	r0, [r7, #4]
 80016a8:	f7ff ff77 	bl	800159a <read_register16>
 80016ac:	4603      	mov	r3, r0
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d047      	beq.n	8001742 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x92, (uint16_t *) &dev->dig_P3)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	330a      	adds	r3, #10
 80016b6:	461a      	mov	r2, r3
 80016b8:	2192      	movs	r1, #146	@ 0x92
 80016ba:	6878      	ldr	r0, [r7, #4]
 80016bc:	f7ff ff6d 	bl	800159a <read_register16>
 80016c0:	4603      	mov	r3, r0
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d03d      	beq.n	8001742 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x94, (uint16_t *) &dev->dig_P4)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	330c      	adds	r3, #12
 80016ca:	461a      	mov	r2, r3
 80016cc:	2194      	movs	r1, #148	@ 0x94
 80016ce:	6878      	ldr	r0, [r7, #4]
 80016d0:	f7ff ff63 	bl	800159a <read_register16>
 80016d4:	4603      	mov	r3, r0
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d033      	beq.n	8001742 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x96, (uint16_t *) &dev->dig_P5)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	330e      	adds	r3, #14
 80016de:	461a      	mov	r2, r3
 80016e0:	2196      	movs	r1, #150	@ 0x96
 80016e2:	6878      	ldr	r0, [r7, #4]
 80016e4:	f7ff ff59 	bl	800159a <read_register16>
 80016e8:	4603      	mov	r3, r0
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d029      	beq.n	8001742 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x98, (uint16_t *) &dev->dig_P6)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	3310      	adds	r3, #16
 80016f2:	461a      	mov	r2, r3
 80016f4:	2198      	movs	r1, #152	@ 0x98
 80016f6:	6878      	ldr	r0, [r7, #4]
 80016f8:	f7ff ff4f 	bl	800159a <read_register16>
 80016fc:	4603      	mov	r3, r0
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d01f      	beq.n	8001742 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9a, (uint16_t *) &dev->dig_P7)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	3312      	adds	r3, #18
 8001706:	461a      	mov	r2, r3
 8001708:	219a      	movs	r1, #154	@ 0x9a
 800170a:	6878      	ldr	r0, [r7, #4]
 800170c:	f7ff ff45 	bl	800159a <read_register16>
 8001710:	4603      	mov	r3, r0
 8001712:	2b00      	cmp	r3, #0
 8001714:	d015      	beq.n	8001742 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9c, (uint16_t *) &dev->dig_P8)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	3314      	adds	r3, #20
 800171a:	461a      	mov	r2, r3
 800171c:	219c      	movs	r1, #156	@ 0x9c
 800171e:	6878      	ldr	r0, [r7, #4]
 8001720:	f7ff ff3b 	bl	800159a <read_register16>
 8001724:	4603      	mov	r3, r0
 8001726:	2b00      	cmp	r3, #0
 8001728:	d00b      	beq.n	8001742 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9e,
					(uint16_t *) &dev->dig_P9)) {
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	3316      	adds	r3, #22
			&& read_register16(dev, 0x9e,
 800172e:	461a      	mov	r2, r3
 8001730:	219e      	movs	r1, #158	@ 0x9e
 8001732:	6878      	ldr	r0, [r7, #4]
 8001734:	f7ff ff31 	bl	800159a <read_register16>
 8001738:	4603      	mov	r3, r0
 800173a:	2b00      	cmp	r3, #0
 800173c:	d001      	beq.n	8001742 <read_calibration_data+0xfa>

		return true;
 800173e:	2301      	movs	r3, #1
 8001740:	e000      	b.n	8001744 <read_calibration_data+0xfc>
	}

	return false;
 8001742:	2300      	movs	r3, #0
}
 8001744:	4618      	mov	r0, r3
 8001746:	3708      	adds	r7, #8
 8001748:	46bd      	mov	sp, r7
 800174a:	bd80      	pop	{r7, pc}

0800174c <read_hum_calibration_data>:

static bool read_hum_calibration_data(BMP280_HandleTypedef *dev) {
 800174c:	b580      	push	{r7, lr}
 800174e:	b084      	sub	sp, #16
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
	uint16_t h4, h5;

	if (!read_data(dev, 0xa1, &dev->dig_H1, 1)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	f103 0218 	add.w	r2, r3, #24
 800175a:	2301      	movs	r3, #1
 800175c:	21a1      	movs	r1, #161	@ 0xa1
 800175e:	6878      	ldr	r0, [r7, #4]
 8001760:	f7ff ff4a 	bl	80015f8 <read_data>
 8001764:	4603      	mov	r3, r0
 8001766:	2b00      	cmp	r3, #0
 8001768:	d14b      	bne.n	8001802 <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe1, (uint16_t *) &dev->dig_H2)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	331a      	adds	r3, #26
 800176e:	461a      	mov	r2, r3
 8001770:	21e1      	movs	r1, #225	@ 0xe1
 8001772:	6878      	ldr	r0, [r7, #4]
 8001774:	f7ff ff11 	bl	800159a <read_register16>
 8001778:	4603      	mov	r3, r0
 800177a:	2b00      	cmp	r3, #0
 800177c:	d041      	beq.n	8001802 <read_hum_calibration_data+0xb6>
			&& !read_data(dev, 0xe3, &dev->dig_H3, 1)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	f103 021c 	add.w	r2, r3, #28
 8001784:	2301      	movs	r3, #1
 8001786:	21e3      	movs	r1, #227	@ 0xe3
 8001788:	6878      	ldr	r0, [r7, #4]
 800178a:	f7ff ff35 	bl	80015f8 <read_data>
 800178e:	4603      	mov	r3, r0
 8001790:	2b00      	cmp	r3, #0
 8001792:	d136      	bne.n	8001802 <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe4, &h4)
 8001794:	f107 030e 	add.w	r3, r7, #14
 8001798:	461a      	mov	r2, r3
 800179a:	21e4      	movs	r1, #228	@ 0xe4
 800179c:	6878      	ldr	r0, [r7, #4]
 800179e:	f7ff fefc 	bl	800159a <read_register16>
 80017a2:	4603      	mov	r3, r0
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d02c      	beq.n	8001802 <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe5, &h5)
 80017a8:	f107 030c 	add.w	r3, r7, #12
 80017ac:	461a      	mov	r2, r3
 80017ae:	21e5      	movs	r1, #229	@ 0xe5
 80017b0:	6878      	ldr	r0, [r7, #4]
 80017b2:	f7ff fef2 	bl	800159a <read_register16>
 80017b6:	4603      	mov	r3, r0
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d022      	beq.n	8001802 <read_hum_calibration_data+0xb6>
			&& !read_data(dev, 0xe7, (uint8_t *) &dev->dig_H6, 1)) {
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	f103 0222 	add.w	r2, r3, #34	@ 0x22
 80017c2:	2301      	movs	r3, #1
 80017c4:	21e7      	movs	r1, #231	@ 0xe7
 80017c6:	6878      	ldr	r0, [r7, #4]
 80017c8:	f7ff ff16 	bl	80015f8 <read_data>
 80017cc:	4603      	mov	r3, r0
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d117      	bne.n	8001802 <read_hum_calibration_data+0xb6>
		dev->dig_H4 = (h4 & 0x00ff) << 4 | (h4 & 0x0f00) >> 8;
 80017d2:	89fb      	ldrh	r3, [r7, #14]
 80017d4:	011b      	lsls	r3, r3, #4
 80017d6:	b21b      	sxth	r3, r3
 80017d8:	f403 637f 	and.w	r3, r3, #4080	@ 0xff0
 80017dc:	b21a      	sxth	r2, r3
 80017de:	89fb      	ldrh	r3, [r7, #14]
 80017e0:	121b      	asrs	r3, r3, #8
 80017e2:	b21b      	sxth	r3, r3
 80017e4:	f003 030f 	and.w	r3, r3, #15
 80017e8:	b21b      	sxth	r3, r3
 80017ea:	4313      	orrs	r3, r2
 80017ec:	b21a      	sxth	r2, r3
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	83da      	strh	r2, [r3, #30]
		dev->dig_H5 = h5 >> 4;
 80017f2:	89bb      	ldrh	r3, [r7, #12]
 80017f4:	091b      	lsrs	r3, r3, #4
 80017f6:	b29b      	uxth	r3, r3
 80017f8:	b21a      	sxth	r2, r3
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	841a      	strh	r2, [r3, #32]

		return true;
 80017fe:	2301      	movs	r3, #1
 8001800:	e000      	b.n	8001804 <read_hum_calibration_data+0xb8>
	}

	return false;
 8001802:	2300      	movs	r3, #0
}
 8001804:	4618      	mov	r0, r3
 8001806:	3710      	adds	r7, #16
 8001808:	46bd      	mov	sp, r7
 800180a:	bd80      	pop	{r7, pc}

0800180c <write_register8>:

static int write_register8(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t value) {
 800180c:	b580      	push	{r7, lr}
 800180e:	b088      	sub	sp, #32
 8001810:	af04      	add	r7, sp, #16
 8001812:	6078      	str	r0, [r7, #4]
 8001814:	460b      	mov	r3, r1
 8001816:	70fb      	strb	r3, [r7, #3]
 8001818:	4613      	mov	r3, r2
 800181a:	70bb      	strb	r3, [r7, #2]
	uint16_t tx_buff;

	tx_buff = (dev->addr << 1);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8001820:	005b      	lsls	r3, r3, #1
 8001822:	81fb      	strh	r3, [r7, #14]

	if (HAL_I2C_Mem_Write(dev->i2c, tx_buff, addr, 1, &value, 1, 10000) == HAL_OK)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8001828:	78fb      	ldrb	r3, [r7, #3]
 800182a:	b29a      	uxth	r2, r3
 800182c:	89f9      	ldrh	r1, [r7, #14]
 800182e:	f242 7310 	movw	r3, #10000	@ 0x2710
 8001832:	9302      	str	r3, [sp, #8]
 8001834:	2301      	movs	r3, #1
 8001836:	9301      	str	r3, [sp, #4]
 8001838:	1cbb      	adds	r3, r7, #2
 800183a:	9300      	str	r3, [sp, #0]
 800183c:	2301      	movs	r3, #1
 800183e:	f002 fd9d 	bl	800437c <HAL_I2C_Mem_Write>
 8001842:	4603      	mov	r3, r0
 8001844:	2b00      	cmp	r3, #0
 8001846:	d101      	bne.n	800184c <write_register8+0x40>
		return false;
 8001848:	2300      	movs	r3, #0
 800184a:	e000      	b.n	800184e <write_register8+0x42>
	else
		return true;
 800184c:	2301      	movs	r3, #1
}
 800184e:	4618      	mov	r0, r3
 8001850:	3710      	adds	r7, #16
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}

08001856 <bmp280_init>:

bool bmp280_init(BMP280_HandleTypedef *dev, bmp280_params_t *params) {
 8001856:	b580      	push	{r7, lr}
 8001858:	b084      	sub	sp, #16
 800185a:	af00      	add	r7, sp, #0
 800185c:	6078      	str	r0, [r7, #4]
 800185e:	6039      	str	r1, [r7, #0]

	if (dev->addr != BMP280_I2C_ADDRESS_0
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8001864:	2b76      	cmp	r3, #118	@ 0x76
 8001866:	d005      	beq.n	8001874 <bmp280_init+0x1e>
			&& dev->addr != BMP280_I2C_ADDRESS_1) {
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800186c:	2b77      	cmp	r3, #119	@ 0x77
 800186e:	d001      	beq.n	8001874 <bmp280_init+0x1e>

		return false;
 8001870:	2300      	movs	r3, #0
 8001872:	e099      	b.n	80019a8 <bmp280_init+0x152>
	}

	if (read_data(dev, BMP280_REG_ID, &dev->id, 1)) {
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800187a:	2301      	movs	r3, #1
 800187c:	21d0      	movs	r1, #208	@ 0xd0
 800187e:	6878      	ldr	r0, [r7, #4]
 8001880:	f7ff feba 	bl	80015f8 <read_data>
 8001884:	4603      	mov	r3, r0
 8001886:	2b00      	cmp	r3, #0
 8001888:	d001      	beq.n	800188e <bmp280_init+0x38>
		return false;
 800188a:	2300      	movs	r3, #0
 800188c:	e08c      	b.n	80019a8 <bmp280_init+0x152>
	}

	if (dev->id != BMP280_CHIP_ID && dev->id != BME280_CHIP_ID) {
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8001894:	2b58      	cmp	r3, #88	@ 0x58
 8001896:	d006      	beq.n	80018a6 <bmp280_init+0x50>
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800189e:	2b60      	cmp	r3, #96	@ 0x60
 80018a0:	d001      	beq.n	80018a6 <bmp280_init+0x50>

		return false;
 80018a2:	2300      	movs	r3, #0
 80018a4:	e080      	b.n	80019a8 <bmp280_init+0x152>
	}

	// Soft reset.
	if (write_register8(dev, BMP280_REG_RESET, BMP280_RESET_VALUE)) {
 80018a6:	22b6      	movs	r2, #182	@ 0xb6
 80018a8:	21e0      	movs	r1, #224	@ 0xe0
 80018aa:	6878      	ldr	r0, [r7, #4]
 80018ac:	f7ff ffae 	bl	800180c <write_register8>
 80018b0:	4603      	mov	r3, r0
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d001      	beq.n	80018ba <bmp280_init+0x64>
		return false;
 80018b6:	2300      	movs	r3, #0
 80018b8:	e076      	b.n	80019a8 <bmp280_init+0x152>
	}

	// Wait until finished copying over the NVP data.
	while (1) {
		uint8_t status;
		if (!read_data(dev, BMP280_REG_STATUS, &status, 1)
 80018ba:	f107 020c 	add.w	r2, r7, #12
 80018be:	2301      	movs	r3, #1
 80018c0:	21f3      	movs	r1, #243	@ 0xf3
 80018c2:	6878      	ldr	r0, [r7, #4]
 80018c4:	f7ff fe98 	bl	80015f8 <read_data>
 80018c8:	4603      	mov	r3, r0
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d1f5      	bne.n	80018ba <bmp280_init+0x64>
				&& (status & 1) == 0)
 80018ce:	7b3b      	ldrb	r3, [r7, #12]
 80018d0:	f003 0301 	and.w	r3, r3, #1
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d1f0      	bne.n	80018ba <bmp280_init+0x64>
			break;
	}

	if (!read_calibration_data(dev)) {
 80018d8:	6878      	ldr	r0, [r7, #4]
 80018da:	f7ff feb5 	bl	8001648 <read_calibration_data>
 80018de:	4603      	mov	r3, r0
 80018e0:	f083 0301 	eor.w	r3, r3, #1
 80018e4:	b2db      	uxtb	r3, r3
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d100      	bne.n	80018ec <bmp280_init+0x96>
 80018ea:	e001      	b.n	80018f0 <bmp280_init+0x9a>
		return false;
 80018ec:	2300      	movs	r3, #0
 80018ee:	e05b      	b.n	80019a8 <bmp280_init+0x152>
	}

	if (dev->id == BME280_CHIP_ID && !read_hum_calibration_data(dev)) {
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80018f6:	2b60      	cmp	r3, #96	@ 0x60
 80018f8:	d10a      	bne.n	8001910 <bmp280_init+0xba>
 80018fa:	6878      	ldr	r0, [r7, #4]
 80018fc:	f7ff ff26 	bl	800174c <read_hum_calibration_data>
 8001900:	4603      	mov	r3, r0
 8001902:	f083 0301 	eor.w	r3, r3, #1
 8001906:	b2db      	uxtb	r3, r3
 8001908:	2b00      	cmp	r3, #0
 800190a:	d001      	beq.n	8001910 <bmp280_init+0xba>
		return false;
 800190c:	2300      	movs	r3, #0
 800190e:	e04b      	b.n	80019a8 <bmp280_init+0x152>
	}

	uint8_t config = (params->standby << 5) | (params->filter << 2);
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	795b      	ldrb	r3, [r3, #5]
 8001914:	015b      	lsls	r3, r3, #5
 8001916:	b25a      	sxtb	r2, r3
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	785b      	ldrb	r3, [r3, #1]
 800191c:	009b      	lsls	r3, r3, #2
 800191e:	b25b      	sxtb	r3, r3
 8001920:	4313      	orrs	r3, r2
 8001922:	b25b      	sxtb	r3, r3
 8001924:	73fb      	strb	r3, [r7, #15]
	if (write_register8(dev, BMP280_REG_CONFIG, config)) {
 8001926:	7bfb      	ldrb	r3, [r7, #15]
 8001928:	461a      	mov	r2, r3
 800192a:	21f5      	movs	r1, #245	@ 0xf5
 800192c:	6878      	ldr	r0, [r7, #4]
 800192e:	f7ff ff6d 	bl	800180c <write_register8>
 8001932:	4603      	mov	r3, r0
 8001934:	2b00      	cmp	r3, #0
 8001936:	d001      	beq.n	800193c <bmp280_init+0xe6>
		return false;
 8001938:	2300      	movs	r3, #0
 800193a:	e035      	b.n	80019a8 <bmp280_init+0x152>
	}

	if (params->mode == BMP280_MODE_FORCED) {
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	781b      	ldrb	r3, [r3, #0]
 8001940:	2b01      	cmp	r3, #1
 8001942:	d102      	bne.n	800194a <bmp280_init+0xf4>
		params->mode = BMP280_MODE_SLEEP;  // initial mode for forced is sleep
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	2200      	movs	r2, #0
 8001948:	701a      	strb	r2, [r3, #0]
	}

	uint8_t ctrl = (params->oversampling_temperature << 5)
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	78db      	ldrb	r3, [r3, #3]
 800194e:	015b      	lsls	r3, r3, #5
			| (params->oversampling_pressure << 2) | (params->mode);
 8001950:	b25a      	sxtb	r2, r3
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	789b      	ldrb	r3, [r3, #2]
 8001956:	009b      	lsls	r3, r3, #2
 8001958:	b25b      	sxtb	r3, r3
 800195a:	4313      	orrs	r3, r2
 800195c:	b25a      	sxtb	r2, r3
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	781b      	ldrb	r3, [r3, #0]
 8001962:	b25b      	sxtb	r3, r3
 8001964:	4313      	orrs	r3, r2
 8001966:	b25b      	sxtb	r3, r3
	uint8_t ctrl = (params->oversampling_temperature << 5)
 8001968:	73bb      	strb	r3, [r7, #14]

	if (dev->id == BME280_CHIP_ID) {
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8001970:	2b60      	cmp	r3, #96	@ 0x60
 8001972:	d10d      	bne.n	8001990 <bmp280_init+0x13a>
		// Write crtl hum reg first, only active after write to BMP280_REG_CTRL.
		uint8_t ctrl_hum = params->oversampling_humidity;
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	791b      	ldrb	r3, [r3, #4]
 8001978:	737b      	strb	r3, [r7, #13]
		if (write_register8(dev, BMP280_REG_CTRL_HUM, ctrl_hum)) {
 800197a:	7b7b      	ldrb	r3, [r7, #13]
 800197c:	461a      	mov	r2, r3
 800197e:	21f2      	movs	r1, #242	@ 0xf2
 8001980:	6878      	ldr	r0, [r7, #4]
 8001982:	f7ff ff43 	bl	800180c <write_register8>
 8001986:	4603      	mov	r3, r0
 8001988:	2b00      	cmp	r3, #0
 800198a:	d001      	beq.n	8001990 <bmp280_init+0x13a>
			return false;
 800198c:	2300      	movs	r3, #0
 800198e:	e00b      	b.n	80019a8 <bmp280_init+0x152>
		}
	}

	if (write_register8(dev, BMP280_REG_CTRL, ctrl)) {
 8001990:	7bbb      	ldrb	r3, [r7, #14]
 8001992:	461a      	mov	r2, r3
 8001994:	21f4      	movs	r1, #244	@ 0xf4
 8001996:	6878      	ldr	r0, [r7, #4]
 8001998:	f7ff ff38 	bl	800180c <write_register8>
 800199c:	4603      	mov	r3, r0
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d001      	beq.n	80019a6 <bmp280_init+0x150>
		return false;
 80019a2:	2300      	movs	r3, #0
 80019a4:	e000      	b.n	80019a8 <bmp280_init+0x152>
	}

	return true;
 80019a6:	2301      	movs	r3, #1
}
 80019a8:	4618      	mov	r0, r3
 80019aa:	3710      	adds	r7, #16
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}

080019b0 <compensate_temperature>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in degrees Celsius.
 */
static inline int32_t compensate_temperature(BMP280_HandleTypedef *dev, int32_t adc_temp,
		int32_t *fine_temp) {
 80019b0:	b480      	push	{r7}
 80019b2:	b087      	sub	sp, #28
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	60f8      	str	r0, [r7, #12]
 80019b8:	60b9      	str	r1, [r7, #8]
 80019ba:	607a      	str	r2, [r7, #4]
	int32_t var1, var2;

	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 80019bc:	68bb      	ldr	r3, [r7, #8]
 80019be:	10da      	asrs	r2, r3, #3
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	881b      	ldrh	r3, [r3, #0]
 80019c4:	005b      	lsls	r3, r3, #1
 80019c6:	1ad3      	subs	r3, r2, r3
			* (int32_t) dev->dig_T2) >> 11;
 80019c8:	68fa      	ldr	r2, [r7, #12]
 80019ca:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 80019ce:	fb02 f303 	mul.w	r3, r2, r3
	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 80019d2:	12db      	asrs	r3, r3, #11
 80019d4:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 80019d6:	68bb      	ldr	r3, [r7, #8]
 80019d8:	111b      	asrs	r3, r3, #4
 80019da:	68fa      	ldr	r2, [r7, #12]
 80019dc:	8812      	ldrh	r2, [r2, #0]
 80019de:	1a9b      	subs	r3, r3, r2
			* ((adc_temp >> 4) - (int32_t) dev->dig_T1)) >> 12)
 80019e0:	68ba      	ldr	r2, [r7, #8]
 80019e2:	1112      	asrs	r2, r2, #4
 80019e4:	68f9      	ldr	r1, [r7, #12]
 80019e6:	8809      	ldrh	r1, [r1, #0]
 80019e8:	1a52      	subs	r2, r2, r1
 80019ea:	fb02 f303 	mul.w	r3, r2, r3
 80019ee:	131b      	asrs	r3, r3, #12
			* (int32_t) dev->dig_T3) >> 14;
 80019f0:	68fa      	ldr	r2, [r7, #12]
 80019f2:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 80019f6:	fb02 f303 	mul.w	r3, r2, r3
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 80019fa:	139b      	asrs	r3, r3, #14
 80019fc:	613b      	str	r3, [r7, #16]

	*fine_temp = var1 + var2;
 80019fe:	697a      	ldr	r2, [r7, #20]
 8001a00:	693b      	ldr	r3, [r7, #16]
 8001a02:	441a      	add	r2, r3
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	601a      	str	r2, [r3, #0]
	return (*fine_temp * 5 + 128) >> 8;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681a      	ldr	r2, [r3, #0]
 8001a0c:	4613      	mov	r3, r2
 8001a0e:	009b      	lsls	r3, r3, #2
 8001a10:	4413      	add	r3, r2
 8001a12:	3380      	adds	r3, #128	@ 0x80
 8001a14:	121b      	asrs	r3, r3, #8
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	371c      	adds	r7, #28
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bc80      	pop	{r7}
 8001a1e:	4770      	bx	lr

08001a20 <compensate_pressure>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_pressure(BMP280_HandleTypedef *dev, int32_t adc_press,
		int32_t fine_temp) {
 8001a20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001a24:	b0cc      	sub	sp, #304	@ 0x130
 8001a26:	af00      	add	r7, sp, #0
 8001a28:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
 8001a2c:	f8c7 1110 	str.w	r1, [r7, #272]	@ 0x110
 8001a30:	f8c7 210c 	str.w	r2, [r7, #268]	@ 0x10c
	int64_t var1, var2, p;

	var1 = (int64_t) fine_temp - 128000;
 8001a34:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8001a38:	17da      	asrs	r2, r3, #31
 8001a3a:	461c      	mov	r4, r3
 8001a3c:	4615      	mov	r5, r2
 8001a3e:	f5b4 3afa 	subs.w	sl, r4, #128000	@ 0x1f400
 8001a42:	f145 3bff 	adc.w	fp, r5, #4294967295
 8001a46:	e9c7 ab4a 	strd	sl, fp, [r7, #296]	@ 0x128
	var2 = var1 * var1 * (int64_t) dev->dig_P6;
 8001a4a:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 8001a4e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001a52:	fb03 f102 	mul.w	r1, r3, r2
 8001a56:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 8001a5a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001a5e:	fb02 f303 	mul.w	r3, r2, r3
 8001a62:	18ca      	adds	r2, r1, r3
 8001a64:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001a68:	fba3 8903 	umull	r8, r9, r3, r3
 8001a6c:	eb02 0309 	add.w	r3, r2, r9
 8001a70:	4699      	mov	r9, r3
 8001a72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001a76:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001a7a:	b21b      	sxth	r3, r3
 8001a7c:	17da      	asrs	r2, r3, #31
 8001a7e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8001a82:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8001a86:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	fb03 f209 	mul.w	r2, r3, r9
 8001a90:	460b      	mov	r3, r1
 8001a92:	fb08 f303 	mul.w	r3, r8, r3
 8001a96:	4413      	add	r3, r2
 8001a98:	4602      	mov	r2, r0
 8001a9a:	fba8 2102 	umull	r2, r1, r8, r2
 8001a9e:	f8c7 10c4 	str.w	r1, [r7, #196]	@ 0xc4
 8001aa2:	f8c7 20c0 	str.w	r2, [r7, #192]	@ 0xc0
 8001aa6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8001aaa:	4413      	add	r3, r2
 8001aac:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8001ab0:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	@ 0xc0
 8001ab4:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
 8001ab8:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	var2 = var2 + ((var1 * (int64_t) dev->dig_P5) << 17);
 8001abc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001ac0:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001ac4:	b21b      	sxth	r3, r3
 8001ac6:	17da      	asrs	r2, r3, #31
 8001ac8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8001acc:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 8001ad0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001ad4:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	@ 0xb0
 8001ad8:	462a      	mov	r2, r5
 8001ada:	fb02 f203 	mul.w	r2, r2, r3
 8001ade:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001ae2:	4621      	mov	r1, r4
 8001ae4:	fb01 f303 	mul.w	r3, r1, r3
 8001ae8:	441a      	add	r2, r3
 8001aea:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001aee:	4621      	mov	r1, r4
 8001af0:	fba3 3101 	umull	r3, r1, r3, r1
 8001af4:	f8c7 1104 	str.w	r1, [r7, #260]	@ 0x104
 8001af8:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8001afc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8001b00:	18d3      	adds	r3, r2, r3
 8001b02:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8001b06:	f04f 0000 	mov.w	r0, #0
 8001b0a:	f04f 0100 	mov.w	r1, #0
 8001b0e:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	@ 0x100
 8001b12:	462b      	mov	r3, r5
 8001b14:	0459      	lsls	r1, r3, #17
 8001b16:	4622      	mov	r2, r4
 8001b18:	ea41 31d2 	orr.w	r1, r1, r2, lsr #15
 8001b1c:	4623      	mov	r3, r4
 8001b1e:	0458      	lsls	r0, r3, #17
 8001b20:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001b24:	1814      	adds	r4, r2, r0
 8001b26:	643c      	str	r4, [r7, #64]	@ 0x40
 8001b28:	414b      	adcs	r3, r1
 8001b2a:	647b      	str	r3, [r7, #68]	@ 0x44
 8001b2c:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 8001b30:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	var2 = var2 + (((int64_t) dev->dig_P4) << 35);
 8001b34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001b38:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001b3c:	b21b      	sxth	r3, r3
 8001b3e:	17da      	asrs	r2, r3, #31
 8001b40:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8001b44:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8001b48:	f04f 0000 	mov.w	r0, #0
 8001b4c:	f04f 0100 	mov.w	r1, #0
 8001b50:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001b54:	00d9      	lsls	r1, r3, #3
 8001b56:	2000      	movs	r0, #0
 8001b58:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001b5c:	1814      	adds	r4, r2, r0
 8001b5e:	63bc      	str	r4, [r7, #56]	@ 0x38
 8001b60:	414b      	adcs	r3, r1
 8001b62:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001b64:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 8001b68:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 8001b6c:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 8001b70:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001b74:	fb03 f102 	mul.w	r1, r3, r2
 8001b78:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 8001b7c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001b80:	fb02 f303 	mul.w	r3, r2, r3
 8001b84:	18ca      	adds	r2, r1, r3
 8001b86:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001b8a:	fba3 3103 	umull	r3, r1, r3, r3
 8001b8e:	f8c7 10fc 	str.w	r1, [r7, #252]	@ 0xfc
 8001b92:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8001b96:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001b9a:	18d3      	adds	r3, r2, r3
 8001b9c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8001ba0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001ba4:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001ba8:	b21b      	sxth	r3, r3
 8001baa:	17da      	asrs	r2, r3, #31
 8001bac:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8001bb0:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8001bb4:	e9d7 343e 	ldrd	r3, r4, [r7, #248]	@ 0xf8
 8001bb8:	4622      	mov	r2, r4
 8001bba:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8001bbe:	4641      	mov	r1, r8
 8001bc0:	fb01 f202 	mul.w	r2, r1, r2
 8001bc4:	464d      	mov	r5, r9
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	4621      	mov	r1, r4
 8001bca:	4603      	mov	r3, r0
 8001bcc:	fb03 f305 	mul.w	r3, r3, r5
 8001bd0:	4413      	add	r3, r2
 8001bd2:	4602      	mov	r2, r0
 8001bd4:	4641      	mov	r1, r8
 8001bd6:	fba2 2101 	umull	r2, r1, r2, r1
 8001bda:	f8c7 10f4 	str.w	r1, [r7, #244]	@ 0xf4
 8001bde:	f8c7 20f0 	str.w	r2, [r7, #240]	@ 0xf0
 8001be2:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 8001be6:	4413      	add	r3, r2
 8001be8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8001bec:	f04f 0000 	mov.w	r0, #0
 8001bf0:	f04f 0100 	mov.w	r1, #0
 8001bf4:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	@ 0xf0
 8001bf8:	4623      	mov	r3, r4
 8001bfa:	0a18      	lsrs	r0, r3, #8
 8001bfc:	462a      	mov	r2, r5
 8001bfe:	ea40 6002 	orr.w	r0, r0, r2, lsl #24
 8001c02:	462b      	mov	r3, r5
 8001c04:	1219      	asrs	r1, r3, #8
			+ ((var1 * (int64_t) dev->dig_P2) << 12);
 8001c06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001c0a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001c0e:	b21b      	sxth	r3, r3
 8001c10:	17da      	asrs	r2, r3, #31
 8001c12:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001c16:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8001c1a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001c1e:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	@ 0x98
 8001c22:	464a      	mov	r2, r9
 8001c24:	fb02 f203 	mul.w	r2, r2, r3
 8001c28:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001c2c:	4644      	mov	r4, r8
 8001c2e:	fb04 f303 	mul.w	r3, r4, r3
 8001c32:	441a      	add	r2, r3
 8001c34:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001c38:	4644      	mov	r4, r8
 8001c3a:	fba3 3404 	umull	r3, r4, r3, r4
 8001c3e:	f8c7 40ec 	str.w	r4, [r7, #236]	@ 0xec
 8001c42:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8001c46:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8001c4a:	18d3      	adds	r3, r2, r3
 8001c4c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8001c50:	f04f 0200 	mov.w	r2, #0
 8001c54:	f04f 0300 	mov.w	r3, #0
 8001c58:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	@ 0xe8
 8001c5c:	464c      	mov	r4, r9
 8001c5e:	0323      	lsls	r3, r4, #12
 8001c60:	46c4      	mov	ip, r8
 8001c62:	ea43 531c 	orr.w	r3, r3, ip, lsr #20
 8001c66:	4644      	mov	r4, r8
 8001c68:	0322      	lsls	r2, r4, #12
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 8001c6a:	1884      	adds	r4, r0, r2
 8001c6c:	633c      	str	r4, [r7, #48]	@ 0x30
 8001c6e:	eb41 0303 	adc.w	r3, r1, r3
 8001c72:	637b      	str	r3, [r7, #52]	@ 0x34
 8001c74:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 8001c78:	e9c7 344a 	strd	r3, r4, [r7, #296]	@ 0x128
	var1 = (((int64_t) 1 << 47) + var1) * ((int64_t) dev->dig_P1) >> 33;
 8001c7c:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 8001c80:	f503 4100 	add.w	r1, r3, #32768	@ 0x8000
 8001c84:	f8c7 1094 	str.w	r1, [r7, #148]	@ 0x94
 8001c88:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 8001c8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001c90:	88db      	ldrh	r3, [r3, #6]
 8001c92:	b29b      	uxth	r3, r3
 8001c94:	2200      	movs	r2, #0
 8001c96:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001c9a:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001c9e:	e9d7 3424 	ldrd	r3, r4, [r7, #144]	@ 0x90
 8001ca2:	4622      	mov	r2, r4
 8001ca4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8001ca8:	4641      	mov	r1, r8
 8001caa:	fb01 f202 	mul.w	r2, r1, r2
 8001cae:	464d      	mov	r5, r9
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	4621      	mov	r1, r4
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	fb03 f305 	mul.w	r3, r3, r5
 8001cba:	4413      	add	r3, r2
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	4641      	mov	r1, r8
 8001cc0:	fba2 2101 	umull	r2, r1, r2, r1
 8001cc4:	f8c7 10e4 	str.w	r1, [r7, #228]	@ 0xe4
 8001cc8:	f8c7 20e0 	str.w	r2, [r7, #224]	@ 0xe0
 8001ccc:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8001cd0:	4413      	add	r3, r2
 8001cd2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8001cd6:	f04f 0200 	mov.w	r2, #0
 8001cda:	f04f 0300 	mov.w	r3, #0
 8001cde:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	@ 0xe0
 8001ce2:	4629      	mov	r1, r5
 8001ce4:	104a      	asrs	r2, r1, #1
 8001ce6:	4629      	mov	r1, r5
 8001ce8:	17cb      	asrs	r3, r1, #31
 8001cea:	e9c7 234a 	strd	r2, r3, [r7, #296]	@ 0x128

	if (var1 == 0) {
 8001cee:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 8001cf2:	4313      	orrs	r3, r2
 8001cf4:	d101      	bne.n	8001cfa <compensate_pressure+0x2da>
		return 0;  // avoid exception caused by division by zero
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	e146      	b.n	8001f88 <compensate_pressure+0x568>
	}

	p = 1048576 - adc_press;
 8001cfa:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001cfe:	f5c3 1380 	rsb	r3, r3, #1048576	@ 0x100000
 8001d02:	17da      	asrs	r2, r3, #31
 8001d04:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001d06:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001d08:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 8001d0c:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	p = (((p << 31) - var2) * 3125) / var1;
 8001d10:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001d14:	105b      	asrs	r3, r3, #1
 8001d16:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8001d1a:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001d1e:	07db      	lsls	r3, r3, #31
 8001d20:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001d24:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001d28:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8001d2c:	4604      	mov	r4, r0
 8001d2e:	1aa4      	subs	r4, r4, r2
 8001d30:	67bc      	str	r4, [r7, #120]	@ 0x78
 8001d32:	eb61 0303 	sbc.w	r3, r1, r3
 8001d36:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001d38:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8001d3c:	4622      	mov	r2, r4
 8001d3e:	462b      	mov	r3, r5
 8001d40:	1891      	adds	r1, r2, r2
 8001d42:	6239      	str	r1, [r7, #32]
 8001d44:	415b      	adcs	r3, r3
 8001d46:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d48:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001d4c:	4621      	mov	r1, r4
 8001d4e:	1851      	adds	r1, r2, r1
 8001d50:	61b9      	str	r1, [r7, #24]
 8001d52:	4629      	mov	r1, r5
 8001d54:	414b      	adcs	r3, r1
 8001d56:	61fb      	str	r3, [r7, #28]
 8001d58:	f04f 0200 	mov.w	r2, #0
 8001d5c:	f04f 0300 	mov.w	r3, #0
 8001d60:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8001d64:	4649      	mov	r1, r9
 8001d66:	018b      	lsls	r3, r1, #6
 8001d68:	4641      	mov	r1, r8
 8001d6a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001d6e:	4641      	mov	r1, r8
 8001d70:	018a      	lsls	r2, r1, #6
 8001d72:	4641      	mov	r1, r8
 8001d74:	1889      	adds	r1, r1, r2
 8001d76:	6139      	str	r1, [r7, #16]
 8001d78:	4649      	mov	r1, r9
 8001d7a:	eb43 0101 	adc.w	r1, r3, r1
 8001d7e:	6179      	str	r1, [r7, #20]
 8001d80:	f04f 0200 	mov.w	r2, #0
 8001d84:	f04f 0300 	mov.w	r3, #0
 8001d88:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8001d8c:	4649      	mov	r1, r9
 8001d8e:	008b      	lsls	r3, r1, #2
 8001d90:	46c4      	mov	ip, r8
 8001d92:	ea43 739c 	orr.w	r3, r3, ip, lsr #30
 8001d96:	4641      	mov	r1, r8
 8001d98:	008a      	lsls	r2, r1, #2
 8001d9a:	4610      	mov	r0, r2
 8001d9c:	4619      	mov	r1, r3
 8001d9e:	4603      	mov	r3, r0
 8001da0:	4622      	mov	r2, r4
 8001da2:	189b      	adds	r3, r3, r2
 8001da4:	60bb      	str	r3, [r7, #8]
 8001da6:	460b      	mov	r3, r1
 8001da8:	462a      	mov	r2, r5
 8001daa:	eb42 0303 	adc.w	r3, r2, r3
 8001dae:	60fb      	str	r3, [r7, #12]
 8001db0:	f04f 0200 	mov.w	r2, #0
 8001db4:	f04f 0300 	mov.w	r3, #0
 8001db8:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8001dbc:	4649      	mov	r1, r9
 8001dbe:	008b      	lsls	r3, r1, #2
 8001dc0:	46c4      	mov	ip, r8
 8001dc2:	ea43 739c 	orr.w	r3, r3, ip, lsr #30
 8001dc6:	4641      	mov	r1, r8
 8001dc8:	008a      	lsls	r2, r1, #2
 8001dca:	4610      	mov	r0, r2
 8001dcc:	4619      	mov	r1, r3
 8001dce:	4603      	mov	r3, r0
 8001dd0:	4622      	mov	r2, r4
 8001dd2:	189b      	adds	r3, r3, r2
 8001dd4:	673b      	str	r3, [r7, #112]	@ 0x70
 8001dd6:	462b      	mov	r3, r5
 8001dd8:	460a      	mov	r2, r1
 8001dda:	eb42 0303 	adc.w	r3, r2, r3
 8001dde:	677b      	str	r3, [r7, #116]	@ 0x74
 8001de0:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 8001de4:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8001de8:	f7ff f9d8 	bl	800119c <__aeabi_ldivmod>
 8001dec:	4602      	mov	r2, r0
 8001dee:	460b      	mov	r3, r1
 8001df0:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
	var1 = ((int64_t) dev->dig_P9 * (p >> 13) * (p >> 13)) >> 25;
 8001df4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001df8:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8001dfc:	b21b      	sxth	r3, r3
 8001dfe:	17da      	asrs	r2, r3, #31
 8001e00:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001e02:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001e04:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001e08:	f04f 0000 	mov.w	r0, #0
 8001e0c:	f04f 0100 	mov.w	r1, #0
 8001e10:	0b50      	lsrs	r0, r2, #13
 8001e12:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001e16:	1359      	asrs	r1, r3, #13
 8001e18:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	@ 0x68
 8001e1c:	462b      	mov	r3, r5
 8001e1e:	fb00 f203 	mul.w	r2, r0, r3
 8001e22:	4623      	mov	r3, r4
 8001e24:	fb03 f301 	mul.w	r3, r3, r1
 8001e28:	4413      	add	r3, r2
 8001e2a:	4622      	mov	r2, r4
 8001e2c:	fba2 2100 	umull	r2, r1, r2, r0
 8001e30:	f8c7 10dc 	str.w	r1, [r7, #220]	@ 0xdc
 8001e34:	f8c7 20d8 	str.w	r2, [r7, #216]	@ 0xd8
 8001e38:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8001e3c:	4413      	add	r3, r2
 8001e3e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8001e42:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001e46:	f04f 0000 	mov.w	r0, #0
 8001e4a:	f04f 0100 	mov.w	r1, #0
 8001e4e:	0b50      	lsrs	r0, r2, #13
 8001e50:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001e54:	1359      	asrs	r1, r3, #13
 8001e56:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 8001e5a:	462b      	mov	r3, r5
 8001e5c:	fb00 f203 	mul.w	r2, r0, r3
 8001e60:	4623      	mov	r3, r4
 8001e62:	fb03 f301 	mul.w	r3, r3, r1
 8001e66:	4413      	add	r3, r2
 8001e68:	4622      	mov	r2, r4
 8001e6a:	fba2 2100 	umull	r2, r1, r2, r0
 8001e6e:	f8c7 10d4 	str.w	r1, [r7, #212]	@ 0xd4
 8001e72:	f8c7 20d0 	str.w	r2, [r7, #208]	@ 0xd0
 8001e76:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8001e7a:	4413      	add	r3, r2
 8001e7c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8001e80:	f04f 0200 	mov.w	r2, #0
 8001e84:	f04f 0300 	mov.w	r3, #0
 8001e88:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	@ 0xd0
 8001e8c:	4621      	mov	r1, r4
 8001e8e:	0e4a      	lsrs	r2, r1, #25
 8001e90:	4620      	mov	r0, r4
 8001e92:	4629      	mov	r1, r5
 8001e94:	460c      	mov	r4, r1
 8001e96:	ea42 12c4 	orr.w	r2, r2, r4, lsl #7
 8001e9a:	164b      	asrs	r3, r1, #25
 8001e9c:	e9c7 234a 	strd	r2, r3, [r7, #296]	@ 0x128
	var2 = ((int64_t) dev->dig_P8 * p) >> 19;
 8001ea0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001ea4:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001ea8:	b21b      	sxth	r3, r3
 8001eaa:	17da      	asrs	r2, r3, #31
 8001eac:	663b      	str	r3, [r7, #96]	@ 0x60
 8001eae:	667a      	str	r2, [r7, #100]	@ 0x64
 8001eb0:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001eb4:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8001eb8:	462a      	mov	r2, r5
 8001eba:	fb02 f203 	mul.w	r2, r2, r3
 8001ebe:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8001ec2:	4621      	mov	r1, r4
 8001ec4:	fb01 f303 	mul.w	r3, r1, r3
 8001ec8:	4413      	add	r3, r2
 8001eca:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8001ece:	4621      	mov	r1, r4
 8001ed0:	fba2 2101 	umull	r2, r1, r2, r1
 8001ed4:	f8c7 10cc 	str.w	r1, [r7, #204]	@ 0xcc
 8001ed8:	f8c7 20c8 	str.w	r2, [r7, #200]	@ 0xc8
 8001edc:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 8001ee0:	4413      	add	r3, r2
 8001ee2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8001ee6:	f04f 0200 	mov.w	r2, #0
 8001eea:	f04f 0300 	mov.w	r3, #0
 8001eee:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	@ 0xc8
 8001ef2:	4621      	mov	r1, r4
 8001ef4:	0cca      	lsrs	r2, r1, #19
 8001ef6:	4620      	mov	r0, r4
 8001ef8:	4629      	mov	r1, r5
 8001efa:	460c      	mov	r4, r1
 8001efc:	ea42 3244 	orr.w	r2, r2, r4, lsl #13
 8001f00:	14cb      	asrs	r3, r1, #19
 8001f02:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120

	p = ((p + var1 + var2) >> 8) + ((int64_t) dev->dig_P7 << 4);
 8001f06:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	@ 0x118
 8001f0a:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 8001f0e:	1884      	adds	r4, r0, r2
 8001f10:	65bc      	str	r4, [r7, #88]	@ 0x58
 8001f12:	eb41 0303 	adc.w	r3, r1, r3
 8001f16:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001f18:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001f1c:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 8001f20:	4621      	mov	r1, r4
 8001f22:	1889      	adds	r1, r1, r2
 8001f24:	6539      	str	r1, [r7, #80]	@ 0x50
 8001f26:	4629      	mov	r1, r5
 8001f28:	eb43 0101 	adc.w	r1, r3, r1
 8001f2c:	6579      	str	r1, [r7, #84]	@ 0x54
 8001f2e:	f04f 0000 	mov.w	r0, #0
 8001f32:	f04f 0100 	mov.w	r1, #0
 8001f36:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 8001f3a:	4623      	mov	r3, r4
 8001f3c:	0a18      	lsrs	r0, r3, #8
 8001f3e:	462a      	mov	r2, r5
 8001f40:	ea40 6002 	orr.w	r0, r0, r2, lsl #24
 8001f44:	462b      	mov	r3, r5
 8001f46:	1219      	asrs	r1, r3, #8
 8001f48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001f4c:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001f50:	b21b      	sxth	r3, r3
 8001f52:	17da      	asrs	r2, r3, #31
 8001f54:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001f56:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8001f58:	f04f 0200 	mov.w	r2, #0
 8001f5c:	f04f 0300 	mov.w	r3, #0
 8001f60:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	@ 0x48
 8001f64:	464c      	mov	r4, r9
 8001f66:	0123      	lsls	r3, r4, #4
 8001f68:	46c4      	mov	ip, r8
 8001f6a:	ea43 731c 	orr.w	r3, r3, ip, lsr #28
 8001f6e:	4644      	mov	r4, r8
 8001f70:	0122      	lsls	r2, r4, #4
 8001f72:	1884      	adds	r4, r0, r2
 8001f74:	603c      	str	r4, [r7, #0]
 8001f76:	eb41 0303 	adc.w	r3, r1, r3
 8001f7a:	607b      	str	r3, [r7, #4]
 8001f7c:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001f80:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	return p;
 8001f84:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
}
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08001f94 <compensate_humidity>:
 * Compensation algorithm is taken from BME280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_humidity(BMP280_HandleTypedef *dev, int32_t adc_hum,
		int32_t fine_temp) {
 8001f94:	b480      	push	{r7}
 8001f96:	b087      	sub	sp, #28
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	60f8      	str	r0, [r7, #12]
 8001f9c:	60b9      	str	r1, [r7, #8]
 8001f9e:	607a      	str	r2, [r7, #4]
	int32_t v_x1_u32r;

	v_x1_u32r = fine_temp - (int32_t) 76800;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	f5a3 3396 	sub.w	r3, r3, #76800	@ 0x12c00
 8001fa6:	617b      	str	r3, [r7, #20]
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 8001fa8:	68bb      	ldr	r3, [r7, #8]
 8001faa:	039a      	lsls	r2, r3, #14
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8001fb2:	051b      	lsls	r3, r3, #20
 8001fb4:	1ad2      	subs	r2, r2, r3
			- ((int32_t) dev->dig_H5 * v_x1_u32r)) + (int32_t) 16384) >> 15)
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001fbc:	4619      	mov	r1, r3
 8001fbe:	697b      	ldr	r3, [r7, #20]
 8001fc0:	fb01 f303 	mul.w	r3, r1, r3
 8001fc4:	1ad3      	subs	r3, r2, r3
 8001fc6:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8001fca:	13db      	asrs	r3, r3, #15
			* (((((((v_x1_u32r * (int32_t) dev->dig_H6) >> 10)
 8001fcc:	68fa      	ldr	r2, [r7, #12]
 8001fce:	f992 2022 	ldrsb.w	r2, [r2, #34]	@ 0x22
 8001fd2:	4611      	mov	r1, r2
 8001fd4:	697a      	ldr	r2, [r7, #20]
 8001fd6:	fb01 f202 	mul.w	r2, r1, r2
 8001fda:	1292      	asrs	r2, r2, #10
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 8001fdc:	68f9      	ldr	r1, [r7, #12]
 8001fde:	7f09      	ldrb	r1, [r1, #28]
 8001fe0:	4608      	mov	r0, r1
 8001fe2:	6979      	ldr	r1, [r7, #20]
 8001fe4:	fb00 f101 	mul.w	r1, r0, r1
 8001fe8:	12c9      	asrs	r1, r1, #11
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 8001fea:	f501 4100 	add.w	r1, r1, #32768	@ 0x8000
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 8001fee:	fb01 f202 	mul.w	r2, r1, r2
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 8001ff2:	1292      	asrs	r2, r2, #10
 8001ff4:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
					* (int32_t) dev->dig_H2 + 8192) >> 14);
 8001ff8:	68f9      	ldr	r1, [r7, #12]
 8001ffa:	f9b1 101a 	ldrsh.w	r1, [r1, #26]
 8001ffe:	fb01 f202 	mul.w	r2, r1, r2
 8002002:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 8002006:	1392      	asrs	r2, r2, #14
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 8002008:	fb02 f303 	mul.w	r3, r2, r3
 800200c:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r
			- (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7)
 800200e:	697b      	ldr	r3, [r7, #20]
 8002010:	13db      	asrs	r3, r3, #15
 8002012:	697a      	ldr	r2, [r7, #20]
 8002014:	13d2      	asrs	r2, r2, #15
 8002016:	fb02 f303 	mul.w	r3, r2, r3
 800201a:	11db      	asrs	r3, r3, #7
					* (int32_t) dev->dig_H1) >> 4);
 800201c:	68fa      	ldr	r2, [r7, #12]
 800201e:	7e12      	ldrb	r2, [r2, #24]
 8002020:	fb02 f303 	mul.w	r3, r2, r3
 8002024:	111b      	asrs	r3, r3, #4
	v_x1_u32r = v_x1_u32r
 8002026:	697a      	ldr	r2, [r7, #20]
 8002028:	1ad3      	subs	r3, r2, r3
 800202a:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r < 0 ? 0 : v_x1_u32r;
 800202c:	697b      	ldr	r3, [r7, #20]
 800202e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8002032:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r;
 8002034:	697b      	ldr	r3, [r7, #20]
 8002036:	f1b3 5fc8 	cmp.w	r3, #419430400	@ 0x19000000
 800203a:	bfa8      	it	ge
 800203c:	f04f 53c8 	movge.w	r3, #419430400	@ 0x19000000
 8002040:	617b      	str	r3, [r7, #20]
	return v_x1_u32r >> 12;
 8002042:	697b      	ldr	r3, [r7, #20]
 8002044:	131b      	asrs	r3, r3, #12
}
 8002046:	4618      	mov	r0, r3
 8002048:	371c      	adds	r7, #28
 800204a:	46bd      	mov	sp, r7
 800204c:	bc80      	pop	{r7}
 800204e:	4770      	bx	lr

08002050 <bmp280_read_fixed>:

bool bmp280_read_fixed(BMP280_HandleTypedef *dev, int32_t *temperature, uint32_t *pressure,
		uint32_t *humidity) {
 8002050:	b580      	push	{r7, lr}
 8002052:	b08c      	sub	sp, #48	@ 0x30
 8002054:	af00      	add	r7, sp, #0
 8002056:	60f8      	str	r0, [r7, #12]
 8002058:	60b9      	str	r1, [r7, #8]
 800205a:	607a      	str	r2, [r7, #4]
 800205c:	603b      	str	r3, [r7, #0]
	int32_t adc_pressure;
	int32_t adc_temp;
	uint8_t data[8];

	// Only the BME280 supports reading the humidity.
	if (dev->id != BME280_CHIP_ID) {
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8002064:	2b60      	cmp	r3, #96	@ 0x60
 8002066:	d007      	beq.n	8002078 <bmp280_read_fixed+0x28>
		if (humidity)
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d002      	beq.n	8002074 <bmp280_read_fixed+0x24>
			*humidity = 0;
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	2200      	movs	r2, #0
 8002072:	601a      	str	r2, [r3, #0]
		humidity = NULL;
 8002074:	2300      	movs	r3, #0
 8002076:	603b      	str	r3, [r7, #0]
	}

	// Need to read in one sequence to ensure they match.
	size_t size = humidity ? 8 : 6;
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d001      	beq.n	8002082 <bmp280_read_fixed+0x32>
 800207e:	2308      	movs	r3, #8
 8002080:	e000      	b.n	8002084 <bmp280_read_fixed+0x34>
 8002082:	2306      	movs	r3, #6
 8002084:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (read_data(dev, 0xf7, data, size)) {
 8002086:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002088:	b2db      	uxtb	r3, r3
 800208a:	f107 0218 	add.w	r2, r7, #24
 800208e:	21f7      	movs	r1, #247	@ 0xf7
 8002090:	68f8      	ldr	r0, [r7, #12]
 8002092:	f7ff fab1 	bl	80015f8 <read_data>
 8002096:	4603      	mov	r3, r0
 8002098:	2b00      	cmp	r3, #0
 800209a:	d001      	beq.n	80020a0 <bmp280_read_fixed+0x50>
		return false;
 800209c:	2300      	movs	r3, #0
 800209e:	e038      	b.n	8002112 <bmp280_read_fixed+0xc2>
	}

	adc_pressure = data[0] << 12 | data[1] << 4 | data[2] >> 4;
 80020a0:	7e3b      	ldrb	r3, [r7, #24]
 80020a2:	031a      	lsls	r2, r3, #12
 80020a4:	7e7b      	ldrb	r3, [r7, #25]
 80020a6:	011b      	lsls	r3, r3, #4
 80020a8:	4313      	orrs	r3, r2
 80020aa:	7eba      	ldrb	r2, [r7, #26]
 80020ac:	0912      	lsrs	r2, r2, #4
 80020ae:	b2d2      	uxtb	r2, r2
 80020b0:	4313      	orrs	r3, r2
 80020b2:	62bb      	str	r3, [r7, #40]	@ 0x28
	adc_temp = data[3] << 12 | data[4] << 4 | data[5] >> 4;
 80020b4:	7efb      	ldrb	r3, [r7, #27]
 80020b6:	031a      	lsls	r2, r3, #12
 80020b8:	7f3b      	ldrb	r3, [r7, #28]
 80020ba:	011b      	lsls	r3, r3, #4
 80020bc:	4313      	orrs	r3, r2
 80020be:	7f7a      	ldrb	r2, [r7, #29]
 80020c0:	0912      	lsrs	r2, r2, #4
 80020c2:	b2d2      	uxtb	r2, r2
 80020c4:	4313      	orrs	r3, r2
 80020c6:	627b      	str	r3, [r7, #36]	@ 0x24

	int32_t fine_temp;
	*temperature = compensate_temperature(dev, adc_temp, &fine_temp);
 80020c8:	f107 0314 	add.w	r3, r7, #20
 80020cc:	461a      	mov	r2, r3
 80020ce:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80020d0:	68f8      	ldr	r0, [r7, #12]
 80020d2:	f7ff fc6d 	bl	80019b0 <compensate_temperature>
 80020d6:	4602      	mov	r2, r0
 80020d8:	68bb      	ldr	r3, [r7, #8]
 80020da:	601a      	str	r2, [r3, #0]
	*pressure = compensate_pressure(dev, adc_pressure, fine_temp);
 80020dc:	697b      	ldr	r3, [r7, #20]
 80020de:	461a      	mov	r2, r3
 80020e0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80020e2:	68f8      	ldr	r0, [r7, #12]
 80020e4:	f7ff fc9c 	bl	8001a20 <compensate_pressure>
 80020e8:	4602      	mov	r2, r0
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	601a      	str	r2, [r3, #0]

	if (humidity) {
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d00d      	beq.n	8002110 <bmp280_read_fixed+0xc0>
		int32_t adc_humidity = data[6] << 8 | data[7];
 80020f4:	7fbb      	ldrb	r3, [r7, #30]
 80020f6:	021b      	lsls	r3, r3, #8
 80020f8:	7ffa      	ldrb	r2, [r7, #31]
 80020fa:	4313      	orrs	r3, r2
 80020fc:	623b      	str	r3, [r7, #32]
		*humidity = compensate_humidity(dev, adc_humidity, fine_temp);
 80020fe:	697b      	ldr	r3, [r7, #20]
 8002100:	461a      	mov	r2, r3
 8002102:	6a39      	ldr	r1, [r7, #32]
 8002104:	68f8      	ldr	r0, [r7, #12]
 8002106:	f7ff ff45 	bl	8001f94 <compensate_humidity>
 800210a:	4602      	mov	r2, r0
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	601a      	str	r2, [r3, #0]
	}

	return true;
 8002110:	2301      	movs	r3, #1
}
 8002112:	4618      	mov	r0, r3
 8002114:	3730      	adds	r7, #48	@ 0x30
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}
	...

0800211c <bmp280_read_float>:

bool bmp280_read_float(BMP280_HandleTypedef *dev, float *temperature, float *pressure,
		float *humidity) {
 800211c:	b580      	push	{r7, lr}
 800211e:	b088      	sub	sp, #32
 8002120:	af00      	add	r7, sp, #0
 8002122:	60f8      	str	r0, [r7, #12]
 8002124:	60b9      	str	r1, [r7, #8]
 8002126:	607a      	str	r2, [r7, #4]
 8002128:	603b      	str	r3, [r7, #0]
	int32_t fixed_temperature;
	uint32_t fixed_pressure;
	uint32_t fixed_humidity;
	if (bmp280_read_fixed(dev, &fixed_temperature, &fixed_pressure,
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d002      	beq.n	8002136 <bmp280_read_float+0x1a>
 8002130:	f107 0314 	add.w	r3, r7, #20
 8002134:	e000      	b.n	8002138 <bmp280_read_float+0x1c>
 8002136:	2300      	movs	r3, #0
 8002138:	f107 0218 	add.w	r2, r7, #24
 800213c:	f107 011c 	add.w	r1, r7, #28
 8002140:	68f8      	ldr	r0, [r7, #12]
 8002142:	f7ff ff85 	bl	8002050 <bmp280_read_fixed>
 8002146:	4603      	mov	r3, r0
 8002148:	2b00      	cmp	r3, #0
 800214a:	d02d      	beq.n	80021a8 <bmp280_read_float+0x8c>
			humidity ? &fixed_humidity : NULL)) {
		*temperature = (float) fixed_temperature / 100;
 800214c:	69fb      	ldr	r3, [r7, #28]
 800214e:	4618      	mov	r0, r3
 8002150:	f7fe fdc4 	bl	8000cdc <__aeabi_i2f>
 8002154:	4603      	mov	r3, r0
 8002156:	4917      	ldr	r1, [pc, #92]	@ (80021b4 <bmp280_read_float+0x98>)
 8002158:	4618      	mov	r0, r3
 800215a:	f7fe fec7 	bl	8000eec <__aeabi_fdiv>
 800215e:	4603      	mov	r3, r0
 8002160:	461a      	mov	r2, r3
 8002162:	68bb      	ldr	r3, [r7, #8]
 8002164:	601a      	str	r2, [r3, #0]
		*pressure = (float) fixed_pressure / 256;
 8002166:	69bb      	ldr	r3, [r7, #24]
 8002168:	4618      	mov	r0, r3
 800216a:	f7fe fdb3 	bl	8000cd4 <__aeabi_ui2f>
 800216e:	4603      	mov	r3, r0
 8002170:	f04f 4187 	mov.w	r1, #1132462080	@ 0x43800000
 8002174:	4618      	mov	r0, r3
 8002176:	f7fe feb9 	bl	8000eec <__aeabi_fdiv>
 800217a:	4603      	mov	r3, r0
 800217c:	461a      	mov	r2, r3
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	601a      	str	r2, [r3, #0]
		if (humidity)
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	2b00      	cmp	r3, #0
 8002186:	d00d      	beq.n	80021a4 <bmp280_read_float+0x88>
			*humidity = (float) fixed_humidity / 1024;
 8002188:	697b      	ldr	r3, [r7, #20]
 800218a:	4618      	mov	r0, r3
 800218c:	f7fe fda2 	bl	8000cd4 <__aeabi_ui2f>
 8002190:	4603      	mov	r3, r0
 8002192:	f04f 4189 	mov.w	r1, #1149239296	@ 0x44800000
 8002196:	4618      	mov	r0, r3
 8002198:	f7fe fea8 	bl	8000eec <__aeabi_fdiv>
 800219c:	4603      	mov	r3, r0
 800219e:	461a      	mov	r2, r3
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	601a      	str	r2, [r3, #0]
		return true;
 80021a4:	2301      	movs	r3, #1
 80021a6:	e000      	b.n	80021aa <bmp280_read_float+0x8e>
	}

	return false;
 80021a8:	2300      	movs	r3, #0
}
 80021aa:	4618      	mov	r0, r3
 80021ac:	3720      	adds	r7, #32
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	bf00      	nop
 80021b4:	42c80000 	.word	0x42c80000

080021b8 <calculateAltitude>:
    float P = pressure;
    float h = (-PO * log(P / PO)) / (RO * G);
    return h;
}*/

float calculateAltitude(float pressure) {
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b082      	sub	sp, #8
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
    return 44330.0 * (1.0 - pow((pressure / PO), 0.1903));
 80021c0:	4917      	ldr	r1, [pc, #92]	@ (8002220 <calculateAltitude+0x68>)
 80021c2:	6878      	ldr	r0, [r7, #4]
 80021c4:	f7fe fe92 	bl	8000eec <__aeabi_fdiv>
 80021c8:	4603      	mov	r3, r0
 80021ca:	4618      	mov	r0, r3
 80021cc:	f7fe f92c 	bl	8000428 <__aeabi_f2d>
 80021d0:	a30f      	add	r3, pc, #60	@ (adr r3, 8002210 <calculateAltitude+0x58>)
 80021d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021d6:	f009 fc17 	bl	800ba08 <pow>
 80021da:	4602      	mov	r2, r0
 80021dc:	460b      	mov	r3, r1
 80021de:	f04f 0000 	mov.w	r0, #0
 80021e2:	4910      	ldr	r1, [pc, #64]	@ (8002224 <calculateAltitude+0x6c>)
 80021e4:	f7fd ffc0 	bl	8000168 <__aeabi_dsub>
 80021e8:	4602      	mov	r2, r0
 80021ea:	460b      	mov	r3, r1
 80021ec:	4610      	mov	r0, r2
 80021ee:	4619      	mov	r1, r3
 80021f0:	a309      	add	r3, pc, #36	@ (adr r3, 8002218 <calculateAltitude+0x60>)
 80021f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021f6:	f7fe f96f 	bl	80004d8 <__aeabi_dmul>
 80021fa:	4602      	mov	r2, r0
 80021fc:	460b      	mov	r3, r1
 80021fe:	4610      	mov	r0, r2
 8002200:	4619      	mov	r1, r3
 8002202:	f7fe fc61 	bl	8000ac8 <__aeabi_d2f>
 8002206:	4603      	mov	r3, r0
}
 8002208:	4618      	mov	r0, r3
 800220a:	3708      	adds	r7, #8
 800220c:	46bd      	mov	sp, r7
 800220e:	bd80      	pop	{r7, pc}
 8002210:	1a36e2eb 	.word	0x1a36e2eb
 8002214:	3fc85bc0 	.word	0x3fc85bc0
 8002218:	00000000 	.word	0x00000000
 800221c:	40e5a540 	.word	0x40e5a540
 8002220:	47c70600 	.word	0x47c70600
 8002224:	3ff00000 	.word	0x3ff00000

08002228 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002228:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800222c:	f5ad 7d5b 	sub.w	sp, sp, #876	@ 0x36c
 8002230:	af24      	add	r7, sp, #144	@ 0x90
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002232:	f001 fa59 	bl	80036e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002236:	f000 f9e1 	bl	80025fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800223a:	f000 fb49 	bl	80028d0 <MX_GPIO_Init>
  MX_DMA_Init();
 800223e:	f000 fb29 	bl	8002894 <MX_DMA_Init>
  MX_I2C1_Init();
 8002242:	f000 fa21 	bl	8002688 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8002246:	f000 faa7 	bl	8002798 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 800224a:	f000 faf9 	bl	8002840 <MX_USART3_UART_Init>
  MX_USART2_UART_Init();
 800224e:	f000 facd 	bl	80027ec <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8002252:	f000 fa47 	bl	80026e4 <MX_TIM3_Init>

  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8002256:	2100      	movs	r1, #0
 8002258:	4829      	ldr	r0, [pc, #164]	@ (8002300 <main+0xd8>)
 800225a:	f003 fc05 	bl	8005a68 <HAL_TIM_PWM_Start>

  moveServoToAngle(90.0f);
 800225e:	4829      	ldr	r0, [pc, #164]	@ (8002304 <main+0xdc>)
 8002260:	f000 fd60 	bl	8002d24 <moveServoToAngle>

  LoRa_Init();
 8002264:	f000 fc8c 	bl	8002b80 <LoRa_Init>
  HAL_UART_Receive_DMA(&huart2, (uint8_t*)gpsBuffer, GPS_BUFFER_SIZE);
 8002268:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800226c:	4926      	ldr	r1, [pc, #152]	@ (8002308 <main+0xe0>)
 800226e:	4827      	ldr	r0, [pc, #156]	@ (800230c <main+0xe4>)
 8002270:	f004 f89d 	bl	80063ae <HAL_UART_Receive_DMA>
  lastTransmissionTime = 0 ;
 8002274:	4b26      	ldr	r3, [pc, #152]	@ (8002310 <main+0xe8>)
 8002276:	2200      	movs	r2, #0
 8002278:	601a      	str	r2, [r3, #0]

  //En estas lineas pasan cosas raras, aquí es donde se inicializa el dispositivo
  	  	bmp280_init_default_params(&bmp280.params);
 800227a:	4826      	ldr	r0, [pc, #152]	@ (8002314 <main+0xec>)
 800227c:	f7ff f972 	bl	8001564 <bmp280_init_default_params>
    	bmp280.addr = BMP280_I2C_ADDRESS_0;
 8002280:	4b25      	ldr	r3, [pc, #148]	@ (8002318 <main+0xf0>)
 8002282:	2276      	movs	r2, #118	@ 0x76
 8002284:	849a      	strh	r2, [r3, #36]	@ 0x24
    	bmp280.i2c = &hi2c1;
 8002286:	4b24      	ldr	r3, [pc, #144]	@ (8002318 <main+0xf0>)
 8002288:	4a24      	ldr	r2, [pc, #144]	@ (800231c <main+0xf4>)
 800228a:	629a      	str	r2, [r3, #40]	@ 0x28


    	while (!bmp280_init(&bmp280, &bmp280.params)) {
 800228c:	e007      	b.n	800229e <main+0x76>
    	    sprintf((char *)Data, "BMP280 initialization failed\n");
 800228e:	4924      	ldr	r1, [pc, #144]	@ (8002320 <main+0xf8>)
 8002290:	4824      	ldr	r0, [pc, #144]	@ (8002324 <main+0xfc>)
 8002292:	f005 fb4f 	bl	8007934 <siprintf>
    	    //uartx_write_text(&huart1, Data);
    	    HAL_Delay(1000);
 8002296:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800229a:	f001 fa87 	bl	80037ac <HAL_Delay>
    	while (!bmp280_init(&bmp280, &bmp280.params)) {
 800229e:	491d      	ldr	r1, [pc, #116]	@ (8002314 <main+0xec>)
 80022a0:	481d      	ldr	r0, [pc, #116]	@ (8002318 <main+0xf0>)
 80022a2:	f7ff fad8 	bl	8001856 <bmp280_init>
 80022a6:	4603      	mov	r3, r0
 80022a8:	f083 0301 	eor.w	r3, r3, #1
 80022ac:	b2db      	uxtb	r3, r3
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d1ed      	bne.n	800228e <main+0x66>
    	}
	bool bme280p = bmp280.id == BMP280_CHIP_ID;
 80022b2:	4b19      	ldr	r3, [pc, #100]	@ (8002318 <main+0xf0>)
 80022b4:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80022b8:	2b58      	cmp	r3, #88	@ 0x58
 80022ba:	bf0c      	ite	eq
 80022bc:	2301      	moveq	r3, #1
 80022be:	2300      	movne	r3, #0
 80022c0:	f887 32d3 	strb.w	r3, [r7, #723]	@ 0x2d3
	sprintf((char *)Data, "BMP280: found %s\n", bme280p ? "BME280" : "BMP280");
 80022c4:	f897 32d3 	ldrb.w	r3, [r7, #723]	@ 0x2d3
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d001      	beq.n	80022d0 <main+0xa8>
 80022cc:	4b16      	ldr	r3, [pc, #88]	@ (8002328 <main+0x100>)
 80022ce:	e000      	b.n	80022d2 <main+0xaa>
 80022d0:	4b16      	ldr	r3, [pc, #88]	@ (800232c <main+0x104>)
 80022d2:	461a      	mov	r2, r3
 80022d4:	4916      	ldr	r1, [pc, #88]	@ (8002330 <main+0x108>)
 80022d6:	4813      	ldr	r0, [pc, #76]	@ (8002324 <main+0xfc>)
 80022d8:	f005 fb2c 	bl	8007934 <siprintf>
	uartx_write_text(&huart1, Data);
 80022dc:	4911      	ldr	r1, [pc, #68]	@ (8002324 <main+0xfc>)
 80022de:	4815      	ldr	r0, [pc, #84]	@ (8002334 <main+0x10c>)
 80022e0:	f001 f9c5 	bl	800366e <uartx_write_text>



	 float temp, pressure, humidity;
	 bmp280_read_float(&bmp280, &temp, &pressure, &humidity);
 80022e4:	f507 732c 	add.w	r3, r7, #688	@ 0x2b0
 80022e8:	f507 722d 	add.w	r2, r7, #692	@ 0x2b4
 80022ec:	f507 712e 	add.w	r1, r7, #696	@ 0x2b8
 80022f0:	4809      	ldr	r0, [pc, #36]	@ (8002318 <main+0xf0>)
 80022f2:	f7ff ff13 	bl	800211c <bmp280_read_float>

	 for (int i = 0; i < 10; i++) {  // Promedio de 10 lecturas
 80022f6:	2300      	movs	r3, #0
 80022f8:	f8c7 32d4 	str.w	r3, [r7, #724]	@ 0x2d4
 80022fc:	e03d      	b.n	800237a <main+0x152>
 80022fe:	bf00      	nop
 8002300:	20000660 	.word	0x20000660
 8002304:	42b40000 	.word	0x42b40000
 8002308:	20000204 	.word	0x20000204
 800230c:	200006f0 	.word	0x200006f0
 8002310:	20000910 	.word	0x20000910
 8002314:	200007f0 	.word	0x200007f0
 8002318:	200007c4 	.word	0x200007c4
 800231c:	2000060c 	.word	0x2000060c
 8002320:	0800c840 	.word	0x0800c840
 8002324:	200007f8 	.word	0x200007f8
 8002328:	0800c860 	.word	0x0800c860
 800232c:	0800c868 	.word	0x0800c868
 8002330:	0800c870 	.word	0x0800c870
 8002334:	200006a8 	.word	0x200006a8
	     float temp, pressure, humidity;
	     bmp280_read_float(&bmp280, &temp, &pressure, &humidity);
 8002338:	f507 7329 	add.w	r3, r7, #676	@ 0x2a4
 800233c:	f507 722a 	add.w	r2, r7, #680	@ 0x2a8
 8002340:	f507 712b 	add.w	r1, r7, #684	@ 0x2ac
 8002344:	48a1      	ldr	r0, [pc, #644]	@ (80025cc <main+0x3a4>)
 8002346:	f7ff fee9 	bl	800211c <bmp280_read_float>
	     baseAltitude += calculateAltitude(pressure);
 800234a:	f8d7 32a8 	ldr.w	r3, [r7, #680]	@ 0x2a8
 800234e:	4618      	mov	r0, r3
 8002350:	f7ff ff32 	bl	80021b8 <calculateAltitude>
 8002354:	4602      	mov	r2, r0
 8002356:	4b9e      	ldr	r3, [pc, #632]	@ (80025d0 <main+0x3a8>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4619      	mov	r1, r3
 800235c:	4610      	mov	r0, r2
 800235e:	f7fe fc09 	bl	8000b74 <__addsf3>
 8002362:	4603      	mov	r3, r0
 8002364:	461a      	mov	r2, r3
 8002366:	4b9a      	ldr	r3, [pc, #616]	@ (80025d0 <main+0x3a8>)
 8002368:	601a      	str	r2, [r3, #0]
	     HAL_Delay(100);  // Pequeña pausa entre lecturas
 800236a:	2064      	movs	r0, #100	@ 0x64
 800236c:	f001 fa1e 	bl	80037ac <HAL_Delay>
	 for (int i = 0; i < 10; i++) {  // Promedio de 10 lecturas
 8002370:	f8d7 32d4 	ldr.w	r3, [r7, #724]	@ 0x2d4
 8002374:	3301      	adds	r3, #1
 8002376:	f8c7 32d4 	str.w	r3, [r7, #724]	@ 0x2d4
 800237a:	f8d7 32d4 	ldr.w	r3, [r7, #724]	@ 0x2d4
 800237e:	2b09      	cmp	r3, #9
 8002380:	ddda      	ble.n	8002338 <main+0x110>
	 }
	 baseAltitude /= 10.0f;
 8002382:	4b93      	ldr	r3, [pc, #588]	@ (80025d0 <main+0x3a8>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4993      	ldr	r1, [pc, #588]	@ (80025d4 <main+0x3ac>)
 8002388:	4618      	mov	r0, r3
 800238a:	f7fe fdaf 	bl	8000eec <__aeabi_fdiv>
 800238e:	4603      	mov	r3, r0
 8002390:	461a      	mov	r2, r3
 8002392:	4b8f      	ldr	r3, [pc, #572]	@ (80025d0 <main+0x3a8>)
 8002394:	601a      	str	r2, [r3, #0]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  uint32_t currentTime = HAL_GetTick();
 8002396:	f001 f9ff 	bl	8003798 <HAL_GetTick>
 800239a:	f8c7 02cc 	str.w	r0, [r7, #716]	@ 0x2cc
	 	  process_gps_data();
 800239e:	f000 fac5 	bl	800292c <process_gps_data>

	 	 if (currentTime - lastTransmissionTime >= 1000)  // 1000 ms = 1 segundo
 80023a2:	4b8d      	ldr	r3, [pc, #564]	@ (80025d8 <main+0x3b0>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f8d7 22cc 	ldr.w	r2, [r7, #716]	@ 0x2cc
 80023aa:	1ad3      	subs	r3, r2, r3
 80023ac:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80023b0:	d3f1      	bcc.n	8002396 <main+0x16e>
	 	 {
	 	   // Leer datos del GPS
	 	   process_gps_data();
 80023b2:	f000 fabb 	bl	800292c <process_gps_data>

	 	   // Leer datos del BMP280
	 	   float temperature, pressure, humidity;
	 	   bmp280_read_float(&bmp280, &temperature, &pressure, &humidity);
 80023b6:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 80023ba:	f507 7227 	add.w	r2, r7, #668	@ 0x29c
 80023be:	f507 7128 	add.w	r1, r7, #672	@ 0x2a0
 80023c2:	4882      	ldr	r0, [pc, #520]	@ (80025cc <main+0x3a4>)
 80023c4:	f7ff feaa 	bl	800211c <bmp280_read_float>

	 	   // Aplicar filtro de media móvil a la presión
	 	   float filteredPressure = movingAverageFilter(pressure);
 80023c8:	f8d7 329c 	ldr.w	r3, [r7, #668]	@ 0x29c
 80023cc:	4618      	mov	r0, r3
 80023ce:	f000 fc41 	bl	8002c54 <movingAverageFilter>
 80023d2:	f8c7 02c8 	str.w	r0, [r7, #712]	@ 0x2c8

	 	   // Calcular altitud
	 	   float altitude = calculateAltitude(filteredPressure);
 80023d6:	f8d7 02c8 	ldr.w	r0, [r7, #712]	@ 0x2c8
 80023da:	f7ff feed 	bl	80021b8 <calculateAltitude>
 80023de:	f8c7 02c4 	str.w	r0, [r7, #708]	@ 0x2c4
	 	   float relativeAltitude = altitude - baseAltitude;
 80023e2:	4b7b      	ldr	r3, [pc, #492]	@ (80025d0 <main+0x3a8>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4619      	mov	r1, r3
 80023e8:	f8d7 02c4 	ldr.w	r0, [r7, #708]	@ 0x2c4
 80023ec:	f7fe fbc0 	bl	8000b70 <__aeabi_fsub>
 80023f0:	4603      	mov	r3, r0
 80023f2:	f8c7 32c0 	str.w	r3, [r7, #704]	@ 0x2c0

	 	   // Leer datos del MPU9250
	 	   float accelData[3], gyroData[3], magData[3];
	 	   MPU9250_ReadAccel(&hi2c1, accelData);
 80023f6:	f507 7323 	add.w	r3, r7, #652	@ 0x28c
 80023fa:	4619      	mov	r1, r3
 80023fc:	4877      	ldr	r0, [pc, #476]	@ (80025dc <main+0x3b4>)
 80023fe:	f000 fd8b 	bl	8002f18 <MPU9250_ReadAccel>
	 	   MPU9250_ReadGyro(&hi2c1, gyroData);
 8002402:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8002406:	4619      	mov	r1, r3
 8002408:	4874      	ldr	r0, [pc, #464]	@ (80025dc <main+0x3b4>)
 800240a:	f000 fddd 	bl	8002fc8 <MPU9250_ReadGyro>
	 	   MPU9250_ReadMag(&hi2c1, magData);
 800240e:	f507 731d 	add.w	r3, r7, #628	@ 0x274
 8002412:	4619      	mov	r1, r3
 8002414:	4871      	ldr	r0, [pc, #452]	@ (80025dc <main+0x3b4>)
 8002416:	f000 fe31 	bl	800307c <MPU9250_ReadMag>

	 	   // Formar el mensaje con todos los datos
	 	   char buffer[512];
	 	   int len = snprintf(buffer, sizeof(buffer),
 800241a:	4b71      	ldr	r3, [pc, #452]	@ (80025e0 <main+0x3b8>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002420:	4b70      	ldr	r3, [pc, #448]	@ (80025e4 <main+0x3bc>)
 8002422:	681e      	ldr	r6, [r3, #0]
 8002424:	4b70      	ldr	r3, [pc, #448]	@ (80025e8 <main+0x3c0>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4618      	mov	r0, r3
 800242a:	f7fd fffd 	bl	8000428 <__aeabi_f2d>
 800242e:	e9c7 0118 	strd	r0, r1, [r7, #96]	@ 0x60
 8002432:	4b6e      	ldr	r3, [pc, #440]	@ (80025ec <main+0x3c4>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4618      	mov	r0, r3
 8002438:	f7fd fff6 	bl	8000428 <__aeabi_f2d>
 800243c:	e9c7 0116 	strd	r0, r1, [r7, #88]	@ 0x58
 8002440:	4b6b      	ldr	r3, [pc, #428]	@ (80025f0 <main+0x3c8>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4618      	mov	r0, r3
 8002446:	f7fd ffef 	bl	8000428 <__aeabi_f2d>
 800244a:	e9c7 0114 	strd	r0, r1, [r7, #80]	@ 0x50
 800244e:	f8d7 32a0 	ldr.w	r3, [r7, #672]	@ 0x2a0
 8002452:	4618      	mov	r0, r3
 8002454:	f7fd ffe8 	bl	8000428 <__aeabi_f2d>
 8002458:	e9c7 0112 	strd	r0, r1, [r7, #72]	@ 0x48
 800245c:	f8d7 02c8 	ldr.w	r0, [r7, #712]	@ 0x2c8
 8002460:	f7fd ffe2 	bl	8000428 <__aeabi_f2d>
 8002464:	e9c7 0110 	strd	r0, r1, [r7, #64]	@ 0x40
 8002468:	f8d7 3298 	ldr.w	r3, [r7, #664]	@ 0x298
 800246c:	4618      	mov	r0, r3
 800246e:	f7fd ffdb 	bl	8000428 <__aeabi_f2d>
 8002472:	e9c7 010e 	strd	r0, r1, [r7, #56]	@ 0x38
 8002476:	f8d7 02c4 	ldr.w	r0, [r7, #708]	@ 0x2c4
 800247a:	f7fd ffd5 	bl	8000428 <__aeabi_f2d>
 800247e:	e9c7 010c 	strd	r0, r1, [r7, #48]	@ 0x30
 8002482:	f8d7 02c0 	ldr.w	r0, [r7, #704]	@ 0x2c0
 8002486:	f7fd ffcf 	bl	8000428 <__aeabi_f2d>
 800248a:	e9c7 010a 	strd	r0, r1, [r7, #40]	@ 0x28
	 	       "AccX=%.2f,AccY=%.2f,AccZ=%.2f,"
	 	       "GyroX=%.2f,GyroY=%.2f,GyroZ=%.2f,"
	 	       "MagX=%.2f,MagY=%.2f,MagZ=%.2f\r\n",
	 	       hours, minutes, seconds, latitude, longitude,
	 	       temperature, filteredPressure, humidity, altitude, relativeAltitude,
	 	       accelData[0], accelData[1], accelData[2],
 800248e:	f8d7 328c 	ldr.w	r3, [r7, #652]	@ 0x28c
	 	   int len = snprintf(buffer, sizeof(buffer),
 8002492:	4618      	mov	r0, r3
 8002494:	f7fd ffc8 	bl	8000428 <__aeabi_f2d>
 8002498:	e9c7 0108 	strd	r0, r1, [r7, #32]
	 	       accelData[0], accelData[1], accelData[2],
 800249c:	f8d7 3290 	ldr.w	r3, [r7, #656]	@ 0x290
	 	   int len = snprintf(buffer, sizeof(buffer),
 80024a0:	4618      	mov	r0, r3
 80024a2:	f7fd ffc1 	bl	8000428 <__aeabi_f2d>
 80024a6:	e9c7 0106 	strd	r0, r1, [r7, #24]
	 	       accelData[0], accelData[1], accelData[2],
 80024aa:	f8d7 3294 	ldr.w	r3, [r7, #660]	@ 0x294
	 	   int len = snprintf(buffer, sizeof(buffer),
 80024ae:	4618      	mov	r0, r3
 80024b0:	f7fd ffba 	bl	8000428 <__aeabi_f2d>
 80024b4:	e9c7 0104 	strd	r0, r1, [r7, #16]
	 	       gyroData[0], gyroData[1], gyroData[2],
 80024b8:	f8d7 3280 	ldr.w	r3, [r7, #640]	@ 0x280
	 	   int len = snprintf(buffer, sizeof(buffer),
 80024bc:	4618      	mov	r0, r3
 80024be:	f7fd ffb3 	bl	8000428 <__aeabi_f2d>
 80024c2:	e9c7 0102 	strd	r0, r1, [r7, #8]
	 	       gyroData[0], gyroData[1], gyroData[2],
 80024c6:	f8d7 3284 	ldr.w	r3, [r7, #644]	@ 0x284
	 	   int len = snprintf(buffer, sizeof(buffer),
 80024ca:	4618      	mov	r0, r3
 80024cc:	f7fd ffac 	bl	8000428 <__aeabi_f2d>
 80024d0:	e9c7 0100 	strd	r0, r1, [r7]
	 	       gyroData[0], gyroData[1], gyroData[2],
 80024d4:	f8d7 3288 	ldr.w	r3, [r7, #648]	@ 0x288
	 	   int len = snprintf(buffer, sizeof(buffer),
 80024d8:	4618      	mov	r0, r3
 80024da:	f7fd ffa5 	bl	8000428 <__aeabi_f2d>
 80024de:	4682      	mov	sl, r0
 80024e0:	468b      	mov	fp, r1
	 	       magData[0], magData[1], magData[2]);
 80024e2:	f8d7 3274 	ldr.w	r3, [r7, #628]	@ 0x274
	 	   int len = snprintf(buffer, sizeof(buffer),
 80024e6:	4618      	mov	r0, r3
 80024e8:	f7fd ff9e 	bl	8000428 <__aeabi_f2d>
 80024ec:	4680      	mov	r8, r0
 80024ee:	4689      	mov	r9, r1
	 	       magData[0], magData[1], magData[2]);
 80024f0:	f8d7 3278 	ldr.w	r3, [r7, #632]	@ 0x278
	 	   int len = snprintf(buffer, sizeof(buffer),
 80024f4:	4618      	mov	r0, r3
 80024f6:	f7fd ff97 	bl	8000428 <__aeabi_f2d>
 80024fa:	4604      	mov	r4, r0
 80024fc:	460d      	mov	r5, r1
	 	       magData[0], magData[1], magData[2]);
 80024fe:	f8d7 327c 	ldr.w	r3, [r7, #636]	@ 0x27c
	 	   int len = snprintf(buffer, sizeof(buffer),
 8002502:	4618      	mov	r0, r3
 8002504:	f7fd ff90 	bl	8000428 <__aeabi_f2d>
 8002508:	4602      	mov	r2, r0
 800250a:	460b      	mov	r3, r1
 800250c:	f107 0074 	add.w	r0, r7, #116	@ 0x74
 8002510:	e9cd 2322 	strd	r2, r3, [sp, #136]	@ 0x88
 8002514:	e9cd 4520 	strd	r4, r5, [sp, #128]	@ 0x80
 8002518:	e9cd 891e 	strd	r8, r9, [sp, #120]	@ 0x78
 800251c:	e9cd ab1c 	strd	sl, fp, [sp, #112]	@ 0x70
 8002520:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002524:	e9cd 231a 	strd	r2, r3, [sp, #104]	@ 0x68
 8002528:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800252c:	e9cd 2318 	strd	r2, r3, [sp, #96]	@ 0x60
 8002530:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002534:	e9cd 2316 	strd	r2, r3, [sp, #88]	@ 0x58
 8002538:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800253c:	e9cd 2314 	strd	r2, r3, [sp, #80]	@ 0x50
 8002540:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002544:	e9cd 2312 	strd	r2, r3, [sp, #72]	@ 0x48
 8002548:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800254c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8002550:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8002554:	e9cd 230e 	strd	r2, r3, [sp, #56]	@ 0x38
 8002558:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800255c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8002560:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002564:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 8002568:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800256c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8002570:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002574:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8002578:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800257c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8002580:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8002584:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002588:	9600      	str	r6, [sp, #0]
 800258a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800258c:	4a19      	ldr	r2, [pc, #100]	@ (80025f4 <main+0x3cc>)
 800258e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002592:	f005 f99b 	bl	80078cc <sniprintf>
 8002596:	f8c7 02bc 	str.w	r0, [r7, #700]	@ 0x2bc

	 	   // Enviar el mensaje por UART1
	 	   HAL_UART_Transmit(&huart1, (uint8_t *)buffer, len, HAL_MAX_DELAY);
 800259a:	f8d7 32bc 	ldr.w	r3, [r7, #700]	@ 0x2bc
 800259e:	b29a      	uxth	r2, r3
 80025a0:	f107 0174 	add.w	r1, r7, #116	@ 0x74
 80025a4:	f04f 33ff 	mov.w	r3, #4294967295
 80025a8:	4813      	ldr	r0, [pc, #76]	@ (80025f8 <main+0x3d0>)
 80025aa:	f003 fe7d 	bl	80062a8 <HAL_UART_Transmit>

	 	   // Enviar el mensaje por LoRa
	 	   LoRa_Send(buffer);
 80025ae:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80025b2:	4618      	mov	r0, r3
 80025b4:	f000 fb1a 	bl	8002bec <LoRa_Send>

	 	   lastTransmissionTime = currentTime;
 80025b8:	4a07      	ldr	r2, [pc, #28]	@ (80025d8 <main+0x3b0>)
 80025ba:	f8d7 32cc 	ldr.w	r3, [r7, #716]	@ 0x2cc
 80025be:	6013      	str	r3, [r2, #0]

	 	   // Actualizar la posición del servo basada en la altitud
	 	   moveServoBasedOnAltitude(altitude);
 80025c0:	f8d7 02c4 	ldr.w	r0, [r7, #708]	@ 0x2c4
 80025c4:	f000 fbfc 	bl	8002dc0 <moveServoBasedOnAltitude>
  {
 80025c8:	e6e5      	b.n	8002396 <main+0x16e>
 80025ca:	bf00      	nop
 80025cc:	200007c4 	.word	0x200007c4
 80025d0:	20000940 	.word	0x20000940
 80025d4:	41200000 	.word	0x41200000
 80025d8:	20000910 	.word	0x20000910
 80025dc:	2000060c 	.word	0x2000060c
 80025e0:	20000904 	.word	0x20000904
 80025e4:	20000908 	.word	0x20000908
 80025e8:	2000090c 	.word	0x2000090c
 80025ec:	200008fc 	.word	0x200008fc
 80025f0:	20000900 	.word	0x20000900
 80025f4:	0800c884 	.word	0x0800c884
 80025f8:	200006a8 	.word	0x200006a8

080025fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b090      	sub	sp, #64	@ 0x40
 8002600:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002602:	f107 0318 	add.w	r3, r7, #24
 8002606:	2228      	movs	r2, #40	@ 0x28
 8002608:	2100      	movs	r1, #0
 800260a:	4618      	mov	r0, r3
 800260c:	f005 fa21 	bl	8007a52 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002610:	1d3b      	adds	r3, r7, #4
 8002612:	2200      	movs	r2, #0
 8002614:	601a      	str	r2, [r3, #0]
 8002616:	605a      	str	r2, [r3, #4]
 8002618:	609a      	str	r2, [r3, #8]
 800261a:	60da      	str	r2, [r3, #12]
 800261c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800261e:	2301      	movs	r3, #1
 8002620:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002622:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002626:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002628:	2300      	movs	r3, #0
 800262a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800262c:	2301      	movs	r3, #1
 800262e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002630:	2302      	movs	r3, #2
 8002632:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002634:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002638:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800263a:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800263e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002640:	f107 0318 	add.w	r3, r7, #24
 8002644:	4618      	mov	r0, r3
 8002646:	f002 fdaf 	bl	80051a8 <HAL_RCC_OscConfig>
 800264a:	4603      	mov	r3, r0
 800264c:	2b00      	cmp	r3, #0
 800264e:	d001      	beq.n	8002654 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8002650:	f000 fc5c 	bl	8002f0c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002654:	230f      	movs	r3, #15
 8002656:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002658:	2302      	movs	r3, #2
 800265a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800265c:	2300      	movs	r3, #0
 800265e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002660:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002664:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002666:	2300      	movs	r3, #0
 8002668:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800266a:	1d3b      	adds	r3, r7, #4
 800266c:	2102      	movs	r1, #2
 800266e:	4618      	mov	r0, r3
 8002670:	f003 f81c 	bl	80056ac <HAL_RCC_ClockConfig>
 8002674:	4603      	mov	r3, r0
 8002676:	2b00      	cmp	r3, #0
 8002678:	d001      	beq.n	800267e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800267a:	f000 fc47 	bl	8002f0c <Error_Handler>
  }
}
 800267e:	bf00      	nop
 8002680:	3740      	adds	r7, #64	@ 0x40
 8002682:	46bd      	mov	sp, r7
 8002684:	bd80      	pop	{r7, pc}
	...

08002688 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800268c:	4b13      	ldr	r3, [pc, #76]	@ (80026dc <MX_I2C1_Init+0x54>)
 800268e:	4a14      	ldr	r2, [pc, #80]	@ (80026e0 <MX_I2C1_Init+0x58>)
 8002690:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 115200;
 8002692:	4b12      	ldr	r3, [pc, #72]	@ (80026dc <MX_I2C1_Init+0x54>)
 8002694:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002698:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800269a:	4b10      	ldr	r3, [pc, #64]	@ (80026dc <MX_I2C1_Init+0x54>)
 800269c:	2200      	movs	r2, #0
 800269e:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80026a0:	4b0e      	ldr	r3, [pc, #56]	@ (80026dc <MX_I2C1_Init+0x54>)
 80026a2:	2200      	movs	r2, #0
 80026a4:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80026a6:	4b0d      	ldr	r3, [pc, #52]	@ (80026dc <MX_I2C1_Init+0x54>)
 80026a8:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80026ac:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80026ae:	4b0b      	ldr	r3, [pc, #44]	@ (80026dc <MX_I2C1_Init+0x54>)
 80026b0:	2200      	movs	r2, #0
 80026b2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80026b4:	4b09      	ldr	r3, [pc, #36]	@ (80026dc <MX_I2C1_Init+0x54>)
 80026b6:	2200      	movs	r2, #0
 80026b8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80026ba:	4b08      	ldr	r3, [pc, #32]	@ (80026dc <MX_I2C1_Init+0x54>)
 80026bc:	2200      	movs	r2, #0
 80026be:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80026c0:	4b06      	ldr	r3, [pc, #24]	@ (80026dc <MX_I2C1_Init+0x54>)
 80026c2:	2200      	movs	r2, #0
 80026c4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80026c6:	4805      	ldr	r0, [pc, #20]	@ (80026dc <MX_I2C1_Init+0x54>)
 80026c8:	f001 fd14 	bl	80040f4 <HAL_I2C_Init>
 80026cc:	4603      	mov	r3, r0
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d001      	beq.n	80026d6 <MX_I2C1_Init+0x4e>
  {
    Error_Handler();
 80026d2:	f000 fc1b 	bl	8002f0c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80026d6:	bf00      	nop
 80026d8:	bd80      	pop	{r7, pc}
 80026da:	bf00      	nop
 80026dc:	2000060c 	.word	0x2000060c
 80026e0:	40005400 	.word	0x40005400

080026e4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b08a      	sub	sp, #40	@ 0x28
 80026e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80026ea:	f107 0320 	add.w	r3, r7, #32
 80026ee:	2200      	movs	r2, #0
 80026f0:	601a      	str	r2, [r3, #0]
 80026f2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80026f4:	1d3b      	adds	r3, r7, #4
 80026f6:	2200      	movs	r2, #0
 80026f8:	601a      	str	r2, [r3, #0]
 80026fa:	605a      	str	r2, [r3, #4]
 80026fc:	609a      	str	r2, [r3, #8]
 80026fe:	60da      	str	r2, [r3, #12]
 8002700:	611a      	str	r2, [r3, #16]
 8002702:	615a      	str	r2, [r3, #20]
 8002704:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002706:	4b22      	ldr	r3, [pc, #136]	@ (8002790 <MX_TIM3_Init+0xac>)
 8002708:	4a22      	ldr	r2, [pc, #136]	@ (8002794 <MX_TIM3_Init+0xb0>)
 800270a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 800270c:	4b20      	ldr	r3, [pc, #128]	@ (8002790 <MX_TIM3_Init+0xac>)
 800270e:	2247      	movs	r2, #71	@ 0x47
 8002710:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002712:	4b1f      	ldr	r3, [pc, #124]	@ (8002790 <MX_TIM3_Init+0xac>)
 8002714:	2200      	movs	r2, #0
 8002716:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 19999;
 8002718:	4b1d      	ldr	r3, [pc, #116]	@ (8002790 <MX_TIM3_Init+0xac>)
 800271a:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 800271e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002720:	4b1b      	ldr	r3, [pc, #108]	@ (8002790 <MX_TIM3_Init+0xac>)
 8002722:	2200      	movs	r2, #0
 8002724:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002726:	4b1a      	ldr	r3, [pc, #104]	@ (8002790 <MX_TIM3_Init+0xac>)
 8002728:	2200      	movs	r2, #0
 800272a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800272c:	4818      	ldr	r0, [pc, #96]	@ (8002790 <MX_TIM3_Init+0xac>)
 800272e:	f003 f94b 	bl	80059c8 <HAL_TIM_PWM_Init>
 8002732:	4603      	mov	r3, r0
 8002734:	2b00      	cmp	r3, #0
 8002736:	d001      	beq.n	800273c <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8002738:	f000 fbe8 	bl	8002f0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800273c:	2300      	movs	r3, #0
 800273e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002740:	2300      	movs	r3, #0
 8002742:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002744:	f107 0320 	add.w	r3, r7, #32
 8002748:	4619      	mov	r1, r3
 800274a:	4811      	ldr	r0, [pc, #68]	@ (8002790 <MX_TIM3_Init+0xac>)
 800274c:	f003 fcfe 	bl	800614c <HAL_TIMEx_MasterConfigSynchronization>
 8002750:	4603      	mov	r3, r0
 8002752:	2b00      	cmp	r3, #0
 8002754:	d001      	beq.n	800275a <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8002756:	f000 fbd9 	bl	8002f0c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800275a:	2360      	movs	r3, #96	@ 0x60
 800275c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1500;
 800275e:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8002762:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002764:	2300      	movs	r3, #0
 8002766:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002768:	2300      	movs	r3, #0
 800276a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800276c:	1d3b      	adds	r3, r7, #4
 800276e:	2200      	movs	r2, #0
 8002770:	4619      	mov	r1, r3
 8002772:	4807      	ldr	r0, [pc, #28]	@ (8002790 <MX_TIM3_Init+0xac>)
 8002774:	f003 fa1a 	bl	8005bac <HAL_TIM_PWM_ConfigChannel>
 8002778:	4603      	mov	r3, r0
 800277a:	2b00      	cmp	r3, #0
 800277c:	d001      	beq.n	8002782 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 800277e:	f000 fbc5 	bl	8002f0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002782:	4803      	ldr	r0, [pc, #12]	@ (8002790 <MX_TIM3_Init+0xac>)
 8002784:	f000 fd46 	bl	8003214 <HAL_TIM_MspPostInit>

}
 8002788:	bf00      	nop
 800278a:	3728      	adds	r7, #40	@ 0x28
 800278c:	46bd      	mov	sp, r7
 800278e:	bd80      	pop	{r7, pc}
 8002790:	20000660 	.word	0x20000660
 8002794:	40000400 	.word	0x40000400

08002798 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800279c:	4b11      	ldr	r3, [pc, #68]	@ (80027e4 <MX_USART1_UART_Init+0x4c>)
 800279e:	4a12      	ldr	r2, [pc, #72]	@ (80027e8 <MX_USART1_UART_Init+0x50>)
 80027a0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80027a2:	4b10      	ldr	r3, [pc, #64]	@ (80027e4 <MX_USART1_UART_Init+0x4c>)
 80027a4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80027a8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80027aa:	4b0e      	ldr	r3, [pc, #56]	@ (80027e4 <MX_USART1_UART_Init+0x4c>)
 80027ac:	2200      	movs	r2, #0
 80027ae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80027b0:	4b0c      	ldr	r3, [pc, #48]	@ (80027e4 <MX_USART1_UART_Init+0x4c>)
 80027b2:	2200      	movs	r2, #0
 80027b4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80027b6:	4b0b      	ldr	r3, [pc, #44]	@ (80027e4 <MX_USART1_UART_Init+0x4c>)
 80027b8:	2200      	movs	r2, #0
 80027ba:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80027bc:	4b09      	ldr	r3, [pc, #36]	@ (80027e4 <MX_USART1_UART_Init+0x4c>)
 80027be:	220c      	movs	r2, #12
 80027c0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80027c2:	4b08      	ldr	r3, [pc, #32]	@ (80027e4 <MX_USART1_UART_Init+0x4c>)
 80027c4:	2200      	movs	r2, #0
 80027c6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80027c8:	4b06      	ldr	r3, [pc, #24]	@ (80027e4 <MX_USART1_UART_Init+0x4c>)
 80027ca:	2200      	movs	r2, #0
 80027cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80027ce:	4805      	ldr	r0, [pc, #20]	@ (80027e4 <MX_USART1_UART_Init+0x4c>)
 80027d0:	f003 fd1a 	bl	8006208 <HAL_UART_Init>
 80027d4:	4603      	mov	r3, r0
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d001      	beq.n	80027de <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80027da:	f000 fb97 	bl	8002f0c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80027de:	bf00      	nop
 80027e0:	bd80      	pop	{r7, pc}
 80027e2:	bf00      	nop
 80027e4:	200006a8 	.word	0x200006a8
 80027e8:	40013800 	.word	0x40013800

080027ec <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80027f0:	4b11      	ldr	r3, [pc, #68]	@ (8002838 <MX_USART2_UART_Init+0x4c>)
 80027f2:	4a12      	ldr	r2, [pc, #72]	@ (800283c <MX_USART2_UART_Init+0x50>)
 80027f4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80027f6:	4b10      	ldr	r3, [pc, #64]	@ (8002838 <MX_USART2_UART_Init+0x4c>)
 80027f8:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80027fc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80027fe:	4b0e      	ldr	r3, [pc, #56]	@ (8002838 <MX_USART2_UART_Init+0x4c>)
 8002800:	2200      	movs	r2, #0
 8002802:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002804:	4b0c      	ldr	r3, [pc, #48]	@ (8002838 <MX_USART2_UART_Init+0x4c>)
 8002806:	2200      	movs	r2, #0
 8002808:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800280a:	4b0b      	ldr	r3, [pc, #44]	@ (8002838 <MX_USART2_UART_Init+0x4c>)
 800280c:	2200      	movs	r2, #0
 800280e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002810:	4b09      	ldr	r3, [pc, #36]	@ (8002838 <MX_USART2_UART_Init+0x4c>)
 8002812:	220c      	movs	r2, #12
 8002814:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002816:	4b08      	ldr	r3, [pc, #32]	@ (8002838 <MX_USART2_UART_Init+0x4c>)
 8002818:	2200      	movs	r2, #0
 800281a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800281c:	4b06      	ldr	r3, [pc, #24]	@ (8002838 <MX_USART2_UART_Init+0x4c>)
 800281e:	2200      	movs	r2, #0
 8002820:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002822:	4805      	ldr	r0, [pc, #20]	@ (8002838 <MX_USART2_UART_Init+0x4c>)
 8002824:	f003 fcf0 	bl	8006208 <HAL_UART_Init>
 8002828:	4603      	mov	r3, r0
 800282a:	2b00      	cmp	r3, #0
 800282c:	d001      	beq.n	8002832 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800282e:	f000 fb6d 	bl	8002f0c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002832:	bf00      	nop
 8002834:	bd80      	pop	{r7, pc}
 8002836:	bf00      	nop
 8002838:	200006f0 	.word	0x200006f0
 800283c:	40004400 	.word	0x40004400

08002840 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002844:	4b11      	ldr	r3, [pc, #68]	@ (800288c <MX_USART3_UART_Init+0x4c>)
 8002846:	4a12      	ldr	r2, [pc, #72]	@ (8002890 <MX_USART3_UART_Init+0x50>)
 8002848:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800284a:	4b10      	ldr	r3, [pc, #64]	@ (800288c <MX_USART3_UART_Init+0x4c>)
 800284c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002850:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002852:	4b0e      	ldr	r3, [pc, #56]	@ (800288c <MX_USART3_UART_Init+0x4c>)
 8002854:	2200      	movs	r2, #0
 8002856:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002858:	4b0c      	ldr	r3, [pc, #48]	@ (800288c <MX_USART3_UART_Init+0x4c>)
 800285a:	2200      	movs	r2, #0
 800285c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800285e:	4b0b      	ldr	r3, [pc, #44]	@ (800288c <MX_USART3_UART_Init+0x4c>)
 8002860:	2200      	movs	r2, #0
 8002862:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002864:	4b09      	ldr	r3, [pc, #36]	@ (800288c <MX_USART3_UART_Init+0x4c>)
 8002866:	220c      	movs	r2, #12
 8002868:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800286a:	4b08      	ldr	r3, [pc, #32]	@ (800288c <MX_USART3_UART_Init+0x4c>)
 800286c:	2200      	movs	r2, #0
 800286e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002870:	4b06      	ldr	r3, [pc, #24]	@ (800288c <MX_USART3_UART_Init+0x4c>)
 8002872:	2200      	movs	r2, #0
 8002874:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002876:	4805      	ldr	r0, [pc, #20]	@ (800288c <MX_USART3_UART_Init+0x4c>)
 8002878:	f003 fcc6 	bl	8006208 <HAL_UART_Init>
 800287c:	4603      	mov	r3, r0
 800287e:	2b00      	cmp	r3, #0
 8002880:	d001      	beq.n	8002886 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002882:	f000 fb43 	bl	8002f0c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002886:	bf00      	nop
 8002888:	bd80      	pop	{r7, pc}
 800288a:	bf00      	nop
 800288c:	20000738 	.word	0x20000738
 8002890:	40004800 	.word	0x40004800

08002894 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b082      	sub	sp, #8
 8002898:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800289a:	4b0c      	ldr	r3, [pc, #48]	@ (80028cc <MX_DMA_Init+0x38>)
 800289c:	695b      	ldr	r3, [r3, #20]
 800289e:	4a0b      	ldr	r2, [pc, #44]	@ (80028cc <MX_DMA_Init+0x38>)
 80028a0:	f043 0301 	orr.w	r3, r3, #1
 80028a4:	6153      	str	r3, [r2, #20]
 80028a6:	4b09      	ldr	r3, [pc, #36]	@ (80028cc <MX_DMA_Init+0x38>)
 80028a8:	695b      	ldr	r3, [r3, #20]
 80028aa:	f003 0301 	and.w	r3, r3, #1
 80028ae:	607b      	str	r3, [r7, #4]
 80028b0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 80028b2:	2200      	movs	r2, #0
 80028b4:	2100      	movs	r1, #0
 80028b6:	2010      	movs	r0, #16
 80028b8:	f001 f873 	bl	80039a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80028bc:	2010      	movs	r0, #16
 80028be:	f001 f88c 	bl	80039da <HAL_NVIC_EnableIRQ>

}
 80028c2:	bf00      	nop
 80028c4:	3708      	adds	r7, #8
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}
 80028ca:	bf00      	nop
 80028cc:	40021000 	.word	0x40021000

080028d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80028d0:	b480      	push	{r7}
 80028d2:	b085      	sub	sp, #20
 80028d4:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80028d6:	4b14      	ldr	r3, [pc, #80]	@ (8002928 <MX_GPIO_Init+0x58>)
 80028d8:	699b      	ldr	r3, [r3, #24]
 80028da:	4a13      	ldr	r2, [pc, #76]	@ (8002928 <MX_GPIO_Init+0x58>)
 80028dc:	f043 0320 	orr.w	r3, r3, #32
 80028e0:	6193      	str	r3, [r2, #24]
 80028e2:	4b11      	ldr	r3, [pc, #68]	@ (8002928 <MX_GPIO_Init+0x58>)
 80028e4:	699b      	ldr	r3, [r3, #24]
 80028e6:	f003 0320 	and.w	r3, r3, #32
 80028ea:	60fb      	str	r3, [r7, #12]
 80028ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80028ee:	4b0e      	ldr	r3, [pc, #56]	@ (8002928 <MX_GPIO_Init+0x58>)
 80028f0:	699b      	ldr	r3, [r3, #24]
 80028f2:	4a0d      	ldr	r2, [pc, #52]	@ (8002928 <MX_GPIO_Init+0x58>)
 80028f4:	f043 0304 	orr.w	r3, r3, #4
 80028f8:	6193      	str	r3, [r2, #24]
 80028fa:	4b0b      	ldr	r3, [pc, #44]	@ (8002928 <MX_GPIO_Init+0x58>)
 80028fc:	699b      	ldr	r3, [r3, #24]
 80028fe:	f003 0304 	and.w	r3, r3, #4
 8002902:	60bb      	str	r3, [r7, #8]
 8002904:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002906:	4b08      	ldr	r3, [pc, #32]	@ (8002928 <MX_GPIO_Init+0x58>)
 8002908:	699b      	ldr	r3, [r3, #24]
 800290a:	4a07      	ldr	r2, [pc, #28]	@ (8002928 <MX_GPIO_Init+0x58>)
 800290c:	f043 0308 	orr.w	r3, r3, #8
 8002910:	6193      	str	r3, [r2, #24]
 8002912:	4b05      	ldr	r3, [pc, #20]	@ (8002928 <MX_GPIO_Init+0x58>)
 8002914:	699b      	ldr	r3, [r3, #24]
 8002916:	f003 0308 	and.w	r3, r3, #8
 800291a:	607b      	str	r3, [r7, #4]
 800291c:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800291e:	bf00      	nop
 8002920:	3714      	adds	r7, #20
 8002922:	46bd      	mov	sp, r7
 8002924:	bc80      	pop	{r7}
 8002926:	4770      	bx	lr
 8002928:	40021000 	.word	0x40021000

0800292c <process_gps_data>:

/* USER CODE BEGIN 4 */

void process_gps_data(void)
{
 800292c:	b590      	push	{r4, r7, lr}
 800292e:	b08b      	sub	sp, #44	@ 0x2c
 8002930:	af04      	add	r7, sp, #16
    if (gpsDataReady)
 8002932:	4b76      	ldr	r3, [pc, #472]	@ (8002b0c <process_gps_data+0x1e0>)
 8002934:	781b      	ldrb	r3, [r3, #0]
 8002936:	b2db      	uxtb	r3, r3
 8002938:	2b00      	cmp	r3, #0
 800293a:	f000 80e2 	beq.w	8002b02 <process_gps_data+0x1d6>
    {
        char *ptr = strstr((char*)gpsBuffer, "$GPRMC");
 800293e:	4974      	ldr	r1, [pc, #464]	@ (8002b10 <process_gps_data+0x1e4>)
 8002940:	4874      	ldr	r0, [pc, #464]	@ (8002b14 <process_gps_data+0x1e8>)
 8002942:	f005 f88e 	bl	8007a62 <strstr>
 8002946:	6178      	str	r0, [r7, #20]
        if (ptr != NULL)
 8002948:	697b      	ldr	r3, [r7, #20]
 800294a:	2b00      	cmp	r3, #0
 800294c:	f000 80cd 	beq.w	8002aea <process_gps_data+0x1be>
        {
            if (sscanf(ptr, "$GPRMC,%f,A,%f,%c,%f,%c", &time, &latitude, &lat_dir, &longitude, &long_dir) == 5)
 8002950:	4b71      	ldr	r3, [pc, #452]	@ (8002b18 <process_gps_data+0x1ec>)
 8002952:	9302      	str	r3, [sp, #8]
 8002954:	4b71      	ldr	r3, [pc, #452]	@ (8002b1c <process_gps_data+0x1f0>)
 8002956:	9301      	str	r3, [sp, #4]
 8002958:	4b71      	ldr	r3, [pc, #452]	@ (8002b20 <process_gps_data+0x1f4>)
 800295a:	9300      	str	r3, [sp, #0]
 800295c:	4b71      	ldr	r3, [pc, #452]	@ (8002b24 <process_gps_data+0x1f8>)
 800295e:	4a72      	ldr	r2, [pc, #456]	@ (8002b28 <process_gps_data+0x1fc>)
 8002960:	4972      	ldr	r1, [pc, #456]	@ (8002b2c <process_gps_data+0x200>)
 8002962:	6978      	ldr	r0, [r7, #20]
 8002964:	f005 f806 	bl	8007974 <siscanf>
 8002968:	4603      	mov	r3, r0
 800296a:	2b05      	cmp	r3, #5
 800296c:	f040 80b1 	bne.w	8002ad2 <process_gps_data+0x1a6>
            {
                // Convertir latitud y longitud a grados decimales
                float lat_degrees = (int)(latitude / 100);
 8002970:	4b6c      	ldr	r3, [pc, #432]	@ (8002b24 <process_gps_data+0x1f8>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	496e      	ldr	r1, [pc, #440]	@ (8002b30 <process_gps_data+0x204>)
 8002976:	4618      	mov	r0, r3
 8002978:	f7fe fab8 	bl	8000eec <__aeabi_fdiv>
 800297c:	4603      	mov	r3, r0
 800297e:	4618      	mov	r0, r3
 8002980:	f7fe fbc6 	bl	8001110 <__aeabi_f2iz>
 8002984:	4603      	mov	r3, r0
 8002986:	4618      	mov	r0, r3
 8002988:	f7fe f9a8 	bl	8000cdc <__aeabi_i2f>
 800298c:	4603      	mov	r3, r0
 800298e:	613b      	str	r3, [r7, #16]
                float lat_minutes = latitude - (lat_degrees * 100);
 8002990:	4b64      	ldr	r3, [pc, #400]	@ (8002b24 <process_gps_data+0x1f8>)
 8002992:	681c      	ldr	r4, [r3, #0]
 8002994:	4966      	ldr	r1, [pc, #408]	@ (8002b30 <process_gps_data+0x204>)
 8002996:	6938      	ldr	r0, [r7, #16]
 8002998:	f7fe f9f4 	bl	8000d84 <__aeabi_fmul>
 800299c:	4603      	mov	r3, r0
 800299e:	4619      	mov	r1, r3
 80029a0:	4620      	mov	r0, r4
 80029a2:	f7fe f8e5 	bl	8000b70 <__aeabi_fsub>
 80029a6:	4603      	mov	r3, r0
 80029a8:	60fb      	str	r3, [r7, #12]
                latitude = lat_degrees + (lat_minutes / 60);
 80029aa:	4962      	ldr	r1, [pc, #392]	@ (8002b34 <process_gps_data+0x208>)
 80029ac:	68f8      	ldr	r0, [r7, #12]
 80029ae:	f7fe fa9d 	bl	8000eec <__aeabi_fdiv>
 80029b2:	4603      	mov	r3, r0
 80029b4:	6939      	ldr	r1, [r7, #16]
 80029b6:	4618      	mov	r0, r3
 80029b8:	f7fe f8dc 	bl	8000b74 <__addsf3>
 80029bc:	4603      	mov	r3, r0
 80029be:	461a      	mov	r2, r3
 80029c0:	4b58      	ldr	r3, [pc, #352]	@ (8002b24 <process_gps_data+0x1f8>)
 80029c2:	601a      	str	r2, [r3, #0]
                if (lat_dir == 'S') latitude = -latitude;
 80029c4:	4b56      	ldr	r3, [pc, #344]	@ (8002b20 <process_gps_data+0x1f4>)
 80029c6:	781b      	ldrb	r3, [r3, #0]
 80029c8:	2b53      	cmp	r3, #83	@ 0x53
 80029ca:	d105      	bne.n	80029d8 <process_gps_data+0xac>
 80029cc:	4b55      	ldr	r3, [pc, #340]	@ (8002b24 <process_gps_data+0x1f8>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 80029d4:	4a53      	ldr	r2, [pc, #332]	@ (8002b24 <process_gps_data+0x1f8>)
 80029d6:	6013      	str	r3, [r2, #0]

                float long_degrees = (int)(longitude / 100);
 80029d8:	4b50      	ldr	r3, [pc, #320]	@ (8002b1c <process_gps_data+0x1f0>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4954      	ldr	r1, [pc, #336]	@ (8002b30 <process_gps_data+0x204>)
 80029de:	4618      	mov	r0, r3
 80029e0:	f7fe fa84 	bl	8000eec <__aeabi_fdiv>
 80029e4:	4603      	mov	r3, r0
 80029e6:	4618      	mov	r0, r3
 80029e8:	f7fe fb92 	bl	8001110 <__aeabi_f2iz>
 80029ec:	4603      	mov	r3, r0
 80029ee:	4618      	mov	r0, r3
 80029f0:	f7fe f974 	bl	8000cdc <__aeabi_i2f>
 80029f4:	4603      	mov	r3, r0
 80029f6:	60bb      	str	r3, [r7, #8]
                float long_minutes = longitude - (long_degrees * 100);
 80029f8:	4b48      	ldr	r3, [pc, #288]	@ (8002b1c <process_gps_data+0x1f0>)
 80029fa:	681c      	ldr	r4, [r3, #0]
 80029fc:	494c      	ldr	r1, [pc, #304]	@ (8002b30 <process_gps_data+0x204>)
 80029fe:	68b8      	ldr	r0, [r7, #8]
 8002a00:	f7fe f9c0 	bl	8000d84 <__aeabi_fmul>
 8002a04:	4603      	mov	r3, r0
 8002a06:	4619      	mov	r1, r3
 8002a08:	4620      	mov	r0, r4
 8002a0a:	f7fe f8b1 	bl	8000b70 <__aeabi_fsub>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	607b      	str	r3, [r7, #4]
                longitude = long_degrees + (long_minutes / 60);
 8002a12:	4948      	ldr	r1, [pc, #288]	@ (8002b34 <process_gps_data+0x208>)
 8002a14:	6878      	ldr	r0, [r7, #4]
 8002a16:	f7fe fa69 	bl	8000eec <__aeabi_fdiv>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	68b9      	ldr	r1, [r7, #8]
 8002a1e:	4618      	mov	r0, r3
 8002a20:	f7fe f8a8 	bl	8000b74 <__addsf3>
 8002a24:	4603      	mov	r3, r0
 8002a26:	461a      	mov	r2, r3
 8002a28:	4b3c      	ldr	r3, [pc, #240]	@ (8002b1c <process_gps_data+0x1f0>)
 8002a2a:	601a      	str	r2, [r3, #0]
                if (long_dir == 'W') longitude = -longitude;
 8002a2c:	4b3a      	ldr	r3, [pc, #232]	@ (8002b18 <process_gps_data+0x1ec>)
 8002a2e:	781b      	ldrb	r3, [r3, #0]
 8002a30:	2b57      	cmp	r3, #87	@ 0x57
 8002a32:	d105      	bne.n	8002a40 <process_gps_data+0x114>
 8002a34:	4b39      	ldr	r3, [pc, #228]	@ (8002b1c <process_gps_data+0x1f0>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8002a3c:	4a37      	ldr	r2, [pc, #220]	@ (8002b1c <process_gps_data+0x1f0>)
 8002a3e:	6013      	str	r3, [r2, #0]

                // Convertir tiempo
                hours = (int)time / 10000;
 8002a40:	4b39      	ldr	r3, [pc, #228]	@ (8002b28 <process_gps_data+0x1fc>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4618      	mov	r0, r3
 8002a46:	f7fe fb63 	bl	8001110 <__aeabi_f2iz>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	4a3a      	ldr	r2, [pc, #232]	@ (8002b38 <process_gps_data+0x20c>)
 8002a4e:	fb82 1203 	smull	r1, r2, r2, r3
 8002a52:	1312      	asrs	r2, r2, #12
 8002a54:	17db      	asrs	r3, r3, #31
 8002a56:	1ad3      	subs	r3, r2, r3
 8002a58:	4a38      	ldr	r2, [pc, #224]	@ (8002b3c <process_gps_data+0x210>)
 8002a5a:	6013      	str	r3, [r2, #0]
                minutes = (int)(time - (hours * 10000)) / 100;
 8002a5c:	4b32      	ldr	r3, [pc, #200]	@ (8002b28 <process_gps_data+0x1fc>)
 8002a5e:	681c      	ldr	r4, [r3, #0]
 8002a60:	4b36      	ldr	r3, [pc, #216]	@ (8002b3c <process_gps_data+0x210>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f242 7210 	movw	r2, #10000	@ 0x2710
 8002a68:	fb02 f303 	mul.w	r3, r2, r3
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	f7fe f935 	bl	8000cdc <__aeabi_i2f>
 8002a72:	4603      	mov	r3, r0
 8002a74:	4619      	mov	r1, r3
 8002a76:	4620      	mov	r0, r4
 8002a78:	f7fe f87a 	bl	8000b70 <__aeabi_fsub>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f7fe fb46 	bl	8001110 <__aeabi_f2iz>
 8002a84:	4603      	mov	r3, r0
 8002a86:	4a2e      	ldr	r2, [pc, #184]	@ (8002b40 <process_gps_data+0x214>)
 8002a88:	fb82 1203 	smull	r1, r2, r2, r3
 8002a8c:	1152      	asrs	r2, r2, #5
 8002a8e:	17db      	asrs	r3, r3, #31
 8002a90:	1ad3      	subs	r3, r2, r3
 8002a92:	4a2c      	ldr	r2, [pc, #176]	@ (8002b44 <process_gps_data+0x218>)
 8002a94:	6013      	str	r3, [r2, #0]
                seconds = time - ((int)time / 100) * 100;
 8002a96:	4b24      	ldr	r3, [pc, #144]	@ (8002b28 <process_gps_data+0x1fc>)
 8002a98:	681c      	ldr	r4, [r3, #0]
 8002a9a:	4b23      	ldr	r3, [pc, #140]	@ (8002b28 <process_gps_data+0x1fc>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	f7fe fb36 	bl	8001110 <__aeabi_f2iz>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	4a26      	ldr	r2, [pc, #152]	@ (8002b40 <process_gps_data+0x214>)
 8002aa8:	fb82 1203 	smull	r1, r2, r2, r3
 8002aac:	1152      	asrs	r2, r2, #5
 8002aae:	17db      	asrs	r3, r3, #31
 8002ab0:	1ad3      	subs	r3, r2, r3
 8002ab2:	2264      	movs	r2, #100	@ 0x64
 8002ab4:	fb02 f303 	mul.w	r3, r2, r3
 8002ab8:	4618      	mov	r0, r3
 8002aba:	f7fe f90f 	bl	8000cdc <__aeabi_i2f>
 8002abe:	4603      	mov	r3, r0
 8002ac0:	4619      	mov	r1, r3
 8002ac2:	4620      	mov	r0, r4
 8002ac4:	f7fe f854 	bl	8000b70 <__aeabi_fsub>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	461a      	mov	r2, r3
 8002acc:	4b1e      	ldr	r3, [pc, #120]	@ (8002b48 <process_gps_data+0x21c>)
 8002ace:	601a      	str	r2, [r3, #0]
 8002ad0:	e00b      	b.n	8002aea <process_gps_data+0x1be>
            }
            else
            {
                // Si no se pudo parsear correctamente, invalidar los datos
                time = 0;
 8002ad2:	4b15      	ldr	r3, [pc, #84]	@ (8002b28 <process_gps_data+0x1fc>)
 8002ad4:	f04f 0200 	mov.w	r2, #0
 8002ad8:	601a      	str	r2, [r3, #0]
                latitude = 0;
 8002ada:	4b12      	ldr	r3, [pc, #72]	@ (8002b24 <process_gps_data+0x1f8>)
 8002adc:	f04f 0200 	mov.w	r2, #0
 8002ae0:	601a      	str	r2, [r3, #0]
                longitude = 0;
 8002ae2:	4b0e      	ldr	r3, [pc, #56]	@ (8002b1c <process_gps_data+0x1f0>)
 8002ae4:	f04f 0200 	mov.w	r2, #0
 8002ae8:	601a      	str	r2, [r3, #0]
            }
        }

        gpsDataReady = 0;
 8002aea:	4b08      	ldr	r3, [pc, #32]	@ (8002b0c <process_gps_data+0x1e0>)
 8002aec:	2200      	movs	r2, #0
 8002aee:	701a      	strb	r2, [r3, #0]
        gpsBufferIndex = 0;
 8002af0:	4b16      	ldr	r3, [pc, #88]	@ (8002b4c <process_gps_data+0x220>)
 8002af2:	2200      	movs	r2, #0
 8002af4:	601a      	str	r2, [r3, #0]
        HAL_UART_Receive_DMA(&huart2, gpsBuffer, GPS_BUFFER_SIZE);
 8002af6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002afa:	4906      	ldr	r1, [pc, #24]	@ (8002b14 <process_gps_data+0x1e8>)
 8002afc:	4814      	ldr	r0, [pc, #80]	@ (8002b50 <process_gps_data+0x224>)
 8002afe:	f003 fc56 	bl	80063ae <HAL_UART_Receive_DMA>
    }
}
 8002b02:	bf00      	nop
 8002b04:	371c      	adds	r7, #28
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd90      	pop	{r4, r7, pc}
 8002b0a:	bf00      	nop
 8002b0c:	20000608 	.word	0x20000608
 8002b10:	0800c948 	.word	0x0800c948
 8002b14:	20000204 	.word	0x20000204
 8002b18:	20000001 	.word	0x20000001
 8002b1c:	20000900 	.word	0x20000900
 8002b20:	20000000 	.word	0x20000000
 8002b24:	200008fc 	.word	0x200008fc
 8002b28:	200008f8 	.word	0x200008f8
 8002b2c:	0800c950 	.word	0x0800c950
 8002b30:	42c80000 	.word	0x42c80000
 8002b34:	42700000 	.word	0x42700000
 8002b38:	68db8bad 	.word	0x68db8bad
 8002b3c:	20000904 	.word	0x20000904
 8002b40:	51eb851f 	.word	0x51eb851f
 8002b44:	20000908 	.word	0x20000908
 8002b48:	2000090c 	.word	0x2000090c
 8002b4c:	20000604 	.word	0x20000604
 8002b50:	200006f0 	.word	0x200006f0

08002b54 <HAL_UART_RxCpltCallback>:
             hours, minutes, seconds, lat, lon);
    HAL_UART_Transmit(&huart1, (uint8_t*)Data, strlen(Data), 1000);
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002b54:	b480      	push	{r7}
 8002b56:	b083      	sub	sp, #12
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART2)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a05      	ldr	r2, [pc, #20]	@ (8002b78 <HAL_UART_RxCpltCallback+0x24>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d102      	bne.n	8002b6c <HAL_UART_RxCpltCallback+0x18>
    {
        gpsDataReady = 1;
 8002b66:	4b05      	ldr	r3, [pc, #20]	@ (8002b7c <HAL_UART_RxCpltCallback+0x28>)
 8002b68:	2201      	movs	r2, #1
 8002b6a:	701a      	strb	r2, [r3, #0]
    }
}
 8002b6c:	bf00      	nop
 8002b6e:	370c      	adds	r7, #12
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bc80      	pop	{r7}
 8002b74:	4770      	bx	lr
 8002b76:	bf00      	nop
 8002b78:	40004400 	.word	0x40004400
 8002b7c:	20000608 	.word	0x20000608

08002b80 <LoRa_Init>:

//funciones del Lora:

/* USER CODE BEGIN 4 */
void LoRa_Init(void)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	af00      	add	r7, sp, #0

    // Configurar el módulo LoRa
    HAL_UART_Transmit(&huart3, (uint8_t*)"AT+MODE=0\r\n", 11, 1000);
 8002b84:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002b88:	220b      	movs	r2, #11
 8002b8a:	4913      	ldr	r1, [pc, #76]	@ (8002bd8 <LoRa_Init+0x58>)
 8002b8c:	4813      	ldr	r0, [pc, #76]	@ (8002bdc <LoRa_Init+0x5c>)
 8002b8e:	f003 fb8b 	bl	80062a8 <HAL_UART_Transmit>
    HAL_Delay(100);
 8002b92:	2064      	movs	r0, #100	@ 0x64
 8002b94:	f000 fe0a 	bl	80037ac <HAL_Delay>

    // Configurar la frecuencia (ajusta según tu región)
    HAL_UART_Transmit(&huart3, (uint8_t*)"AT+BAND=868500000\r\n", 20, 1000);
 8002b98:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002b9c:	2214      	movs	r2, #20
 8002b9e:	4910      	ldr	r1, [pc, #64]	@ (8002be0 <LoRa_Init+0x60>)
 8002ba0:	480e      	ldr	r0, [pc, #56]	@ (8002bdc <LoRa_Init+0x5c>)
 8002ba2:	f003 fb81 	bl	80062a8 <HAL_UART_Transmit>
    HAL_Delay(100);
 8002ba6:	2064      	movs	r0, #100	@ 0x64
 8002ba8:	f000 fe00 	bl	80037ac <HAL_Delay>

    // Configurar los parámetros de transmisión
    HAL_UART_Transmit(&huart3, (uint8_t*)"AT+PARAMETER=10,7,1,7\r\n", 24, 1000);
 8002bac:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002bb0:	2218      	movs	r2, #24
 8002bb2:	490c      	ldr	r1, [pc, #48]	@ (8002be4 <LoRa_Init+0x64>)
 8002bb4:	4809      	ldr	r0, [pc, #36]	@ (8002bdc <LoRa_Init+0x5c>)
 8002bb6:	f003 fb77 	bl	80062a8 <HAL_UART_Transmit>
    HAL_Delay(100);
 8002bba:	2064      	movs	r0, #100	@ 0x64
 8002bbc:	f000 fdf6 	bl	80037ac <HAL_Delay>

    // Configurar la potencia de transmisión
    HAL_UART_Transmit(&huart3, (uint8_t*)"AT+CRFOP=15\r\n", 13, 1000);
 8002bc0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002bc4:	220d      	movs	r2, #13
 8002bc6:	4908      	ldr	r1, [pc, #32]	@ (8002be8 <LoRa_Init+0x68>)
 8002bc8:	4804      	ldr	r0, [pc, #16]	@ (8002bdc <LoRa_Init+0x5c>)
 8002bca:	f003 fb6d 	bl	80062a8 <HAL_UART_Transmit>
    HAL_Delay(100);
 8002bce:	2064      	movs	r0, #100	@ 0x64
 8002bd0:	f000 fdec 	bl	80037ac <HAL_Delay>
}
 8002bd4:	bf00      	nop
 8002bd6:	bd80      	pop	{r7, pc}
 8002bd8:	0800c998 	.word	0x0800c998
 8002bdc:	20000738 	.word	0x20000738
 8002be0:	0800c9a4 	.word	0x0800c9a4
 8002be4:	0800c9b8 	.word	0x0800c9b8
 8002be8:	0800c9d0 	.word	0x0800c9d0

08002bec <LoRa_Send>:

void LoRa_Send(const char* data)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	f5ad 7d1c 	sub.w	sp, sp, #624	@ 0x270
 8002bf2:	af02      	add	r7, sp, #8
 8002bf4:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8002bf8:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8002bfc:	6018      	str	r0, [r3, #0]
    char cmd[600];
    int len = snprintf(cmd, sizeof(cmd), "AT+SEND=0,%d,%s\r\n", strlen(data), data);
 8002bfe:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8002c02:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8002c06:	6818      	ldr	r0, [r3, #0]
 8002c08:	f7fd faa2 	bl	8000150 <strlen>
 8002c0c:	4602      	mov	r2, r0
 8002c0e:	f107 000c 	add.w	r0, r7, #12
 8002c12:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8002c16:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	9300      	str	r3, [sp, #0]
 8002c1e:	4613      	mov	r3, r2
 8002c20:	4a0a      	ldr	r2, [pc, #40]	@ (8002c4c <LoRa_Send+0x60>)
 8002c22:	f44f 7116 	mov.w	r1, #600	@ 0x258
 8002c26:	f004 fe51 	bl	80078cc <sniprintf>
 8002c2a:	f8c7 0264 	str.w	r0, [r7, #612]	@ 0x264
    HAL_UART_Transmit(&huart3, (uint8_t*)cmd, len, HAL_MAX_DELAY);
 8002c2e:	f8d7 3264 	ldr.w	r3, [r7, #612]	@ 0x264
 8002c32:	b29a      	uxth	r2, r3
 8002c34:	f107 010c 	add.w	r1, r7, #12
 8002c38:	f04f 33ff 	mov.w	r3, #4294967295
 8002c3c:	4804      	ldr	r0, [pc, #16]	@ (8002c50 <LoRa_Send+0x64>)
 8002c3e:	f003 fb33 	bl	80062a8 <HAL_UART_Transmit>
}
 8002c42:	bf00      	nop
 8002c44:	f507 771a 	add.w	r7, r7, #616	@ 0x268
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bd80      	pop	{r7, pc}
 8002c4c:	0800c9e0 	.word	0x0800c9e0
 8002c50:	20000738 	.word	0x20000738

08002c54 <movingAverageFilter>:
float movingAverageFilter(float newValue) {
 8002c54:	b590      	push	{r4, r7, lr}
 8002c56:	b083      	sub	sp, #12
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
    static int count = 0;
    static float sum = 0;

    if (count < FILTER_SIZE) {
 8002c5c:	4b2c      	ldr	r3, [pc, #176]	@ (8002d10 <movingAverageFilter+0xbc>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	2b09      	cmp	r3, #9
 8002c62:	dc15      	bgt.n	8002c90 <movingAverageFilter+0x3c>
        pressureBuffer[count] = newValue;
 8002c64:	4b2a      	ldr	r3, [pc, #168]	@ (8002d10 <movingAverageFilter+0xbc>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	492a      	ldr	r1, [pc, #168]	@ (8002d14 <movingAverageFilter+0xc0>)
 8002c6a:	687a      	ldr	r2, [r7, #4]
 8002c6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        sum += newValue;
 8002c70:	4b29      	ldr	r3, [pc, #164]	@ (8002d18 <movingAverageFilter+0xc4>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	6879      	ldr	r1, [r7, #4]
 8002c76:	4618      	mov	r0, r3
 8002c78:	f7fd ff7c 	bl	8000b74 <__addsf3>
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	461a      	mov	r2, r3
 8002c80:	4b25      	ldr	r3, [pc, #148]	@ (8002d18 <movingAverageFilter+0xc4>)
 8002c82:	601a      	str	r2, [r3, #0]
        count++;
 8002c84:	4b22      	ldr	r3, [pc, #136]	@ (8002d10 <movingAverageFilter+0xbc>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	3301      	adds	r3, #1
 8002c8a:	4a21      	ldr	r2, [pc, #132]	@ (8002d10 <movingAverageFilter+0xbc>)
 8002c8c:	6013      	str	r3, [r2, #0]
 8002c8e:	e02e      	b.n	8002cee <movingAverageFilter+0x9a>
    } else {
        sum -= pressureBuffer[bufferIndex];
 8002c90:	4b21      	ldr	r3, [pc, #132]	@ (8002d18 <movingAverageFilter+0xc4>)
 8002c92:	681a      	ldr	r2, [r3, #0]
 8002c94:	4b21      	ldr	r3, [pc, #132]	@ (8002d1c <movingAverageFilter+0xc8>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	491e      	ldr	r1, [pc, #120]	@ (8002d14 <movingAverageFilter+0xc0>)
 8002c9a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002c9e:	4619      	mov	r1, r3
 8002ca0:	4610      	mov	r0, r2
 8002ca2:	f7fd ff65 	bl	8000b70 <__aeabi_fsub>
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	461a      	mov	r2, r3
 8002caa:	4b1b      	ldr	r3, [pc, #108]	@ (8002d18 <movingAverageFilter+0xc4>)
 8002cac:	601a      	str	r2, [r3, #0]
        pressureBuffer[bufferIndex] = newValue;
 8002cae:	4b1b      	ldr	r3, [pc, #108]	@ (8002d1c <movingAverageFilter+0xc8>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4918      	ldr	r1, [pc, #96]	@ (8002d14 <movingAverageFilter+0xc0>)
 8002cb4:	687a      	ldr	r2, [r7, #4]
 8002cb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        sum += newValue;
 8002cba:	4b17      	ldr	r3, [pc, #92]	@ (8002d18 <movingAverageFilter+0xc4>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	6879      	ldr	r1, [r7, #4]
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	f7fd ff57 	bl	8000b74 <__addsf3>
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	461a      	mov	r2, r3
 8002cca:	4b13      	ldr	r3, [pc, #76]	@ (8002d18 <movingAverageFilter+0xc4>)
 8002ccc:	601a      	str	r2, [r3, #0]
        bufferIndex = (bufferIndex + 1) % FILTER_SIZE;
 8002cce:	4b13      	ldr	r3, [pc, #76]	@ (8002d1c <movingAverageFilter+0xc8>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	1c59      	adds	r1, r3, #1
 8002cd4:	4b12      	ldr	r3, [pc, #72]	@ (8002d20 <movingAverageFilter+0xcc>)
 8002cd6:	fb83 2301 	smull	r2, r3, r3, r1
 8002cda:	109a      	asrs	r2, r3, #2
 8002cdc:	17cb      	asrs	r3, r1, #31
 8002cde:	1ad2      	subs	r2, r2, r3
 8002ce0:	4613      	mov	r3, r2
 8002ce2:	009b      	lsls	r3, r3, #2
 8002ce4:	4413      	add	r3, r2
 8002ce6:	005b      	lsls	r3, r3, #1
 8002ce8:	1aca      	subs	r2, r1, r3
 8002cea:	4b0c      	ldr	r3, [pc, #48]	@ (8002d1c <movingAverageFilter+0xc8>)
 8002cec:	601a      	str	r2, [r3, #0]
    }

    return sum / count;
 8002cee:	4b0a      	ldr	r3, [pc, #40]	@ (8002d18 <movingAverageFilter+0xc4>)
 8002cf0:	681c      	ldr	r4, [r3, #0]
 8002cf2:	4b07      	ldr	r3, [pc, #28]	@ (8002d10 <movingAverageFilter+0xbc>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f7fd fff0 	bl	8000cdc <__aeabi_i2f>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	4619      	mov	r1, r3
 8002d00:	4620      	mov	r0, r4
 8002d02:	f7fe f8f3 	bl	8000eec <__aeabi_fdiv>
 8002d06:	4603      	mov	r3, r0
}
 8002d08:	4618      	mov	r0, r3
 8002d0a:	370c      	adds	r7, #12
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	bd90      	pop	{r4, r7, pc}
 8002d10:	20000944 	.word	0x20000944
 8002d14:	20000914 	.word	0x20000914
 8002d18:	20000948 	.word	0x20000948
 8002d1c:	2000093c 	.word	0x2000093c
 8002d20:	66666667 	.word	0x66666667

08002d24 <moveServoToAngle>:
void moveServoToAngle(float angle) {
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b09e      	sub	sp, #120	@ 0x78
 8002d28:	af02      	add	r7, sp, #8
 8002d2a:	6078      	str	r0, [r7, #4]
    uint32_t pulse = SERVO_MIN_PULSE + (angle / 180.0f) * (SERVO_MAX_PULSE - SERVO_MIN_PULSE);
 8002d2c:	491d      	ldr	r1, [pc, #116]	@ (8002da4 <moveServoToAngle+0x80>)
 8002d2e:	6878      	ldr	r0, [r7, #4]
 8002d30:	f7fe f8dc 	bl	8000eec <__aeabi_fdiv>
 8002d34:	4603      	mov	r3, r0
 8002d36:	491c      	ldr	r1, [pc, #112]	@ (8002da8 <moveServoToAngle+0x84>)
 8002d38:	4618      	mov	r0, r3
 8002d3a:	f7fe f823 	bl	8000d84 <__aeabi_fmul>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	491a      	ldr	r1, [pc, #104]	@ (8002dac <moveServoToAngle+0x88>)
 8002d42:	4618      	mov	r0, r3
 8002d44:	f7fd ff16 	bl	8000b74 <__addsf3>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	f7fe fa06 	bl	800115c <__aeabi_f2uiz>
 8002d50:	4603      	mov	r3, r0
 8002d52:	66fb      	str	r3, [r7, #108]	@ 0x6c
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, pulse);
 8002d54:	4b16      	ldr	r3, [pc, #88]	@ (8002db0 <moveServoToAngle+0x8c>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002d5a:	635a      	str	r2, [r3, #52]	@ 0x34

    // Opcional: añadir un pequeño retraso para dar tiempo al servo de moverse
    HAL_Delay(500);
 8002d5c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002d60:	f000 fd24 	bl	80037ac <HAL_Delay>

    // Imprimir información de depuración
    char debug[100];
    snprintf(debug, sizeof(debug), "Servo inicializado a %.1f grados\r\n", angle);
 8002d64:	6878      	ldr	r0, [r7, #4]
 8002d66:	f7fd fb5f 	bl	8000428 <__aeabi_f2d>
 8002d6a:	4602      	mov	r2, r0
 8002d6c:	460b      	mov	r3, r1
 8002d6e:	f107 0008 	add.w	r0, r7, #8
 8002d72:	e9cd 2300 	strd	r2, r3, [sp]
 8002d76:	4a0f      	ldr	r2, [pc, #60]	@ (8002db4 <moveServoToAngle+0x90>)
 8002d78:	2164      	movs	r1, #100	@ 0x64
 8002d7a:	f004 fda7 	bl	80078cc <sniprintf>
    HAL_UART_Transmit(&huart1, (uint8_t*)debug, strlen(debug), HAL_MAX_DELAY);
 8002d7e:	f107 0308 	add.w	r3, r7, #8
 8002d82:	4618      	mov	r0, r3
 8002d84:	f7fd f9e4 	bl	8000150 <strlen>
 8002d88:	4603      	mov	r3, r0
 8002d8a:	b29a      	uxth	r2, r3
 8002d8c:	f107 0108 	add.w	r1, r7, #8
 8002d90:	f04f 33ff 	mov.w	r3, #4294967295
 8002d94:	4808      	ldr	r0, [pc, #32]	@ (8002db8 <moveServoToAngle+0x94>)
 8002d96:	f003 fa87 	bl	80062a8 <HAL_UART_Transmit>
}
 8002d9a:	bf00      	nop
 8002d9c:	3770      	adds	r7, #112	@ 0x70
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd80      	pop	{r7, pc}
 8002da2:	bf00      	nop
 8002da4:	43340000 	.word	0x43340000
 8002da8:	44fa0000 	.word	0x44fa0000
 8002dac:	43fa0000 	.word	0x43fa0000
 8002db0:	20000660 	.word	0x20000660
 8002db4:	0800c9f4 	.word	0x0800c9f4
 8002db8:	200006a8 	.word	0x200006a8
 8002dbc:	00000000 	.word	0x00000000

08002dc0 <moveServoBasedOnAltitude>:

void moveServoBasedOnAltitude(float altitude) {
 8002dc0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002dc4:	b0a6      	sub	sp, #152	@ 0x98
 8002dc6:	af08      	add	r7, sp, #32
 8002dc8:	6078      	str	r0, [r7, #4]
    static float lastAltitude = 0;
    float relativeAltitude = altitude - baseAltitude;
 8002dca:	4b47      	ldr	r3, [pc, #284]	@ (8002ee8 <moveServoBasedOnAltitude+0x128>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4619      	mov	r1, r3
 8002dd0:	6878      	ldr	r0, [r7, #4]
 8002dd2:	f7fd fecd 	bl	8000b70 <__aeabi_fsub>
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	673b      	str	r3, [r7, #112]	@ 0x70

    // Solo actualizamos si hay un cambio significativo en la altitud
    if (fabs(relativeAltitude - lastAltitude) > 0.05) { // 5 cm de cambio mínimo
 8002dda:	4b44      	ldr	r3, [pc, #272]	@ (8002eec <moveServoBasedOnAltitude+0x12c>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4619      	mov	r1, r3
 8002de0:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8002de2:	f7fd fec5 	bl	8000b70 <__aeabi_fsub>
 8002de6:	4603      	mov	r3, r0
 8002de8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002dec:	4618      	mov	r0, r3
 8002dee:	f7fd fb1b 	bl	8000428 <__aeabi_f2d>
 8002df2:	a33b      	add	r3, pc, #236	@ (adr r3, 8002ee0 <moveServoBasedOnAltitude+0x120>)
 8002df4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002df8:	f7fd fdfe 	bl	80009f8 <__aeabi_dcmpgt>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d100      	bne.n	8002e04 <moveServoBasedOnAltitude+0x44>
        char debug[100];
        snprintf(debug, sizeof(debug), "Altitude: %.2f m, Rel Alt: %.2f m, Servo Angle: %.2f deg, Pulse: %lu\r\n",
                 altitude, relativeAltitude, servoAngle, pulse);
        HAL_UART_Transmit(&huart1, (uint8_t*)debug, strlen(debug), HAL_MAX_DELAY);
    }
}
 8002e02:	e066      	b.n	8002ed2 <moveServoBasedOnAltitude+0x112>
        lastAltitude = relativeAltitude;
 8002e04:	4a39      	ldr	r2, [pc, #228]	@ (8002eec <moveServoBasedOnAltitude+0x12c>)
 8002e06:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002e08:	6013      	str	r3, [r2, #0]
        if (relativeAltitude < 1.0f) {
 8002e0a:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8002e0e:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8002e10:	f7fe f956 	bl	80010c0 <__aeabi_fcmplt>
 8002e14:	4603      	mov	r3, r0
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d003      	beq.n	8002e22 <moveServoBasedOnAltitude+0x62>
            servoAngle = 0.0f;  // Servo en posición inicial
 8002e1a:	f04f 0300 	mov.w	r3, #0
 8002e1e:	677b      	str	r3, [r7, #116]	@ 0x74
 8002e20:	e014      	b.n	8002e4c <moveServoBasedOnAltitude+0x8c>
        } else if (relativeAltitude >= 1.0f && relativeAltitude < 2.0f) {
 8002e22:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8002e26:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8002e28:	f7fe f95e 	bl	80010e8 <__aeabi_fcmpge>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d00a      	beq.n	8002e48 <moveServoBasedOnAltitude+0x88>
 8002e32:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8002e36:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8002e38:	f7fe f942 	bl	80010c0 <__aeabi_fcmplt>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d002      	beq.n	8002e48 <moveServoBasedOnAltitude+0x88>
            servoAngle = 90.0f;  // Servo a 90 grados cuando alcanza 1 metro
 8002e42:	4b2b      	ldr	r3, [pc, #172]	@ (8002ef0 <moveServoBasedOnAltitude+0x130>)
 8002e44:	677b      	str	r3, [r7, #116]	@ 0x74
 8002e46:	e001      	b.n	8002e4c <moveServoBasedOnAltitude+0x8c>
            servoAngle = 180.0f;  // Servo a 180 grados si supera los 2 metros
 8002e48:	4b2a      	ldr	r3, [pc, #168]	@ (8002ef4 <moveServoBasedOnAltitude+0x134>)
 8002e4a:	677b      	str	r3, [r7, #116]	@ 0x74
        uint32_t pulse = SERVO_MIN_PULSE + (servoAngle / 180.0f) * (SERVO_MAX_PULSE - SERVO_MIN_PULSE);
 8002e4c:	4929      	ldr	r1, [pc, #164]	@ (8002ef4 <moveServoBasedOnAltitude+0x134>)
 8002e4e:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 8002e50:	f7fe f84c 	bl	8000eec <__aeabi_fdiv>
 8002e54:	4603      	mov	r3, r0
 8002e56:	4928      	ldr	r1, [pc, #160]	@ (8002ef8 <moveServoBasedOnAltitude+0x138>)
 8002e58:	4618      	mov	r0, r3
 8002e5a:	f7fd ff93 	bl	8000d84 <__aeabi_fmul>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	4926      	ldr	r1, [pc, #152]	@ (8002efc <moveServoBasedOnAltitude+0x13c>)
 8002e62:	4618      	mov	r0, r3
 8002e64:	f7fd fe86 	bl	8000b74 <__addsf3>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	f7fe f976 	bl	800115c <__aeabi_f2uiz>
 8002e70:	4603      	mov	r3, r0
 8002e72:	66fb      	str	r3, [r7, #108]	@ 0x6c
        __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, pulse);
 8002e74:	4b22      	ldr	r3, [pc, #136]	@ (8002f00 <moveServoBasedOnAltitude+0x140>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002e7a:	635a      	str	r2, [r3, #52]	@ 0x34
        snprintf(debug, sizeof(debug), "Altitude: %.2f m, Rel Alt: %.2f m, Servo Angle: %.2f deg, Pulse: %lu\r\n",
 8002e7c:	6878      	ldr	r0, [r7, #4]
 8002e7e:	f7fd fad3 	bl	8000428 <__aeabi_f2d>
 8002e82:	4604      	mov	r4, r0
 8002e84:	460d      	mov	r5, r1
 8002e86:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8002e88:	f7fd face 	bl	8000428 <__aeabi_f2d>
 8002e8c:	4680      	mov	r8, r0
 8002e8e:	4689      	mov	r9, r1
 8002e90:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 8002e92:	f7fd fac9 	bl	8000428 <__aeabi_f2d>
 8002e96:	4602      	mov	r2, r0
 8002e98:	460b      	mov	r3, r1
 8002e9a:	f107 0008 	add.w	r0, r7, #8
 8002e9e:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8002ea0:	9106      	str	r1, [sp, #24]
 8002ea2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8002ea6:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8002eaa:	e9cd 4500 	strd	r4, r5, [sp]
 8002eae:	4a15      	ldr	r2, [pc, #84]	@ (8002f04 <moveServoBasedOnAltitude+0x144>)
 8002eb0:	2164      	movs	r1, #100	@ 0x64
 8002eb2:	f004 fd0b 	bl	80078cc <sniprintf>
        HAL_UART_Transmit(&huart1, (uint8_t*)debug, strlen(debug), HAL_MAX_DELAY);
 8002eb6:	f107 0308 	add.w	r3, r7, #8
 8002eba:	4618      	mov	r0, r3
 8002ebc:	f7fd f948 	bl	8000150 <strlen>
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	b29a      	uxth	r2, r3
 8002ec4:	f107 0108 	add.w	r1, r7, #8
 8002ec8:	f04f 33ff 	mov.w	r3, #4294967295
 8002ecc:	480e      	ldr	r0, [pc, #56]	@ (8002f08 <moveServoBasedOnAltitude+0x148>)
 8002ece:	f003 f9eb 	bl	80062a8 <HAL_UART_Transmit>
}
 8002ed2:	bf00      	nop
 8002ed4:	3778      	adds	r7, #120	@ 0x78
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002edc:	f3af 8000 	nop.w
 8002ee0:	9999999a 	.word	0x9999999a
 8002ee4:	3fa99999 	.word	0x3fa99999
 8002ee8:	20000940 	.word	0x20000940
 8002eec:	2000094c 	.word	0x2000094c
 8002ef0:	42b40000 	.word	0x42b40000
 8002ef4:	43340000 	.word	0x43340000
 8002ef8:	44fa0000 	.word	0x44fa0000
 8002efc:	43fa0000 	.word	0x43fa0000
 8002f00:	20000660 	.word	0x20000660
 8002f04:	0800ca18 	.word	0x0800ca18
 8002f08:	200006a8 	.word	0x200006a8

08002f0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002f10:	b672      	cpsid	i
}
 8002f12:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002f14:	bf00      	nop
 8002f16:	e7fd      	b.n	8002f14 <Error_Handler+0x8>

08002f18 <MPU9250_ReadAccel>:

#include <mpu9250.h>
#include <uart.h> // Incluye tus funciones personalizadas de UART

// Implementación simplificada para enviar datos de acelerómetro via UART
void MPU9250_ReadAccel(I2C_HandleTypeDef *hi2c, float *accelData) {
 8002f18:	b590      	push	{r4, r7, lr}
 8002f1a:	b08b      	sub	sp, #44	@ 0x2c
 8002f1c:	af04      	add	r7, sp, #16
 8002f1e:	6078      	str	r0, [r7, #4]
 8002f20:	6039      	str	r1, [r7, #0]
    uint8_t rawData[6];
    HAL_I2C_Mem_Read(hi2c, MPU9250_ADDRESS, ACCEL_XOUT_H, 1, rawData, 6, 1000);
 8002f22:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002f26:	9302      	str	r3, [sp, #8]
 8002f28:	2306      	movs	r3, #6
 8002f2a:	9301      	str	r3, [sp, #4]
 8002f2c:	f107 030c 	add.w	r3, r7, #12
 8002f30:	9300      	str	r3, [sp, #0]
 8002f32:	2301      	movs	r3, #1
 8002f34:	223b      	movs	r2, #59	@ 0x3b
 8002f36:	21d0      	movs	r1, #208	@ 0xd0
 8002f38:	6878      	ldr	r0, [r7, #4]
 8002f3a:	f001 fb19 	bl	8004570 <HAL_I2C_Mem_Read>

    for (int i = 0; i < 3; ++i) {
 8002f3e:	2300      	movs	r3, #0
 8002f40:	617b      	str	r3, [r7, #20]
 8002f42:	e036      	b.n	8002fb2 <MPU9250_ReadAccel+0x9a>
        int16_t raw = (int16_t)(rawData[2 * i] << 8 | rawData[2 * i + 1]);
 8002f44:	697b      	ldr	r3, [r7, #20]
 8002f46:	005b      	lsls	r3, r3, #1
 8002f48:	3318      	adds	r3, #24
 8002f4a:	443b      	add	r3, r7
 8002f4c:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8002f50:	021b      	lsls	r3, r3, #8
 8002f52:	b21a      	sxth	r2, r3
 8002f54:	697b      	ldr	r3, [r7, #20]
 8002f56:	005b      	lsls	r3, r3, #1
 8002f58:	3301      	adds	r3, #1
 8002f5a:	3318      	adds	r3, #24
 8002f5c:	443b      	add	r3, r7
 8002f5e:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8002f62:	b21b      	sxth	r3, r3
 8002f64:	4313      	orrs	r3, r2
 8002f66:	827b      	strh	r3, [r7, #18]
        accelData[i] = (float)raw * 2.0 / 32768.0;
 8002f68:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	f7fd feb5 	bl	8000cdc <__aeabi_i2f>
 8002f72:	4603      	mov	r3, r0
 8002f74:	4618      	mov	r0, r3
 8002f76:	f7fd fa57 	bl	8000428 <__aeabi_f2d>
 8002f7a:	4602      	mov	r2, r0
 8002f7c:	460b      	mov	r3, r1
 8002f7e:	f7fd f8f5 	bl	800016c <__adddf3>
 8002f82:	4602      	mov	r2, r0
 8002f84:	460b      	mov	r3, r1
 8002f86:	4610      	mov	r0, r2
 8002f88:	4619      	mov	r1, r3
 8002f8a:	f04f 0200 	mov.w	r2, #0
 8002f8e:	4b0d      	ldr	r3, [pc, #52]	@ (8002fc4 <MPU9250_ReadAccel+0xac>)
 8002f90:	f7fd fbcc 	bl	800072c <__aeabi_ddiv>
 8002f94:	4602      	mov	r2, r0
 8002f96:	460b      	mov	r3, r1
 8002f98:	4610      	mov	r0, r2
 8002f9a:	4619      	mov	r1, r3
 8002f9c:	697b      	ldr	r3, [r7, #20]
 8002f9e:	009b      	lsls	r3, r3, #2
 8002fa0:	683a      	ldr	r2, [r7, #0]
 8002fa2:	18d4      	adds	r4, r2, r3
 8002fa4:	f7fd fd90 	bl	8000ac8 <__aeabi_d2f>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	6023      	str	r3, [r4, #0]
    for (int i = 0; i < 3; ++i) {
 8002fac:	697b      	ldr	r3, [r7, #20]
 8002fae:	3301      	adds	r3, #1
 8002fb0:	617b      	str	r3, [r7, #20]
 8002fb2:	697b      	ldr	r3, [r7, #20]
 8002fb4:	2b02      	cmp	r3, #2
 8002fb6:	ddc5      	ble.n	8002f44 <MPU9250_ReadAccel+0x2c>
    }
}
 8002fb8:	bf00      	nop
 8002fba:	bf00      	nop
 8002fbc:	371c      	adds	r7, #28
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bd90      	pop	{r4, r7, pc}
 8002fc2:	bf00      	nop
 8002fc4:	40e00000 	.word	0x40e00000

08002fc8 <MPU9250_ReadGyro>:

void MPU9250_ReadGyro(I2C_HandleTypeDef *hi2c, float *gyroData) {
 8002fc8:	b590      	push	{r4, r7, lr}
 8002fca:	b08b      	sub	sp, #44	@ 0x2c
 8002fcc:	af04      	add	r7, sp, #16
 8002fce:	6078      	str	r0, [r7, #4]
 8002fd0:	6039      	str	r1, [r7, #0]
    uint8_t rawData[6];
    HAL_I2C_Mem_Read(hi2c, MPU9250_ADDRESS, GYRO_XOUT_H, 1, rawData, 6, 1000);
 8002fd2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002fd6:	9302      	str	r3, [sp, #8]
 8002fd8:	2306      	movs	r3, #6
 8002fda:	9301      	str	r3, [sp, #4]
 8002fdc:	f107 030c 	add.w	r3, r7, #12
 8002fe0:	9300      	str	r3, [sp, #0]
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	2243      	movs	r2, #67	@ 0x43
 8002fe6:	21d0      	movs	r1, #208	@ 0xd0
 8002fe8:	6878      	ldr	r0, [r7, #4]
 8002fea:	f001 fac1 	bl	8004570 <HAL_I2C_Mem_Read>

    for (int i = 0; i < 3; ++i) {
 8002fee:	2300      	movs	r3, #0
 8002ff0:	617b      	str	r3, [r7, #20]
 8002ff2:	e037      	b.n	8003064 <MPU9250_ReadGyro+0x9c>
        int16_t raw = (int16_t)(rawData[2 * i] << 8 | rawData[2 * i + 1]);
 8002ff4:	697b      	ldr	r3, [r7, #20]
 8002ff6:	005b      	lsls	r3, r3, #1
 8002ff8:	3318      	adds	r3, #24
 8002ffa:	443b      	add	r3, r7
 8002ffc:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8003000:	021b      	lsls	r3, r3, #8
 8003002:	b21a      	sxth	r2, r3
 8003004:	697b      	ldr	r3, [r7, #20]
 8003006:	005b      	lsls	r3, r3, #1
 8003008:	3301      	adds	r3, #1
 800300a:	3318      	adds	r3, #24
 800300c:	443b      	add	r3, r7
 800300e:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8003012:	b21b      	sxth	r3, r3
 8003014:	4313      	orrs	r3, r2
 8003016:	827b      	strh	r3, [r7, #18]
        gyroData[i] = (float)raw * 250.0 / 32768.0;
 8003018:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800301c:	4618      	mov	r0, r3
 800301e:	f7fd fe5d 	bl	8000cdc <__aeabi_i2f>
 8003022:	4603      	mov	r3, r0
 8003024:	4618      	mov	r0, r3
 8003026:	f7fd f9ff 	bl	8000428 <__aeabi_f2d>
 800302a:	f04f 0200 	mov.w	r2, #0
 800302e:	4b11      	ldr	r3, [pc, #68]	@ (8003074 <MPU9250_ReadGyro+0xac>)
 8003030:	f7fd fa52 	bl	80004d8 <__aeabi_dmul>
 8003034:	4602      	mov	r2, r0
 8003036:	460b      	mov	r3, r1
 8003038:	4610      	mov	r0, r2
 800303a:	4619      	mov	r1, r3
 800303c:	f04f 0200 	mov.w	r2, #0
 8003040:	4b0d      	ldr	r3, [pc, #52]	@ (8003078 <MPU9250_ReadGyro+0xb0>)
 8003042:	f7fd fb73 	bl	800072c <__aeabi_ddiv>
 8003046:	4602      	mov	r2, r0
 8003048:	460b      	mov	r3, r1
 800304a:	4610      	mov	r0, r2
 800304c:	4619      	mov	r1, r3
 800304e:	697b      	ldr	r3, [r7, #20]
 8003050:	009b      	lsls	r3, r3, #2
 8003052:	683a      	ldr	r2, [r7, #0]
 8003054:	18d4      	adds	r4, r2, r3
 8003056:	f7fd fd37 	bl	8000ac8 <__aeabi_d2f>
 800305a:	4603      	mov	r3, r0
 800305c:	6023      	str	r3, [r4, #0]
    for (int i = 0; i < 3; ++i) {
 800305e:	697b      	ldr	r3, [r7, #20]
 8003060:	3301      	adds	r3, #1
 8003062:	617b      	str	r3, [r7, #20]
 8003064:	697b      	ldr	r3, [r7, #20]
 8003066:	2b02      	cmp	r3, #2
 8003068:	ddc4      	ble.n	8002ff4 <MPU9250_ReadGyro+0x2c>
    }
}
 800306a:	bf00      	nop
 800306c:	bf00      	nop
 800306e:	371c      	adds	r7, #28
 8003070:	46bd      	mov	sp, r7
 8003072:	bd90      	pop	{r4, r7, pc}
 8003074:	406f4000 	.word	0x406f4000
 8003078:	40e00000 	.word	0x40e00000

0800307c <MPU9250_ReadMag>:

void MPU9250_ReadMag(I2C_HandleTypeDef *hi2c, float *magData) {
 800307c:	b590      	push	{r4, r7, lr}
 800307e:	b08b      	sub	sp, #44	@ 0x2c
 8003080:	af04      	add	r7, sp, #16
 8003082:	6078      	str	r0, [r7, #4]
 8003084:	6039      	str	r1, [r7, #0]
    uint8_t rawData[7];
    HAL_I2C_Mem_Read(hi2c, MPU9250_ADDRESS, AK8963_CNTL, 1, rawData, 7, 1000);
 8003086:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800308a:	9302      	str	r3, [sp, #8]
 800308c:	2307      	movs	r3, #7
 800308e:	9301      	str	r3, [sp, #4]
 8003090:	f107 0308 	add.w	r3, r7, #8
 8003094:	9300      	str	r3, [sp, #0]
 8003096:	2301      	movs	r3, #1
 8003098:	220a      	movs	r2, #10
 800309a:	21d0      	movs	r1, #208	@ 0xd0
 800309c:	6878      	ldr	r0, [r7, #4]
 800309e:	f001 fa67 	bl	8004570 <HAL_I2C_Mem_Read>

    for (int i = 0; i < 3; ++i) {
 80030a2:	2300      	movs	r3, #0
 80030a4:	617b      	str	r3, [r7, #20]
 80030a6:	e01f      	b.n	80030e8 <MPU9250_ReadMag+0x6c>
        int16_t raw = (int16_t)(rawData[2 * i] | rawData[2 * i + 1] << 8);
 80030a8:	697b      	ldr	r3, [r7, #20]
 80030aa:	005b      	lsls	r3, r3, #1
 80030ac:	3318      	adds	r3, #24
 80030ae:	443b      	add	r3, r7
 80030b0:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80030b4:	b21a      	sxth	r2, r3
 80030b6:	697b      	ldr	r3, [r7, #20]
 80030b8:	005b      	lsls	r3, r3, #1
 80030ba:	3301      	adds	r3, #1
 80030bc:	3318      	adds	r3, #24
 80030be:	443b      	add	r3, r7
 80030c0:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80030c4:	021b      	lsls	r3, r3, #8
 80030c6:	b21b      	sxth	r3, r3
 80030c8:	4313      	orrs	r3, r2
 80030ca:	827b      	strh	r3, [r7, #18]
        magData[i] = (float)raw;
 80030cc:	697b      	ldr	r3, [r7, #20]
 80030ce:	009b      	lsls	r3, r3, #2
 80030d0:	683a      	ldr	r2, [r7, #0]
 80030d2:	18d4      	adds	r4, r2, r3
 80030d4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80030d8:	4618      	mov	r0, r3
 80030da:	f7fd fdff 	bl	8000cdc <__aeabi_i2f>
 80030de:	4603      	mov	r3, r0
 80030e0:	6023      	str	r3, [r4, #0]
    for (int i = 0; i < 3; ++i) {
 80030e2:	697b      	ldr	r3, [r7, #20]
 80030e4:	3301      	adds	r3, #1
 80030e6:	617b      	str	r3, [r7, #20]
 80030e8:	697b      	ldr	r3, [r7, #20]
 80030ea:	2b02      	cmp	r3, #2
 80030ec:	dddc      	ble.n	80030a8 <MPU9250_ReadMag+0x2c>
    }
}
 80030ee:	bf00      	nop
 80030f0:	bf00      	nop
 80030f2:	371c      	adds	r7, #28
 80030f4:	46bd      	mov	sp, r7
 80030f6:	bd90      	pop	{r4, r7, pc}

080030f8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80030f8:	b480      	push	{r7}
 80030fa:	b085      	sub	sp, #20
 80030fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80030fe:	4b15      	ldr	r3, [pc, #84]	@ (8003154 <HAL_MspInit+0x5c>)
 8003100:	699b      	ldr	r3, [r3, #24]
 8003102:	4a14      	ldr	r2, [pc, #80]	@ (8003154 <HAL_MspInit+0x5c>)
 8003104:	f043 0301 	orr.w	r3, r3, #1
 8003108:	6193      	str	r3, [r2, #24]
 800310a:	4b12      	ldr	r3, [pc, #72]	@ (8003154 <HAL_MspInit+0x5c>)
 800310c:	699b      	ldr	r3, [r3, #24]
 800310e:	f003 0301 	and.w	r3, r3, #1
 8003112:	60bb      	str	r3, [r7, #8]
 8003114:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003116:	4b0f      	ldr	r3, [pc, #60]	@ (8003154 <HAL_MspInit+0x5c>)
 8003118:	69db      	ldr	r3, [r3, #28]
 800311a:	4a0e      	ldr	r2, [pc, #56]	@ (8003154 <HAL_MspInit+0x5c>)
 800311c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003120:	61d3      	str	r3, [r2, #28]
 8003122:	4b0c      	ldr	r3, [pc, #48]	@ (8003154 <HAL_MspInit+0x5c>)
 8003124:	69db      	ldr	r3, [r3, #28]
 8003126:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800312a:	607b      	str	r3, [r7, #4]
 800312c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800312e:	4b0a      	ldr	r3, [pc, #40]	@ (8003158 <HAL_MspInit+0x60>)
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	60fb      	str	r3, [r7, #12]
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800313a:	60fb      	str	r3, [r7, #12]
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003142:	60fb      	str	r3, [r7, #12]
 8003144:	4a04      	ldr	r2, [pc, #16]	@ (8003158 <HAL_MspInit+0x60>)
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800314a:	bf00      	nop
 800314c:	3714      	adds	r7, #20
 800314e:	46bd      	mov	sp, r7
 8003150:	bc80      	pop	{r7}
 8003152:	4770      	bx	lr
 8003154:	40021000 	.word	0x40021000
 8003158:	40010000 	.word	0x40010000

0800315c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b088      	sub	sp, #32
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003164:	f107 0310 	add.w	r3, r7, #16
 8003168:	2200      	movs	r2, #0
 800316a:	601a      	str	r2, [r3, #0]
 800316c:	605a      	str	r2, [r3, #4]
 800316e:	609a      	str	r2, [r3, #8]
 8003170:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a15      	ldr	r2, [pc, #84]	@ (80031cc <HAL_I2C_MspInit+0x70>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d123      	bne.n	80031c4 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800317c:	4b14      	ldr	r3, [pc, #80]	@ (80031d0 <HAL_I2C_MspInit+0x74>)
 800317e:	699b      	ldr	r3, [r3, #24]
 8003180:	4a13      	ldr	r2, [pc, #76]	@ (80031d0 <HAL_I2C_MspInit+0x74>)
 8003182:	f043 0308 	orr.w	r3, r3, #8
 8003186:	6193      	str	r3, [r2, #24]
 8003188:	4b11      	ldr	r3, [pc, #68]	@ (80031d0 <HAL_I2C_MspInit+0x74>)
 800318a:	699b      	ldr	r3, [r3, #24]
 800318c:	f003 0308 	and.w	r3, r3, #8
 8003190:	60fb      	str	r3, [r7, #12]
 8003192:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003194:	23c0      	movs	r3, #192	@ 0xc0
 8003196:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003198:	2312      	movs	r3, #18
 800319a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800319c:	2303      	movs	r3, #3
 800319e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031a0:	f107 0310 	add.w	r3, r7, #16
 80031a4:	4619      	mov	r1, r3
 80031a6:	480b      	ldr	r0, [pc, #44]	@ (80031d4 <HAL_I2C_MspInit+0x78>)
 80031a8:	f000 fe20 	bl	8003dec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80031ac:	4b08      	ldr	r3, [pc, #32]	@ (80031d0 <HAL_I2C_MspInit+0x74>)
 80031ae:	69db      	ldr	r3, [r3, #28]
 80031b0:	4a07      	ldr	r2, [pc, #28]	@ (80031d0 <HAL_I2C_MspInit+0x74>)
 80031b2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80031b6:	61d3      	str	r3, [r2, #28]
 80031b8:	4b05      	ldr	r3, [pc, #20]	@ (80031d0 <HAL_I2C_MspInit+0x74>)
 80031ba:	69db      	ldr	r3, [r3, #28]
 80031bc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80031c0:	60bb      	str	r3, [r7, #8]
 80031c2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80031c4:	bf00      	nop
 80031c6:	3720      	adds	r7, #32
 80031c8:	46bd      	mov	sp, r7
 80031ca:	bd80      	pop	{r7, pc}
 80031cc:	40005400 	.word	0x40005400
 80031d0:	40021000 	.word	0x40021000
 80031d4:	40010c00 	.word	0x40010c00

080031d8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80031d8:	b480      	push	{r7}
 80031da:	b085      	sub	sp, #20
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a09      	ldr	r2, [pc, #36]	@ (800320c <HAL_TIM_PWM_MspInit+0x34>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d10b      	bne.n	8003202 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80031ea:	4b09      	ldr	r3, [pc, #36]	@ (8003210 <HAL_TIM_PWM_MspInit+0x38>)
 80031ec:	69db      	ldr	r3, [r3, #28]
 80031ee:	4a08      	ldr	r2, [pc, #32]	@ (8003210 <HAL_TIM_PWM_MspInit+0x38>)
 80031f0:	f043 0302 	orr.w	r3, r3, #2
 80031f4:	61d3      	str	r3, [r2, #28]
 80031f6:	4b06      	ldr	r3, [pc, #24]	@ (8003210 <HAL_TIM_PWM_MspInit+0x38>)
 80031f8:	69db      	ldr	r3, [r3, #28]
 80031fa:	f003 0302 	and.w	r3, r3, #2
 80031fe:	60fb      	str	r3, [r7, #12]
 8003200:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8003202:	bf00      	nop
 8003204:	3714      	adds	r7, #20
 8003206:	46bd      	mov	sp, r7
 8003208:	bc80      	pop	{r7}
 800320a:	4770      	bx	lr
 800320c:	40000400 	.word	0x40000400
 8003210:	40021000 	.word	0x40021000

08003214 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b088      	sub	sp, #32
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800321c:	f107 0310 	add.w	r3, r7, #16
 8003220:	2200      	movs	r2, #0
 8003222:	601a      	str	r2, [r3, #0]
 8003224:	605a      	str	r2, [r3, #4]
 8003226:	609a      	str	r2, [r3, #8]
 8003228:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a0f      	ldr	r2, [pc, #60]	@ (800326c <HAL_TIM_MspPostInit+0x58>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d117      	bne.n	8003264 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003234:	4b0e      	ldr	r3, [pc, #56]	@ (8003270 <HAL_TIM_MspPostInit+0x5c>)
 8003236:	699b      	ldr	r3, [r3, #24]
 8003238:	4a0d      	ldr	r2, [pc, #52]	@ (8003270 <HAL_TIM_MspPostInit+0x5c>)
 800323a:	f043 0304 	orr.w	r3, r3, #4
 800323e:	6193      	str	r3, [r2, #24]
 8003240:	4b0b      	ldr	r3, [pc, #44]	@ (8003270 <HAL_TIM_MspPostInit+0x5c>)
 8003242:	699b      	ldr	r3, [r3, #24]
 8003244:	f003 0304 	and.w	r3, r3, #4
 8003248:	60fb      	str	r3, [r7, #12]
 800324a:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800324c:	2340      	movs	r3, #64	@ 0x40
 800324e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003250:	2302      	movs	r3, #2
 8003252:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003254:	2302      	movs	r3, #2
 8003256:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003258:	f107 0310 	add.w	r3, r7, #16
 800325c:	4619      	mov	r1, r3
 800325e:	4805      	ldr	r0, [pc, #20]	@ (8003274 <HAL_TIM_MspPostInit+0x60>)
 8003260:	f000 fdc4 	bl	8003dec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8003264:	bf00      	nop
 8003266:	3720      	adds	r7, #32
 8003268:	46bd      	mov	sp, r7
 800326a:	bd80      	pop	{r7, pc}
 800326c:	40000400 	.word	0x40000400
 8003270:	40021000 	.word	0x40021000
 8003274:	40010800 	.word	0x40010800

08003278 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b08c      	sub	sp, #48	@ 0x30
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003280:	f107 0320 	add.w	r3, r7, #32
 8003284:	2200      	movs	r2, #0
 8003286:	601a      	str	r2, [r3, #0]
 8003288:	605a      	str	r2, [r3, #4]
 800328a:	609a      	str	r2, [r3, #8]
 800328c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4a67      	ldr	r2, [pc, #412]	@ (8003430 <HAL_UART_MspInit+0x1b8>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d132      	bne.n	80032fe <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003298:	4b66      	ldr	r3, [pc, #408]	@ (8003434 <HAL_UART_MspInit+0x1bc>)
 800329a:	699b      	ldr	r3, [r3, #24]
 800329c:	4a65      	ldr	r2, [pc, #404]	@ (8003434 <HAL_UART_MspInit+0x1bc>)
 800329e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80032a2:	6193      	str	r3, [r2, #24]
 80032a4:	4b63      	ldr	r3, [pc, #396]	@ (8003434 <HAL_UART_MspInit+0x1bc>)
 80032a6:	699b      	ldr	r3, [r3, #24]
 80032a8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80032ac:	61fb      	str	r3, [r7, #28]
 80032ae:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032b0:	4b60      	ldr	r3, [pc, #384]	@ (8003434 <HAL_UART_MspInit+0x1bc>)
 80032b2:	699b      	ldr	r3, [r3, #24]
 80032b4:	4a5f      	ldr	r2, [pc, #380]	@ (8003434 <HAL_UART_MspInit+0x1bc>)
 80032b6:	f043 0304 	orr.w	r3, r3, #4
 80032ba:	6193      	str	r3, [r2, #24]
 80032bc:	4b5d      	ldr	r3, [pc, #372]	@ (8003434 <HAL_UART_MspInit+0x1bc>)
 80032be:	699b      	ldr	r3, [r3, #24]
 80032c0:	f003 0304 	and.w	r3, r3, #4
 80032c4:	61bb      	str	r3, [r7, #24]
 80032c6:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80032c8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80032cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032ce:	2302      	movs	r3, #2
 80032d0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80032d2:	2303      	movs	r3, #3
 80032d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032d6:	f107 0320 	add.w	r3, r7, #32
 80032da:	4619      	mov	r1, r3
 80032dc:	4856      	ldr	r0, [pc, #344]	@ (8003438 <HAL_UART_MspInit+0x1c0>)
 80032de:	f000 fd85 	bl	8003dec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80032e2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80032e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80032e8:	2300      	movs	r3, #0
 80032ea:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032ec:	2300      	movs	r3, #0
 80032ee:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032f0:	f107 0320 	add.w	r3, r7, #32
 80032f4:	4619      	mov	r1, r3
 80032f6:	4850      	ldr	r0, [pc, #320]	@ (8003438 <HAL_UART_MspInit+0x1c0>)
 80032f8:	f000 fd78 	bl	8003dec <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80032fc:	e093      	b.n	8003426 <HAL_UART_MspInit+0x1ae>
  else if(huart->Instance==USART2)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4a4e      	ldr	r2, [pc, #312]	@ (800343c <HAL_UART_MspInit+0x1c4>)
 8003304:	4293      	cmp	r3, r2
 8003306:	d157      	bne.n	80033b8 <HAL_UART_MspInit+0x140>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003308:	4b4a      	ldr	r3, [pc, #296]	@ (8003434 <HAL_UART_MspInit+0x1bc>)
 800330a:	69db      	ldr	r3, [r3, #28]
 800330c:	4a49      	ldr	r2, [pc, #292]	@ (8003434 <HAL_UART_MspInit+0x1bc>)
 800330e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003312:	61d3      	str	r3, [r2, #28]
 8003314:	4b47      	ldr	r3, [pc, #284]	@ (8003434 <HAL_UART_MspInit+0x1bc>)
 8003316:	69db      	ldr	r3, [r3, #28]
 8003318:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800331c:	617b      	str	r3, [r7, #20]
 800331e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003320:	4b44      	ldr	r3, [pc, #272]	@ (8003434 <HAL_UART_MspInit+0x1bc>)
 8003322:	699b      	ldr	r3, [r3, #24]
 8003324:	4a43      	ldr	r2, [pc, #268]	@ (8003434 <HAL_UART_MspInit+0x1bc>)
 8003326:	f043 0304 	orr.w	r3, r3, #4
 800332a:	6193      	str	r3, [r2, #24]
 800332c:	4b41      	ldr	r3, [pc, #260]	@ (8003434 <HAL_UART_MspInit+0x1bc>)
 800332e:	699b      	ldr	r3, [r3, #24]
 8003330:	f003 0304 	and.w	r3, r3, #4
 8003334:	613b      	str	r3, [r7, #16]
 8003336:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003338:	2304      	movs	r3, #4
 800333a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800333c:	2302      	movs	r3, #2
 800333e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003340:	2303      	movs	r3, #3
 8003342:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003344:	f107 0320 	add.w	r3, r7, #32
 8003348:	4619      	mov	r1, r3
 800334a:	483b      	ldr	r0, [pc, #236]	@ (8003438 <HAL_UART_MspInit+0x1c0>)
 800334c:	f000 fd4e 	bl	8003dec <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003350:	2308      	movs	r3, #8
 8003352:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003354:	2300      	movs	r3, #0
 8003356:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003358:	2300      	movs	r3, #0
 800335a:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800335c:	f107 0320 	add.w	r3, r7, #32
 8003360:	4619      	mov	r1, r3
 8003362:	4835      	ldr	r0, [pc, #212]	@ (8003438 <HAL_UART_MspInit+0x1c0>)
 8003364:	f000 fd42 	bl	8003dec <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8003368:	4b35      	ldr	r3, [pc, #212]	@ (8003440 <HAL_UART_MspInit+0x1c8>)
 800336a:	4a36      	ldr	r2, [pc, #216]	@ (8003444 <HAL_UART_MspInit+0x1cc>)
 800336c:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800336e:	4b34      	ldr	r3, [pc, #208]	@ (8003440 <HAL_UART_MspInit+0x1c8>)
 8003370:	2200      	movs	r2, #0
 8003372:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003374:	4b32      	ldr	r3, [pc, #200]	@ (8003440 <HAL_UART_MspInit+0x1c8>)
 8003376:	2200      	movs	r2, #0
 8003378:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800337a:	4b31      	ldr	r3, [pc, #196]	@ (8003440 <HAL_UART_MspInit+0x1c8>)
 800337c:	2280      	movs	r2, #128	@ 0x80
 800337e:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003380:	4b2f      	ldr	r3, [pc, #188]	@ (8003440 <HAL_UART_MspInit+0x1c8>)
 8003382:	2200      	movs	r2, #0
 8003384:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003386:	4b2e      	ldr	r3, [pc, #184]	@ (8003440 <HAL_UART_MspInit+0x1c8>)
 8003388:	2200      	movs	r2, #0
 800338a:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 800338c:	4b2c      	ldr	r3, [pc, #176]	@ (8003440 <HAL_UART_MspInit+0x1c8>)
 800338e:	2220      	movs	r2, #32
 8003390:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8003392:	4b2b      	ldr	r3, [pc, #172]	@ (8003440 <HAL_UART_MspInit+0x1c8>)
 8003394:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003398:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800339a:	4829      	ldr	r0, [pc, #164]	@ (8003440 <HAL_UART_MspInit+0x1c8>)
 800339c:	f000 fb38 	bl	8003a10 <HAL_DMA_Init>
 80033a0:	4603      	mov	r3, r0
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d001      	beq.n	80033aa <HAL_UART_MspInit+0x132>
      Error_Handler();
 80033a6:	f7ff fdb1 	bl	8002f0c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	4a24      	ldr	r2, [pc, #144]	@ (8003440 <HAL_UART_MspInit+0x1c8>)
 80033ae:	63da      	str	r2, [r3, #60]	@ 0x3c
 80033b0:	4a23      	ldr	r2, [pc, #140]	@ (8003440 <HAL_UART_MspInit+0x1c8>)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6253      	str	r3, [r2, #36]	@ 0x24
}
 80033b6:	e036      	b.n	8003426 <HAL_UART_MspInit+0x1ae>
  else if(huart->Instance==USART3)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4a22      	ldr	r2, [pc, #136]	@ (8003448 <HAL_UART_MspInit+0x1d0>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d131      	bne.n	8003426 <HAL_UART_MspInit+0x1ae>
    __HAL_RCC_USART3_CLK_ENABLE();
 80033c2:	4b1c      	ldr	r3, [pc, #112]	@ (8003434 <HAL_UART_MspInit+0x1bc>)
 80033c4:	69db      	ldr	r3, [r3, #28]
 80033c6:	4a1b      	ldr	r2, [pc, #108]	@ (8003434 <HAL_UART_MspInit+0x1bc>)
 80033c8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80033cc:	61d3      	str	r3, [r2, #28]
 80033ce:	4b19      	ldr	r3, [pc, #100]	@ (8003434 <HAL_UART_MspInit+0x1bc>)
 80033d0:	69db      	ldr	r3, [r3, #28]
 80033d2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80033d6:	60fb      	str	r3, [r7, #12]
 80033d8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80033da:	4b16      	ldr	r3, [pc, #88]	@ (8003434 <HAL_UART_MspInit+0x1bc>)
 80033dc:	699b      	ldr	r3, [r3, #24]
 80033de:	4a15      	ldr	r2, [pc, #84]	@ (8003434 <HAL_UART_MspInit+0x1bc>)
 80033e0:	f043 0308 	orr.w	r3, r3, #8
 80033e4:	6193      	str	r3, [r2, #24]
 80033e6:	4b13      	ldr	r3, [pc, #76]	@ (8003434 <HAL_UART_MspInit+0x1bc>)
 80033e8:	699b      	ldr	r3, [r3, #24]
 80033ea:	f003 0308 	and.w	r3, r3, #8
 80033ee:	60bb      	str	r3, [r7, #8]
 80033f0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80033f2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80033f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033f8:	2302      	movs	r3, #2
 80033fa:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80033fc:	2303      	movs	r3, #3
 80033fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003400:	f107 0320 	add.w	r3, r7, #32
 8003404:	4619      	mov	r1, r3
 8003406:	4811      	ldr	r0, [pc, #68]	@ (800344c <HAL_UART_MspInit+0x1d4>)
 8003408:	f000 fcf0 	bl	8003dec <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800340c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003410:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003412:	2300      	movs	r3, #0
 8003414:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003416:	2300      	movs	r3, #0
 8003418:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800341a:	f107 0320 	add.w	r3, r7, #32
 800341e:	4619      	mov	r1, r3
 8003420:	480a      	ldr	r0, [pc, #40]	@ (800344c <HAL_UART_MspInit+0x1d4>)
 8003422:	f000 fce3 	bl	8003dec <HAL_GPIO_Init>
}
 8003426:	bf00      	nop
 8003428:	3730      	adds	r7, #48	@ 0x30
 800342a:	46bd      	mov	sp, r7
 800342c:	bd80      	pop	{r7, pc}
 800342e:	bf00      	nop
 8003430:	40013800 	.word	0x40013800
 8003434:	40021000 	.word	0x40021000
 8003438:	40010800 	.word	0x40010800
 800343c:	40004400 	.word	0x40004400
 8003440:	20000780 	.word	0x20000780
 8003444:	4002006c 	.word	0x4002006c
 8003448:	40004800 	.word	0x40004800
 800344c:	40010c00 	.word	0x40010c00

08003450 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003450:	b480      	push	{r7}
 8003452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003454:	bf00      	nop
 8003456:	e7fd      	b.n	8003454 <NMI_Handler+0x4>

08003458 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003458:	b480      	push	{r7}
 800345a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800345c:	bf00      	nop
 800345e:	e7fd      	b.n	800345c <HardFault_Handler+0x4>

08003460 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003460:	b480      	push	{r7}
 8003462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003464:	bf00      	nop
 8003466:	e7fd      	b.n	8003464 <MemManage_Handler+0x4>

08003468 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003468:	b480      	push	{r7}
 800346a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800346c:	bf00      	nop
 800346e:	e7fd      	b.n	800346c <BusFault_Handler+0x4>

08003470 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003470:	b480      	push	{r7}
 8003472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003474:	bf00      	nop
 8003476:	e7fd      	b.n	8003474 <UsageFault_Handler+0x4>

08003478 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003478:	b480      	push	{r7}
 800347a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800347c:	bf00      	nop
 800347e:	46bd      	mov	sp, r7
 8003480:	bc80      	pop	{r7}
 8003482:	4770      	bx	lr

08003484 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003484:	b480      	push	{r7}
 8003486:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003488:	bf00      	nop
 800348a:	46bd      	mov	sp, r7
 800348c:	bc80      	pop	{r7}
 800348e:	4770      	bx	lr

08003490 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003490:	b480      	push	{r7}
 8003492:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003494:	bf00      	nop
 8003496:	46bd      	mov	sp, r7
 8003498:	bc80      	pop	{r7}
 800349a:	4770      	bx	lr

0800349c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80034a0:	f000 f968 	bl	8003774 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80034a4:	bf00      	nop
 80034a6:	bd80      	pop	{r7, pc}

080034a8 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80034ac:	4802      	ldr	r0, [pc, #8]	@ (80034b8 <DMA1_Channel6_IRQHandler+0x10>)
 80034ae:	f000 fb69 	bl	8003b84 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 80034b2:	bf00      	nop
 80034b4:	bd80      	pop	{r7, pc}
 80034b6:	bf00      	nop
 80034b8:	20000780 	.word	0x20000780

080034bc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80034bc:	b480      	push	{r7}
 80034be:	af00      	add	r7, sp, #0
  return 1;
 80034c0:	2301      	movs	r3, #1
}
 80034c2:	4618      	mov	r0, r3
 80034c4:	46bd      	mov	sp, r7
 80034c6:	bc80      	pop	{r7}
 80034c8:	4770      	bx	lr

080034ca <_kill>:

int _kill(int pid, int sig)
{
 80034ca:	b580      	push	{r7, lr}
 80034cc:	b082      	sub	sp, #8
 80034ce:	af00      	add	r7, sp, #0
 80034d0:	6078      	str	r0, [r7, #4]
 80034d2:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80034d4:	f004 fb26 	bl	8007b24 <__errno>
 80034d8:	4603      	mov	r3, r0
 80034da:	2216      	movs	r2, #22
 80034dc:	601a      	str	r2, [r3, #0]
  return -1;
 80034de:	f04f 33ff 	mov.w	r3, #4294967295
}
 80034e2:	4618      	mov	r0, r3
 80034e4:	3708      	adds	r7, #8
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bd80      	pop	{r7, pc}

080034ea <_exit>:

void _exit (int status)
{
 80034ea:	b580      	push	{r7, lr}
 80034ec:	b082      	sub	sp, #8
 80034ee:	af00      	add	r7, sp, #0
 80034f0:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80034f2:	f04f 31ff 	mov.w	r1, #4294967295
 80034f6:	6878      	ldr	r0, [r7, #4]
 80034f8:	f7ff ffe7 	bl	80034ca <_kill>
  while (1) {}    /* Make sure we hang here */
 80034fc:	bf00      	nop
 80034fe:	e7fd      	b.n	80034fc <_exit+0x12>

08003500 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b086      	sub	sp, #24
 8003504:	af00      	add	r7, sp, #0
 8003506:	60f8      	str	r0, [r7, #12]
 8003508:	60b9      	str	r1, [r7, #8]
 800350a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800350c:	2300      	movs	r3, #0
 800350e:	617b      	str	r3, [r7, #20]
 8003510:	e00a      	b.n	8003528 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003512:	f3af 8000 	nop.w
 8003516:	4601      	mov	r1, r0
 8003518:	68bb      	ldr	r3, [r7, #8]
 800351a:	1c5a      	adds	r2, r3, #1
 800351c:	60ba      	str	r2, [r7, #8]
 800351e:	b2ca      	uxtb	r2, r1
 8003520:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003522:	697b      	ldr	r3, [r7, #20]
 8003524:	3301      	adds	r3, #1
 8003526:	617b      	str	r3, [r7, #20]
 8003528:	697a      	ldr	r2, [r7, #20]
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	429a      	cmp	r2, r3
 800352e:	dbf0      	blt.n	8003512 <_read+0x12>
  }

  return len;
 8003530:	687b      	ldr	r3, [r7, #4]
}
 8003532:	4618      	mov	r0, r3
 8003534:	3718      	adds	r7, #24
 8003536:	46bd      	mov	sp, r7
 8003538:	bd80      	pop	{r7, pc}

0800353a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800353a:	b580      	push	{r7, lr}
 800353c:	b086      	sub	sp, #24
 800353e:	af00      	add	r7, sp, #0
 8003540:	60f8      	str	r0, [r7, #12]
 8003542:	60b9      	str	r1, [r7, #8]
 8003544:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003546:	2300      	movs	r3, #0
 8003548:	617b      	str	r3, [r7, #20]
 800354a:	e009      	b.n	8003560 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800354c:	68bb      	ldr	r3, [r7, #8]
 800354e:	1c5a      	adds	r2, r3, #1
 8003550:	60ba      	str	r2, [r7, #8]
 8003552:	781b      	ldrb	r3, [r3, #0]
 8003554:	4618      	mov	r0, r3
 8003556:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800355a:	697b      	ldr	r3, [r7, #20]
 800355c:	3301      	adds	r3, #1
 800355e:	617b      	str	r3, [r7, #20]
 8003560:	697a      	ldr	r2, [r7, #20]
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	429a      	cmp	r2, r3
 8003566:	dbf1      	blt.n	800354c <_write+0x12>
  }
  return len;
 8003568:	687b      	ldr	r3, [r7, #4]
}
 800356a:	4618      	mov	r0, r3
 800356c:	3718      	adds	r7, #24
 800356e:	46bd      	mov	sp, r7
 8003570:	bd80      	pop	{r7, pc}

08003572 <_close>:

int _close(int file)
{
 8003572:	b480      	push	{r7}
 8003574:	b083      	sub	sp, #12
 8003576:	af00      	add	r7, sp, #0
 8003578:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800357a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800357e:	4618      	mov	r0, r3
 8003580:	370c      	adds	r7, #12
 8003582:	46bd      	mov	sp, r7
 8003584:	bc80      	pop	{r7}
 8003586:	4770      	bx	lr

08003588 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003588:	b480      	push	{r7}
 800358a:	b083      	sub	sp, #12
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
 8003590:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003598:	605a      	str	r2, [r3, #4]
  return 0;
 800359a:	2300      	movs	r3, #0
}
 800359c:	4618      	mov	r0, r3
 800359e:	370c      	adds	r7, #12
 80035a0:	46bd      	mov	sp, r7
 80035a2:	bc80      	pop	{r7}
 80035a4:	4770      	bx	lr

080035a6 <_isatty>:

int _isatty(int file)
{
 80035a6:	b480      	push	{r7}
 80035a8:	b083      	sub	sp, #12
 80035aa:	af00      	add	r7, sp, #0
 80035ac:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80035ae:	2301      	movs	r3, #1
}
 80035b0:	4618      	mov	r0, r3
 80035b2:	370c      	adds	r7, #12
 80035b4:	46bd      	mov	sp, r7
 80035b6:	bc80      	pop	{r7}
 80035b8:	4770      	bx	lr

080035ba <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80035ba:	b480      	push	{r7}
 80035bc:	b085      	sub	sp, #20
 80035be:	af00      	add	r7, sp, #0
 80035c0:	60f8      	str	r0, [r7, #12]
 80035c2:	60b9      	str	r1, [r7, #8]
 80035c4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80035c6:	2300      	movs	r3, #0
}
 80035c8:	4618      	mov	r0, r3
 80035ca:	3714      	adds	r7, #20
 80035cc:	46bd      	mov	sp, r7
 80035ce:	bc80      	pop	{r7}
 80035d0:	4770      	bx	lr
	...

080035d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b086      	sub	sp, #24
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80035dc:	4a14      	ldr	r2, [pc, #80]	@ (8003630 <_sbrk+0x5c>)
 80035de:	4b15      	ldr	r3, [pc, #84]	@ (8003634 <_sbrk+0x60>)
 80035e0:	1ad3      	subs	r3, r2, r3
 80035e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80035e4:	697b      	ldr	r3, [r7, #20]
 80035e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80035e8:	4b13      	ldr	r3, [pc, #76]	@ (8003638 <_sbrk+0x64>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d102      	bne.n	80035f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80035f0:	4b11      	ldr	r3, [pc, #68]	@ (8003638 <_sbrk+0x64>)
 80035f2:	4a12      	ldr	r2, [pc, #72]	@ (800363c <_sbrk+0x68>)
 80035f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80035f6:	4b10      	ldr	r3, [pc, #64]	@ (8003638 <_sbrk+0x64>)
 80035f8:	681a      	ldr	r2, [r3, #0]
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	4413      	add	r3, r2
 80035fe:	693a      	ldr	r2, [r7, #16]
 8003600:	429a      	cmp	r2, r3
 8003602:	d207      	bcs.n	8003614 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003604:	f004 fa8e 	bl	8007b24 <__errno>
 8003608:	4603      	mov	r3, r0
 800360a:	220c      	movs	r2, #12
 800360c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800360e:	f04f 33ff 	mov.w	r3, #4294967295
 8003612:	e009      	b.n	8003628 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003614:	4b08      	ldr	r3, [pc, #32]	@ (8003638 <_sbrk+0x64>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800361a:	4b07      	ldr	r3, [pc, #28]	@ (8003638 <_sbrk+0x64>)
 800361c:	681a      	ldr	r2, [r3, #0]
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	4413      	add	r3, r2
 8003622:	4a05      	ldr	r2, [pc, #20]	@ (8003638 <_sbrk+0x64>)
 8003624:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003626:	68fb      	ldr	r3, [r7, #12]
}
 8003628:	4618      	mov	r0, r3
 800362a:	3718      	adds	r7, #24
 800362c:	46bd      	mov	sp, r7
 800362e:	bd80      	pop	{r7, pc}
 8003630:	20005000 	.word	0x20005000
 8003634:	00000400 	.word	0x00000400
 8003638:	20000950 	.word	0x20000950
 800363c:	20000aa8 	.word	0x20000aa8

08003640 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003640:	b480      	push	{r7}
 8003642:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003644:	bf00      	nop
 8003646:	46bd      	mov	sp, r7
 8003648:	bc80      	pop	{r7}
 800364a:	4770      	bx	lr

0800364c <uartx_write>:
extern UART_HandleTypeDef huart1;
extern UART_HandleTypeDef huart3;


void uartx_write(UART_HandleTypeDef *huart,uint8_t ch)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b082      	sub	sp, #8
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
 8003654:	460b      	mov	r3, r1
 8003656:	70fb      	strb	r3, [r7, #3]
HAL_UART_Transmit(huart, &ch, 1, 0xffff);
 8003658:	1cf9      	adds	r1, r7, #3
 800365a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800365e:	2201      	movs	r2, #1
 8003660:	6878      	ldr	r0, [r7, #4]
 8003662:	f002 fe21 	bl	80062a8 <HAL_UART_Transmit>

}
 8003666:	bf00      	nop
 8003668:	3708      	adds	r7, #8
 800366a:	46bd      	mov	sp, r7
 800366c:	bd80      	pop	{r7, pc}

0800366e <uartx_write_text>:

void uartx_write_text(UART_HandleTypeDef *huart, uint8_t *info)
{
 800366e:	b580      	push	{r7, lr}
 8003670:	b082      	sub	sp, #8
 8003672:	af00      	add	r7, sp, #0
 8003674:	6078      	str	r0, [r7, #4]
 8003676:	6039      	str	r1, [r7, #0]

while(*info)  uartx_write(huart,*info++);
 8003678:	e007      	b.n	800368a <uartx_write_text+0x1c>
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	1c5a      	adds	r2, r3, #1
 800367e:	603a      	str	r2, [r7, #0]
 8003680:	781b      	ldrb	r3, [r3, #0]
 8003682:	4619      	mov	r1, r3
 8003684:	6878      	ldr	r0, [r7, #4]
 8003686:	f7ff ffe1 	bl	800364c <uartx_write>
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	781b      	ldrb	r3, [r3, #0]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d1f3      	bne.n	800367a <uartx_write_text+0xc>

}
 8003692:	bf00      	nop
 8003694:	bf00      	nop
 8003696:	3708      	adds	r7, #8
 8003698:	46bd      	mov	sp, r7
 800369a:	bd80      	pop	{r7, pc}

0800369c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800369c:	f7ff ffd0 	bl	8003640 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80036a0:	480b      	ldr	r0, [pc, #44]	@ (80036d0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80036a2:	490c      	ldr	r1, [pc, #48]	@ (80036d4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80036a4:	4a0c      	ldr	r2, [pc, #48]	@ (80036d8 <LoopFillZerobss+0x16>)
  movs r3, #0
 80036a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80036a8:	e002      	b.n	80036b0 <LoopCopyDataInit>

080036aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80036aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80036ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80036ae:	3304      	adds	r3, #4

080036b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80036b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80036b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80036b4:	d3f9      	bcc.n	80036aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80036b6:	4a09      	ldr	r2, [pc, #36]	@ (80036dc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80036b8:	4c09      	ldr	r4, [pc, #36]	@ (80036e0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80036ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80036bc:	e001      	b.n	80036c2 <LoopFillZerobss>

080036be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80036be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80036c0:	3204      	adds	r2, #4

080036c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80036c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80036c4:	d3fb      	bcc.n	80036be <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80036c6:	f004 fa33 	bl	8007b30 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80036ca:	f7fe fdad 	bl	8002228 <main>
  bx lr
 80036ce:	4770      	bx	lr
  ldr r0, =_sdata
 80036d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80036d4:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 80036d8:	0800cf20 	.word	0x0800cf20
  ldr r2, =_sbss
 80036dc:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 80036e0:	20000aa4 	.word	0x20000aa4

080036e4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80036e4:	e7fe      	b.n	80036e4 <ADC1_2_IRQHandler>
	...

080036e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80036ec:	4b08      	ldr	r3, [pc, #32]	@ (8003710 <HAL_Init+0x28>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a07      	ldr	r2, [pc, #28]	@ (8003710 <HAL_Init+0x28>)
 80036f2:	f043 0310 	orr.w	r3, r3, #16
 80036f6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80036f8:	2003      	movs	r0, #3
 80036fa:	f000 f947 	bl	800398c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80036fe:	200f      	movs	r0, #15
 8003700:	f000 f808 	bl	8003714 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003704:	f7ff fcf8 	bl	80030f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003708:	2300      	movs	r3, #0
}
 800370a:	4618      	mov	r0, r3
 800370c:	bd80      	pop	{r7, pc}
 800370e:	bf00      	nop
 8003710:	40022000 	.word	0x40022000

08003714 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b082      	sub	sp, #8
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800371c:	4b12      	ldr	r3, [pc, #72]	@ (8003768 <HAL_InitTick+0x54>)
 800371e:	681a      	ldr	r2, [r3, #0]
 8003720:	4b12      	ldr	r3, [pc, #72]	@ (800376c <HAL_InitTick+0x58>)
 8003722:	781b      	ldrb	r3, [r3, #0]
 8003724:	4619      	mov	r1, r3
 8003726:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800372a:	fbb3 f3f1 	udiv	r3, r3, r1
 800372e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003732:	4618      	mov	r0, r3
 8003734:	f000 f95f 	bl	80039f6 <HAL_SYSTICK_Config>
 8003738:	4603      	mov	r3, r0
 800373a:	2b00      	cmp	r3, #0
 800373c:	d001      	beq.n	8003742 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800373e:	2301      	movs	r3, #1
 8003740:	e00e      	b.n	8003760 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2b0f      	cmp	r3, #15
 8003746:	d80a      	bhi.n	800375e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003748:	2200      	movs	r2, #0
 800374a:	6879      	ldr	r1, [r7, #4]
 800374c:	f04f 30ff 	mov.w	r0, #4294967295
 8003750:	f000 f927 	bl	80039a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003754:	4a06      	ldr	r2, [pc, #24]	@ (8003770 <HAL_InitTick+0x5c>)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800375a:	2300      	movs	r3, #0
 800375c:	e000      	b.n	8003760 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800375e:	2301      	movs	r3, #1
}
 8003760:	4618      	mov	r0, r3
 8003762:	3708      	adds	r7, #8
 8003764:	46bd      	mov	sp, r7
 8003766:	bd80      	pop	{r7, pc}
 8003768:	20000004 	.word	0x20000004
 800376c:	2000000c 	.word	0x2000000c
 8003770:	20000008 	.word	0x20000008

08003774 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003774:	b480      	push	{r7}
 8003776:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003778:	4b05      	ldr	r3, [pc, #20]	@ (8003790 <HAL_IncTick+0x1c>)
 800377a:	781b      	ldrb	r3, [r3, #0]
 800377c:	461a      	mov	r2, r3
 800377e:	4b05      	ldr	r3, [pc, #20]	@ (8003794 <HAL_IncTick+0x20>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4413      	add	r3, r2
 8003784:	4a03      	ldr	r2, [pc, #12]	@ (8003794 <HAL_IncTick+0x20>)
 8003786:	6013      	str	r3, [r2, #0]
}
 8003788:	bf00      	nop
 800378a:	46bd      	mov	sp, r7
 800378c:	bc80      	pop	{r7}
 800378e:	4770      	bx	lr
 8003790:	2000000c 	.word	0x2000000c
 8003794:	20000954 	.word	0x20000954

08003798 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003798:	b480      	push	{r7}
 800379a:	af00      	add	r7, sp, #0
  return uwTick;
 800379c:	4b02      	ldr	r3, [pc, #8]	@ (80037a8 <HAL_GetTick+0x10>)
 800379e:	681b      	ldr	r3, [r3, #0]
}
 80037a0:	4618      	mov	r0, r3
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bc80      	pop	{r7}
 80037a6:	4770      	bx	lr
 80037a8:	20000954 	.word	0x20000954

080037ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b084      	sub	sp, #16
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80037b4:	f7ff fff0 	bl	8003798 <HAL_GetTick>
 80037b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037c4:	d005      	beq.n	80037d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80037c6:	4b0a      	ldr	r3, [pc, #40]	@ (80037f0 <HAL_Delay+0x44>)
 80037c8:	781b      	ldrb	r3, [r3, #0]
 80037ca:	461a      	mov	r2, r3
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	4413      	add	r3, r2
 80037d0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80037d2:	bf00      	nop
 80037d4:	f7ff ffe0 	bl	8003798 <HAL_GetTick>
 80037d8:	4602      	mov	r2, r0
 80037da:	68bb      	ldr	r3, [r7, #8]
 80037dc:	1ad3      	subs	r3, r2, r3
 80037de:	68fa      	ldr	r2, [r7, #12]
 80037e0:	429a      	cmp	r2, r3
 80037e2:	d8f7      	bhi.n	80037d4 <HAL_Delay+0x28>
  {
  }
}
 80037e4:	bf00      	nop
 80037e6:	bf00      	nop
 80037e8:	3710      	adds	r7, #16
 80037ea:	46bd      	mov	sp, r7
 80037ec:	bd80      	pop	{r7, pc}
 80037ee:	bf00      	nop
 80037f0:	2000000c 	.word	0x2000000c

080037f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037f4:	b480      	push	{r7}
 80037f6:	b085      	sub	sp, #20
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	f003 0307 	and.w	r3, r3, #7
 8003802:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003804:	4b0c      	ldr	r3, [pc, #48]	@ (8003838 <__NVIC_SetPriorityGrouping+0x44>)
 8003806:	68db      	ldr	r3, [r3, #12]
 8003808:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800380a:	68ba      	ldr	r2, [r7, #8]
 800380c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003810:	4013      	ands	r3, r2
 8003812:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003818:	68bb      	ldr	r3, [r7, #8]
 800381a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800381c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003820:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003824:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003826:	4a04      	ldr	r2, [pc, #16]	@ (8003838 <__NVIC_SetPriorityGrouping+0x44>)
 8003828:	68bb      	ldr	r3, [r7, #8]
 800382a:	60d3      	str	r3, [r2, #12]
}
 800382c:	bf00      	nop
 800382e:	3714      	adds	r7, #20
 8003830:	46bd      	mov	sp, r7
 8003832:	bc80      	pop	{r7}
 8003834:	4770      	bx	lr
 8003836:	bf00      	nop
 8003838:	e000ed00 	.word	0xe000ed00

0800383c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800383c:	b480      	push	{r7}
 800383e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003840:	4b04      	ldr	r3, [pc, #16]	@ (8003854 <__NVIC_GetPriorityGrouping+0x18>)
 8003842:	68db      	ldr	r3, [r3, #12]
 8003844:	0a1b      	lsrs	r3, r3, #8
 8003846:	f003 0307 	and.w	r3, r3, #7
}
 800384a:	4618      	mov	r0, r3
 800384c:	46bd      	mov	sp, r7
 800384e:	bc80      	pop	{r7}
 8003850:	4770      	bx	lr
 8003852:	bf00      	nop
 8003854:	e000ed00 	.word	0xe000ed00

08003858 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003858:	b480      	push	{r7}
 800385a:	b083      	sub	sp, #12
 800385c:	af00      	add	r7, sp, #0
 800385e:	4603      	mov	r3, r0
 8003860:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003862:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003866:	2b00      	cmp	r3, #0
 8003868:	db0b      	blt.n	8003882 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800386a:	79fb      	ldrb	r3, [r7, #7]
 800386c:	f003 021f 	and.w	r2, r3, #31
 8003870:	4906      	ldr	r1, [pc, #24]	@ (800388c <__NVIC_EnableIRQ+0x34>)
 8003872:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003876:	095b      	lsrs	r3, r3, #5
 8003878:	2001      	movs	r0, #1
 800387a:	fa00 f202 	lsl.w	r2, r0, r2
 800387e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003882:	bf00      	nop
 8003884:	370c      	adds	r7, #12
 8003886:	46bd      	mov	sp, r7
 8003888:	bc80      	pop	{r7}
 800388a:	4770      	bx	lr
 800388c:	e000e100 	.word	0xe000e100

08003890 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003890:	b480      	push	{r7}
 8003892:	b083      	sub	sp, #12
 8003894:	af00      	add	r7, sp, #0
 8003896:	4603      	mov	r3, r0
 8003898:	6039      	str	r1, [r7, #0]
 800389a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800389c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	db0a      	blt.n	80038ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	b2da      	uxtb	r2, r3
 80038a8:	490c      	ldr	r1, [pc, #48]	@ (80038dc <__NVIC_SetPriority+0x4c>)
 80038aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038ae:	0112      	lsls	r2, r2, #4
 80038b0:	b2d2      	uxtb	r2, r2
 80038b2:	440b      	add	r3, r1
 80038b4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80038b8:	e00a      	b.n	80038d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	b2da      	uxtb	r2, r3
 80038be:	4908      	ldr	r1, [pc, #32]	@ (80038e0 <__NVIC_SetPriority+0x50>)
 80038c0:	79fb      	ldrb	r3, [r7, #7]
 80038c2:	f003 030f 	and.w	r3, r3, #15
 80038c6:	3b04      	subs	r3, #4
 80038c8:	0112      	lsls	r2, r2, #4
 80038ca:	b2d2      	uxtb	r2, r2
 80038cc:	440b      	add	r3, r1
 80038ce:	761a      	strb	r2, [r3, #24]
}
 80038d0:	bf00      	nop
 80038d2:	370c      	adds	r7, #12
 80038d4:	46bd      	mov	sp, r7
 80038d6:	bc80      	pop	{r7}
 80038d8:	4770      	bx	lr
 80038da:	bf00      	nop
 80038dc:	e000e100 	.word	0xe000e100
 80038e0:	e000ed00 	.word	0xe000ed00

080038e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80038e4:	b480      	push	{r7}
 80038e6:	b089      	sub	sp, #36	@ 0x24
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	60f8      	str	r0, [r7, #12]
 80038ec:	60b9      	str	r1, [r7, #8]
 80038ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	f003 0307 	and.w	r3, r3, #7
 80038f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80038f8:	69fb      	ldr	r3, [r7, #28]
 80038fa:	f1c3 0307 	rsb	r3, r3, #7
 80038fe:	2b04      	cmp	r3, #4
 8003900:	bf28      	it	cs
 8003902:	2304      	movcs	r3, #4
 8003904:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003906:	69fb      	ldr	r3, [r7, #28]
 8003908:	3304      	adds	r3, #4
 800390a:	2b06      	cmp	r3, #6
 800390c:	d902      	bls.n	8003914 <NVIC_EncodePriority+0x30>
 800390e:	69fb      	ldr	r3, [r7, #28]
 8003910:	3b03      	subs	r3, #3
 8003912:	e000      	b.n	8003916 <NVIC_EncodePriority+0x32>
 8003914:	2300      	movs	r3, #0
 8003916:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003918:	f04f 32ff 	mov.w	r2, #4294967295
 800391c:	69bb      	ldr	r3, [r7, #24]
 800391e:	fa02 f303 	lsl.w	r3, r2, r3
 8003922:	43da      	mvns	r2, r3
 8003924:	68bb      	ldr	r3, [r7, #8]
 8003926:	401a      	ands	r2, r3
 8003928:	697b      	ldr	r3, [r7, #20]
 800392a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800392c:	f04f 31ff 	mov.w	r1, #4294967295
 8003930:	697b      	ldr	r3, [r7, #20]
 8003932:	fa01 f303 	lsl.w	r3, r1, r3
 8003936:	43d9      	mvns	r1, r3
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800393c:	4313      	orrs	r3, r2
         );
}
 800393e:	4618      	mov	r0, r3
 8003940:	3724      	adds	r7, #36	@ 0x24
 8003942:	46bd      	mov	sp, r7
 8003944:	bc80      	pop	{r7}
 8003946:	4770      	bx	lr

08003948 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b082      	sub	sp, #8
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	3b01      	subs	r3, #1
 8003954:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003958:	d301      	bcc.n	800395e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800395a:	2301      	movs	r3, #1
 800395c:	e00f      	b.n	800397e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800395e:	4a0a      	ldr	r2, [pc, #40]	@ (8003988 <SysTick_Config+0x40>)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	3b01      	subs	r3, #1
 8003964:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003966:	210f      	movs	r1, #15
 8003968:	f04f 30ff 	mov.w	r0, #4294967295
 800396c:	f7ff ff90 	bl	8003890 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003970:	4b05      	ldr	r3, [pc, #20]	@ (8003988 <SysTick_Config+0x40>)
 8003972:	2200      	movs	r2, #0
 8003974:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003976:	4b04      	ldr	r3, [pc, #16]	@ (8003988 <SysTick_Config+0x40>)
 8003978:	2207      	movs	r2, #7
 800397a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800397c:	2300      	movs	r3, #0
}
 800397e:	4618      	mov	r0, r3
 8003980:	3708      	adds	r7, #8
 8003982:	46bd      	mov	sp, r7
 8003984:	bd80      	pop	{r7, pc}
 8003986:	bf00      	nop
 8003988:	e000e010 	.word	0xe000e010

0800398c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b082      	sub	sp, #8
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003994:	6878      	ldr	r0, [r7, #4]
 8003996:	f7ff ff2d 	bl	80037f4 <__NVIC_SetPriorityGrouping>
}
 800399a:	bf00      	nop
 800399c:	3708      	adds	r7, #8
 800399e:	46bd      	mov	sp, r7
 80039a0:	bd80      	pop	{r7, pc}

080039a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80039a2:	b580      	push	{r7, lr}
 80039a4:	b086      	sub	sp, #24
 80039a6:	af00      	add	r7, sp, #0
 80039a8:	4603      	mov	r3, r0
 80039aa:	60b9      	str	r1, [r7, #8]
 80039ac:	607a      	str	r2, [r7, #4]
 80039ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80039b0:	2300      	movs	r3, #0
 80039b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80039b4:	f7ff ff42 	bl	800383c <__NVIC_GetPriorityGrouping>
 80039b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80039ba:	687a      	ldr	r2, [r7, #4]
 80039bc:	68b9      	ldr	r1, [r7, #8]
 80039be:	6978      	ldr	r0, [r7, #20]
 80039c0:	f7ff ff90 	bl	80038e4 <NVIC_EncodePriority>
 80039c4:	4602      	mov	r2, r0
 80039c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80039ca:	4611      	mov	r1, r2
 80039cc:	4618      	mov	r0, r3
 80039ce:	f7ff ff5f 	bl	8003890 <__NVIC_SetPriority>
}
 80039d2:	bf00      	nop
 80039d4:	3718      	adds	r7, #24
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bd80      	pop	{r7, pc}

080039da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039da:	b580      	push	{r7, lr}
 80039dc:	b082      	sub	sp, #8
 80039de:	af00      	add	r7, sp, #0
 80039e0:	4603      	mov	r3, r0
 80039e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80039e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039e8:	4618      	mov	r0, r3
 80039ea:	f7ff ff35 	bl	8003858 <__NVIC_EnableIRQ>
}
 80039ee:	bf00      	nop
 80039f0:	3708      	adds	r7, #8
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bd80      	pop	{r7, pc}

080039f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80039f6:	b580      	push	{r7, lr}
 80039f8:	b082      	sub	sp, #8
 80039fa:	af00      	add	r7, sp, #0
 80039fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80039fe:	6878      	ldr	r0, [r7, #4]
 8003a00:	f7ff ffa2 	bl	8003948 <SysTick_Config>
 8003a04:	4603      	mov	r3, r0
}
 8003a06:	4618      	mov	r0, r3
 8003a08:	3708      	adds	r7, #8
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	bd80      	pop	{r7, pc}
	...

08003a10 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003a10:	b480      	push	{r7}
 8003a12:	b085      	sub	sp, #20
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003a18:	2300      	movs	r3, #0
 8003a1a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d101      	bne.n	8003a26 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8003a22:	2301      	movs	r3, #1
 8003a24:	e043      	b.n	8003aae <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	461a      	mov	r2, r3
 8003a2c:	4b22      	ldr	r3, [pc, #136]	@ (8003ab8 <HAL_DMA_Init+0xa8>)
 8003a2e:	4413      	add	r3, r2
 8003a30:	4a22      	ldr	r2, [pc, #136]	@ (8003abc <HAL_DMA_Init+0xac>)
 8003a32:	fba2 2303 	umull	r2, r3, r2, r3
 8003a36:	091b      	lsrs	r3, r3, #4
 8003a38:	009a      	lsls	r2, r3, #2
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	4a1f      	ldr	r2, [pc, #124]	@ (8003ac0 <HAL_DMA_Init+0xb0>)
 8003a42:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2202      	movs	r2, #2
 8003a48:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8003a5a:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8003a5e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003a68:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	68db      	ldr	r3, [r3, #12]
 8003a6e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a74:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	695b      	ldr	r3, [r3, #20]
 8003a7a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a80:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	69db      	ldr	r3, [r3, #28]
 8003a86:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003a88:	68fa      	ldr	r2, [r7, #12]
 8003a8a:	4313      	orrs	r3, r2
 8003a8c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	68fa      	ldr	r2, [r7, #12]
 8003a94:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2200      	movs	r2, #0
 8003a9a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2201      	movs	r2, #1
 8003aa0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8003aac:	2300      	movs	r3, #0
}
 8003aae:	4618      	mov	r0, r3
 8003ab0:	3714      	adds	r7, #20
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bc80      	pop	{r7}
 8003ab6:	4770      	bx	lr
 8003ab8:	bffdfff8 	.word	0xbffdfff8
 8003abc:	cccccccd 	.word	0xcccccccd
 8003ac0:	40020000 	.word	0x40020000

08003ac4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b086      	sub	sp, #24
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	60f8      	str	r0, [r7, #12]
 8003acc:	60b9      	str	r1, [r7, #8]
 8003ace:	607a      	str	r2, [r7, #4]
 8003ad0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003adc:	2b01      	cmp	r3, #1
 8003ade:	d101      	bne.n	8003ae4 <HAL_DMA_Start_IT+0x20>
 8003ae0:	2302      	movs	r3, #2
 8003ae2:	e04b      	b.n	8003b7c <HAL_DMA_Start_IT+0xb8>
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	2201      	movs	r2, #1
 8003ae8:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003af2:	b2db      	uxtb	r3, r3
 8003af4:	2b01      	cmp	r3, #1
 8003af6:	d13a      	bne.n	8003b6e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	2202      	movs	r2, #2
 8003afc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	2200      	movs	r2, #0
 8003b04:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	681a      	ldr	r2, [r3, #0]
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f022 0201 	bic.w	r2, r2, #1
 8003b14:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	687a      	ldr	r2, [r7, #4]
 8003b1a:	68b9      	ldr	r1, [r7, #8]
 8003b1c:	68f8      	ldr	r0, [r7, #12]
 8003b1e:	f000 f937 	bl	8003d90 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d008      	beq.n	8003b3c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	681a      	ldr	r2, [r3, #0]
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f042 020e 	orr.w	r2, r2, #14
 8003b38:	601a      	str	r2, [r3, #0]
 8003b3a:	e00f      	b.n	8003b5c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	681a      	ldr	r2, [r3, #0]
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f022 0204 	bic.w	r2, r2, #4
 8003b4a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	681a      	ldr	r2, [r3, #0]
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f042 020a 	orr.w	r2, r2, #10
 8003b5a:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	681a      	ldr	r2, [r3, #0]
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f042 0201 	orr.w	r2, r2, #1
 8003b6a:	601a      	str	r2, [r3, #0]
 8003b6c:	e005      	b.n	8003b7a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	2200      	movs	r2, #0
 8003b72:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8003b76:	2302      	movs	r3, #2
 8003b78:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8003b7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	3718      	adds	r7, #24
 8003b80:	46bd      	mov	sp, r7
 8003b82:	bd80      	pop	{r7, pc}

08003b84 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b084      	sub	sp, #16
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ba0:	2204      	movs	r2, #4
 8003ba2:	409a      	lsls	r2, r3
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	4013      	ands	r3, r2
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d04f      	beq.n	8003c4c <HAL_DMA_IRQHandler+0xc8>
 8003bac:	68bb      	ldr	r3, [r7, #8]
 8003bae:	f003 0304 	and.w	r3, r3, #4
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d04a      	beq.n	8003c4c <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f003 0320 	and.w	r3, r3, #32
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d107      	bne.n	8003bd4 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	681a      	ldr	r2, [r3, #0]
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f022 0204 	bic.w	r2, r2, #4
 8003bd2:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4a66      	ldr	r2, [pc, #408]	@ (8003d74 <HAL_DMA_IRQHandler+0x1f0>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d029      	beq.n	8003c32 <HAL_DMA_IRQHandler+0xae>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4a65      	ldr	r2, [pc, #404]	@ (8003d78 <HAL_DMA_IRQHandler+0x1f4>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d022      	beq.n	8003c2e <HAL_DMA_IRQHandler+0xaa>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4a63      	ldr	r2, [pc, #396]	@ (8003d7c <HAL_DMA_IRQHandler+0x1f8>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d01a      	beq.n	8003c28 <HAL_DMA_IRQHandler+0xa4>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4a62      	ldr	r2, [pc, #392]	@ (8003d80 <HAL_DMA_IRQHandler+0x1fc>)
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d012      	beq.n	8003c22 <HAL_DMA_IRQHandler+0x9e>
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4a60      	ldr	r2, [pc, #384]	@ (8003d84 <HAL_DMA_IRQHandler+0x200>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d00a      	beq.n	8003c1c <HAL_DMA_IRQHandler+0x98>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4a5f      	ldr	r2, [pc, #380]	@ (8003d88 <HAL_DMA_IRQHandler+0x204>)
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d102      	bne.n	8003c16 <HAL_DMA_IRQHandler+0x92>
 8003c10:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8003c14:	e00e      	b.n	8003c34 <HAL_DMA_IRQHandler+0xb0>
 8003c16:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8003c1a:	e00b      	b.n	8003c34 <HAL_DMA_IRQHandler+0xb0>
 8003c1c:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8003c20:	e008      	b.n	8003c34 <HAL_DMA_IRQHandler+0xb0>
 8003c22:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003c26:	e005      	b.n	8003c34 <HAL_DMA_IRQHandler+0xb0>
 8003c28:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003c2c:	e002      	b.n	8003c34 <HAL_DMA_IRQHandler+0xb0>
 8003c2e:	2340      	movs	r3, #64	@ 0x40
 8003c30:	e000      	b.n	8003c34 <HAL_DMA_IRQHandler+0xb0>
 8003c32:	2304      	movs	r3, #4
 8003c34:	4a55      	ldr	r2, [pc, #340]	@ (8003d8c <HAL_DMA_IRQHandler+0x208>)
 8003c36:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	f000 8094 	beq.w	8003d6a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c46:	6878      	ldr	r0, [r7, #4]
 8003c48:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8003c4a:	e08e      	b.n	8003d6a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c50:	2202      	movs	r2, #2
 8003c52:	409a      	lsls	r2, r3
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	4013      	ands	r3, r2
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d056      	beq.n	8003d0a <HAL_DMA_IRQHandler+0x186>
 8003c5c:	68bb      	ldr	r3, [r7, #8]
 8003c5e:	f003 0302 	and.w	r3, r3, #2
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d051      	beq.n	8003d0a <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f003 0320 	and.w	r3, r3, #32
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d10b      	bne.n	8003c8c <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	681a      	ldr	r2, [r3, #0]
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f022 020a 	bic.w	r2, r2, #10
 8003c82:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2201      	movs	r2, #1
 8003c88:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4a38      	ldr	r2, [pc, #224]	@ (8003d74 <HAL_DMA_IRQHandler+0x1f0>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d029      	beq.n	8003cea <HAL_DMA_IRQHandler+0x166>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4a37      	ldr	r2, [pc, #220]	@ (8003d78 <HAL_DMA_IRQHandler+0x1f4>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d022      	beq.n	8003ce6 <HAL_DMA_IRQHandler+0x162>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4a35      	ldr	r2, [pc, #212]	@ (8003d7c <HAL_DMA_IRQHandler+0x1f8>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d01a      	beq.n	8003ce0 <HAL_DMA_IRQHandler+0x15c>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4a34      	ldr	r2, [pc, #208]	@ (8003d80 <HAL_DMA_IRQHandler+0x1fc>)
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d012      	beq.n	8003cda <HAL_DMA_IRQHandler+0x156>
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4a32      	ldr	r2, [pc, #200]	@ (8003d84 <HAL_DMA_IRQHandler+0x200>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d00a      	beq.n	8003cd4 <HAL_DMA_IRQHandler+0x150>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4a31      	ldr	r2, [pc, #196]	@ (8003d88 <HAL_DMA_IRQHandler+0x204>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d102      	bne.n	8003cce <HAL_DMA_IRQHandler+0x14a>
 8003cc8:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8003ccc:	e00e      	b.n	8003cec <HAL_DMA_IRQHandler+0x168>
 8003cce:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003cd2:	e00b      	b.n	8003cec <HAL_DMA_IRQHandler+0x168>
 8003cd4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003cd8:	e008      	b.n	8003cec <HAL_DMA_IRQHandler+0x168>
 8003cda:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003cde:	e005      	b.n	8003cec <HAL_DMA_IRQHandler+0x168>
 8003ce0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003ce4:	e002      	b.n	8003cec <HAL_DMA_IRQHandler+0x168>
 8003ce6:	2320      	movs	r3, #32
 8003ce8:	e000      	b.n	8003cec <HAL_DMA_IRQHandler+0x168>
 8003cea:	2302      	movs	r3, #2
 8003cec:	4a27      	ldr	r2, [pc, #156]	@ (8003d8c <HAL_DMA_IRQHandler+0x208>)
 8003cee:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d034      	beq.n	8003d6a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d04:	6878      	ldr	r0, [r7, #4]
 8003d06:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003d08:	e02f      	b.n	8003d6a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d0e:	2208      	movs	r2, #8
 8003d10:	409a      	lsls	r2, r3
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	4013      	ands	r3, r2
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d028      	beq.n	8003d6c <HAL_DMA_IRQHandler+0x1e8>
 8003d1a:	68bb      	ldr	r3, [r7, #8]
 8003d1c:	f003 0308 	and.w	r3, r3, #8
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d023      	beq.n	8003d6c <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	681a      	ldr	r2, [r3, #0]
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f022 020e 	bic.w	r2, r2, #14
 8003d32:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d3c:	2101      	movs	r1, #1
 8003d3e:	fa01 f202 	lsl.w	r2, r1, r2
 8003d42:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2201      	movs	r2, #1
 8003d48:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2201      	movs	r2, #1
 8003d4e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2200      	movs	r2, #0
 8003d56:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d004      	beq.n	8003d6c <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d66:	6878      	ldr	r0, [r7, #4]
 8003d68:	4798      	blx	r3
    }
  }
  return;
 8003d6a:	bf00      	nop
 8003d6c:	bf00      	nop
}
 8003d6e:	3710      	adds	r7, #16
 8003d70:	46bd      	mov	sp, r7
 8003d72:	bd80      	pop	{r7, pc}
 8003d74:	40020008 	.word	0x40020008
 8003d78:	4002001c 	.word	0x4002001c
 8003d7c:	40020030 	.word	0x40020030
 8003d80:	40020044 	.word	0x40020044
 8003d84:	40020058 	.word	0x40020058
 8003d88:	4002006c 	.word	0x4002006c
 8003d8c:	40020000 	.word	0x40020000

08003d90 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003d90:	b480      	push	{r7}
 8003d92:	b085      	sub	sp, #20
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	60f8      	str	r0, [r7, #12]
 8003d98:	60b9      	str	r1, [r7, #8]
 8003d9a:	607a      	str	r2, [r7, #4]
 8003d9c:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003da6:	2101      	movs	r1, #1
 8003da8:	fa01 f202 	lsl.w	r2, r1, r2
 8003dac:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	683a      	ldr	r2, [r7, #0]
 8003db4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	685b      	ldr	r3, [r3, #4]
 8003dba:	2b10      	cmp	r3, #16
 8003dbc:	d108      	bne.n	8003dd0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	687a      	ldr	r2, [r7, #4]
 8003dc4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	68ba      	ldr	r2, [r7, #8]
 8003dcc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003dce:	e007      	b.n	8003de0 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	68ba      	ldr	r2, [r7, #8]
 8003dd6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	687a      	ldr	r2, [r7, #4]
 8003dde:	60da      	str	r2, [r3, #12]
}
 8003de0:	bf00      	nop
 8003de2:	3714      	adds	r7, #20
 8003de4:	46bd      	mov	sp, r7
 8003de6:	bc80      	pop	{r7}
 8003de8:	4770      	bx	lr
	...

08003dec <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003dec:	b480      	push	{r7}
 8003dee:	b08b      	sub	sp, #44	@ 0x2c
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
 8003df4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003df6:	2300      	movs	r3, #0
 8003df8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003dfe:	e169      	b.n	80040d4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003e00:	2201      	movs	r2, #1
 8003e02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e04:	fa02 f303 	lsl.w	r3, r2, r3
 8003e08:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	69fa      	ldr	r2, [r7, #28]
 8003e10:	4013      	ands	r3, r2
 8003e12:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003e14:	69ba      	ldr	r2, [r7, #24]
 8003e16:	69fb      	ldr	r3, [r7, #28]
 8003e18:	429a      	cmp	r2, r3
 8003e1a:	f040 8158 	bne.w	80040ce <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	685b      	ldr	r3, [r3, #4]
 8003e22:	4a9a      	ldr	r2, [pc, #616]	@ (800408c <HAL_GPIO_Init+0x2a0>)
 8003e24:	4293      	cmp	r3, r2
 8003e26:	d05e      	beq.n	8003ee6 <HAL_GPIO_Init+0xfa>
 8003e28:	4a98      	ldr	r2, [pc, #608]	@ (800408c <HAL_GPIO_Init+0x2a0>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d875      	bhi.n	8003f1a <HAL_GPIO_Init+0x12e>
 8003e2e:	4a98      	ldr	r2, [pc, #608]	@ (8004090 <HAL_GPIO_Init+0x2a4>)
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d058      	beq.n	8003ee6 <HAL_GPIO_Init+0xfa>
 8003e34:	4a96      	ldr	r2, [pc, #600]	@ (8004090 <HAL_GPIO_Init+0x2a4>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d86f      	bhi.n	8003f1a <HAL_GPIO_Init+0x12e>
 8003e3a:	4a96      	ldr	r2, [pc, #600]	@ (8004094 <HAL_GPIO_Init+0x2a8>)
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d052      	beq.n	8003ee6 <HAL_GPIO_Init+0xfa>
 8003e40:	4a94      	ldr	r2, [pc, #592]	@ (8004094 <HAL_GPIO_Init+0x2a8>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d869      	bhi.n	8003f1a <HAL_GPIO_Init+0x12e>
 8003e46:	4a94      	ldr	r2, [pc, #592]	@ (8004098 <HAL_GPIO_Init+0x2ac>)
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	d04c      	beq.n	8003ee6 <HAL_GPIO_Init+0xfa>
 8003e4c:	4a92      	ldr	r2, [pc, #584]	@ (8004098 <HAL_GPIO_Init+0x2ac>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d863      	bhi.n	8003f1a <HAL_GPIO_Init+0x12e>
 8003e52:	4a92      	ldr	r2, [pc, #584]	@ (800409c <HAL_GPIO_Init+0x2b0>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d046      	beq.n	8003ee6 <HAL_GPIO_Init+0xfa>
 8003e58:	4a90      	ldr	r2, [pc, #576]	@ (800409c <HAL_GPIO_Init+0x2b0>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d85d      	bhi.n	8003f1a <HAL_GPIO_Init+0x12e>
 8003e5e:	2b12      	cmp	r3, #18
 8003e60:	d82a      	bhi.n	8003eb8 <HAL_GPIO_Init+0xcc>
 8003e62:	2b12      	cmp	r3, #18
 8003e64:	d859      	bhi.n	8003f1a <HAL_GPIO_Init+0x12e>
 8003e66:	a201      	add	r2, pc, #4	@ (adr r2, 8003e6c <HAL_GPIO_Init+0x80>)
 8003e68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e6c:	08003ee7 	.word	0x08003ee7
 8003e70:	08003ec1 	.word	0x08003ec1
 8003e74:	08003ed3 	.word	0x08003ed3
 8003e78:	08003f15 	.word	0x08003f15
 8003e7c:	08003f1b 	.word	0x08003f1b
 8003e80:	08003f1b 	.word	0x08003f1b
 8003e84:	08003f1b 	.word	0x08003f1b
 8003e88:	08003f1b 	.word	0x08003f1b
 8003e8c:	08003f1b 	.word	0x08003f1b
 8003e90:	08003f1b 	.word	0x08003f1b
 8003e94:	08003f1b 	.word	0x08003f1b
 8003e98:	08003f1b 	.word	0x08003f1b
 8003e9c:	08003f1b 	.word	0x08003f1b
 8003ea0:	08003f1b 	.word	0x08003f1b
 8003ea4:	08003f1b 	.word	0x08003f1b
 8003ea8:	08003f1b 	.word	0x08003f1b
 8003eac:	08003f1b 	.word	0x08003f1b
 8003eb0:	08003ec9 	.word	0x08003ec9
 8003eb4:	08003edd 	.word	0x08003edd
 8003eb8:	4a79      	ldr	r2, [pc, #484]	@ (80040a0 <HAL_GPIO_Init+0x2b4>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d013      	beq.n	8003ee6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003ebe:	e02c      	b.n	8003f1a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	68db      	ldr	r3, [r3, #12]
 8003ec4:	623b      	str	r3, [r7, #32]
          break;
 8003ec6:	e029      	b.n	8003f1c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	68db      	ldr	r3, [r3, #12]
 8003ecc:	3304      	adds	r3, #4
 8003ece:	623b      	str	r3, [r7, #32]
          break;
 8003ed0:	e024      	b.n	8003f1c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	68db      	ldr	r3, [r3, #12]
 8003ed6:	3308      	adds	r3, #8
 8003ed8:	623b      	str	r3, [r7, #32]
          break;
 8003eda:	e01f      	b.n	8003f1c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	68db      	ldr	r3, [r3, #12]
 8003ee0:	330c      	adds	r3, #12
 8003ee2:	623b      	str	r3, [r7, #32]
          break;
 8003ee4:	e01a      	b.n	8003f1c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	689b      	ldr	r3, [r3, #8]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d102      	bne.n	8003ef4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003eee:	2304      	movs	r3, #4
 8003ef0:	623b      	str	r3, [r7, #32]
          break;
 8003ef2:	e013      	b.n	8003f1c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	689b      	ldr	r3, [r3, #8]
 8003ef8:	2b01      	cmp	r3, #1
 8003efa:	d105      	bne.n	8003f08 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003efc:	2308      	movs	r3, #8
 8003efe:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	69fa      	ldr	r2, [r7, #28]
 8003f04:	611a      	str	r2, [r3, #16]
          break;
 8003f06:	e009      	b.n	8003f1c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003f08:	2308      	movs	r3, #8
 8003f0a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	69fa      	ldr	r2, [r7, #28]
 8003f10:	615a      	str	r2, [r3, #20]
          break;
 8003f12:	e003      	b.n	8003f1c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003f14:	2300      	movs	r3, #0
 8003f16:	623b      	str	r3, [r7, #32]
          break;
 8003f18:	e000      	b.n	8003f1c <HAL_GPIO_Init+0x130>
          break;
 8003f1a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003f1c:	69bb      	ldr	r3, [r7, #24]
 8003f1e:	2bff      	cmp	r3, #255	@ 0xff
 8003f20:	d801      	bhi.n	8003f26 <HAL_GPIO_Init+0x13a>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	e001      	b.n	8003f2a <HAL_GPIO_Init+0x13e>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	3304      	adds	r3, #4
 8003f2a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003f2c:	69bb      	ldr	r3, [r7, #24]
 8003f2e:	2bff      	cmp	r3, #255	@ 0xff
 8003f30:	d802      	bhi.n	8003f38 <HAL_GPIO_Init+0x14c>
 8003f32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f34:	009b      	lsls	r3, r3, #2
 8003f36:	e002      	b.n	8003f3e <HAL_GPIO_Init+0x152>
 8003f38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f3a:	3b08      	subs	r3, #8
 8003f3c:	009b      	lsls	r3, r3, #2
 8003f3e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003f40:	697b      	ldr	r3, [r7, #20]
 8003f42:	681a      	ldr	r2, [r3, #0]
 8003f44:	210f      	movs	r1, #15
 8003f46:	693b      	ldr	r3, [r7, #16]
 8003f48:	fa01 f303 	lsl.w	r3, r1, r3
 8003f4c:	43db      	mvns	r3, r3
 8003f4e:	401a      	ands	r2, r3
 8003f50:	6a39      	ldr	r1, [r7, #32]
 8003f52:	693b      	ldr	r3, [r7, #16]
 8003f54:	fa01 f303 	lsl.w	r3, r1, r3
 8003f58:	431a      	orrs	r2, r3
 8003f5a:	697b      	ldr	r3, [r7, #20]
 8003f5c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	685b      	ldr	r3, [r3, #4]
 8003f62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	f000 80b1 	beq.w	80040ce <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003f6c:	4b4d      	ldr	r3, [pc, #308]	@ (80040a4 <HAL_GPIO_Init+0x2b8>)
 8003f6e:	699b      	ldr	r3, [r3, #24]
 8003f70:	4a4c      	ldr	r2, [pc, #304]	@ (80040a4 <HAL_GPIO_Init+0x2b8>)
 8003f72:	f043 0301 	orr.w	r3, r3, #1
 8003f76:	6193      	str	r3, [r2, #24]
 8003f78:	4b4a      	ldr	r3, [pc, #296]	@ (80040a4 <HAL_GPIO_Init+0x2b8>)
 8003f7a:	699b      	ldr	r3, [r3, #24]
 8003f7c:	f003 0301 	and.w	r3, r3, #1
 8003f80:	60bb      	str	r3, [r7, #8]
 8003f82:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003f84:	4a48      	ldr	r2, [pc, #288]	@ (80040a8 <HAL_GPIO_Init+0x2bc>)
 8003f86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f88:	089b      	lsrs	r3, r3, #2
 8003f8a:	3302      	adds	r3, #2
 8003f8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f90:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003f92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f94:	f003 0303 	and.w	r3, r3, #3
 8003f98:	009b      	lsls	r3, r3, #2
 8003f9a:	220f      	movs	r2, #15
 8003f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003fa0:	43db      	mvns	r3, r3
 8003fa2:	68fa      	ldr	r2, [r7, #12]
 8003fa4:	4013      	ands	r3, r2
 8003fa6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	4a40      	ldr	r2, [pc, #256]	@ (80040ac <HAL_GPIO_Init+0x2c0>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d013      	beq.n	8003fd8 <HAL_GPIO_Init+0x1ec>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	4a3f      	ldr	r2, [pc, #252]	@ (80040b0 <HAL_GPIO_Init+0x2c4>)
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d00d      	beq.n	8003fd4 <HAL_GPIO_Init+0x1e8>
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	4a3e      	ldr	r2, [pc, #248]	@ (80040b4 <HAL_GPIO_Init+0x2c8>)
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d007      	beq.n	8003fd0 <HAL_GPIO_Init+0x1e4>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	4a3d      	ldr	r2, [pc, #244]	@ (80040b8 <HAL_GPIO_Init+0x2cc>)
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d101      	bne.n	8003fcc <HAL_GPIO_Init+0x1e0>
 8003fc8:	2303      	movs	r3, #3
 8003fca:	e006      	b.n	8003fda <HAL_GPIO_Init+0x1ee>
 8003fcc:	2304      	movs	r3, #4
 8003fce:	e004      	b.n	8003fda <HAL_GPIO_Init+0x1ee>
 8003fd0:	2302      	movs	r3, #2
 8003fd2:	e002      	b.n	8003fda <HAL_GPIO_Init+0x1ee>
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	e000      	b.n	8003fda <HAL_GPIO_Init+0x1ee>
 8003fd8:	2300      	movs	r3, #0
 8003fda:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003fdc:	f002 0203 	and.w	r2, r2, #3
 8003fe0:	0092      	lsls	r2, r2, #2
 8003fe2:	4093      	lsls	r3, r2
 8003fe4:	68fa      	ldr	r2, [r7, #12]
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003fea:	492f      	ldr	r1, [pc, #188]	@ (80040a8 <HAL_GPIO_Init+0x2bc>)
 8003fec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fee:	089b      	lsrs	r3, r3, #2
 8003ff0:	3302      	adds	r3, #2
 8003ff2:	68fa      	ldr	r2, [r7, #12]
 8003ff4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	685b      	ldr	r3, [r3, #4]
 8003ffc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004000:	2b00      	cmp	r3, #0
 8004002:	d006      	beq.n	8004012 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004004:	4b2d      	ldr	r3, [pc, #180]	@ (80040bc <HAL_GPIO_Init+0x2d0>)
 8004006:	689a      	ldr	r2, [r3, #8]
 8004008:	492c      	ldr	r1, [pc, #176]	@ (80040bc <HAL_GPIO_Init+0x2d0>)
 800400a:	69bb      	ldr	r3, [r7, #24]
 800400c:	4313      	orrs	r3, r2
 800400e:	608b      	str	r3, [r1, #8]
 8004010:	e006      	b.n	8004020 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8004012:	4b2a      	ldr	r3, [pc, #168]	@ (80040bc <HAL_GPIO_Init+0x2d0>)
 8004014:	689a      	ldr	r2, [r3, #8]
 8004016:	69bb      	ldr	r3, [r7, #24]
 8004018:	43db      	mvns	r3, r3
 800401a:	4928      	ldr	r1, [pc, #160]	@ (80040bc <HAL_GPIO_Init+0x2d0>)
 800401c:	4013      	ands	r3, r2
 800401e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	685b      	ldr	r3, [r3, #4]
 8004024:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004028:	2b00      	cmp	r3, #0
 800402a:	d006      	beq.n	800403a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800402c:	4b23      	ldr	r3, [pc, #140]	@ (80040bc <HAL_GPIO_Init+0x2d0>)
 800402e:	68da      	ldr	r2, [r3, #12]
 8004030:	4922      	ldr	r1, [pc, #136]	@ (80040bc <HAL_GPIO_Init+0x2d0>)
 8004032:	69bb      	ldr	r3, [r7, #24]
 8004034:	4313      	orrs	r3, r2
 8004036:	60cb      	str	r3, [r1, #12]
 8004038:	e006      	b.n	8004048 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800403a:	4b20      	ldr	r3, [pc, #128]	@ (80040bc <HAL_GPIO_Init+0x2d0>)
 800403c:	68da      	ldr	r2, [r3, #12]
 800403e:	69bb      	ldr	r3, [r7, #24]
 8004040:	43db      	mvns	r3, r3
 8004042:	491e      	ldr	r1, [pc, #120]	@ (80040bc <HAL_GPIO_Init+0x2d0>)
 8004044:	4013      	ands	r3, r2
 8004046:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	685b      	ldr	r3, [r3, #4]
 800404c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004050:	2b00      	cmp	r3, #0
 8004052:	d006      	beq.n	8004062 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004054:	4b19      	ldr	r3, [pc, #100]	@ (80040bc <HAL_GPIO_Init+0x2d0>)
 8004056:	685a      	ldr	r2, [r3, #4]
 8004058:	4918      	ldr	r1, [pc, #96]	@ (80040bc <HAL_GPIO_Init+0x2d0>)
 800405a:	69bb      	ldr	r3, [r7, #24]
 800405c:	4313      	orrs	r3, r2
 800405e:	604b      	str	r3, [r1, #4]
 8004060:	e006      	b.n	8004070 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8004062:	4b16      	ldr	r3, [pc, #88]	@ (80040bc <HAL_GPIO_Init+0x2d0>)
 8004064:	685a      	ldr	r2, [r3, #4]
 8004066:	69bb      	ldr	r3, [r7, #24]
 8004068:	43db      	mvns	r3, r3
 800406a:	4914      	ldr	r1, [pc, #80]	@ (80040bc <HAL_GPIO_Init+0x2d0>)
 800406c:	4013      	ands	r3, r2
 800406e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	685b      	ldr	r3, [r3, #4]
 8004074:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004078:	2b00      	cmp	r3, #0
 800407a:	d021      	beq.n	80040c0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800407c:	4b0f      	ldr	r3, [pc, #60]	@ (80040bc <HAL_GPIO_Init+0x2d0>)
 800407e:	681a      	ldr	r2, [r3, #0]
 8004080:	490e      	ldr	r1, [pc, #56]	@ (80040bc <HAL_GPIO_Init+0x2d0>)
 8004082:	69bb      	ldr	r3, [r7, #24]
 8004084:	4313      	orrs	r3, r2
 8004086:	600b      	str	r3, [r1, #0]
 8004088:	e021      	b.n	80040ce <HAL_GPIO_Init+0x2e2>
 800408a:	bf00      	nop
 800408c:	10320000 	.word	0x10320000
 8004090:	10310000 	.word	0x10310000
 8004094:	10220000 	.word	0x10220000
 8004098:	10210000 	.word	0x10210000
 800409c:	10120000 	.word	0x10120000
 80040a0:	10110000 	.word	0x10110000
 80040a4:	40021000 	.word	0x40021000
 80040a8:	40010000 	.word	0x40010000
 80040ac:	40010800 	.word	0x40010800
 80040b0:	40010c00 	.word	0x40010c00
 80040b4:	40011000 	.word	0x40011000
 80040b8:	40011400 	.word	0x40011400
 80040bc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80040c0:	4b0b      	ldr	r3, [pc, #44]	@ (80040f0 <HAL_GPIO_Init+0x304>)
 80040c2:	681a      	ldr	r2, [r3, #0]
 80040c4:	69bb      	ldr	r3, [r7, #24]
 80040c6:	43db      	mvns	r3, r3
 80040c8:	4909      	ldr	r1, [pc, #36]	@ (80040f0 <HAL_GPIO_Init+0x304>)
 80040ca:	4013      	ands	r3, r2
 80040cc:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80040ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040d0:	3301      	adds	r3, #1
 80040d2:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	681a      	ldr	r2, [r3, #0]
 80040d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040da:	fa22 f303 	lsr.w	r3, r2, r3
 80040de:	2b00      	cmp	r3, #0
 80040e0:	f47f ae8e 	bne.w	8003e00 <HAL_GPIO_Init+0x14>
  }
}
 80040e4:	bf00      	nop
 80040e6:	bf00      	nop
 80040e8:	372c      	adds	r7, #44	@ 0x2c
 80040ea:	46bd      	mov	sp, r7
 80040ec:	bc80      	pop	{r7}
 80040ee:	4770      	bx	lr
 80040f0:	40010400 	.word	0x40010400

080040f4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b084      	sub	sp, #16
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d101      	bne.n	8004106 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004102:	2301      	movs	r3, #1
 8004104:	e12b      	b.n	800435e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800410c:	b2db      	uxtb	r3, r3
 800410e:	2b00      	cmp	r3, #0
 8004110:	d106      	bne.n	8004120 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2200      	movs	r2, #0
 8004116:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800411a:	6878      	ldr	r0, [r7, #4]
 800411c:	f7ff f81e 	bl	800315c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2224      	movs	r2, #36	@ 0x24
 8004124:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	681a      	ldr	r2, [r3, #0]
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f022 0201 	bic.w	r2, r2, #1
 8004136:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	681a      	ldr	r2, [r3, #0]
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004146:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	681a      	ldr	r2, [r3, #0]
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004156:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004158:	f001 fbf0 	bl	800593c <HAL_RCC_GetPCLK1Freq>
 800415c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	685b      	ldr	r3, [r3, #4]
 8004162:	4a81      	ldr	r2, [pc, #516]	@ (8004368 <HAL_I2C_Init+0x274>)
 8004164:	4293      	cmp	r3, r2
 8004166:	d807      	bhi.n	8004178 <HAL_I2C_Init+0x84>
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	4a80      	ldr	r2, [pc, #512]	@ (800436c <HAL_I2C_Init+0x278>)
 800416c:	4293      	cmp	r3, r2
 800416e:	bf94      	ite	ls
 8004170:	2301      	movls	r3, #1
 8004172:	2300      	movhi	r3, #0
 8004174:	b2db      	uxtb	r3, r3
 8004176:	e006      	b.n	8004186 <HAL_I2C_Init+0x92>
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	4a7d      	ldr	r2, [pc, #500]	@ (8004370 <HAL_I2C_Init+0x27c>)
 800417c:	4293      	cmp	r3, r2
 800417e:	bf94      	ite	ls
 8004180:	2301      	movls	r3, #1
 8004182:	2300      	movhi	r3, #0
 8004184:	b2db      	uxtb	r3, r3
 8004186:	2b00      	cmp	r3, #0
 8004188:	d001      	beq.n	800418e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800418a:	2301      	movs	r3, #1
 800418c:	e0e7      	b.n	800435e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	4a78      	ldr	r2, [pc, #480]	@ (8004374 <HAL_I2C_Init+0x280>)
 8004192:	fba2 2303 	umull	r2, r3, r2, r3
 8004196:	0c9b      	lsrs	r3, r3, #18
 8004198:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	685b      	ldr	r3, [r3, #4]
 80041a0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	68ba      	ldr	r2, [r7, #8]
 80041aa:	430a      	orrs	r2, r1
 80041ac:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	6a1b      	ldr	r3, [r3, #32]
 80041b4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	685b      	ldr	r3, [r3, #4]
 80041bc:	4a6a      	ldr	r2, [pc, #424]	@ (8004368 <HAL_I2C_Init+0x274>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d802      	bhi.n	80041c8 <HAL_I2C_Init+0xd4>
 80041c2:	68bb      	ldr	r3, [r7, #8]
 80041c4:	3301      	adds	r3, #1
 80041c6:	e009      	b.n	80041dc <HAL_I2C_Init+0xe8>
 80041c8:	68bb      	ldr	r3, [r7, #8]
 80041ca:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80041ce:	fb02 f303 	mul.w	r3, r2, r3
 80041d2:	4a69      	ldr	r2, [pc, #420]	@ (8004378 <HAL_I2C_Init+0x284>)
 80041d4:	fba2 2303 	umull	r2, r3, r2, r3
 80041d8:	099b      	lsrs	r3, r3, #6
 80041da:	3301      	adds	r3, #1
 80041dc:	687a      	ldr	r2, [r7, #4]
 80041de:	6812      	ldr	r2, [r2, #0]
 80041e0:	430b      	orrs	r3, r1
 80041e2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	69db      	ldr	r3, [r3, #28]
 80041ea:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80041ee:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	685b      	ldr	r3, [r3, #4]
 80041f6:	495c      	ldr	r1, [pc, #368]	@ (8004368 <HAL_I2C_Init+0x274>)
 80041f8:	428b      	cmp	r3, r1
 80041fa:	d819      	bhi.n	8004230 <HAL_I2C_Init+0x13c>
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	1e59      	subs	r1, r3, #1
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	685b      	ldr	r3, [r3, #4]
 8004204:	005b      	lsls	r3, r3, #1
 8004206:	fbb1 f3f3 	udiv	r3, r1, r3
 800420a:	1c59      	adds	r1, r3, #1
 800420c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004210:	400b      	ands	r3, r1
 8004212:	2b00      	cmp	r3, #0
 8004214:	d00a      	beq.n	800422c <HAL_I2C_Init+0x138>
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	1e59      	subs	r1, r3, #1
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	685b      	ldr	r3, [r3, #4]
 800421e:	005b      	lsls	r3, r3, #1
 8004220:	fbb1 f3f3 	udiv	r3, r1, r3
 8004224:	3301      	adds	r3, #1
 8004226:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800422a:	e051      	b.n	80042d0 <HAL_I2C_Init+0x1dc>
 800422c:	2304      	movs	r3, #4
 800422e:	e04f      	b.n	80042d0 <HAL_I2C_Init+0x1dc>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	689b      	ldr	r3, [r3, #8]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d111      	bne.n	800425c <HAL_I2C_Init+0x168>
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	1e58      	subs	r0, r3, #1
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6859      	ldr	r1, [r3, #4]
 8004240:	460b      	mov	r3, r1
 8004242:	005b      	lsls	r3, r3, #1
 8004244:	440b      	add	r3, r1
 8004246:	fbb0 f3f3 	udiv	r3, r0, r3
 800424a:	3301      	adds	r3, #1
 800424c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004250:	2b00      	cmp	r3, #0
 8004252:	bf0c      	ite	eq
 8004254:	2301      	moveq	r3, #1
 8004256:	2300      	movne	r3, #0
 8004258:	b2db      	uxtb	r3, r3
 800425a:	e012      	b.n	8004282 <HAL_I2C_Init+0x18e>
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	1e58      	subs	r0, r3, #1
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6859      	ldr	r1, [r3, #4]
 8004264:	460b      	mov	r3, r1
 8004266:	009b      	lsls	r3, r3, #2
 8004268:	440b      	add	r3, r1
 800426a:	0099      	lsls	r1, r3, #2
 800426c:	440b      	add	r3, r1
 800426e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004272:	3301      	adds	r3, #1
 8004274:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004278:	2b00      	cmp	r3, #0
 800427a:	bf0c      	ite	eq
 800427c:	2301      	moveq	r3, #1
 800427e:	2300      	movne	r3, #0
 8004280:	b2db      	uxtb	r3, r3
 8004282:	2b00      	cmp	r3, #0
 8004284:	d001      	beq.n	800428a <HAL_I2C_Init+0x196>
 8004286:	2301      	movs	r3, #1
 8004288:	e022      	b.n	80042d0 <HAL_I2C_Init+0x1dc>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	689b      	ldr	r3, [r3, #8]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d10e      	bne.n	80042b0 <HAL_I2C_Init+0x1bc>
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	1e58      	subs	r0, r3, #1
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6859      	ldr	r1, [r3, #4]
 800429a:	460b      	mov	r3, r1
 800429c:	005b      	lsls	r3, r3, #1
 800429e:	440b      	add	r3, r1
 80042a0:	fbb0 f3f3 	udiv	r3, r0, r3
 80042a4:	3301      	adds	r3, #1
 80042a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80042aa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80042ae:	e00f      	b.n	80042d0 <HAL_I2C_Init+0x1dc>
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	1e58      	subs	r0, r3, #1
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6859      	ldr	r1, [r3, #4]
 80042b8:	460b      	mov	r3, r1
 80042ba:	009b      	lsls	r3, r3, #2
 80042bc:	440b      	add	r3, r1
 80042be:	0099      	lsls	r1, r3, #2
 80042c0:	440b      	add	r3, r1
 80042c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80042c6:	3301      	adds	r3, #1
 80042c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80042cc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80042d0:	6879      	ldr	r1, [r7, #4]
 80042d2:	6809      	ldr	r1, [r1, #0]
 80042d4:	4313      	orrs	r3, r2
 80042d6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	69da      	ldr	r2, [r3, #28]
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6a1b      	ldr	r3, [r3, #32]
 80042ea:	431a      	orrs	r2, r3
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	430a      	orrs	r2, r1
 80042f2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	689b      	ldr	r3, [r3, #8]
 80042fa:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80042fe:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004302:	687a      	ldr	r2, [r7, #4]
 8004304:	6911      	ldr	r1, [r2, #16]
 8004306:	687a      	ldr	r2, [r7, #4]
 8004308:	68d2      	ldr	r2, [r2, #12]
 800430a:	4311      	orrs	r1, r2
 800430c:	687a      	ldr	r2, [r7, #4]
 800430e:	6812      	ldr	r2, [r2, #0]
 8004310:	430b      	orrs	r3, r1
 8004312:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	68db      	ldr	r3, [r3, #12]
 800431a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	695a      	ldr	r2, [r3, #20]
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	699b      	ldr	r3, [r3, #24]
 8004326:	431a      	orrs	r2, r3
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	430a      	orrs	r2, r1
 800432e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	681a      	ldr	r2, [r3, #0]
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f042 0201 	orr.w	r2, r2, #1
 800433e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2200      	movs	r2, #0
 8004344:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2220      	movs	r2, #32
 800434a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2200      	movs	r2, #0
 8004352:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2200      	movs	r2, #0
 8004358:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800435c:	2300      	movs	r3, #0
}
 800435e:	4618      	mov	r0, r3
 8004360:	3710      	adds	r7, #16
 8004362:	46bd      	mov	sp, r7
 8004364:	bd80      	pop	{r7, pc}
 8004366:	bf00      	nop
 8004368:	000186a0 	.word	0x000186a0
 800436c:	001e847f 	.word	0x001e847f
 8004370:	003d08ff 	.word	0x003d08ff
 8004374:	431bde83 	.word	0x431bde83
 8004378:	10624dd3 	.word	0x10624dd3

0800437c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b088      	sub	sp, #32
 8004380:	af02      	add	r7, sp, #8
 8004382:	60f8      	str	r0, [r7, #12]
 8004384:	4608      	mov	r0, r1
 8004386:	4611      	mov	r1, r2
 8004388:	461a      	mov	r2, r3
 800438a:	4603      	mov	r3, r0
 800438c:	817b      	strh	r3, [r7, #10]
 800438e:	460b      	mov	r3, r1
 8004390:	813b      	strh	r3, [r7, #8]
 8004392:	4613      	mov	r3, r2
 8004394:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004396:	f7ff f9ff 	bl	8003798 <HAL_GetTick>
 800439a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80043a2:	b2db      	uxtb	r3, r3
 80043a4:	2b20      	cmp	r3, #32
 80043a6:	f040 80d9 	bne.w	800455c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80043aa:	697b      	ldr	r3, [r7, #20]
 80043ac:	9300      	str	r3, [sp, #0]
 80043ae:	2319      	movs	r3, #25
 80043b0:	2201      	movs	r2, #1
 80043b2:	496d      	ldr	r1, [pc, #436]	@ (8004568 <HAL_I2C_Mem_Write+0x1ec>)
 80043b4:	68f8      	ldr	r0, [r7, #12]
 80043b6:	f000 fcc1 	bl	8004d3c <I2C_WaitOnFlagUntilTimeout>
 80043ba:	4603      	mov	r3, r0
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d001      	beq.n	80043c4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80043c0:	2302      	movs	r3, #2
 80043c2:	e0cc      	b.n	800455e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80043ca:	2b01      	cmp	r3, #1
 80043cc:	d101      	bne.n	80043d2 <HAL_I2C_Mem_Write+0x56>
 80043ce:	2302      	movs	r3, #2
 80043d0:	e0c5      	b.n	800455e <HAL_I2C_Mem_Write+0x1e2>
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	2201      	movs	r2, #1
 80043d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f003 0301 	and.w	r3, r3, #1
 80043e4:	2b01      	cmp	r3, #1
 80043e6:	d007      	beq.n	80043f8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	681a      	ldr	r2, [r3, #0]
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f042 0201 	orr.w	r2, r2, #1
 80043f6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	681a      	ldr	r2, [r3, #0]
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004406:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	2221      	movs	r2, #33	@ 0x21
 800440c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	2240      	movs	r2, #64	@ 0x40
 8004414:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	2200      	movs	r2, #0
 800441c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	6a3a      	ldr	r2, [r7, #32]
 8004422:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004428:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800442e:	b29a      	uxth	r2, r3
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	4a4d      	ldr	r2, [pc, #308]	@ (800456c <HAL_I2C_Mem_Write+0x1f0>)
 8004438:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800443a:	88f8      	ldrh	r0, [r7, #6]
 800443c:	893a      	ldrh	r2, [r7, #8]
 800443e:	8979      	ldrh	r1, [r7, #10]
 8004440:	697b      	ldr	r3, [r7, #20]
 8004442:	9301      	str	r3, [sp, #4]
 8004444:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004446:	9300      	str	r3, [sp, #0]
 8004448:	4603      	mov	r3, r0
 800444a:	68f8      	ldr	r0, [r7, #12]
 800444c:	f000 faf8 	bl	8004a40 <I2C_RequestMemoryWrite>
 8004450:	4603      	mov	r3, r0
 8004452:	2b00      	cmp	r3, #0
 8004454:	d052      	beq.n	80044fc <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004456:	2301      	movs	r3, #1
 8004458:	e081      	b.n	800455e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800445a:	697a      	ldr	r2, [r7, #20]
 800445c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800445e:	68f8      	ldr	r0, [r7, #12]
 8004460:	f000 fd86 	bl	8004f70 <I2C_WaitOnTXEFlagUntilTimeout>
 8004464:	4603      	mov	r3, r0
 8004466:	2b00      	cmp	r3, #0
 8004468:	d00d      	beq.n	8004486 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800446e:	2b04      	cmp	r3, #4
 8004470:	d107      	bne.n	8004482 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	681a      	ldr	r2, [r3, #0]
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004480:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004482:	2301      	movs	r3, #1
 8004484:	e06b      	b.n	800455e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800448a:	781a      	ldrb	r2, [r3, #0]
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004496:	1c5a      	adds	r2, r3, #1
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044a0:	3b01      	subs	r3, #1
 80044a2:	b29a      	uxth	r2, r3
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044ac:	b29b      	uxth	r3, r3
 80044ae:	3b01      	subs	r3, #1
 80044b0:	b29a      	uxth	r2, r3
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	695b      	ldr	r3, [r3, #20]
 80044bc:	f003 0304 	and.w	r3, r3, #4
 80044c0:	2b04      	cmp	r3, #4
 80044c2:	d11b      	bne.n	80044fc <HAL_I2C_Mem_Write+0x180>
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d017      	beq.n	80044fc <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044d0:	781a      	ldrb	r2, [r3, #0]
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044dc:	1c5a      	adds	r2, r3, #1
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044e6:	3b01      	subs	r3, #1
 80044e8:	b29a      	uxth	r2, r3
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044f2:	b29b      	uxth	r3, r3
 80044f4:	3b01      	subs	r3, #1
 80044f6:	b29a      	uxth	r2, r3
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004500:	2b00      	cmp	r3, #0
 8004502:	d1aa      	bne.n	800445a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004504:	697a      	ldr	r2, [r7, #20]
 8004506:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004508:	68f8      	ldr	r0, [r7, #12]
 800450a:	f000 fd79 	bl	8005000 <I2C_WaitOnBTFFlagUntilTimeout>
 800450e:	4603      	mov	r3, r0
 8004510:	2b00      	cmp	r3, #0
 8004512:	d00d      	beq.n	8004530 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004518:	2b04      	cmp	r3, #4
 800451a:	d107      	bne.n	800452c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	681a      	ldr	r2, [r3, #0]
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800452a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800452c:	2301      	movs	r3, #1
 800452e:	e016      	b.n	800455e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	681a      	ldr	r2, [r3, #0]
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800453e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	2220      	movs	r2, #32
 8004544:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	2200      	movs	r2, #0
 800454c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	2200      	movs	r2, #0
 8004554:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004558:	2300      	movs	r3, #0
 800455a:	e000      	b.n	800455e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800455c:	2302      	movs	r3, #2
  }
}
 800455e:	4618      	mov	r0, r3
 8004560:	3718      	adds	r7, #24
 8004562:	46bd      	mov	sp, r7
 8004564:	bd80      	pop	{r7, pc}
 8004566:	bf00      	nop
 8004568:	00100002 	.word	0x00100002
 800456c:	ffff0000 	.word	0xffff0000

08004570 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b08c      	sub	sp, #48	@ 0x30
 8004574:	af02      	add	r7, sp, #8
 8004576:	60f8      	str	r0, [r7, #12]
 8004578:	4608      	mov	r0, r1
 800457a:	4611      	mov	r1, r2
 800457c:	461a      	mov	r2, r3
 800457e:	4603      	mov	r3, r0
 8004580:	817b      	strh	r3, [r7, #10]
 8004582:	460b      	mov	r3, r1
 8004584:	813b      	strh	r3, [r7, #8]
 8004586:	4613      	mov	r3, r2
 8004588:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800458a:	2300      	movs	r3, #0
 800458c:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800458e:	f7ff f903 	bl	8003798 <HAL_GetTick>
 8004592:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800459a:	b2db      	uxtb	r3, r3
 800459c:	2b20      	cmp	r3, #32
 800459e:	f040 8244 	bne.w	8004a2a <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80045a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045a4:	9300      	str	r3, [sp, #0]
 80045a6:	2319      	movs	r3, #25
 80045a8:	2201      	movs	r2, #1
 80045aa:	4982      	ldr	r1, [pc, #520]	@ (80047b4 <HAL_I2C_Mem_Read+0x244>)
 80045ac:	68f8      	ldr	r0, [r7, #12]
 80045ae:	f000 fbc5 	bl	8004d3c <I2C_WaitOnFlagUntilTimeout>
 80045b2:	4603      	mov	r3, r0
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d001      	beq.n	80045bc <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 80045b8:	2302      	movs	r3, #2
 80045ba:	e237      	b.n	8004a2c <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80045c2:	2b01      	cmp	r3, #1
 80045c4:	d101      	bne.n	80045ca <HAL_I2C_Mem_Read+0x5a>
 80045c6:	2302      	movs	r3, #2
 80045c8:	e230      	b.n	8004a2c <HAL_I2C_Mem_Read+0x4bc>
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	2201      	movs	r2, #1
 80045ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f003 0301 	and.w	r3, r3, #1
 80045dc:	2b01      	cmp	r3, #1
 80045de:	d007      	beq.n	80045f0 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	681a      	ldr	r2, [r3, #0]
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f042 0201 	orr.w	r2, r2, #1
 80045ee:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	681a      	ldr	r2, [r3, #0]
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80045fe:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	2222      	movs	r2, #34	@ 0x22
 8004604:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	2240      	movs	r2, #64	@ 0x40
 800460c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	2200      	movs	r2, #0
 8004614:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800461a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8004620:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004626:	b29a      	uxth	r2, r3
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	4a62      	ldr	r2, [pc, #392]	@ (80047b8 <HAL_I2C_Mem_Read+0x248>)
 8004630:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004632:	88f8      	ldrh	r0, [r7, #6]
 8004634:	893a      	ldrh	r2, [r7, #8]
 8004636:	8979      	ldrh	r1, [r7, #10]
 8004638:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800463a:	9301      	str	r3, [sp, #4]
 800463c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800463e:	9300      	str	r3, [sp, #0]
 8004640:	4603      	mov	r3, r0
 8004642:	68f8      	ldr	r0, [r7, #12]
 8004644:	f000 fa92 	bl	8004b6c <I2C_RequestMemoryRead>
 8004648:	4603      	mov	r3, r0
 800464a:	2b00      	cmp	r3, #0
 800464c:	d001      	beq.n	8004652 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 800464e:	2301      	movs	r3, #1
 8004650:	e1ec      	b.n	8004a2c <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004656:	2b00      	cmp	r3, #0
 8004658:	d113      	bne.n	8004682 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800465a:	2300      	movs	r3, #0
 800465c:	61fb      	str	r3, [r7, #28]
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	695b      	ldr	r3, [r3, #20]
 8004664:	61fb      	str	r3, [r7, #28]
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	699b      	ldr	r3, [r3, #24]
 800466c:	61fb      	str	r3, [r7, #28]
 800466e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	681a      	ldr	r2, [r3, #0]
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800467e:	601a      	str	r2, [r3, #0]
 8004680:	e1c0      	b.n	8004a04 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004686:	2b01      	cmp	r3, #1
 8004688:	d11e      	bne.n	80046c8 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	681a      	ldr	r2, [r3, #0]
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004698:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800469a:	b672      	cpsid	i
}
 800469c:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800469e:	2300      	movs	r3, #0
 80046a0:	61bb      	str	r3, [r7, #24]
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	695b      	ldr	r3, [r3, #20]
 80046a8:	61bb      	str	r3, [r7, #24]
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	699b      	ldr	r3, [r3, #24]
 80046b0:	61bb      	str	r3, [r7, #24]
 80046b2:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	681a      	ldr	r2, [r3, #0]
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80046c2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80046c4:	b662      	cpsie	i
}
 80046c6:	e035      	b.n	8004734 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046cc:	2b02      	cmp	r3, #2
 80046ce:	d11e      	bne.n	800470e <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	681a      	ldr	r2, [r3, #0]
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80046de:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80046e0:	b672      	cpsid	i
}
 80046e2:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80046e4:	2300      	movs	r3, #0
 80046e6:	617b      	str	r3, [r7, #20]
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	695b      	ldr	r3, [r3, #20]
 80046ee:	617b      	str	r3, [r7, #20]
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	699b      	ldr	r3, [r3, #24]
 80046f6:	617b      	str	r3, [r7, #20]
 80046f8:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	681a      	ldr	r2, [r3, #0]
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004708:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800470a:	b662      	cpsie	i
}
 800470c:	e012      	b.n	8004734 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	681a      	ldr	r2, [r3, #0]
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800471c:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800471e:	2300      	movs	r3, #0
 8004720:	613b      	str	r3, [r7, #16]
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	695b      	ldr	r3, [r3, #20]
 8004728:	613b      	str	r3, [r7, #16]
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	699b      	ldr	r3, [r3, #24]
 8004730:	613b      	str	r3, [r7, #16]
 8004732:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8004734:	e166      	b.n	8004a04 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800473a:	2b03      	cmp	r3, #3
 800473c:	f200 811f 	bhi.w	800497e <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004744:	2b01      	cmp	r3, #1
 8004746:	d123      	bne.n	8004790 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004748:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800474a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800474c:	68f8      	ldr	r0, [r7, #12]
 800474e:	f000 fc9f 	bl	8005090 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004752:	4603      	mov	r3, r0
 8004754:	2b00      	cmp	r3, #0
 8004756:	d001      	beq.n	800475c <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8004758:	2301      	movs	r3, #1
 800475a:	e167      	b.n	8004a2c <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	691a      	ldr	r2, [r3, #16]
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004766:	b2d2      	uxtb	r2, r2
 8004768:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800476e:	1c5a      	adds	r2, r3, #1
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004778:	3b01      	subs	r3, #1
 800477a:	b29a      	uxth	r2, r3
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004784:	b29b      	uxth	r3, r3
 8004786:	3b01      	subs	r3, #1
 8004788:	b29a      	uxth	r2, r3
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800478e:	e139      	b.n	8004a04 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004794:	2b02      	cmp	r3, #2
 8004796:	d152      	bne.n	800483e <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004798:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800479a:	9300      	str	r3, [sp, #0]
 800479c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800479e:	2200      	movs	r2, #0
 80047a0:	4906      	ldr	r1, [pc, #24]	@ (80047bc <HAL_I2C_Mem_Read+0x24c>)
 80047a2:	68f8      	ldr	r0, [r7, #12]
 80047a4:	f000 faca 	bl	8004d3c <I2C_WaitOnFlagUntilTimeout>
 80047a8:	4603      	mov	r3, r0
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d008      	beq.n	80047c0 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 80047ae:	2301      	movs	r3, #1
 80047b0:	e13c      	b.n	8004a2c <HAL_I2C_Mem_Read+0x4bc>
 80047b2:	bf00      	nop
 80047b4:	00100002 	.word	0x00100002
 80047b8:	ffff0000 	.word	0xffff0000
 80047bc:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80047c0:	b672      	cpsid	i
}
 80047c2:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	681a      	ldr	r2, [r3, #0]
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80047d2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	691a      	ldr	r2, [r3, #16]
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047de:	b2d2      	uxtb	r2, r2
 80047e0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047e6:	1c5a      	adds	r2, r3, #1
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047f0:	3b01      	subs	r3, #1
 80047f2:	b29a      	uxth	r2, r3
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047fc:	b29b      	uxth	r3, r3
 80047fe:	3b01      	subs	r3, #1
 8004800:	b29a      	uxth	r2, r3
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004806:	b662      	cpsie	i
}
 8004808:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	691a      	ldr	r2, [r3, #16]
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004814:	b2d2      	uxtb	r2, r2
 8004816:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800481c:	1c5a      	adds	r2, r3, #1
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004826:	3b01      	subs	r3, #1
 8004828:	b29a      	uxth	r2, r3
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004832:	b29b      	uxth	r3, r3
 8004834:	3b01      	subs	r3, #1
 8004836:	b29a      	uxth	r2, r3
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800483c:	e0e2      	b.n	8004a04 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800483e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004840:	9300      	str	r3, [sp, #0]
 8004842:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004844:	2200      	movs	r2, #0
 8004846:	497b      	ldr	r1, [pc, #492]	@ (8004a34 <HAL_I2C_Mem_Read+0x4c4>)
 8004848:	68f8      	ldr	r0, [r7, #12]
 800484a:	f000 fa77 	bl	8004d3c <I2C_WaitOnFlagUntilTimeout>
 800484e:	4603      	mov	r3, r0
 8004850:	2b00      	cmp	r3, #0
 8004852:	d001      	beq.n	8004858 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8004854:	2301      	movs	r3, #1
 8004856:	e0e9      	b.n	8004a2c <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	681a      	ldr	r2, [r3, #0]
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004866:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004868:	b672      	cpsid	i
}
 800486a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	691a      	ldr	r2, [r3, #16]
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004876:	b2d2      	uxtb	r2, r2
 8004878:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800487e:	1c5a      	adds	r2, r3, #1
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004888:	3b01      	subs	r3, #1
 800488a:	b29a      	uxth	r2, r3
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004894:	b29b      	uxth	r3, r3
 8004896:	3b01      	subs	r3, #1
 8004898:	b29a      	uxth	r2, r3
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800489e:	4b66      	ldr	r3, [pc, #408]	@ (8004a38 <HAL_I2C_Mem_Read+0x4c8>)
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	08db      	lsrs	r3, r3, #3
 80048a4:	4a65      	ldr	r2, [pc, #404]	@ (8004a3c <HAL_I2C_Mem_Read+0x4cc>)
 80048a6:	fba2 2303 	umull	r2, r3, r2, r3
 80048aa:	0a1a      	lsrs	r2, r3, #8
 80048ac:	4613      	mov	r3, r2
 80048ae:	009b      	lsls	r3, r3, #2
 80048b0:	4413      	add	r3, r2
 80048b2:	00da      	lsls	r2, r3, #3
 80048b4:	1ad3      	subs	r3, r2, r3
 80048b6:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80048b8:	6a3b      	ldr	r3, [r7, #32]
 80048ba:	3b01      	subs	r3, #1
 80048bc:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80048be:	6a3b      	ldr	r3, [r7, #32]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d118      	bne.n	80048f6 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	2200      	movs	r2, #0
 80048c8:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	2220      	movs	r2, #32
 80048ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	2200      	movs	r2, #0
 80048d6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048de:	f043 0220 	orr.w	r2, r3, #32
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80048e6:	b662      	cpsie	i
}
 80048e8:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	2200      	movs	r2, #0
 80048ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 80048f2:	2301      	movs	r3, #1
 80048f4:	e09a      	b.n	8004a2c <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	695b      	ldr	r3, [r3, #20]
 80048fc:	f003 0304 	and.w	r3, r3, #4
 8004900:	2b04      	cmp	r3, #4
 8004902:	d1d9      	bne.n	80048b8 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	681a      	ldr	r2, [r3, #0]
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004912:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	691a      	ldr	r2, [r3, #16]
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800491e:	b2d2      	uxtb	r2, r2
 8004920:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004926:	1c5a      	adds	r2, r3, #1
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004930:	3b01      	subs	r3, #1
 8004932:	b29a      	uxth	r2, r3
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800493c:	b29b      	uxth	r3, r3
 800493e:	3b01      	subs	r3, #1
 8004940:	b29a      	uxth	r2, r3
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004946:	b662      	cpsie	i
}
 8004948:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	691a      	ldr	r2, [r3, #16]
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004954:	b2d2      	uxtb	r2, r2
 8004956:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800495c:	1c5a      	adds	r2, r3, #1
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004966:	3b01      	subs	r3, #1
 8004968:	b29a      	uxth	r2, r3
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004972:	b29b      	uxth	r3, r3
 8004974:	3b01      	subs	r3, #1
 8004976:	b29a      	uxth	r2, r3
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800497c:	e042      	b.n	8004a04 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800497e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004980:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004982:	68f8      	ldr	r0, [r7, #12]
 8004984:	f000 fb84 	bl	8005090 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004988:	4603      	mov	r3, r0
 800498a:	2b00      	cmp	r3, #0
 800498c:	d001      	beq.n	8004992 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 800498e:	2301      	movs	r3, #1
 8004990:	e04c      	b.n	8004a2c <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	691a      	ldr	r2, [r3, #16]
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800499c:	b2d2      	uxtb	r2, r2
 800499e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049a4:	1c5a      	adds	r2, r3, #1
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80049ae:	3b01      	subs	r3, #1
 80049b0:	b29a      	uxth	r2, r3
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049ba:	b29b      	uxth	r3, r3
 80049bc:	3b01      	subs	r3, #1
 80049be:	b29a      	uxth	r2, r3
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	695b      	ldr	r3, [r3, #20]
 80049ca:	f003 0304 	and.w	r3, r3, #4
 80049ce:	2b04      	cmp	r3, #4
 80049d0:	d118      	bne.n	8004a04 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	691a      	ldr	r2, [r3, #16]
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049dc:	b2d2      	uxtb	r2, r2
 80049de:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049e4:	1c5a      	adds	r2, r3, #1
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80049ee:	3b01      	subs	r3, #1
 80049f0:	b29a      	uxth	r2, r3
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049fa:	b29b      	uxth	r3, r3
 80049fc:	3b01      	subs	r3, #1
 80049fe:	b29a      	uxth	r2, r3
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	f47f ae94 	bne.w	8004736 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	2220      	movs	r2, #32
 8004a12:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	2200      	movs	r2, #0
 8004a1a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	2200      	movs	r2, #0
 8004a22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004a26:	2300      	movs	r3, #0
 8004a28:	e000      	b.n	8004a2c <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8004a2a:	2302      	movs	r3, #2
  }
}
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	3728      	adds	r7, #40	@ 0x28
 8004a30:	46bd      	mov	sp, r7
 8004a32:	bd80      	pop	{r7, pc}
 8004a34:	00010004 	.word	0x00010004
 8004a38:	20000004 	.word	0x20000004
 8004a3c:	14f8b589 	.word	0x14f8b589

08004a40 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b088      	sub	sp, #32
 8004a44:	af02      	add	r7, sp, #8
 8004a46:	60f8      	str	r0, [r7, #12]
 8004a48:	4608      	mov	r0, r1
 8004a4a:	4611      	mov	r1, r2
 8004a4c:	461a      	mov	r2, r3
 8004a4e:	4603      	mov	r3, r0
 8004a50:	817b      	strh	r3, [r7, #10]
 8004a52:	460b      	mov	r3, r1
 8004a54:	813b      	strh	r3, [r7, #8]
 8004a56:	4613      	mov	r3, r2
 8004a58:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	681a      	ldr	r2, [r3, #0]
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004a68:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004a6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a6c:	9300      	str	r3, [sp, #0]
 8004a6e:	6a3b      	ldr	r3, [r7, #32]
 8004a70:	2200      	movs	r2, #0
 8004a72:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004a76:	68f8      	ldr	r0, [r7, #12]
 8004a78:	f000 f960 	bl	8004d3c <I2C_WaitOnFlagUntilTimeout>
 8004a7c:	4603      	mov	r3, r0
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d00d      	beq.n	8004a9e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a8c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004a90:	d103      	bne.n	8004a9a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004a98:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004a9a:	2303      	movs	r3, #3
 8004a9c:	e05f      	b.n	8004b5e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004a9e:	897b      	ldrh	r3, [r7, #10]
 8004aa0:	b2db      	uxtb	r3, r3
 8004aa2:	461a      	mov	r2, r3
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004aac:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004aae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ab0:	6a3a      	ldr	r2, [r7, #32]
 8004ab2:	492d      	ldr	r1, [pc, #180]	@ (8004b68 <I2C_RequestMemoryWrite+0x128>)
 8004ab4:	68f8      	ldr	r0, [r7, #12]
 8004ab6:	f000 f9bb 	bl	8004e30 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004aba:	4603      	mov	r3, r0
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d001      	beq.n	8004ac4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004ac0:	2301      	movs	r3, #1
 8004ac2:	e04c      	b.n	8004b5e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	617b      	str	r3, [r7, #20]
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	695b      	ldr	r3, [r3, #20]
 8004ace:	617b      	str	r3, [r7, #20]
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	699b      	ldr	r3, [r3, #24]
 8004ad6:	617b      	str	r3, [r7, #20]
 8004ad8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004ada:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004adc:	6a39      	ldr	r1, [r7, #32]
 8004ade:	68f8      	ldr	r0, [r7, #12]
 8004ae0:	f000 fa46 	bl	8004f70 <I2C_WaitOnTXEFlagUntilTimeout>
 8004ae4:	4603      	mov	r3, r0
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d00d      	beq.n	8004b06 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004aee:	2b04      	cmp	r3, #4
 8004af0:	d107      	bne.n	8004b02 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	681a      	ldr	r2, [r3, #0]
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004b00:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004b02:	2301      	movs	r3, #1
 8004b04:	e02b      	b.n	8004b5e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004b06:	88fb      	ldrh	r3, [r7, #6]
 8004b08:	2b01      	cmp	r3, #1
 8004b0a:	d105      	bne.n	8004b18 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004b0c:	893b      	ldrh	r3, [r7, #8]
 8004b0e:	b2da      	uxtb	r2, r3
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	611a      	str	r2, [r3, #16]
 8004b16:	e021      	b.n	8004b5c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004b18:	893b      	ldrh	r3, [r7, #8]
 8004b1a:	0a1b      	lsrs	r3, r3, #8
 8004b1c:	b29b      	uxth	r3, r3
 8004b1e:	b2da      	uxtb	r2, r3
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b28:	6a39      	ldr	r1, [r7, #32]
 8004b2a:	68f8      	ldr	r0, [r7, #12]
 8004b2c:	f000 fa20 	bl	8004f70 <I2C_WaitOnTXEFlagUntilTimeout>
 8004b30:	4603      	mov	r3, r0
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d00d      	beq.n	8004b52 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b3a:	2b04      	cmp	r3, #4
 8004b3c:	d107      	bne.n	8004b4e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	681a      	ldr	r2, [r3, #0]
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004b4c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004b4e:	2301      	movs	r3, #1
 8004b50:	e005      	b.n	8004b5e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004b52:	893b      	ldrh	r3, [r7, #8]
 8004b54:	b2da      	uxtb	r2, r3
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004b5c:	2300      	movs	r3, #0
}
 8004b5e:	4618      	mov	r0, r3
 8004b60:	3718      	adds	r7, #24
 8004b62:	46bd      	mov	sp, r7
 8004b64:	bd80      	pop	{r7, pc}
 8004b66:	bf00      	nop
 8004b68:	00010002 	.word	0x00010002

08004b6c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b088      	sub	sp, #32
 8004b70:	af02      	add	r7, sp, #8
 8004b72:	60f8      	str	r0, [r7, #12]
 8004b74:	4608      	mov	r0, r1
 8004b76:	4611      	mov	r1, r2
 8004b78:	461a      	mov	r2, r3
 8004b7a:	4603      	mov	r3, r0
 8004b7c:	817b      	strh	r3, [r7, #10]
 8004b7e:	460b      	mov	r3, r1
 8004b80:	813b      	strh	r3, [r7, #8]
 8004b82:	4613      	mov	r3, r2
 8004b84:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	681a      	ldr	r2, [r3, #0]
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004b94:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	681a      	ldr	r2, [r3, #0]
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004ba4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004ba6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ba8:	9300      	str	r3, [sp, #0]
 8004baa:	6a3b      	ldr	r3, [r7, #32]
 8004bac:	2200      	movs	r2, #0
 8004bae:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004bb2:	68f8      	ldr	r0, [r7, #12]
 8004bb4:	f000 f8c2 	bl	8004d3c <I2C_WaitOnFlagUntilTimeout>
 8004bb8:	4603      	mov	r3, r0
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d00d      	beq.n	8004bda <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004bc8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004bcc:	d103      	bne.n	8004bd6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004bd4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004bd6:	2303      	movs	r3, #3
 8004bd8:	e0aa      	b.n	8004d30 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004bda:	897b      	ldrh	r3, [r7, #10]
 8004bdc:	b2db      	uxtb	r3, r3
 8004bde:	461a      	mov	r2, r3
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004be8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004bea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bec:	6a3a      	ldr	r2, [r7, #32]
 8004bee:	4952      	ldr	r1, [pc, #328]	@ (8004d38 <I2C_RequestMemoryRead+0x1cc>)
 8004bf0:	68f8      	ldr	r0, [r7, #12]
 8004bf2:	f000 f91d 	bl	8004e30 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004bf6:	4603      	mov	r3, r0
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d001      	beq.n	8004c00 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004bfc:	2301      	movs	r3, #1
 8004bfe:	e097      	b.n	8004d30 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c00:	2300      	movs	r3, #0
 8004c02:	617b      	str	r3, [r7, #20]
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	695b      	ldr	r3, [r3, #20]
 8004c0a:	617b      	str	r3, [r7, #20]
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	699b      	ldr	r3, [r3, #24]
 8004c12:	617b      	str	r3, [r7, #20]
 8004c14:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c16:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c18:	6a39      	ldr	r1, [r7, #32]
 8004c1a:	68f8      	ldr	r0, [r7, #12]
 8004c1c:	f000 f9a8 	bl	8004f70 <I2C_WaitOnTXEFlagUntilTimeout>
 8004c20:	4603      	mov	r3, r0
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d00d      	beq.n	8004c42 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c2a:	2b04      	cmp	r3, #4
 8004c2c:	d107      	bne.n	8004c3e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	681a      	ldr	r2, [r3, #0]
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004c3c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004c3e:	2301      	movs	r3, #1
 8004c40:	e076      	b.n	8004d30 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004c42:	88fb      	ldrh	r3, [r7, #6]
 8004c44:	2b01      	cmp	r3, #1
 8004c46:	d105      	bne.n	8004c54 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004c48:	893b      	ldrh	r3, [r7, #8]
 8004c4a:	b2da      	uxtb	r2, r3
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	611a      	str	r2, [r3, #16]
 8004c52:	e021      	b.n	8004c98 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004c54:	893b      	ldrh	r3, [r7, #8]
 8004c56:	0a1b      	lsrs	r3, r3, #8
 8004c58:	b29b      	uxth	r3, r3
 8004c5a:	b2da      	uxtb	r2, r3
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c62:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c64:	6a39      	ldr	r1, [r7, #32]
 8004c66:	68f8      	ldr	r0, [r7, #12]
 8004c68:	f000 f982 	bl	8004f70 <I2C_WaitOnTXEFlagUntilTimeout>
 8004c6c:	4603      	mov	r3, r0
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d00d      	beq.n	8004c8e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c76:	2b04      	cmp	r3, #4
 8004c78:	d107      	bne.n	8004c8a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	681a      	ldr	r2, [r3, #0]
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004c88:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	e050      	b.n	8004d30 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004c8e:	893b      	ldrh	r3, [r7, #8]
 8004c90:	b2da      	uxtb	r2, r3
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c98:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c9a:	6a39      	ldr	r1, [r7, #32]
 8004c9c:	68f8      	ldr	r0, [r7, #12]
 8004c9e:	f000 f967 	bl	8004f70 <I2C_WaitOnTXEFlagUntilTimeout>
 8004ca2:	4603      	mov	r3, r0
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d00d      	beq.n	8004cc4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cac:	2b04      	cmp	r3, #4
 8004cae:	d107      	bne.n	8004cc0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	681a      	ldr	r2, [r3, #0]
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004cbe:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004cc0:	2301      	movs	r3, #1
 8004cc2:	e035      	b.n	8004d30 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	681a      	ldr	r2, [r3, #0]
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004cd2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004cd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cd6:	9300      	str	r3, [sp, #0]
 8004cd8:	6a3b      	ldr	r3, [r7, #32]
 8004cda:	2200      	movs	r2, #0
 8004cdc:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004ce0:	68f8      	ldr	r0, [r7, #12]
 8004ce2:	f000 f82b 	bl	8004d3c <I2C_WaitOnFlagUntilTimeout>
 8004ce6:	4603      	mov	r3, r0
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d00d      	beq.n	8004d08 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004cf6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004cfa:	d103      	bne.n	8004d04 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004d02:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004d04:	2303      	movs	r3, #3
 8004d06:	e013      	b.n	8004d30 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004d08:	897b      	ldrh	r3, [r7, #10]
 8004d0a:	b2db      	uxtb	r3, r3
 8004d0c:	f043 0301 	orr.w	r3, r3, #1
 8004d10:	b2da      	uxtb	r2, r3
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004d18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d1a:	6a3a      	ldr	r2, [r7, #32]
 8004d1c:	4906      	ldr	r1, [pc, #24]	@ (8004d38 <I2C_RequestMemoryRead+0x1cc>)
 8004d1e:	68f8      	ldr	r0, [r7, #12]
 8004d20:	f000 f886 	bl	8004e30 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004d24:	4603      	mov	r3, r0
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d001      	beq.n	8004d2e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	e000      	b.n	8004d30 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004d2e:	2300      	movs	r3, #0
}
 8004d30:	4618      	mov	r0, r3
 8004d32:	3718      	adds	r7, #24
 8004d34:	46bd      	mov	sp, r7
 8004d36:	bd80      	pop	{r7, pc}
 8004d38:	00010002 	.word	0x00010002

08004d3c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b084      	sub	sp, #16
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	60f8      	str	r0, [r7, #12]
 8004d44:	60b9      	str	r1, [r7, #8]
 8004d46:	603b      	str	r3, [r7, #0]
 8004d48:	4613      	mov	r3, r2
 8004d4a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004d4c:	e048      	b.n	8004de0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d54:	d044      	beq.n	8004de0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d56:	f7fe fd1f 	bl	8003798 <HAL_GetTick>
 8004d5a:	4602      	mov	r2, r0
 8004d5c:	69bb      	ldr	r3, [r7, #24]
 8004d5e:	1ad3      	subs	r3, r2, r3
 8004d60:	683a      	ldr	r2, [r7, #0]
 8004d62:	429a      	cmp	r2, r3
 8004d64:	d302      	bcc.n	8004d6c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d139      	bne.n	8004de0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004d6c:	68bb      	ldr	r3, [r7, #8]
 8004d6e:	0c1b      	lsrs	r3, r3, #16
 8004d70:	b2db      	uxtb	r3, r3
 8004d72:	2b01      	cmp	r3, #1
 8004d74:	d10d      	bne.n	8004d92 <I2C_WaitOnFlagUntilTimeout+0x56>
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	695b      	ldr	r3, [r3, #20]
 8004d7c:	43da      	mvns	r2, r3
 8004d7e:	68bb      	ldr	r3, [r7, #8]
 8004d80:	4013      	ands	r3, r2
 8004d82:	b29b      	uxth	r3, r3
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	bf0c      	ite	eq
 8004d88:	2301      	moveq	r3, #1
 8004d8a:	2300      	movne	r3, #0
 8004d8c:	b2db      	uxtb	r3, r3
 8004d8e:	461a      	mov	r2, r3
 8004d90:	e00c      	b.n	8004dac <I2C_WaitOnFlagUntilTimeout+0x70>
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	699b      	ldr	r3, [r3, #24]
 8004d98:	43da      	mvns	r2, r3
 8004d9a:	68bb      	ldr	r3, [r7, #8]
 8004d9c:	4013      	ands	r3, r2
 8004d9e:	b29b      	uxth	r3, r3
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	bf0c      	ite	eq
 8004da4:	2301      	moveq	r3, #1
 8004da6:	2300      	movne	r3, #0
 8004da8:	b2db      	uxtb	r3, r3
 8004daa:	461a      	mov	r2, r3
 8004dac:	79fb      	ldrb	r3, [r7, #7]
 8004dae:	429a      	cmp	r2, r3
 8004db0:	d116      	bne.n	8004de0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	2200      	movs	r2, #0
 8004db6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	2220      	movs	r2, #32
 8004dbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dcc:	f043 0220 	orr.w	r2, r3, #32
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004ddc:	2301      	movs	r3, #1
 8004dde:	e023      	b.n	8004e28 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004de0:	68bb      	ldr	r3, [r7, #8]
 8004de2:	0c1b      	lsrs	r3, r3, #16
 8004de4:	b2db      	uxtb	r3, r3
 8004de6:	2b01      	cmp	r3, #1
 8004de8:	d10d      	bne.n	8004e06 <I2C_WaitOnFlagUntilTimeout+0xca>
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	695b      	ldr	r3, [r3, #20]
 8004df0:	43da      	mvns	r2, r3
 8004df2:	68bb      	ldr	r3, [r7, #8]
 8004df4:	4013      	ands	r3, r2
 8004df6:	b29b      	uxth	r3, r3
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	bf0c      	ite	eq
 8004dfc:	2301      	moveq	r3, #1
 8004dfe:	2300      	movne	r3, #0
 8004e00:	b2db      	uxtb	r3, r3
 8004e02:	461a      	mov	r2, r3
 8004e04:	e00c      	b.n	8004e20 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	699b      	ldr	r3, [r3, #24]
 8004e0c:	43da      	mvns	r2, r3
 8004e0e:	68bb      	ldr	r3, [r7, #8]
 8004e10:	4013      	ands	r3, r2
 8004e12:	b29b      	uxth	r3, r3
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	bf0c      	ite	eq
 8004e18:	2301      	moveq	r3, #1
 8004e1a:	2300      	movne	r3, #0
 8004e1c:	b2db      	uxtb	r3, r3
 8004e1e:	461a      	mov	r2, r3
 8004e20:	79fb      	ldrb	r3, [r7, #7]
 8004e22:	429a      	cmp	r2, r3
 8004e24:	d093      	beq.n	8004d4e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004e26:	2300      	movs	r3, #0
}
 8004e28:	4618      	mov	r0, r3
 8004e2a:	3710      	adds	r7, #16
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	bd80      	pop	{r7, pc}

08004e30 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b084      	sub	sp, #16
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	60f8      	str	r0, [r7, #12]
 8004e38:	60b9      	str	r1, [r7, #8]
 8004e3a:	607a      	str	r2, [r7, #4]
 8004e3c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004e3e:	e071      	b.n	8004f24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	695b      	ldr	r3, [r3, #20]
 8004e46:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e4a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e4e:	d123      	bne.n	8004e98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	681a      	ldr	r2, [r3, #0]
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004e5e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004e68:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	2220      	movs	r2, #32
 8004e74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e84:	f043 0204 	orr.w	r2, r3, #4
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	2200      	movs	r2, #0
 8004e90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004e94:	2301      	movs	r3, #1
 8004e96:	e067      	b.n	8004f68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e9e:	d041      	beq.n	8004f24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ea0:	f7fe fc7a 	bl	8003798 <HAL_GetTick>
 8004ea4:	4602      	mov	r2, r0
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	1ad3      	subs	r3, r2, r3
 8004eaa:	687a      	ldr	r2, [r7, #4]
 8004eac:	429a      	cmp	r2, r3
 8004eae:	d302      	bcc.n	8004eb6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d136      	bne.n	8004f24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004eb6:	68bb      	ldr	r3, [r7, #8]
 8004eb8:	0c1b      	lsrs	r3, r3, #16
 8004eba:	b2db      	uxtb	r3, r3
 8004ebc:	2b01      	cmp	r3, #1
 8004ebe:	d10c      	bne.n	8004eda <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	695b      	ldr	r3, [r3, #20]
 8004ec6:	43da      	mvns	r2, r3
 8004ec8:	68bb      	ldr	r3, [r7, #8]
 8004eca:	4013      	ands	r3, r2
 8004ecc:	b29b      	uxth	r3, r3
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	bf14      	ite	ne
 8004ed2:	2301      	movne	r3, #1
 8004ed4:	2300      	moveq	r3, #0
 8004ed6:	b2db      	uxtb	r3, r3
 8004ed8:	e00b      	b.n	8004ef2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	699b      	ldr	r3, [r3, #24]
 8004ee0:	43da      	mvns	r2, r3
 8004ee2:	68bb      	ldr	r3, [r7, #8]
 8004ee4:	4013      	ands	r3, r2
 8004ee6:	b29b      	uxth	r3, r3
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	bf14      	ite	ne
 8004eec:	2301      	movne	r3, #1
 8004eee:	2300      	moveq	r3, #0
 8004ef0:	b2db      	uxtb	r3, r3
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d016      	beq.n	8004f24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	2200      	movs	r2, #0
 8004efa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	2220      	movs	r2, #32
 8004f00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	2200      	movs	r2, #0
 8004f08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f10:	f043 0220 	orr.w	r2, r3, #32
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004f20:	2301      	movs	r3, #1
 8004f22:	e021      	b.n	8004f68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004f24:	68bb      	ldr	r3, [r7, #8]
 8004f26:	0c1b      	lsrs	r3, r3, #16
 8004f28:	b2db      	uxtb	r3, r3
 8004f2a:	2b01      	cmp	r3, #1
 8004f2c:	d10c      	bne.n	8004f48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	695b      	ldr	r3, [r3, #20]
 8004f34:	43da      	mvns	r2, r3
 8004f36:	68bb      	ldr	r3, [r7, #8]
 8004f38:	4013      	ands	r3, r2
 8004f3a:	b29b      	uxth	r3, r3
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	bf14      	ite	ne
 8004f40:	2301      	movne	r3, #1
 8004f42:	2300      	moveq	r3, #0
 8004f44:	b2db      	uxtb	r3, r3
 8004f46:	e00b      	b.n	8004f60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	699b      	ldr	r3, [r3, #24]
 8004f4e:	43da      	mvns	r2, r3
 8004f50:	68bb      	ldr	r3, [r7, #8]
 8004f52:	4013      	ands	r3, r2
 8004f54:	b29b      	uxth	r3, r3
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	bf14      	ite	ne
 8004f5a:	2301      	movne	r3, #1
 8004f5c:	2300      	moveq	r3, #0
 8004f5e:	b2db      	uxtb	r3, r3
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	f47f af6d 	bne.w	8004e40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004f66:	2300      	movs	r3, #0
}
 8004f68:	4618      	mov	r0, r3
 8004f6a:	3710      	adds	r7, #16
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	bd80      	pop	{r7, pc}

08004f70 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b084      	sub	sp, #16
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	60f8      	str	r0, [r7, #12]
 8004f78:	60b9      	str	r1, [r7, #8]
 8004f7a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004f7c:	e034      	b.n	8004fe8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004f7e:	68f8      	ldr	r0, [r7, #12]
 8004f80:	f000 f8e3 	bl	800514a <I2C_IsAcknowledgeFailed>
 8004f84:	4603      	mov	r3, r0
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d001      	beq.n	8004f8e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004f8a:	2301      	movs	r3, #1
 8004f8c:	e034      	b.n	8004ff8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f8e:	68bb      	ldr	r3, [r7, #8]
 8004f90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f94:	d028      	beq.n	8004fe8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f96:	f7fe fbff 	bl	8003798 <HAL_GetTick>
 8004f9a:	4602      	mov	r2, r0
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	1ad3      	subs	r3, r2, r3
 8004fa0:	68ba      	ldr	r2, [r7, #8]
 8004fa2:	429a      	cmp	r2, r3
 8004fa4:	d302      	bcc.n	8004fac <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004fa6:	68bb      	ldr	r3, [r7, #8]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d11d      	bne.n	8004fe8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	695b      	ldr	r3, [r3, #20]
 8004fb2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004fb6:	2b80      	cmp	r3, #128	@ 0x80
 8004fb8:	d016      	beq.n	8004fe8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	2220      	movs	r2, #32
 8004fc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	2200      	movs	r2, #0
 8004fcc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fd4:	f043 0220 	orr.w	r2, r3, #32
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	2200      	movs	r2, #0
 8004fe0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004fe4:	2301      	movs	r3, #1
 8004fe6:	e007      	b.n	8004ff8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	695b      	ldr	r3, [r3, #20]
 8004fee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ff2:	2b80      	cmp	r3, #128	@ 0x80
 8004ff4:	d1c3      	bne.n	8004f7e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004ff6:	2300      	movs	r3, #0
}
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	3710      	adds	r7, #16
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	bd80      	pop	{r7, pc}

08005000 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005000:	b580      	push	{r7, lr}
 8005002:	b084      	sub	sp, #16
 8005004:	af00      	add	r7, sp, #0
 8005006:	60f8      	str	r0, [r7, #12]
 8005008:	60b9      	str	r1, [r7, #8]
 800500a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800500c:	e034      	b.n	8005078 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800500e:	68f8      	ldr	r0, [r7, #12]
 8005010:	f000 f89b 	bl	800514a <I2C_IsAcknowledgeFailed>
 8005014:	4603      	mov	r3, r0
 8005016:	2b00      	cmp	r3, #0
 8005018:	d001      	beq.n	800501e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800501a:	2301      	movs	r3, #1
 800501c:	e034      	b.n	8005088 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800501e:	68bb      	ldr	r3, [r7, #8]
 8005020:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005024:	d028      	beq.n	8005078 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005026:	f7fe fbb7 	bl	8003798 <HAL_GetTick>
 800502a:	4602      	mov	r2, r0
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	1ad3      	subs	r3, r2, r3
 8005030:	68ba      	ldr	r2, [r7, #8]
 8005032:	429a      	cmp	r2, r3
 8005034:	d302      	bcc.n	800503c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005036:	68bb      	ldr	r3, [r7, #8]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d11d      	bne.n	8005078 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	695b      	ldr	r3, [r3, #20]
 8005042:	f003 0304 	and.w	r3, r3, #4
 8005046:	2b04      	cmp	r3, #4
 8005048:	d016      	beq.n	8005078 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	2200      	movs	r2, #0
 800504e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	2220      	movs	r2, #32
 8005054:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	2200      	movs	r2, #0
 800505c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005064:	f043 0220 	orr.w	r2, r3, #32
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	2200      	movs	r2, #0
 8005070:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005074:	2301      	movs	r3, #1
 8005076:	e007      	b.n	8005088 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	695b      	ldr	r3, [r3, #20]
 800507e:	f003 0304 	and.w	r3, r3, #4
 8005082:	2b04      	cmp	r3, #4
 8005084:	d1c3      	bne.n	800500e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005086:	2300      	movs	r3, #0
}
 8005088:	4618      	mov	r0, r3
 800508a:	3710      	adds	r7, #16
 800508c:	46bd      	mov	sp, r7
 800508e:	bd80      	pop	{r7, pc}

08005090 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005090:	b580      	push	{r7, lr}
 8005092:	b084      	sub	sp, #16
 8005094:	af00      	add	r7, sp, #0
 8005096:	60f8      	str	r0, [r7, #12]
 8005098:	60b9      	str	r1, [r7, #8]
 800509a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800509c:	e049      	b.n	8005132 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	695b      	ldr	r3, [r3, #20]
 80050a4:	f003 0310 	and.w	r3, r3, #16
 80050a8:	2b10      	cmp	r3, #16
 80050aa:	d119      	bne.n	80050e0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f06f 0210 	mvn.w	r2, #16
 80050b4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	2200      	movs	r2, #0
 80050ba:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	2220      	movs	r2, #32
 80050c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	2200      	movs	r2, #0
 80050c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	2200      	movs	r2, #0
 80050d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80050dc:	2301      	movs	r3, #1
 80050de:	e030      	b.n	8005142 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050e0:	f7fe fb5a 	bl	8003798 <HAL_GetTick>
 80050e4:	4602      	mov	r2, r0
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	1ad3      	subs	r3, r2, r3
 80050ea:	68ba      	ldr	r2, [r7, #8]
 80050ec:	429a      	cmp	r2, r3
 80050ee:	d302      	bcc.n	80050f6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80050f0:	68bb      	ldr	r3, [r7, #8]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d11d      	bne.n	8005132 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	695b      	ldr	r3, [r3, #20]
 80050fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005100:	2b40      	cmp	r3, #64	@ 0x40
 8005102:	d016      	beq.n	8005132 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	2200      	movs	r2, #0
 8005108:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	2220      	movs	r2, #32
 800510e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	2200      	movs	r2, #0
 8005116:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800511e:	f043 0220 	orr.w	r2, r3, #32
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	2200      	movs	r2, #0
 800512a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800512e:	2301      	movs	r3, #1
 8005130:	e007      	b.n	8005142 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	695b      	ldr	r3, [r3, #20]
 8005138:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800513c:	2b40      	cmp	r3, #64	@ 0x40
 800513e:	d1ae      	bne.n	800509e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005140:	2300      	movs	r3, #0
}
 8005142:	4618      	mov	r0, r3
 8005144:	3710      	adds	r7, #16
 8005146:	46bd      	mov	sp, r7
 8005148:	bd80      	pop	{r7, pc}

0800514a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800514a:	b480      	push	{r7}
 800514c:	b083      	sub	sp, #12
 800514e:	af00      	add	r7, sp, #0
 8005150:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	695b      	ldr	r3, [r3, #20]
 8005158:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800515c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005160:	d11b      	bne.n	800519a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800516a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2200      	movs	r2, #0
 8005170:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	2220      	movs	r2, #32
 8005176:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	2200      	movs	r2, #0
 800517e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005186:	f043 0204 	orr.w	r2, r3, #4
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2200      	movs	r2, #0
 8005192:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8005196:	2301      	movs	r3, #1
 8005198:	e000      	b.n	800519c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800519a:	2300      	movs	r3, #0
}
 800519c:	4618      	mov	r0, r3
 800519e:	370c      	adds	r7, #12
 80051a0:	46bd      	mov	sp, r7
 80051a2:	bc80      	pop	{r7}
 80051a4:	4770      	bx	lr
	...

080051a8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b086      	sub	sp, #24
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d101      	bne.n	80051ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80051b6:	2301      	movs	r3, #1
 80051b8:	e272      	b.n	80056a0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f003 0301 	and.w	r3, r3, #1
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	f000 8087 	beq.w	80052d6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80051c8:	4b92      	ldr	r3, [pc, #584]	@ (8005414 <HAL_RCC_OscConfig+0x26c>)
 80051ca:	685b      	ldr	r3, [r3, #4]
 80051cc:	f003 030c 	and.w	r3, r3, #12
 80051d0:	2b04      	cmp	r3, #4
 80051d2:	d00c      	beq.n	80051ee <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80051d4:	4b8f      	ldr	r3, [pc, #572]	@ (8005414 <HAL_RCC_OscConfig+0x26c>)
 80051d6:	685b      	ldr	r3, [r3, #4]
 80051d8:	f003 030c 	and.w	r3, r3, #12
 80051dc:	2b08      	cmp	r3, #8
 80051de:	d112      	bne.n	8005206 <HAL_RCC_OscConfig+0x5e>
 80051e0:	4b8c      	ldr	r3, [pc, #560]	@ (8005414 <HAL_RCC_OscConfig+0x26c>)
 80051e2:	685b      	ldr	r3, [r3, #4]
 80051e4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80051e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80051ec:	d10b      	bne.n	8005206 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80051ee:	4b89      	ldr	r3, [pc, #548]	@ (8005414 <HAL_RCC_OscConfig+0x26c>)
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d06c      	beq.n	80052d4 <HAL_RCC_OscConfig+0x12c>
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	685b      	ldr	r3, [r3, #4]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d168      	bne.n	80052d4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005202:	2301      	movs	r3, #1
 8005204:	e24c      	b.n	80056a0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	685b      	ldr	r3, [r3, #4]
 800520a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800520e:	d106      	bne.n	800521e <HAL_RCC_OscConfig+0x76>
 8005210:	4b80      	ldr	r3, [pc, #512]	@ (8005414 <HAL_RCC_OscConfig+0x26c>)
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	4a7f      	ldr	r2, [pc, #508]	@ (8005414 <HAL_RCC_OscConfig+0x26c>)
 8005216:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800521a:	6013      	str	r3, [r2, #0]
 800521c:	e02e      	b.n	800527c <HAL_RCC_OscConfig+0xd4>
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	685b      	ldr	r3, [r3, #4]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d10c      	bne.n	8005240 <HAL_RCC_OscConfig+0x98>
 8005226:	4b7b      	ldr	r3, [pc, #492]	@ (8005414 <HAL_RCC_OscConfig+0x26c>)
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	4a7a      	ldr	r2, [pc, #488]	@ (8005414 <HAL_RCC_OscConfig+0x26c>)
 800522c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005230:	6013      	str	r3, [r2, #0]
 8005232:	4b78      	ldr	r3, [pc, #480]	@ (8005414 <HAL_RCC_OscConfig+0x26c>)
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	4a77      	ldr	r2, [pc, #476]	@ (8005414 <HAL_RCC_OscConfig+0x26c>)
 8005238:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800523c:	6013      	str	r3, [r2, #0]
 800523e:	e01d      	b.n	800527c <HAL_RCC_OscConfig+0xd4>
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	685b      	ldr	r3, [r3, #4]
 8005244:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005248:	d10c      	bne.n	8005264 <HAL_RCC_OscConfig+0xbc>
 800524a:	4b72      	ldr	r3, [pc, #456]	@ (8005414 <HAL_RCC_OscConfig+0x26c>)
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	4a71      	ldr	r2, [pc, #452]	@ (8005414 <HAL_RCC_OscConfig+0x26c>)
 8005250:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005254:	6013      	str	r3, [r2, #0]
 8005256:	4b6f      	ldr	r3, [pc, #444]	@ (8005414 <HAL_RCC_OscConfig+0x26c>)
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	4a6e      	ldr	r2, [pc, #440]	@ (8005414 <HAL_RCC_OscConfig+0x26c>)
 800525c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005260:	6013      	str	r3, [r2, #0]
 8005262:	e00b      	b.n	800527c <HAL_RCC_OscConfig+0xd4>
 8005264:	4b6b      	ldr	r3, [pc, #428]	@ (8005414 <HAL_RCC_OscConfig+0x26c>)
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	4a6a      	ldr	r2, [pc, #424]	@ (8005414 <HAL_RCC_OscConfig+0x26c>)
 800526a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800526e:	6013      	str	r3, [r2, #0]
 8005270:	4b68      	ldr	r3, [pc, #416]	@ (8005414 <HAL_RCC_OscConfig+0x26c>)
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	4a67      	ldr	r2, [pc, #412]	@ (8005414 <HAL_RCC_OscConfig+0x26c>)
 8005276:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800527a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	685b      	ldr	r3, [r3, #4]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d013      	beq.n	80052ac <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005284:	f7fe fa88 	bl	8003798 <HAL_GetTick>
 8005288:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800528a:	e008      	b.n	800529e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800528c:	f7fe fa84 	bl	8003798 <HAL_GetTick>
 8005290:	4602      	mov	r2, r0
 8005292:	693b      	ldr	r3, [r7, #16]
 8005294:	1ad3      	subs	r3, r2, r3
 8005296:	2b64      	cmp	r3, #100	@ 0x64
 8005298:	d901      	bls.n	800529e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800529a:	2303      	movs	r3, #3
 800529c:	e200      	b.n	80056a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800529e:	4b5d      	ldr	r3, [pc, #372]	@ (8005414 <HAL_RCC_OscConfig+0x26c>)
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d0f0      	beq.n	800528c <HAL_RCC_OscConfig+0xe4>
 80052aa:	e014      	b.n	80052d6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052ac:	f7fe fa74 	bl	8003798 <HAL_GetTick>
 80052b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80052b2:	e008      	b.n	80052c6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80052b4:	f7fe fa70 	bl	8003798 <HAL_GetTick>
 80052b8:	4602      	mov	r2, r0
 80052ba:	693b      	ldr	r3, [r7, #16]
 80052bc:	1ad3      	subs	r3, r2, r3
 80052be:	2b64      	cmp	r3, #100	@ 0x64
 80052c0:	d901      	bls.n	80052c6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80052c2:	2303      	movs	r3, #3
 80052c4:	e1ec      	b.n	80056a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80052c6:	4b53      	ldr	r3, [pc, #332]	@ (8005414 <HAL_RCC_OscConfig+0x26c>)
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d1f0      	bne.n	80052b4 <HAL_RCC_OscConfig+0x10c>
 80052d2:	e000      	b.n	80052d6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80052d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f003 0302 	and.w	r3, r3, #2
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d063      	beq.n	80053aa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80052e2:	4b4c      	ldr	r3, [pc, #304]	@ (8005414 <HAL_RCC_OscConfig+0x26c>)
 80052e4:	685b      	ldr	r3, [r3, #4]
 80052e6:	f003 030c 	and.w	r3, r3, #12
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d00b      	beq.n	8005306 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80052ee:	4b49      	ldr	r3, [pc, #292]	@ (8005414 <HAL_RCC_OscConfig+0x26c>)
 80052f0:	685b      	ldr	r3, [r3, #4]
 80052f2:	f003 030c 	and.w	r3, r3, #12
 80052f6:	2b08      	cmp	r3, #8
 80052f8:	d11c      	bne.n	8005334 <HAL_RCC_OscConfig+0x18c>
 80052fa:	4b46      	ldr	r3, [pc, #280]	@ (8005414 <HAL_RCC_OscConfig+0x26c>)
 80052fc:	685b      	ldr	r3, [r3, #4]
 80052fe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005302:	2b00      	cmp	r3, #0
 8005304:	d116      	bne.n	8005334 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005306:	4b43      	ldr	r3, [pc, #268]	@ (8005414 <HAL_RCC_OscConfig+0x26c>)
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f003 0302 	and.w	r3, r3, #2
 800530e:	2b00      	cmp	r3, #0
 8005310:	d005      	beq.n	800531e <HAL_RCC_OscConfig+0x176>
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	691b      	ldr	r3, [r3, #16]
 8005316:	2b01      	cmp	r3, #1
 8005318:	d001      	beq.n	800531e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800531a:	2301      	movs	r3, #1
 800531c:	e1c0      	b.n	80056a0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800531e:	4b3d      	ldr	r3, [pc, #244]	@ (8005414 <HAL_RCC_OscConfig+0x26c>)
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	695b      	ldr	r3, [r3, #20]
 800532a:	00db      	lsls	r3, r3, #3
 800532c:	4939      	ldr	r1, [pc, #228]	@ (8005414 <HAL_RCC_OscConfig+0x26c>)
 800532e:	4313      	orrs	r3, r2
 8005330:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005332:	e03a      	b.n	80053aa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	691b      	ldr	r3, [r3, #16]
 8005338:	2b00      	cmp	r3, #0
 800533a:	d020      	beq.n	800537e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800533c:	4b36      	ldr	r3, [pc, #216]	@ (8005418 <HAL_RCC_OscConfig+0x270>)
 800533e:	2201      	movs	r2, #1
 8005340:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005342:	f7fe fa29 	bl	8003798 <HAL_GetTick>
 8005346:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005348:	e008      	b.n	800535c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800534a:	f7fe fa25 	bl	8003798 <HAL_GetTick>
 800534e:	4602      	mov	r2, r0
 8005350:	693b      	ldr	r3, [r7, #16]
 8005352:	1ad3      	subs	r3, r2, r3
 8005354:	2b02      	cmp	r3, #2
 8005356:	d901      	bls.n	800535c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005358:	2303      	movs	r3, #3
 800535a:	e1a1      	b.n	80056a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800535c:	4b2d      	ldr	r3, [pc, #180]	@ (8005414 <HAL_RCC_OscConfig+0x26c>)
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f003 0302 	and.w	r3, r3, #2
 8005364:	2b00      	cmp	r3, #0
 8005366:	d0f0      	beq.n	800534a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005368:	4b2a      	ldr	r3, [pc, #168]	@ (8005414 <HAL_RCC_OscConfig+0x26c>)
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	695b      	ldr	r3, [r3, #20]
 8005374:	00db      	lsls	r3, r3, #3
 8005376:	4927      	ldr	r1, [pc, #156]	@ (8005414 <HAL_RCC_OscConfig+0x26c>)
 8005378:	4313      	orrs	r3, r2
 800537a:	600b      	str	r3, [r1, #0]
 800537c:	e015      	b.n	80053aa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800537e:	4b26      	ldr	r3, [pc, #152]	@ (8005418 <HAL_RCC_OscConfig+0x270>)
 8005380:	2200      	movs	r2, #0
 8005382:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005384:	f7fe fa08 	bl	8003798 <HAL_GetTick>
 8005388:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800538a:	e008      	b.n	800539e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800538c:	f7fe fa04 	bl	8003798 <HAL_GetTick>
 8005390:	4602      	mov	r2, r0
 8005392:	693b      	ldr	r3, [r7, #16]
 8005394:	1ad3      	subs	r3, r2, r3
 8005396:	2b02      	cmp	r3, #2
 8005398:	d901      	bls.n	800539e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800539a:	2303      	movs	r3, #3
 800539c:	e180      	b.n	80056a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800539e:	4b1d      	ldr	r3, [pc, #116]	@ (8005414 <HAL_RCC_OscConfig+0x26c>)
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f003 0302 	and.w	r3, r3, #2
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d1f0      	bne.n	800538c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f003 0308 	and.w	r3, r3, #8
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d03a      	beq.n	800542c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	699b      	ldr	r3, [r3, #24]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d019      	beq.n	80053f2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80053be:	4b17      	ldr	r3, [pc, #92]	@ (800541c <HAL_RCC_OscConfig+0x274>)
 80053c0:	2201      	movs	r2, #1
 80053c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80053c4:	f7fe f9e8 	bl	8003798 <HAL_GetTick>
 80053c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80053ca:	e008      	b.n	80053de <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80053cc:	f7fe f9e4 	bl	8003798 <HAL_GetTick>
 80053d0:	4602      	mov	r2, r0
 80053d2:	693b      	ldr	r3, [r7, #16]
 80053d4:	1ad3      	subs	r3, r2, r3
 80053d6:	2b02      	cmp	r3, #2
 80053d8:	d901      	bls.n	80053de <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80053da:	2303      	movs	r3, #3
 80053dc:	e160      	b.n	80056a0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80053de:	4b0d      	ldr	r3, [pc, #52]	@ (8005414 <HAL_RCC_OscConfig+0x26c>)
 80053e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053e2:	f003 0302 	and.w	r3, r3, #2
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d0f0      	beq.n	80053cc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80053ea:	2001      	movs	r0, #1
 80053ec:	f000 face 	bl	800598c <RCC_Delay>
 80053f0:	e01c      	b.n	800542c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80053f2:	4b0a      	ldr	r3, [pc, #40]	@ (800541c <HAL_RCC_OscConfig+0x274>)
 80053f4:	2200      	movs	r2, #0
 80053f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80053f8:	f7fe f9ce 	bl	8003798 <HAL_GetTick>
 80053fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80053fe:	e00f      	b.n	8005420 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005400:	f7fe f9ca 	bl	8003798 <HAL_GetTick>
 8005404:	4602      	mov	r2, r0
 8005406:	693b      	ldr	r3, [r7, #16]
 8005408:	1ad3      	subs	r3, r2, r3
 800540a:	2b02      	cmp	r3, #2
 800540c:	d908      	bls.n	8005420 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800540e:	2303      	movs	r3, #3
 8005410:	e146      	b.n	80056a0 <HAL_RCC_OscConfig+0x4f8>
 8005412:	bf00      	nop
 8005414:	40021000 	.word	0x40021000
 8005418:	42420000 	.word	0x42420000
 800541c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005420:	4b92      	ldr	r3, [pc, #584]	@ (800566c <HAL_RCC_OscConfig+0x4c4>)
 8005422:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005424:	f003 0302 	and.w	r3, r3, #2
 8005428:	2b00      	cmp	r3, #0
 800542a:	d1e9      	bne.n	8005400 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f003 0304 	and.w	r3, r3, #4
 8005434:	2b00      	cmp	r3, #0
 8005436:	f000 80a6 	beq.w	8005586 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800543a:	2300      	movs	r3, #0
 800543c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800543e:	4b8b      	ldr	r3, [pc, #556]	@ (800566c <HAL_RCC_OscConfig+0x4c4>)
 8005440:	69db      	ldr	r3, [r3, #28]
 8005442:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005446:	2b00      	cmp	r3, #0
 8005448:	d10d      	bne.n	8005466 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800544a:	4b88      	ldr	r3, [pc, #544]	@ (800566c <HAL_RCC_OscConfig+0x4c4>)
 800544c:	69db      	ldr	r3, [r3, #28]
 800544e:	4a87      	ldr	r2, [pc, #540]	@ (800566c <HAL_RCC_OscConfig+0x4c4>)
 8005450:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005454:	61d3      	str	r3, [r2, #28]
 8005456:	4b85      	ldr	r3, [pc, #532]	@ (800566c <HAL_RCC_OscConfig+0x4c4>)
 8005458:	69db      	ldr	r3, [r3, #28]
 800545a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800545e:	60bb      	str	r3, [r7, #8]
 8005460:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005462:	2301      	movs	r3, #1
 8005464:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005466:	4b82      	ldr	r3, [pc, #520]	@ (8005670 <HAL_RCC_OscConfig+0x4c8>)
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800546e:	2b00      	cmp	r3, #0
 8005470:	d118      	bne.n	80054a4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005472:	4b7f      	ldr	r3, [pc, #508]	@ (8005670 <HAL_RCC_OscConfig+0x4c8>)
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	4a7e      	ldr	r2, [pc, #504]	@ (8005670 <HAL_RCC_OscConfig+0x4c8>)
 8005478:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800547c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800547e:	f7fe f98b 	bl	8003798 <HAL_GetTick>
 8005482:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005484:	e008      	b.n	8005498 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005486:	f7fe f987 	bl	8003798 <HAL_GetTick>
 800548a:	4602      	mov	r2, r0
 800548c:	693b      	ldr	r3, [r7, #16]
 800548e:	1ad3      	subs	r3, r2, r3
 8005490:	2b64      	cmp	r3, #100	@ 0x64
 8005492:	d901      	bls.n	8005498 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005494:	2303      	movs	r3, #3
 8005496:	e103      	b.n	80056a0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005498:	4b75      	ldr	r3, [pc, #468]	@ (8005670 <HAL_RCC_OscConfig+0x4c8>)
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d0f0      	beq.n	8005486 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	68db      	ldr	r3, [r3, #12]
 80054a8:	2b01      	cmp	r3, #1
 80054aa:	d106      	bne.n	80054ba <HAL_RCC_OscConfig+0x312>
 80054ac:	4b6f      	ldr	r3, [pc, #444]	@ (800566c <HAL_RCC_OscConfig+0x4c4>)
 80054ae:	6a1b      	ldr	r3, [r3, #32]
 80054b0:	4a6e      	ldr	r2, [pc, #440]	@ (800566c <HAL_RCC_OscConfig+0x4c4>)
 80054b2:	f043 0301 	orr.w	r3, r3, #1
 80054b6:	6213      	str	r3, [r2, #32]
 80054b8:	e02d      	b.n	8005516 <HAL_RCC_OscConfig+0x36e>
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	68db      	ldr	r3, [r3, #12]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d10c      	bne.n	80054dc <HAL_RCC_OscConfig+0x334>
 80054c2:	4b6a      	ldr	r3, [pc, #424]	@ (800566c <HAL_RCC_OscConfig+0x4c4>)
 80054c4:	6a1b      	ldr	r3, [r3, #32]
 80054c6:	4a69      	ldr	r2, [pc, #420]	@ (800566c <HAL_RCC_OscConfig+0x4c4>)
 80054c8:	f023 0301 	bic.w	r3, r3, #1
 80054cc:	6213      	str	r3, [r2, #32]
 80054ce:	4b67      	ldr	r3, [pc, #412]	@ (800566c <HAL_RCC_OscConfig+0x4c4>)
 80054d0:	6a1b      	ldr	r3, [r3, #32]
 80054d2:	4a66      	ldr	r2, [pc, #408]	@ (800566c <HAL_RCC_OscConfig+0x4c4>)
 80054d4:	f023 0304 	bic.w	r3, r3, #4
 80054d8:	6213      	str	r3, [r2, #32]
 80054da:	e01c      	b.n	8005516 <HAL_RCC_OscConfig+0x36e>
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	68db      	ldr	r3, [r3, #12]
 80054e0:	2b05      	cmp	r3, #5
 80054e2:	d10c      	bne.n	80054fe <HAL_RCC_OscConfig+0x356>
 80054e4:	4b61      	ldr	r3, [pc, #388]	@ (800566c <HAL_RCC_OscConfig+0x4c4>)
 80054e6:	6a1b      	ldr	r3, [r3, #32]
 80054e8:	4a60      	ldr	r2, [pc, #384]	@ (800566c <HAL_RCC_OscConfig+0x4c4>)
 80054ea:	f043 0304 	orr.w	r3, r3, #4
 80054ee:	6213      	str	r3, [r2, #32]
 80054f0:	4b5e      	ldr	r3, [pc, #376]	@ (800566c <HAL_RCC_OscConfig+0x4c4>)
 80054f2:	6a1b      	ldr	r3, [r3, #32]
 80054f4:	4a5d      	ldr	r2, [pc, #372]	@ (800566c <HAL_RCC_OscConfig+0x4c4>)
 80054f6:	f043 0301 	orr.w	r3, r3, #1
 80054fa:	6213      	str	r3, [r2, #32]
 80054fc:	e00b      	b.n	8005516 <HAL_RCC_OscConfig+0x36e>
 80054fe:	4b5b      	ldr	r3, [pc, #364]	@ (800566c <HAL_RCC_OscConfig+0x4c4>)
 8005500:	6a1b      	ldr	r3, [r3, #32]
 8005502:	4a5a      	ldr	r2, [pc, #360]	@ (800566c <HAL_RCC_OscConfig+0x4c4>)
 8005504:	f023 0301 	bic.w	r3, r3, #1
 8005508:	6213      	str	r3, [r2, #32]
 800550a:	4b58      	ldr	r3, [pc, #352]	@ (800566c <HAL_RCC_OscConfig+0x4c4>)
 800550c:	6a1b      	ldr	r3, [r3, #32]
 800550e:	4a57      	ldr	r2, [pc, #348]	@ (800566c <HAL_RCC_OscConfig+0x4c4>)
 8005510:	f023 0304 	bic.w	r3, r3, #4
 8005514:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	68db      	ldr	r3, [r3, #12]
 800551a:	2b00      	cmp	r3, #0
 800551c:	d015      	beq.n	800554a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800551e:	f7fe f93b 	bl	8003798 <HAL_GetTick>
 8005522:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005524:	e00a      	b.n	800553c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005526:	f7fe f937 	bl	8003798 <HAL_GetTick>
 800552a:	4602      	mov	r2, r0
 800552c:	693b      	ldr	r3, [r7, #16]
 800552e:	1ad3      	subs	r3, r2, r3
 8005530:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005534:	4293      	cmp	r3, r2
 8005536:	d901      	bls.n	800553c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005538:	2303      	movs	r3, #3
 800553a:	e0b1      	b.n	80056a0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800553c:	4b4b      	ldr	r3, [pc, #300]	@ (800566c <HAL_RCC_OscConfig+0x4c4>)
 800553e:	6a1b      	ldr	r3, [r3, #32]
 8005540:	f003 0302 	and.w	r3, r3, #2
 8005544:	2b00      	cmp	r3, #0
 8005546:	d0ee      	beq.n	8005526 <HAL_RCC_OscConfig+0x37e>
 8005548:	e014      	b.n	8005574 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800554a:	f7fe f925 	bl	8003798 <HAL_GetTick>
 800554e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005550:	e00a      	b.n	8005568 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005552:	f7fe f921 	bl	8003798 <HAL_GetTick>
 8005556:	4602      	mov	r2, r0
 8005558:	693b      	ldr	r3, [r7, #16]
 800555a:	1ad3      	subs	r3, r2, r3
 800555c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005560:	4293      	cmp	r3, r2
 8005562:	d901      	bls.n	8005568 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005564:	2303      	movs	r3, #3
 8005566:	e09b      	b.n	80056a0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005568:	4b40      	ldr	r3, [pc, #256]	@ (800566c <HAL_RCC_OscConfig+0x4c4>)
 800556a:	6a1b      	ldr	r3, [r3, #32]
 800556c:	f003 0302 	and.w	r3, r3, #2
 8005570:	2b00      	cmp	r3, #0
 8005572:	d1ee      	bne.n	8005552 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005574:	7dfb      	ldrb	r3, [r7, #23]
 8005576:	2b01      	cmp	r3, #1
 8005578:	d105      	bne.n	8005586 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800557a:	4b3c      	ldr	r3, [pc, #240]	@ (800566c <HAL_RCC_OscConfig+0x4c4>)
 800557c:	69db      	ldr	r3, [r3, #28]
 800557e:	4a3b      	ldr	r2, [pc, #236]	@ (800566c <HAL_RCC_OscConfig+0x4c4>)
 8005580:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005584:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	69db      	ldr	r3, [r3, #28]
 800558a:	2b00      	cmp	r3, #0
 800558c:	f000 8087 	beq.w	800569e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005590:	4b36      	ldr	r3, [pc, #216]	@ (800566c <HAL_RCC_OscConfig+0x4c4>)
 8005592:	685b      	ldr	r3, [r3, #4]
 8005594:	f003 030c 	and.w	r3, r3, #12
 8005598:	2b08      	cmp	r3, #8
 800559a:	d061      	beq.n	8005660 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	69db      	ldr	r3, [r3, #28]
 80055a0:	2b02      	cmp	r3, #2
 80055a2:	d146      	bne.n	8005632 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80055a4:	4b33      	ldr	r3, [pc, #204]	@ (8005674 <HAL_RCC_OscConfig+0x4cc>)
 80055a6:	2200      	movs	r2, #0
 80055a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055aa:	f7fe f8f5 	bl	8003798 <HAL_GetTick>
 80055ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80055b0:	e008      	b.n	80055c4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80055b2:	f7fe f8f1 	bl	8003798 <HAL_GetTick>
 80055b6:	4602      	mov	r2, r0
 80055b8:	693b      	ldr	r3, [r7, #16]
 80055ba:	1ad3      	subs	r3, r2, r3
 80055bc:	2b02      	cmp	r3, #2
 80055be:	d901      	bls.n	80055c4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80055c0:	2303      	movs	r3, #3
 80055c2:	e06d      	b.n	80056a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80055c4:	4b29      	ldr	r3, [pc, #164]	@ (800566c <HAL_RCC_OscConfig+0x4c4>)
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d1f0      	bne.n	80055b2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	6a1b      	ldr	r3, [r3, #32]
 80055d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80055d8:	d108      	bne.n	80055ec <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80055da:	4b24      	ldr	r3, [pc, #144]	@ (800566c <HAL_RCC_OscConfig+0x4c4>)
 80055dc:	685b      	ldr	r3, [r3, #4]
 80055de:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	689b      	ldr	r3, [r3, #8]
 80055e6:	4921      	ldr	r1, [pc, #132]	@ (800566c <HAL_RCC_OscConfig+0x4c4>)
 80055e8:	4313      	orrs	r3, r2
 80055ea:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80055ec:	4b1f      	ldr	r3, [pc, #124]	@ (800566c <HAL_RCC_OscConfig+0x4c4>)
 80055ee:	685b      	ldr	r3, [r3, #4]
 80055f0:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6a19      	ldr	r1, [r3, #32]
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055fc:	430b      	orrs	r3, r1
 80055fe:	491b      	ldr	r1, [pc, #108]	@ (800566c <HAL_RCC_OscConfig+0x4c4>)
 8005600:	4313      	orrs	r3, r2
 8005602:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005604:	4b1b      	ldr	r3, [pc, #108]	@ (8005674 <HAL_RCC_OscConfig+0x4cc>)
 8005606:	2201      	movs	r2, #1
 8005608:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800560a:	f7fe f8c5 	bl	8003798 <HAL_GetTick>
 800560e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005610:	e008      	b.n	8005624 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005612:	f7fe f8c1 	bl	8003798 <HAL_GetTick>
 8005616:	4602      	mov	r2, r0
 8005618:	693b      	ldr	r3, [r7, #16]
 800561a:	1ad3      	subs	r3, r2, r3
 800561c:	2b02      	cmp	r3, #2
 800561e:	d901      	bls.n	8005624 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005620:	2303      	movs	r3, #3
 8005622:	e03d      	b.n	80056a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005624:	4b11      	ldr	r3, [pc, #68]	@ (800566c <HAL_RCC_OscConfig+0x4c4>)
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800562c:	2b00      	cmp	r3, #0
 800562e:	d0f0      	beq.n	8005612 <HAL_RCC_OscConfig+0x46a>
 8005630:	e035      	b.n	800569e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005632:	4b10      	ldr	r3, [pc, #64]	@ (8005674 <HAL_RCC_OscConfig+0x4cc>)
 8005634:	2200      	movs	r2, #0
 8005636:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005638:	f7fe f8ae 	bl	8003798 <HAL_GetTick>
 800563c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800563e:	e008      	b.n	8005652 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005640:	f7fe f8aa 	bl	8003798 <HAL_GetTick>
 8005644:	4602      	mov	r2, r0
 8005646:	693b      	ldr	r3, [r7, #16]
 8005648:	1ad3      	subs	r3, r2, r3
 800564a:	2b02      	cmp	r3, #2
 800564c:	d901      	bls.n	8005652 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800564e:	2303      	movs	r3, #3
 8005650:	e026      	b.n	80056a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005652:	4b06      	ldr	r3, [pc, #24]	@ (800566c <HAL_RCC_OscConfig+0x4c4>)
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800565a:	2b00      	cmp	r3, #0
 800565c:	d1f0      	bne.n	8005640 <HAL_RCC_OscConfig+0x498>
 800565e:	e01e      	b.n	800569e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	69db      	ldr	r3, [r3, #28]
 8005664:	2b01      	cmp	r3, #1
 8005666:	d107      	bne.n	8005678 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8005668:	2301      	movs	r3, #1
 800566a:	e019      	b.n	80056a0 <HAL_RCC_OscConfig+0x4f8>
 800566c:	40021000 	.word	0x40021000
 8005670:	40007000 	.word	0x40007000
 8005674:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005678:	4b0b      	ldr	r3, [pc, #44]	@ (80056a8 <HAL_RCC_OscConfig+0x500>)
 800567a:	685b      	ldr	r3, [r3, #4]
 800567c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	6a1b      	ldr	r3, [r3, #32]
 8005688:	429a      	cmp	r2, r3
 800568a:	d106      	bne.n	800569a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005696:	429a      	cmp	r2, r3
 8005698:	d001      	beq.n	800569e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800569a:	2301      	movs	r3, #1
 800569c:	e000      	b.n	80056a0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800569e:	2300      	movs	r3, #0
}
 80056a0:	4618      	mov	r0, r3
 80056a2:	3718      	adds	r7, #24
 80056a4:	46bd      	mov	sp, r7
 80056a6:	bd80      	pop	{r7, pc}
 80056a8:	40021000 	.word	0x40021000

080056ac <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b084      	sub	sp, #16
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
 80056b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d101      	bne.n	80056c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80056bc:	2301      	movs	r3, #1
 80056be:	e0d0      	b.n	8005862 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80056c0:	4b6a      	ldr	r3, [pc, #424]	@ (800586c <HAL_RCC_ClockConfig+0x1c0>)
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f003 0307 	and.w	r3, r3, #7
 80056c8:	683a      	ldr	r2, [r7, #0]
 80056ca:	429a      	cmp	r2, r3
 80056cc:	d910      	bls.n	80056f0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80056ce:	4b67      	ldr	r3, [pc, #412]	@ (800586c <HAL_RCC_ClockConfig+0x1c0>)
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f023 0207 	bic.w	r2, r3, #7
 80056d6:	4965      	ldr	r1, [pc, #404]	@ (800586c <HAL_RCC_ClockConfig+0x1c0>)
 80056d8:	683b      	ldr	r3, [r7, #0]
 80056da:	4313      	orrs	r3, r2
 80056dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80056de:	4b63      	ldr	r3, [pc, #396]	@ (800586c <HAL_RCC_ClockConfig+0x1c0>)
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f003 0307 	and.w	r3, r3, #7
 80056e6:	683a      	ldr	r2, [r7, #0]
 80056e8:	429a      	cmp	r2, r3
 80056ea:	d001      	beq.n	80056f0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80056ec:	2301      	movs	r3, #1
 80056ee:	e0b8      	b.n	8005862 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f003 0302 	and.w	r3, r3, #2
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d020      	beq.n	800573e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f003 0304 	and.w	r3, r3, #4
 8005704:	2b00      	cmp	r3, #0
 8005706:	d005      	beq.n	8005714 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005708:	4b59      	ldr	r3, [pc, #356]	@ (8005870 <HAL_RCC_ClockConfig+0x1c4>)
 800570a:	685b      	ldr	r3, [r3, #4]
 800570c:	4a58      	ldr	r2, [pc, #352]	@ (8005870 <HAL_RCC_ClockConfig+0x1c4>)
 800570e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005712:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f003 0308 	and.w	r3, r3, #8
 800571c:	2b00      	cmp	r3, #0
 800571e:	d005      	beq.n	800572c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005720:	4b53      	ldr	r3, [pc, #332]	@ (8005870 <HAL_RCC_ClockConfig+0x1c4>)
 8005722:	685b      	ldr	r3, [r3, #4]
 8005724:	4a52      	ldr	r2, [pc, #328]	@ (8005870 <HAL_RCC_ClockConfig+0x1c4>)
 8005726:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800572a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800572c:	4b50      	ldr	r3, [pc, #320]	@ (8005870 <HAL_RCC_ClockConfig+0x1c4>)
 800572e:	685b      	ldr	r3, [r3, #4]
 8005730:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	689b      	ldr	r3, [r3, #8]
 8005738:	494d      	ldr	r1, [pc, #308]	@ (8005870 <HAL_RCC_ClockConfig+0x1c4>)
 800573a:	4313      	orrs	r3, r2
 800573c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f003 0301 	and.w	r3, r3, #1
 8005746:	2b00      	cmp	r3, #0
 8005748:	d040      	beq.n	80057cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	685b      	ldr	r3, [r3, #4]
 800574e:	2b01      	cmp	r3, #1
 8005750:	d107      	bne.n	8005762 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005752:	4b47      	ldr	r3, [pc, #284]	@ (8005870 <HAL_RCC_ClockConfig+0x1c4>)
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800575a:	2b00      	cmp	r3, #0
 800575c:	d115      	bne.n	800578a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800575e:	2301      	movs	r3, #1
 8005760:	e07f      	b.n	8005862 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	685b      	ldr	r3, [r3, #4]
 8005766:	2b02      	cmp	r3, #2
 8005768:	d107      	bne.n	800577a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800576a:	4b41      	ldr	r3, [pc, #260]	@ (8005870 <HAL_RCC_ClockConfig+0x1c4>)
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005772:	2b00      	cmp	r3, #0
 8005774:	d109      	bne.n	800578a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005776:	2301      	movs	r3, #1
 8005778:	e073      	b.n	8005862 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800577a:	4b3d      	ldr	r3, [pc, #244]	@ (8005870 <HAL_RCC_ClockConfig+0x1c4>)
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f003 0302 	and.w	r3, r3, #2
 8005782:	2b00      	cmp	r3, #0
 8005784:	d101      	bne.n	800578a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005786:	2301      	movs	r3, #1
 8005788:	e06b      	b.n	8005862 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800578a:	4b39      	ldr	r3, [pc, #228]	@ (8005870 <HAL_RCC_ClockConfig+0x1c4>)
 800578c:	685b      	ldr	r3, [r3, #4]
 800578e:	f023 0203 	bic.w	r2, r3, #3
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	685b      	ldr	r3, [r3, #4]
 8005796:	4936      	ldr	r1, [pc, #216]	@ (8005870 <HAL_RCC_ClockConfig+0x1c4>)
 8005798:	4313      	orrs	r3, r2
 800579a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800579c:	f7fd fffc 	bl	8003798 <HAL_GetTick>
 80057a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80057a2:	e00a      	b.n	80057ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80057a4:	f7fd fff8 	bl	8003798 <HAL_GetTick>
 80057a8:	4602      	mov	r2, r0
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	1ad3      	subs	r3, r2, r3
 80057ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80057b2:	4293      	cmp	r3, r2
 80057b4:	d901      	bls.n	80057ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80057b6:	2303      	movs	r3, #3
 80057b8:	e053      	b.n	8005862 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80057ba:	4b2d      	ldr	r3, [pc, #180]	@ (8005870 <HAL_RCC_ClockConfig+0x1c4>)
 80057bc:	685b      	ldr	r3, [r3, #4]
 80057be:	f003 020c 	and.w	r2, r3, #12
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	685b      	ldr	r3, [r3, #4]
 80057c6:	009b      	lsls	r3, r3, #2
 80057c8:	429a      	cmp	r2, r3
 80057ca:	d1eb      	bne.n	80057a4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80057cc:	4b27      	ldr	r3, [pc, #156]	@ (800586c <HAL_RCC_ClockConfig+0x1c0>)
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f003 0307 	and.w	r3, r3, #7
 80057d4:	683a      	ldr	r2, [r7, #0]
 80057d6:	429a      	cmp	r2, r3
 80057d8:	d210      	bcs.n	80057fc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80057da:	4b24      	ldr	r3, [pc, #144]	@ (800586c <HAL_RCC_ClockConfig+0x1c0>)
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f023 0207 	bic.w	r2, r3, #7
 80057e2:	4922      	ldr	r1, [pc, #136]	@ (800586c <HAL_RCC_ClockConfig+0x1c0>)
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	4313      	orrs	r3, r2
 80057e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80057ea:	4b20      	ldr	r3, [pc, #128]	@ (800586c <HAL_RCC_ClockConfig+0x1c0>)
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f003 0307 	and.w	r3, r3, #7
 80057f2:	683a      	ldr	r2, [r7, #0]
 80057f4:	429a      	cmp	r2, r3
 80057f6:	d001      	beq.n	80057fc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80057f8:	2301      	movs	r3, #1
 80057fa:	e032      	b.n	8005862 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f003 0304 	and.w	r3, r3, #4
 8005804:	2b00      	cmp	r3, #0
 8005806:	d008      	beq.n	800581a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005808:	4b19      	ldr	r3, [pc, #100]	@ (8005870 <HAL_RCC_ClockConfig+0x1c4>)
 800580a:	685b      	ldr	r3, [r3, #4]
 800580c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	68db      	ldr	r3, [r3, #12]
 8005814:	4916      	ldr	r1, [pc, #88]	@ (8005870 <HAL_RCC_ClockConfig+0x1c4>)
 8005816:	4313      	orrs	r3, r2
 8005818:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f003 0308 	and.w	r3, r3, #8
 8005822:	2b00      	cmp	r3, #0
 8005824:	d009      	beq.n	800583a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005826:	4b12      	ldr	r3, [pc, #72]	@ (8005870 <HAL_RCC_ClockConfig+0x1c4>)
 8005828:	685b      	ldr	r3, [r3, #4]
 800582a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	691b      	ldr	r3, [r3, #16]
 8005832:	00db      	lsls	r3, r3, #3
 8005834:	490e      	ldr	r1, [pc, #56]	@ (8005870 <HAL_RCC_ClockConfig+0x1c4>)
 8005836:	4313      	orrs	r3, r2
 8005838:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800583a:	f000 f821 	bl	8005880 <HAL_RCC_GetSysClockFreq>
 800583e:	4602      	mov	r2, r0
 8005840:	4b0b      	ldr	r3, [pc, #44]	@ (8005870 <HAL_RCC_ClockConfig+0x1c4>)
 8005842:	685b      	ldr	r3, [r3, #4]
 8005844:	091b      	lsrs	r3, r3, #4
 8005846:	f003 030f 	and.w	r3, r3, #15
 800584a:	490a      	ldr	r1, [pc, #40]	@ (8005874 <HAL_RCC_ClockConfig+0x1c8>)
 800584c:	5ccb      	ldrb	r3, [r1, r3]
 800584e:	fa22 f303 	lsr.w	r3, r2, r3
 8005852:	4a09      	ldr	r2, [pc, #36]	@ (8005878 <HAL_RCC_ClockConfig+0x1cc>)
 8005854:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005856:	4b09      	ldr	r3, [pc, #36]	@ (800587c <HAL_RCC_ClockConfig+0x1d0>)
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	4618      	mov	r0, r3
 800585c:	f7fd ff5a 	bl	8003714 <HAL_InitTick>

  return HAL_OK;
 8005860:	2300      	movs	r3, #0
}
 8005862:	4618      	mov	r0, r3
 8005864:	3710      	adds	r7, #16
 8005866:	46bd      	mov	sp, r7
 8005868:	bd80      	pop	{r7, pc}
 800586a:	bf00      	nop
 800586c:	40022000 	.word	0x40022000
 8005870:	40021000 	.word	0x40021000
 8005874:	0800ca6c 	.word	0x0800ca6c
 8005878:	20000004 	.word	0x20000004
 800587c:	20000008 	.word	0x20000008

08005880 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005880:	b480      	push	{r7}
 8005882:	b087      	sub	sp, #28
 8005884:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005886:	2300      	movs	r3, #0
 8005888:	60fb      	str	r3, [r7, #12]
 800588a:	2300      	movs	r3, #0
 800588c:	60bb      	str	r3, [r7, #8]
 800588e:	2300      	movs	r3, #0
 8005890:	617b      	str	r3, [r7, #20]
 8005892:	2300      	movs	r3, #0
 8005894:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8005896:	2300      	movs	r3, #0
 8005898:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800589a:	4b1e      	ldr	r3, [pc, #120]	@ (8005914 <HAL_RCC_GetSysClockFreq+0x94>)
 800589c:	685b      	ldr	r3, [r3, #4]
 800589e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	f003 030c 	and.w	r3, r3, #12
 80058a6:	2b04      	cmp	r3, #4
 80058a8:	d002      	beq.n	80058b0 <HAL_RCC_GetSysClockFreq+0x30>
 80058aa:	2b08      	cmp	r3, #8
 80058ac:	d003      	beq.n	80058b6 <HAL_RCC_GetSysClockFreq+0x36>
 80058ae:	e027      	b.n	8005900 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80058b0:	4b19      	ldr	r3, [pc, #100]	@ (8005918 <HAL_RCC_GetSysClockFreq+0x98>)
 80058b2:	613b      	str	r3, [r7, #16]
      break;
 80058b4:	e027      	b.n	8005906 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	0c9b      	lsrs	r3, r3, #18
 80058ba:	f003 030f 	and.w	r3, r3, #15
 80058be:	4a17      	ldr	r2, [pc, #92]	@ (800591c <HAL_RCC_GetSysClockFreq+0x9c>)
 80058c0:	5cd3      	ldrb	r3, [r2, r3]
 80058c2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d010      	beq.n	80058f0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80058ce:	4b11      	ldr	r3, [pc, #68]	@ (8005914 <HAL_RCC_GetSysClockFreq+0x94>)
 80058d0:	685b      	ldr	r3, [r3, #4]
 80058d2:	0c5b      	lsrs	r3, r3, #17
 80058d4:	f003 0301 	and.w	r3, r3, #1
 80058d8:	4a11      	ldr	r2, [pc, #68]	@ (8005920 <HAL_RCC_GetSysClockFreq+0xa0>)
 80058da:	5cd3      	ldrb	r3, [r2, r3]
 80058dc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	4a0d      	ldr	r2, [pc, #52]	@ (8005918 <HAL_RCC_GetSysClockFreq+0x98>)
 80058e2:	fb03 f202 	mul.w	r2, r3, r2
 80058e6:	68bb      	ldr	r3, [r7, #8]
 80058e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80058ec:	617b      	str	r3, [r7, #20]
 80058ee:	e004      	b.n	80058fa <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	4a0c      	ldr	r2, [pc, #48]	@ (8005924 <HAL_RCC_GetSysClockFreq+0xa4>)
 80058f4:	fb02 f303 	mul.w	r3, r2, r3
 80058f8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80058fa:	697b      	ldr	r3, [r7, #20]
 80058fc:	613b      	str	r3, [r7, #16]
      break;
 80058fe:	e002      	b.n	8005906 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005900:	4b05      	ldr	r3, [pc, #20]	@ (8005918 <HAL_RCC_GetSysClockFreq+0x98>)
 8005902:	613b      	str	r3, [r7, #16]
      break;
 8005904:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005906:	693b      	ldr	r3, [r7, #16]
}
 8005908:	4618      	mov	r0, r3
 800590a:	371c      	adds	r7, #28
 800590c:	46bd      	mov	sp, r7
 800590e:	bc80      	pop	{r7}
 8005910:	4770      	bx	lr
 8005912:	bf00      	nop
 8005914:	40021000 	.word	0x40021000
 8005918:	007a1200 	.word	0x007a1200
 800591c:	0800ca84 	.word	0x0800ca84
 8005920:	0800ca94 	.word	0x0800ca94
 8005924:	003d0900 	.word	0x003d0900

08005928 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005928:	b480      	push	{r7}
 800592a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800592c:	4b02      	ldr	r3, [pc, #8]	@ (8005938 <HAL_RCC_GetHCLKFreq+0x10>)
 800592e:	681b      	ldr	r3, [r3, #0]
}
 8005930:	4618      	mov	r0, r3
 8005932:	46bd      	mov	sp, r7
 8005934:	bc80      	pop	{r7}
 8005936:	4770      	bx	lr
 8005938:	20000004 	.word	0x20000004

0800593c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800593c:	b580      	push	{r7, lr}
 800593e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005940:	f7ff fff2 	bl	8005928 <HAL_RCC_GetHCLKFreq>
 8005944:	4602      	mov	r2, r0
 8005946:	4b05      	ldr	r3, [pc, #20]	@ (800595c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005948:	685b      	ldr	r3, [r3, #4]
 800594a:	0a1b      	lsrs	r3, r3, #8
 800594c:	f003 0307 	and.w	r3, r3, #7
 8005950:	4903      	ldr	r1, [pc, #12]	@ (8005960 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005952:	5ccb      	ldrb	r3, [r1, r3]
 8005954:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005958:	4618      	mov	r0, r3
 800595a:	bd80      	pop	{r7, pc}
 800595c:	40021000 	.word	0x40021000
 8005960:	0800ca7c 	.word	0x0800ca7c

08005964 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005964:	b580      	push	{r7, lr}
 8005966:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005968:	f7ff ffde 	bl	8005928 <HAL_RCC_GetHCLKFreq>
 800596c:	4602      	mov	r2, r0
 800596e:	4b05      	ldr	r3, [pc, #20]	@ (8005984 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005970:	685b      	ldr	r3, [r3, #4]
 8005972:	0adb      	lsrs	r3, r3, #11
 8005974:	f003 0307 	and.w	r3, r3, #7
 8005978:	4903      	ldr	r1, [pc, #12]	@ (8005988 <HAL_RCC_GetPCLK2Freq+0x24>)
 800597a:	5ccb      	ldrb	r3, [r1, r3]
 800597c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005980:	4618      	mov	r0, r3
 8005982:	bd80      	pop	{r7, pc}
 8005984:	40021000 	.word	0x40021000
 8005988:	0800ca7c 	.word	0x0800ca7c

0800598c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800598c:	b480      	push	{r7}
 800598e:	b085      	sub	sp, #20
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005994:	4b0a      	ldr	r3, [pc, #40]	@ (80059c0 <RCC_Delay+0x34>)
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	4a0a      	ldr	r2, [pc, #40]	@ (80059c4 <RCC_Delay+0x38>)
 800599a:	fba2 2303 	umull	r2, r3, r2, r3
 800599e:	0a5b      	lsrs	r3, r3, #9
 80059a0:	687a      	ldr	r2, [r7, #4]
 80059a2:	fb02 f303 	mul.w	r3, r2, r3
 80059a6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80059a8:	bf00      	nop
  }
  while (Delay --);
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	1e5a      	subs	r2, r3, #1
 80059ae:	60fa      	str	r2, [r7, #12]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d1f9      	bne.n	80059a8 <RCC_Delay+0x1c>
}
 80059b4:	bf00      	nop
 80059b6:	bf00      	nop
 80059b8:	3714      	adds	r7, #20
 80059ba:	46bd      	mov	sp, r7
 80059bc:	bc80      	pop	{r7}
 80059be:	4770      	bx	lr
 80059c0:	20000004 	.word	0x20000004
 80059c4:	10624dd3 	.word	0x10624dd3

080059c8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80059c8:	b580      	push	{r7, lr}
 80059ca:	b082      	sub	sp, #8
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d101      	bne.n	80059da <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80059d6:	2301      	movs	r3, #1
 80059d8:	e041      	b.n	8005a5e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80059e0:	b2db      	uxtb	r3, r3
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d106      	bne.n	80059f4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	2200      	movs	r2, #0
 80059ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80059ee:	6878      	ldr	r0, [r7, #4]
 80059f0:	f7fd fbf2 	bl	80031d8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2202      	movs	r2, #2
 80059f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681a      	ldr	r2, [r3, #0]
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	3304      	adds	r3, #4
 8005a04:	4619      	mov	r1, r3
 8005a06:	4610      	mov	r0, r2
 8005a08:	f000 f992 	bl	8005d30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2201      	movs	r2, #1
 8005a10:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2201      	movs	r2, #1
 8005a18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2201      	movs	r2, #1
 8005a20:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2201      	movs	r2, #1
 8005a28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2201      	movs	r2, #1
 8005a30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2201      	movs	r2, #1
 8005a38:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2201      	movs	r2, #1
 8005a40:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2201      	movs	r2, #1
 8005a48:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2201      	movs	r2, #1
 8005a50:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2201      	movs	r2, #1
 8005a58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005a5c:	2300      	movs	r3, #0
}
 8005a5e:	4618      	mov	r0, r3
 8005a60:	3708      	adds	r7, #8
 8005a62:	46bd      	mov	sp, r7
 8005a64:	bd80      	pop	{r7, pc}
	...

08005a68 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b084      	sub	sp, #16
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
 8005a70:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005a72:	683b      	ldr	r3, [r7, #0]
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d109      	bne.n	8005a8c <HAL_TIM_PWM_Start+0x24>
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005a7e:	b2db      	uxtb	r3, r3
 8005a80:	2b01      	cmp	r3, #1
 8005a82:	bf14      	ite	ne
 8005a84:	2301      	movne	r3, #1
 8005a86:	2300      	moveq	r3, #0
 8005a88:	b2db      	uxtb	r3, r3
 8005a8a:	e022      	b.n	8005ad2 <HAL_TIM_PWM_Start+0x6a>
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	2b04      	cmp	r3, #4
 8005a90:	d109      	bne.n	8005aa6 <HAL_TIM_PWM_Start+0x3e>
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005a98:	b2db      	uxtb	r3, r3
 8005a9a:	2b01      	cmp	r3, #1
 8005a9c:	bf14      	ite	ne
 8005a9e:	2301      	movne	r3, #1
 8005aa0:	2300      	moveq	r3, #0
 8005aa2:	b2db      	uxtb	r3, r3
 8005aa4:	e015      	b.n	8005ad2 <HAL_TIM_PWM_Start+0x6a>
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	2b08      	cmp	r3, #8
 8005aaa:	d109      	bne.n	8005ac0 <HAL_TIM_PWM_Start+0x58>
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005ab2:	b2db      	uxtb	r3, r3
 8005ab4:	2b01      	cmp	r3, #1
 8005ab6:	bf14      	ite	ne
 8005ab8:	2301      	movne	r3, #1
 8005aba:	2300      	moveq	r3, #0
 8005abc:	b2db      	uxtb	r3, r3
 8005abe:	e008      	b.n	8005ad2 <HAL_TIM_PWM_Start+0x6a>
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005ac6:	b2db      	uxtb	r3, r3
 8005ac8:	2b01      	cmp	r3, #1
 8005aca:	bf14      	ite	ne
 8005acc:	2301      	movne	r3, #1
 8005ace:	2300      	moveq	r3, #0
 8005ad0:	b2db      	uxtb	r3, r3
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d001      	beq.n	8005ada <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005ad6:	2301      	movs	r3, #1
 8005ad8:	e05e      	b.n	8005b98 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005ada:	683b      	ldr	r3, [r7, #0]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d104      	bne.n	8005aea <HAL_TIM_PWM_Start+0x82>
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2202      	movs	r2, #2
 8005ae4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005ae8:	e013      	b.n	8005b12 <HAL_TIM_PWM_Start+0xaa>
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	2b04      	cmp	r3, #4
 8005aee:	d104      	bne.n	8005afa <HAL_TIM_PWM_Start+0x92>
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2202      	movs	r2, #2
 8005af4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005af8:	e00b      	b.n	8005b12 <HAL_TIM_PWM_Start+0xaa>
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	2b08      	cmp	r3, #8
 8005afe:	d104      	bne.n	8005b0a <HAL_TIM_PWM_Start+0xa2>
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2202      	movs	r2, #2
 8005b04:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005b08:	e003      	b.n	8005b12 <HAL_TIM_PWM_Start+0xaa>
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	2202      	movs	r2, #2
 8005b0e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	2201      	movs	r2, #1
 8005b18:	6839      	ldr	r1, [r7, #0]
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	f000 faf2 	bl	8006104 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	4a1e      	ldr	r2, [pc, #120]	@ (8005ba0 <HAL_TIM_PWM_Start+0x138>)
 8005b26:	4293      	cmp	r3, r2
 8005b28:	d107      	bne.n	8005b3a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005b38:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	4a18      	ldr	r2, [pc, #96]	@ (8005ba0 <HAL_TIM_PWM_Start+0x138>)
 8005b40:	4293      	cmp	r3, r2
 8005b42:	d00e      	beq.n	8005b62 <HAL_TIM_PWM_Start+0xfa>
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b4c:	d009      	beq.n	8005b62 <HAL_TIM_PWM_Start+0xfa>
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	4a14      	ldr	r2, [pc, #80]	@ (8005ba4 <HAL_TIM_PWM_Start+0x13c>)
 8005b54:	4293      	cmp	r3, r2
 8005b56:	d004      	beq.n	8005b62 <HAL_TIM_PWM_Start+0xfa>
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	4a12      	ldr	r2, [pc, #72]	@ (8005ba8 <HAL_TIM_PWM_Start+0x140>)
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	d111      	bne.n	8005b86 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	689b      	ldr	r3, [r3, #8]
 8005b68:	f003 0307 	and.w	r3, r3, #7
 8005b6c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	2b06      	cmp	r3, #6
 8005b72:	d010      	beq.n	8005b96 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	681a      	ldr	r2, [r3, #0]
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f042 0201 	orr.w	r2, r2, #1
 8005b82:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b84:	e007      	b.n	8005b96 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	681a      	ldr	r2, [r3, #0]
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f042 0201 	orr.w	r2, r2, #1
 8005b94:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005b96:	2300      	movs	r3, #0
}
 8005b98:	4618      	mov	r0, r3
 8005b9a:	3710      	adds	r7, #16
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	bd80      	pop	{r7, pc}
 8005ba0:	40012c00 	.word	0x40012c00
 8005ba4:	40000400 	.word	0x40000400
 8005ba8:	40000800 	.word	0x40000800

08005bac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005bac:	b580      	push	{r7, lr}
 8005bae:	b086      	sub	sp, #24
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	60f8      	str	r0, [r7, #12]
 8005bb4:	60b9      	str	r1, [r7, #8]
 8005bb6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005bb8:	2300      	movs	r3, #0
 8005bba:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005bc2:	2b01      	cmp	r3, #1
 8005bc4:	d101      	bne.n	8005bca <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005bc6:	2302      	movs	r3, #2
 8005bc8:	e0ae      	b.n	8005d28 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	2201      	movs	r2, #1
 8005bce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	2b0c      	cmp	r3, #12
 8005bd6:	f200 809f 	bhi.w	8005d18 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005bda:	a201      	add	r2, pc, #4	@ (adr r2, 8005be0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005bdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005be0:	08005c15 	.word	0x08005c15
 8005be4:	08005d19 	.word	0x08005d19
 8005be8:	08005d19 	.word	0x08005d19
 8005bec:	08005d19 	.word	0x08005d19
 8005bf0:	08005c55 	.word	0x08005c55
 8005bf4:	08005d19 	.word	0x08005d19
 8005bf8:	08005d19 	.word	0x08005d19
 8005bfc:	08005d19 	.word	0x08005d19
 8005c00:	08005c97 	.word	0x08005c97
 8005c04:	08005d19 	.word	0x08005d19
 8005c08:	08005d19 	.word	0x08005d19
 8005c0c:	08005d19 	.word	0x08005d19
 8005c10:	08005cd7 	.word	0x08005cd7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	68b9      	ldr	r1, [r7, #8]
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	f000 f8ea 	bl	8005df4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	699a      	ldr	r2, [r3, #24]
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f042 0208 	orr.w	r2, r2, #8
 8005c2e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	699a      	ldr	r2, [r3, #24]
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f022 0204 	bic.w	r2, r2, #4
 8005c3e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	6999      	ldr	r1, [r3, #24]
 8005c46:	68bb      	ldr	r3, [r7, #8]
 8005c48:	691a      	ldr	r2, [r3, #16]
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	430a      	orrs	r2, r1
 8005c50:	619a      	str	r2, [r3, #24]
      break;
 8005c52:	e064      	b.n	8005d1e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	68b9      	ldr	r1, [r7, #8]
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	f000 f930 	bl	8005ec0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	699a      	ldr	r2, [r3, #24]
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005c6e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	699a      	ldr	r2, [r3, #24]
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005c7e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	6999      	ldr	r1, [r3, #24]
 8005c86:	68bb      	ldr	r3, [r7, #8]
 8005c88:	691b      	ldr	r3, [r3, #16]
 8005c8a:	021a      	lsls	r2, r3, #8
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	430a      	orrs	r2, r1
 8005c92:	619a      	str	r2, [r3, #24]
      break;
 8005c94:	e043      	b.n	8005d1e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	68b9      	ldr	r1, [r7, #8]
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	f000 f979 	bl	8005f94 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	69da      	ldr	r2, [r3, #28]
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f042 0208 	orr.w	r2, r2, #8
 8005cb0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	69da      	ldr	r2, [r3, #28]
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f022 0204 	bic.w	r2, r2, #4
 8005cc0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	69d9      	ldr	r1, [r3, #28]
 8005cc8:	68bb      	ldr	r3, [r7, #8]
 8005cca:	691a      	ldr	r2, [r3, #16]
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	430a      	orrs	r2, r1
 8005cd2:	61da      	str	r2, [r3, #28]
      break;
 8005cd4:	e023      	b.n	8005d1e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	68b9      	ldr	r1, [r7, #8]
 8005cdc:	4618      	mov	r0, r3
 8005cde:	f000 f9c3 	bl	8006068 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	69da      	ldr	r2, [r3, #28]
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005cf0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	69da      	ldr	r2, [r3, #28]
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005d00:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	69d9      	ldr	r1, [r3, #28]
 8005d08:	68bb      	ldr	r3, [r7, #8]
 8005d0a:	691b      	ldr	r3, [r3, #16]
 8005d0c:	021a      	lsls	r2, r3, #8
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	430a      	orrs	r2, r1
 8005d14:	61da      	str	r2, [r3, #28]
      break;
 8005d16:	e002      	b.n	8005d1e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005d18:	2301      	movs	r3, #1
 8005d1a:	75fb      	strb	r3, [r7, #23]
      break;
 8005d1c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	2200      	movs	r2, #0
 8005d22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005d26:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d28:	4618      	mov	r0, r3
 8005d2a:	3718      	adds	r7, #24
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	bd80      	pop	{r7, pc}

08005d30 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005d30:	b480      	push	{r7}
 8005d32:	b085      	sub	sp, #20
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
 8005d38:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	4a29      	ldr	r2, [pc, #164]	@ (8005de8 <TIM_Base_SetConfig+0xb8>)
 8005d44:	4293      	cmp	r3, r2
 8005d46:	d00b      	beq.n	8005d60 <TIM_Base_SetConfig+0x30>
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d4e:	d007      	beq.n	8005d60 <TIM_Base_SetConfig+0x30>
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	4a26      	ldr	r2, [pc, #152]	@ (8005dec <TIM_Base_SetConfig+0xbc>)
 8005d54:	4293      	cmp	r3, r2
 8005d56:	d003      	beq.n	8005d60 <TIM_Base_SetConfig+0x30>
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	4a25      	ldr	r2, [pc, #148]	@ (8005df0 <TIM_Base_SetConfig+0xc0>)
 8005d5c:	4293      	cmp	r3, r2
 8005d5e:	d108      	bne.n	8005d72 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d66:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	685b      	ldr	r3, [r3, #4]
 8005d6c:	68fa      	ldr	r2, [r7, #12]
 8005d6e:	4313      	orrs	r3, r2
 8005d70:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	4a1c      	ldr	r2, [pc, #112]	@ (8005de8 <TIM_Base_SetConfig+0xb8>)
 8005d76:	4293      	cmp	r3, r2
 8005d78:	d00b      	beq.n	8005d92 <TIM_Base_SetConfig+0x62>
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d80:	d007      	beq.n	8005d92 <TIM_Base_SetConfig+0x62>
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	4a19      	ldr	r2, [pc, #100]	@ (8005dec <TIM_Base_SetConfig+0xbc>)
 8005d86:	4293      	cmp	r3, r2
 8005d88:	d003      	beq.n	8005d92 <TIM_Base_SetConfig+0x62>
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	4a18      	ldr	r2, [pc, #96]	@ (8005df0 <TIM_Base_SetConfig+0xc0>)
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	d108      	bne.n	8005da4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005d98:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005d9a:	683b      	ldr	r3, [r7, #0]
 8005d9c:	68db      	ldr	r3, [r3, #12]
 8005d9e:	68fa      	ldr	r2, [r7, #12]
 8005da0:	4313      	orrs	r3, r2
 8005da2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	695b      	ldr	r3, [r3, #20]
 8005dae:	4313      	orrs	r3, r2
 8005db0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	68fa      	ldr	r2, [r7, #12]
 8005db6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	689a      	ldr	r2, [r3, #8]
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005dc0:	683b      	ldr	r3, [r7, #0]
 8005dc2:	681a      	ldr	r2, [r3, #0]
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	4a07      	ldr	r2, [pc, #28]	@ (8005de8 <TIM_Base_SetConfig+0xb8>)
 8005dcc:	4293      	cmp	r3, r2
 8005dce:	d103      	bne.n	8005dd8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005dd0:	683b      	ldr	r3, [r7, #0]
 8005dd2:	691a      	ldr	r2, [r3, #16]
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2201      	movs	r2, #1
 8005ddc:	615a      	str	r2, [r3, #20]
}
 8005dde:	bf00      	nop
 8005de0:	3714      	adds	r7, #20
 8005de2:	46bd      	mov	sp, r7
 8005de4:	bc80      	pop	{r7}
 8005de6:	4770      	bx	lr
 8005de8:	40012c00 	.word	0x40012c00
 8005dec:	40000400 	.word	0x40000400
 8005df0:	40000800 	.word	0x40000800

08005df4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005df4:	b480      	push	{r7}
 8005df6:	b087      	sub	sp, #28
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
 8005dfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6a1b      	ldr	r3, [r3, #32]
 8005e02:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	6a1b      	ldr	r3, [r3, #32]
 8005e08:	f023 0201 	bic.w	r2, r3, #1
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	685b      	ldr	r3, [r3, #4]
 8005e14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	699b      	ldr	r3, [r3, #24]
 8005e1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	f023 0303 	bic.w	r3, r3, #3
 8005e2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005e2c:	683b      	ldr	r3, [r7, #0]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	68fa      	ldr	r2, [r7, #12]
 8005e32:	4313      	orrs	r3, r2
 8005e34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005e36:	697b      	ldr	r3, [r7, #20]
 8005e38:	f023 0302 	bic.w	r3, r3, #2
 8005e3c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005e3e:	683b      	ldr	r3, [r7, #0]
 8005e40:	689b      	ldr	r3, [r3, #8]
 8005e42:	697a      	ldr	r2, [r7, #20]
 8005e44:	4313      	orrs	r3, r2
 8005e46:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	4a1c      	ldr	r2, [pc, #112]	@ (8005ebc <TIM_OC1_SetConfig+0xc8>)
 8005e4c:	4293      	cmp	r3, r2
 8005e4e:	d10c      	bne.n	8005e6a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005e50:	697b      	ldr	r3, [r7, #20]
 8005e52:	f023 0308 	bic.w	r3, r3, #8
 8005e56:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	68db      	ldr	r3, [r3, #12]
 8005e5c:	697a      	ldr	r2, [r7, #20]
 8005e5e:	4313      	orrs	r3, r2
 8005e60:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005e62:	697b      	ldr	r3, [r7, #20]
 8005e64:	f023 0304 	bic.w	r3, r3, #4
 8005e68:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	4a13      	ldr	r2, [pc, #76]	@ (8005ebc <TIM_OC1_SetConfig+0xc8>)
 8005e6e:	4293      	cmp	r3, r2
 8005e70:	d111      	bne.n	8005e96 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005e72:	693b      	ldr	r3, [r7, #16]
 8005e74:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005e78:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005e7a:	693b      	ldr	r3, [r7, #16]
 8005e7c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005e80:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005e82:	683b      	ldr	r3, [r7, #0]
 8005e84:	695b      	ldr	r3, [r3, #20]
 8005e86:	693a      	ldr	r2, [r7, #16]
 8005e88:	4313      	orrs	r3, r2
 8005e8a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005e8c:	683b      	ldr	r3, [r7, #0]
 8005e8e:	699b      	ldr	r3, [r3, #24]
 8005e90:	693a      	ldr	r2, [r7, #16]
 8005e92:	4313      	orrs	r3, r2
 8005e94:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	693a      	ldr	r2, [r7, #16]
 8005e9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	68fa      	ldr	r2, [r7, #12]
 8005ea0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005ea2:	683b      	ldr	r3, [r7, #0]
 8005ea4:	685a      	ldr	r2, [r3, #4]
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	697a      	ldr	r2, [r7, #20]
 8005eae:	621a      	str	r2, [r3, #32]
}
 8005eb0:	bf00      	nop
 8005eb2:	371c      	adds	r7, #28
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	bc80      	pop	{r7}
 8005eb8:	4770      	bx	lr
 8005eba:	bf00      	nop
 8005ebc:	40012c00 	.word	0x40012c00

08005ec0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005ec0:	b480      	push	{r7}
 8005ec2:	b087      	sub	sp, #28
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
 8005ec8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	6a1b      	ldr	r3, [r3, #32]
 8005ece:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	6a1b      	ldr	r3, [r3, #32]
 8005ed4:	f023 0210 	bic.w	r2, r3, #16
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	685b      	ldr	r3, [r3, #4]
 8005ee0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	699b      	ldr	r3, [r3, #24]
 8005ee6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005eee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005ef6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ef8:	683b      	ldr	r3, [r7, #0]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	021b      	lsls	r3, r3, #8
 8005efe:	68fa      	ldr	r2, [r7, #12]
 8005f00:	4313      	orrs	r3, r2
 8005f02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005f04:	697b      	ldr	r3, [r7, #20]
 8005f06:	f023 0320 	bic.w	r3, r3, #32
 8005f0a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005f0c:	683b      	ldr	r3, [r7, #0]
 8005f0e:	689b      	ldr	r3, [r3, #8]
 8005f10:	011b      	lsls	r3, r3, #4
 8005f12:	697a      	ldr	r2, [r7, #20]
 8005f14:	4313      	orrs	r3, r2
 8005f16:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	4a1d      	ldr	r2, [pc, #116]	@ (8005f90 <TIM_OC2_SetConfig+0xd0>)
 8005f1c:	4293      	cmp	r3, r2
 8005f1e:	d10d      	bne.n	8005f3c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005f20:	697b      	ldr	r3, [r7, #20]
 8005f22:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005f26:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	68db      	ldr	r3, [r3, #12]
 8005f2c:	011b      	lsls	r3, r3, #4
 8005f2e:	697a      	ldr	r2, [r7, #20]
 8005f30:	4313      	orrs	r3, r2
 8005f32:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005f34:	697b      	ldr	r3, [r7, #20]
 8005f36:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005f3a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	4a14      	ldr	r2, [pc, #80]	@ (8005f90 <TIM_OC2_SetConfig+0xd0>)
 8005f40:	4293      	cmp	r3, r2
 8005f42:	d113      	bne.n	8005f6c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005f44:	693b      	ldr	r3, [r7, #16]
 8005f46:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005f4a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005f4c:	693b      	ldr	r3, [r7, #16]
 8005f4e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005f52:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	695b      	ldr	r3, [r3, #20]
 8005f58:	009b      	lsls	r3, r3, #2
 8005f5a:	693a      	ldr	r2, [r7, #16]
 8005f5c:	4313      	orrs	r3, r2
 8005f5e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005f60:	683b      	ldr	r3, [r7, #0]
 8005f62:	699b      	ldr	r3, [r3, #24]
 8005f64:	009b      	lsls	r3, r3, #2
 8005f66:	693a      	ldr	r2, [r7, #16]
 8005f68:	4313      	orrs	r3, r2
 8005f6a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	693a      	ldr	r2, [r7, #16]
 8005f70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	68fa      	ldr	r2, [r7, #12]
 8005f76:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	685a      	ldr	r2, [r3, #4]
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	697a      	ldr	r2, [r7, #20]
 8005f84:	621a      	str	r2, [r3, #32]
}
 8005f86:	bf00      	nop
 8005f88:	371c      	adds	r7, #28
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	bc80      	pop	{r7}
 8005f8e:	4770      	bx	lr
 8005f90:	40012c00 	.word	0x40012c00

08005f94 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005f94:	b480      	push	{r7}
 8005f96:	b087      	sub	sp, #28
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
 8005f9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	6a1b      	ldr	r3, [r3, #32]
 8005fa2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	6a1b      	ldr	r3, [r3, #32]
 8005fa8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	685b      	ldr	r3, [r3, #4]
 8005fb4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	69db      	ldr	r3, [r3, #28]
 8005fba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005fc2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	f023 0303 	bic.w	r3, r3, #3
 8005fca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005fcc:	683b      	ldr	r3, [r7, #0]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	68fa      	ldr	r2, [r7, #12]
 8005fd2:	4313      	orrs	r3, r2
 8005fd4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005fd6:	697b      	ldr	r3, [r7, #20]
 8005fd8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005fdc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005fde:	683b      	ldr	r3, [r7, #0]
 8005fe0:	689b      	ldr	r3, [r3, #8]
 8005fe2:	021b      	lsls	r3, r3, #8
 8005fe4:	697a      	ldr	r2, [r7, #20]
 8005fe6:	4313      	orrs	r3, r2
 8005fe8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	4a1d      	ldr	r2, [pc, #116]	@ (8006064 <TIM_OC3_SetConfig+0xd0>)
 8005fee:	4293      	cmp	r3, r2
 8005ff0:	d10d      	bne.n	800600e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005ff2:	697b      	ldr	r3, [r7, #20]
 8005ff4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005ff8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005ffa:	683b      	ldr	r3, [r7, #0]
 8005ffc:	68db      	ldr	r3, [r3, #12]
 8005ffe:	021b      	lsls	r3, r3, #8
 8006000:	697a      	ldr	r2, [r7, #20]
 8006002:	4313      	orrs	r3, r2
 8006004:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006006:	697b      	ldr	r3, [r7, #20]
 8006008:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800600c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	4a14      	ldr	r2, [pc, #80]	@ (8006064 <TIM_OC3_SetConfig+0xd0>)
 8006012:	4293      	cmp	r3, r2
 8006014:	d113      	bne.n	800603e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006016:	693b      	ldr	r3, [r7, #16]
 8006018:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800601c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800601e:	693b      	ldr	r3, [r7, #16]
 8006020:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006024:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006026:	683b      	ldr	r3, [r7, #0]
 8006028:	695b      	ldr	r3, [r3, #20]
 800602a:	011b      	lsls	r3, r3, #4
 800602c:	693a      	ldr	r2, [r7, #16]
 800602e:	4313      	orrs	r3, r2
 8006030:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006032:	683b      	ldr	r3, [r7, #0]
 8006034:	699b      	ldr	r3, [r3, #24]
 8006036:	011b      	lsls	r3, r3, #4
 8006038:	693a      	ldr	r2, [r7, #16]
 800603a:	4313      	orrs	r3, r2
 800603c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	693a      	ldr	r2, [r7, #16]
 8006042:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	68fa      	ldr	r2, [r7, #12]
 8006048:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800604a:	683b      	ldr	r3, [r7, #0]
 800604c:	685a      	ldr	r2, [r3, #4]
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	697a      	ldr	r2, [r7, #20]
 8006056:	621a      	str	r2, [r3, #32]
}
 8006058:	bf00      	nop
 800605a:	371c      	adds	r7, #28
 800605c:	46bd      	mov	sp, r7
 800605e:	bc80      	pop	{r7}
 8006060:	4770      	bx	lr
 8006062:	bf00      	nop
 8006064:	40012c00 	.word	0x40012c00

08006068 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006068:	b480      	push	{r7}
 800606a:	b087      	sub	sp, #28
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]
 8006070:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	6a1b      	ldr	r3, [r3, #32]
 8006076:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	6a1b      	ldr	r3, [r3, #32]
 800607c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	685b      	ldr	r3, [r3, #4]
 8006088:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	69db      	ldr	r3, [r3, #28]
 800608e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006096:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800609e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	021b      	lsls	r3, r3, #8
 80060a6:	68fa      	ldr	r2, [r7, #12]
 80060a8:	4313      	orrs	r3, r2
 80060aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80060ac:	693b      	ldr	r3, [r7, #16]
 80060ae:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80060b2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80060b4:	683b      	ldr	r3, [r7, #0]
 80060b6:	689b      	ldr	r3, [r3, #8]
 80060b8:	031b      	lsls	r3, r3, #12
 80060ba:	693a      	ldr	r2, [r7, #16]
 80060bc:	4313      	orrs	r3, r2
 80060be:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	4a0f      	ldr	r2, [pc, #60]	@ (8006100 <TIM_OC4_SetConfig+0x98>)
 80060c4:	4293      	cmp	r3, r2
 80060c6:	d109      	bne.n	80060dc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80060c8:	697b      	ldr	r3, [r7, #20]
 80060ca:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80060ce:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80060d0:	683b      	ldr	r3, [r7, #0]
 80060d2:	695b      	ldr	r3, [r3, #20]
 80060d4:	019b      	lsls	r3, r3, #6
 80060d6:	697a      	ldr	r2, [r7, #20]
 80060d8:	4313      	orrs	r3, r2
 80060da:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	697a      	ldr	r2, [r7, #20]
 80060e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	68fa      	ldr	r2, [r7, #12]
 80060e6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80060e8:	683b      	ldr	r3, [r7, #0]
 80060ea:	685a      	ldr	r2, [r3, #4]
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	693a      	ldr	r2, [r7, #16]
 80060f4:	621a      	str	r2, [r3, #32]
}
 80060f6:	bf00      	nop
 80060f8:	371c      	adds	r7, #28
 80060fa:	46bd      	mov	sp, r7
 80060fc:	bc80      	pop	{r7}
 80060fe:	4770      	bx	lr
 8006100:	40012c00 	.word	0x40012c00

08006104 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006104:	b480      	push	{r7}
 8006106:	b087      	sub	sp, #28
 8006108:	af00      	add	r7, sp, #0
 800610a:	60f8      	str	r0, [r7, #12]
 800610c:	60b9      	str	r1, [r7, #8]
 800610e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006110:	68bb      	ldr	r3, [r7, #8]
 8006112:	f003 031f 	and.w	r3, r3, #31
 8006116:	2201      	movs	r2, #1
 8006118:	fa02 f303 	lsl.w	r3, r2, r3
 800611c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	6a1a      	ldr	r2, [r3, #32]
 8006122:	697b      	ldr	r3, [r7, #20]
 8006124:	43db      	mvns	r3, r3
 8006126:	401a      	ands	r2, r3
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	6a1a      	ldr	r2, [r3, #32]
 8006130:	68bb      	ldr	r3, [r7, #8]
 8006132:	f003 031f 	and.w	r3, r3, #31
 8006136:	6879      	ldr	r1, [r7, #4]
 8006138:	fa01 f303 	lsl.w	r3, r1, r3
 800613c:	431a      	orrs	r2, r3
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	621a      	str	r2, [r3, #32]
}
 8006142:	bf00      	nop
 8006144:	371c      	adds	r7, #28
 8006146:	46bd      	mov	sp, r7
 8006148:	bc80      	pop	{r7}
 800614a:	4770      	bx	lr

0800614c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800614c:	b480      	push	{r7}
 800614e:	b085      	sub	sp, #20
 8006150:	af00      	add	r7, sp, #0
 8006152:	6078      	str	r0, [r7, #4]
 8006154:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800615c:	2b01      	cmp	r3, #1
 800615e:	d101      	bne.n	8006164 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006160:	2302      	movs	r3, #2
 8006162:	e046      	b.n	80061f2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2201      	movs	r2, #1
 8006168:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2202      	movs	r2, #2
 8006170:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	685b      	ldr	r3, [r3, #4]
 800617a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	689b      	ldr	r3, [r3, #8]
 8006182:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800618a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800618c:	683b      	ldr	r3, [r7, #0]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	68fa      	ldr	r2, [r7, #12]
 8006192:	4313      	orrs	r3, r2
 8006194:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	68fa      	ldr	r2, [r7, #12]
 800619c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	4a16      	ldr	r2, [pc, #88]	@ (80061fc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80061a4:	4293      	cmp	r3, r2
 80061a6:	d00e      	beq.n	80061c6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80061b0:	d009      	beq.n	80061c6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	4a12      	ldr	r2, [pc, #72]	@ (8006200 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80061b8:	4293      	cmp	r3, r2
 80061ba:	d004      	beq.n	80061c6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	4a10      	ldr	r2, [pc, #64]	@ (8006204 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80061c2:	4293      	cmp	r3, r2
 80061c4:	d10c      	bne.n	80061e0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80061c6:	68bb      	ldr	r3, [r7, #8]
 80061c8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80061cc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80061ce:	683b      	ldr	r3, [r7, #0]
 80061d0:	685b      	ldr	r3, [r3, #4]
 80061d2:	68ba      	ldr	r2, [r7, #8]
 80061d4:	4313      	orrs	r3, r2
 80061d6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	68ba      	ldr	r2, [r7, #8]
 80061de:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2201      	movs	r2, #1
 80061e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	2200      	movs	r2, #0
 80061ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80061f0:	2300      	movs	r3, #0
}
 80061f2:	4618      	mov	r0, r3
 80061f4:	3714      	adds	r7, #20
 80061f6:	46bd      	mov	sp, r7
 80061f8:	bc80      	pop	{r7}
 80061fa:	4770      	bx	lr
 80061fc:	40012c00 	.word	0x40012c00
 8006200:	40000400 	.word	0x40000400
 8006204:	40000800 	.word	0x40000800

08006208 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006208:	b580      	push	{r7, lr}
 800620a:	b082      	sub	sp, #8
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d101      	bne.n	800621a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006216:	2301      	movs	r3, #1
 8006218:	e042      	b.n	80062a0 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006220:	b2db      	uxtb	r3, r3
 8006222:	2b00      	cmp	r3, #0
 8006224:	d106      	bne.n	8006234 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	2200      	movs	r2, #0
 800622a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800622e:	6878      	ldr	r0, [r7, #4]
 8006230:	f7fd f822 	bl	8003278 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2224      	movs	r2, #36	@ 0x24
 8006238:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	68da      	ldr	r2, [r3, #12]
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800624a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800624c:	6878      	ldr	r0, [r7, #4]
 800624e:	f000 fb81 	bl	8006954 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	691a      	ldr	r2, [r3, #16]
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006260:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	695a      	ldr	r2, [r3, #20]
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006270:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	68da      	ldr	r2, [r3, #12]
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006280:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	2200      	movs	r2, #0
 8006286:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2220      	movs	r2, #32
 800628c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2220      	movs	r2, #32
 8006294:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2200      	movs	r2, #0
 800629c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800629e:	2300      	movs	r3, #0
}
 80062a0:	4618      	mov	r0, r3
 80062a2:	3708      	adds	r7, #8
 80062a4:	46bd      	mov	sp, r7
 80062a6:	bd80      	pop	{r7, pc}

080062a8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80062a8:	b580      	push	{r7, lr}
 80062aa:	b08a      	sub	sp, #40	@ 0x28
 80062ac:	af02      	add	r7, sp, #8
 80062ae:	60f8      	str	r0, [r7, #12]
 80062b0:	60b9      	str	r1, [r7, #8]
 80062b2:	603b      	str	r3, [r7, #0]
 80062b4:	4613      	mov	r3, r2
 80062b6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80062b8:	2300      	movs	r3, #0
 80062ba:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80062c2:	b2db      	uxtb	r3, r3
 80062c4:	2b20      	cmp	r3, #32
 80062c6:	d16d      	bne.n	80063a4 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80062c8:	68bb      	ldr	r3, [r7, #8]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d002      	beq.n	80062d4 <HAL_UART_Transmit+0x2c>
 80062ce:	88fb      	ldrh	r3, [r7, #6]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d101      	bne.n	80062d8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80062d4:	2301      	movs	r3, #1
 80062d6:	e066      	b.n	80063a6 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	2200      	movs	r2, #0
 80062dc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	2221      	movs	r2, #33	@ 0x21
 80062e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80062e6:	f7fd fa57 	bl	8003798 <HAL_GetTick>
 80062ea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	88fa      	ldrh	r2, [r7, #6]
 80062f0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	88fa      	ldrh	r2, [r7, #6]
 80062f6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	689b      	ldr	r3, [r3, #8]
 80062fc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006300:	d108      	bne.n	8006314 <HAL_UART_Transmit+0x6c>
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	691b      	ldr	r3, [r3, #16]
 8006306:	2b00      	cmp	r3, #0
 8006308:	d104      	bne.n	8006314 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800630a:	2300      	movs	r3, #0
 800630c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800630e:	68bb      	ldr	r3, [r7, #8]
 8006310:	61bb      	str	r3, [r7, #24]
 8006312:	e003      	b.n	800631c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006314:	68bb      	ldr	r3, [r7, #8]
 8006316:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006318:	2300      	movs	r3, #0
 800631a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800631c:	e02a      	b.n	8006374 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800631e:	683b      	ldr	r3, [r7, #0]
 8006320:	9300      	str	r3, [sp, #0]
 8006322:	697b      	ldr	r3, [r7, #20]
 8006324:	2200      	movs	r2, #0
 8006326:	2180      	movs	r1, #128	@ 0x80
 8006328:	68f8      	ldr	r0, [r7, #12]
 800632a:	f000 f980 	bl	800662e <UART_WaitOnFlagUntilTimeout>
 800632e:	4603      	mov	r3, r0
 8006330:	2b00      	cmp	r3, #0
 8006332:	d001      	beq.n	8006338 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8006334:	2303      	movs	r3, #3
 8006336:	e036      	b.n	80063a6 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8006338:	69fb      	ldr	r3, [r7, #28]
 800633a:	2b00      	cmp	r3, #0
 800633c:	d10b      	bne.n	8006356 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800633e:	69bb      	ldr	r3, [r7, #24]
 8006340:	881b      	ldrh	r3, [r3, #0]
 8006342:	461a      	mov	r2, r3
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800634c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800634e:	69bb      	ldr	r3, [r7, #24]
 8006350:	3302      	adds	r3, #2
 8006352:	61bb      	str	r3, [r7, #24]
 8006354:	e007      	b.n	8006366 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006356:	69fb      	ldr	r3, [r7, #28]
 8006358:	781a      	ldrb	r2, [r3, #0]
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006360:	69fb      	ldr	r3, [r7, #28]
 8006362:	3301      	adds	r3, #1
 8006364:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800636a:	b29b      	uxth	r3, r3
 800636c:	3b01      	subs	r3, #1
 800636e:	b29a      	uxth	r2, r3
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006378:	b29b      	uxth	r3, r3
 800637a:	2b00      	cmp	r3, #0
 800637c:	d1cf      	bne.n	800631e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800637e:	683b      	ldr	r3, [r7, #0]
 8006380:	9300      	str	r3, [sp, #0]
 8006382:	697b      	ldr	r3, [r7, #20]
 8006384:	2200      	movs	r2, #0
 8006386:	2140      	movs	r1, #64	@ 0x40
 8006388:	68f8      	ldr	r0, [r7, #12]
 800638a:	f000 f950 	bl	800662e <UART_WaitOnFlagUntilTimeout>
 800638e:	4603      	mov	r3, r0
 8006390:	2b00      	cmp	r3, #0
 8006392:	d001      	beq.n	8006398 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8006394:	2303      	movs	r3, #3
 8006396:	e006      	b.n	80063a6 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	2220      	movs	r2, #32
 800639c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80063a0:	2300      	movs	r3, #0
 80063a2:	e000      	b.n	80063a6 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80063a4:	2302      	movs	r3, #2
  }
}
 80063a6:	4618      	mov	r0, r3
 80063a8:	3720      	adds	r7, #32
 80063aa:	46bd      	mov	sp, r7
 80063ac:	bd80      	pop	{r7, pc}

080063ae <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80063ae:	b580      	push	{r7, lr}
 80063b0:	b084      	sub	sp, #16
 80063b2:	af00      	add	r7, sp, #0
 80063b4:	60f8      	str	r0, [r7, #12]
 80063b6:	60b9      	str	r1, [r7, #8]
 80063b8:	4613      	mov	r3, r2
 80063ba:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80063c2:	b2db      	uxtb	r3, r3
 80063c4:	2b20      	cmp	r3, #32
 80063c6:	d112      	bne.n	80063ee <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80063c8:	68bb      	ldr	r3, [r7, #8]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d002      	beq.n	80063d4 <HAL_UART_Receive_DMA+0x26>
 80063ce:	88fb      	ldrh	r3, [r7, #6]
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d101      	bne.n	80063d8 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80063d4:	2301      	movs	r3, #1
 80063d6:	e00b      	b.n	80063f0 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	2200      	movs	r2, #0
 80063dc:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80063de:	88fb      	ldrh	r3, [r7, #6]
 80063e0:	461a      	mov	r2, r3
 80063e2:	68b9      	ldr	r1, [r7, #8]
 80063e4:	68f8      	ldr	r0, [r7, #12]
 80063e6:	f000 f991 	bl	800670c <UART_Start_Receive_DMA>
 80063ea:	4603      	mov	r3, r0
 80063ec:	e000      	b.n	80063f0 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 80063ee:	2302      	movs	r3, #2
  }
}
 80063f0:	4618      	mov	r0, r3
 80063f2:	3710      	adds	r7, #16
 80063f4:	46bd      	mov	sp, r7
 80063f6:	bd80      	pop	{r7, pc}

080063f8 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80063f8:	b480      	push	{r7}
 80063fa:	b083      	sub	sp, #12
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8006400:	bf00      	nop
 8006402:	370c      	adds	r7, #12
 8006404:	46bd      	mov	sp, r7
 8006406:	bc80      	pop	{r7}
 8006408:	4770      	bx	lr

0800640a <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800640a:	b480      	push	{r7}
 800640c:	b083      	sub	sp, #12
 800640e:	af00      	add	r7, sp, #0
 8006410:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006412:	bf00      	nop
 8006414:	370c      	adds	r7, #12
 8006416:	46bd      	mov	sp, r7
 8006418:	bc80      	pop	{r7}
 800641a:	4770      	bx	lr

0800641c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800641c:	b480      	push	{r7}
 800641e:	b083      	sub	sp, #12
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
 8006424:	460b      	mov	r3, r1
 8006426:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006428:	bf00      	nop
 800642a:	370c      	adds	r7, #12
 800642c:	46bd      	mov	sp, r7
 800642e:	bc80      	pop	{r7}
 8006430:	4770      	bx	lr

08006432 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006432:	b580      	push	{r7, lr}
 8006434:	b09c      	sub	sp, #112	@ 0x70
 8006436:	af00      	add	r7, sp, #0
 8006438:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800643e:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	f003 0320 	and.w	r3, r3, #32
 800644a:	2b00      	cmp	r3, #0
 800644c:	d172      	bne.n	8006534 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800644e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006450:	2200      	movs	r2, #0
 8006452:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006454:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	330c      	adds	r3, #12
 800645a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800645c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800645e:	e853 3f00 	ldrex	r3, [r3]
 8006462:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006464:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006466:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800646a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800646c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	330c      	adds	r3, #12
 8006472:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8006474:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006476:	657b      	str	r3, [r7, #84]	@ 0x54
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006478:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800647a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800647c:	e841 2300 	strex	r3, r2, [r1]
 8006480:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006482:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006484:	2b00      	cmp	r3, #0
 8006486:	d1e5      	bne.n	8006454 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006488:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	3314      	adds	r3, #20
 800648e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006490:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006492:	e853 3f00 	ldrex	r3, [r3]
 8006496:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006498:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800649a:	f023 0301 	bic.w	r3, r3, #1
 800649e:	667b      	str	r3, [r7, #100]	@ 0x64
 80064a0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	3314      	adds	r3, #20
 80064a6:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80064a8:	647a      	str	r2, [r7, #68]	@ 0x44
 80064aa:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064ac:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80064ae:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80064b0:	e841 2300 	strex	r3, r2, [r1]
 80064b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80064b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d1e5      	bne.n	8006488 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80064bc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	3314      	adds	r3, #20
 80064c2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064c6:	e853 3f00 	ldrex	r3, [r3]
 80064ca:	623b      	str	r3, [r7, #32]
   return(result);
 80064cc:	6a3b      	ldr	r3, [r7, #32]
 80064ce:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80064d2:	663b      	str	r3, [r7, #96]	@ 0x60
 80064d4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	3314      	adds	r3, #20
 80064da:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80064dc:	633a      	str	r2, [r7, #48]	@ 0x30
 80064de:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064e0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80064e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80064e4:	e841 2300 	strex	r3, r2, [r1]
 80064e8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80064ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d1e5      	bne.n	80064bc <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80064f0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80064f2:	2220      	movs	r2, #32
 80064f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80064f8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80064fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064fc:	2b01      	cmp	r3, #1
 80064fe:	d119      	bne.n	8006534 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006500:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	330c      	adds	r3, #12
 8006506:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006508:	693b      	ldr	r3, [r7, #16]
 800650a:	e853 3f00 	ldrex	r3, [r3]
 800650e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	f023 0310 	bic.w	r3, r3, #16
 8006516:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006518:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	330c      	adds	r3, #12
 800651e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8006520:	61fa      	str	r2, [r7, #28]
 8006522:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006524:	69b9      	ldr	r1, [r7, #24]
 8006526:	69fa      	ldr	r2, [r7, #28]
 8006528:	e841 2300 	strex	r3, r2, [r1]
 800652c:	617b      	str	r3, [r7, #20]
   return(result);
 800652e:	697b      	ldr	r3, [r7, #20]
 8006530:	2b00      	cmp	r3, #0
 8006532:	d1e5      	bne.n	8006500 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006534:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006536:	2200      	movs	r2, #0
 8006538:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800653a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800653c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800653e:	2b01      	cmp	r3, #1
 8006540:	d106      	bne.n	8006550 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006542:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006544:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006546:	4619      	mov	r1, r3
 8006548:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800654a:	f7ff ff67 	bl	800641c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800654e:	e002      	b.n	8006556 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8006550:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006552:	f7fc faff 	bl	8002b54 <HAL_UART_RxCpltCallback>
}
 8006556:	bf00      	nop
 8006558:	3770      	adds	r7, #112	@ 0x70
 800655a:	46bd      	mov	sp, r7
 800655c:	bd80      	pop	{r7, pc}

0800655e <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800655e:	b580      	push	{r7, lr}
 8006560:	b084      	sub	sp, #16
 8006562:	af00      	add	r7, sp, #0
 8006564:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800656a:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	2201      	movs	r2, #1
 8006570:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006576:	2b01      	cmp	r3, #1
 8006578:	d108      	bne.n	800658c <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800657e:	085b      	lsrs	r3, r3, #1
 8006580:	b29b      	uxth	r3, r3
 8006582:	4619      	mov	r1, r3
 8006584:	68f8      	ldr	r0, [r7, #12]
 8006586:	f7ff ff49 	bl	800641c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800658a:	e002      	b.n	8006592 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 800658c:	68f8      	ldr	r0, [r7, #12]
 800658e:	f7ff ff33 	bl	80063f8 <HAL_UART_RxHalfCpltCallback>
}
 8006592:	bf00      	nop
 8006594:	3710      	adds	r7, #16
 8006596:	46bd      	mov	sp, r7
 8006598:	bd80      	pop	{r7, pc}

0800659a <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800659a:	b580      	push	{r7, lr}
 800659c:	b084      	sub	sp, #16
 800659e:	af00      	add	r7, sp, #0
 80065a0:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80065a2:	2300      	movs	r3, #0
 80065a4:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065aa:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80065ac:	68bb      	ldr	r3, [r7, #8]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	695b      	ldr	r3, [r3, #20]
 80065b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	bf14      	ite	ne
 80065ba:	2301      	movne	r3, #1
 80065bc:	2300      	moveq	r3, #0
 80065be:	b2db      	uxtb	r3, r3
 80065c0:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80065c2:	68bb      	ldr	r3, [r7, #8]
 80065c4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80065c8:	b2db      	uxtb	r3, r3
 80065ca:	2b21      	cmp	r3, #33	@ 0x21
 80065cc:	d108      	bne.n	80065e0 <UART_DMAError+0x46>
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d005      	beq.n	80065e0 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80065d4:	68bb      	ldr	r3, [r7, #8]
 80065d6:	2200      	movs	r2, #0
 80065d8:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 80065da:	68b8      	ldr	r0, [r7, #8]
 80065dc:	f000 f930 	bl	8006840 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80065e0:	68bb      	ldr	r3, [r7, #8]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	695b      	ldr	r3, [r3, #20]
 80065e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	bf14      	ite	ne
 80065ee:	2301      	movne	r3, #1
 80065f0:	2300      	moveq	r3, #0
 80065f2:	b2db      	uxtb	r3, r3
 80065f4:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80065f6:	68bb      	ldr	r3, [r7, #8]
 80065f8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80065fc:	b2db      	uxtb	r3, r3
 80065fe:	2b22      	cmp	r3, #34	@ 0x22
 8006600:	d108      	bne.n	8006614 <UART_DMAError+0x7a>
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	2b00      	cmp	r3, #0
 8006606:	d005      	beq.n	8006614 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8006608:	68bb      	ldr	r3, [r7, #8]
 800660a:	2200      	movs	r2, #0
 800660c:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 800660e:	68b8      	ldr	r0, [r7, #8]
 8006610:	f000 f93d 	bl	800688e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006614:	68bb      	ldr	r3, [r7, #8]
 8006616:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006618:	f043 0210 	orr.w	r2, r3, #16
 800661c:	68bb      	ldr	r3, [r7, #8]
 800661e:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006620:	68b8      	ldr	r0, [r7, #8]
 8006622:	f7ff fef2 	bl	800640a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006626:	bf00      	nop
 8006628:	3710      	adds	r7, #16
 800662a:	46bd      	mov	sp, r7
 800662c:	bd80      	pop	{r7, pc}

0800662e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800662e:	b580      	push	{r7, lr}
 8006630:	b090      	sub	sp, #64	@ 0x40
 8006632:	af00      	add	r7, sp, #0
 8006634:	60f8      	str	r0, [r7, #12]
 8006636:	60b9      	str	r1, [r7, #8]
 8006638:	603b      	str	r3, [r7, #0]
 800663a:	4613      	mov	r3, r2
 800663c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800663e:	e050      	b.n	80066e2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006640:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006642:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006646:	d04c      	beq.n	80066e2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006648:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800664a:	2b00      	cmp	r3, #0
 800664c:	d007      	beq.n	800665e <UART_WaitOnFlagUntilTimeout+0x30>
 800664e:	f7fd f8a3 	bl	8003798 <HAL_GetTick>
 8006652:	4602      	mov	r2, r0
 8006654:	683b      	ldr	r3, [r7, #0]
 8006656:	1ad3      	subs	r3, r2, r3
 8006658:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800665a:	429a      	cmp	r2, r3
 800665c:	d241      	bcs.n	80066e2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	330c      	adds	r3, #12
 8006664:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006666:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006668:	e853 3f00 	ldrex	r3, [r3]
 800666c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800666e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006670:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8006674:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	330c      	adds	r3, #12
 800667c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800667e:	637a      	str	r2, [r7, #52]	@ 0x34
 8006680:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006682:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006684:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006686:	e841 2300 	strex	r3, r2, [r1]
 800668a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800668c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800668e:	2b00      	cmp	r3, #0
 8006690:	d1e5      	bne.n	800665e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	3314      	adds	r3, #20
 8006698:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800669a:	697b      	ldr	r3, [r7, #20]
 800669c:	e853 3f00 	ldrex	r3, [r3]
 80066a0:	613b      	str	r3, [r7, #16]
   return(result);
 80066a2:	693b      	ldr	r3, [r7, #16]
 80066a4:	f023 0301 	bic.w	r3, r3, #1
 80066a8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	3314      	adds	r3, #20
 80066b0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80066b2:	623a      	str	r2, [r7, #32]
 80066b4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066b6:	69f9      	ldr	r1, [r7, #28]
 80066b8:	6a3a      	ldr	r2, [r7, #32]
 80066ba:	e841 2300 	strex	r3, r2, [r1]
 80066be:	61bb      	str	r3, [r7, #24]
   return(result);
 80066c0:	69bb      	ldr	r3, [r7, #24]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d1e5      	bne.n	8006692 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	2220      	movs	r2, #32
 80066ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	2220      	movs	r2, #32
 80066d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	2200      	movs	r2, #0
 80066da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 80066de:	2303      	movs	r3, #3
 80066e0:	e00f      	b.n	8006702 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	681a      	ldr	r2, [r3, #0]
 80066e8:	68bb      	ldr	r3, [r7, #8]
 80066ea:	4013      	ands	r3, r2
 80066ec:	68ba      	ldr	r2, [r7, #8]
 80066ee:	429a      	cmp	r2, r3
 80066f0:	bf0c      	ite	eq
 80066f2:	2301      	moveq	r3, #1
 80066f4:	2300      	movne	r3, #0
 80066f6:	b2db      	uxtb	r3, r3
 80066f8:	461a      	mov	r2, r3
 80066fa:	79fb      	ldrb	r3, [r7, #7]
 80066fc:	429a      	cmp	r2, r3
 80066fe:	d09f      	beq.n	8006640 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006700:	2300      	movs	r3, #0
}
 8006702:	4618      	mov	r0, r3
 8006704:	3740      	adds	r7, #64	@ 0x40
 8006706:	46bd      	mov	sp, r7
 8006708:	bd80      	pop	{r7, pc}
	...

0800670c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800670c:	b580      	push	{r7, lr}
 800670e:	b098      	sub	sp, #96	@ 0x60
 8006710:	af00      	add	r7, sp, #0
 8006712:	60f8      	str	r0, [r7, #12]
 8006714:	60b9      	str	r1, [r7, #8]
 8006716:	4613      	mov	r3, r2
 8006718:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800671a:	68ba      	ldr	r2, [r7, #8]
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	88fa      	ldrh	r2, [r7, #6]
 8006724:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	2200      	movs	r2, #0
 800672a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	2222      	movs	r2, #34	@ 0x22
 8006730:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006738:	4a3e      	ldr	r2, [pc, #248]	@ (8006834 <UART_Start_Receive_DMA+0x128>)
 800673a:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006740:	4a3d      	ldr	r2, [pc, #244]	@ (8006838 <UART_Start_Receive_DMA+0x12c>)
 8006742:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006748:	4a3c      	ldr	r2, [pc, #240]	@ (800683c <UART_Start_Receive_DMA+0x130>)
 800674a:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006750:	2200      	movs	r2, #0
 8006752:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8006754:	f107 0308 	add.w	r3, r7, #8
 8006758:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	3304      	adds	r3, #4
 8006764:	4619      	mov	r1, r3
 8006766:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006768:	681a      	ldr	r2, [r3, #0]
 800676a:	88fb      	ldrh	r3, [r7, #6]
 800676c:	f7fd f9aa 	bl	8003ac4 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8006770:	2300      	movs	r3, #0
 8006772:	613b      	str	r3, [r7, #16]
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	613b      	str	r3, [r7, #16]
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	685b      	ldr	r3, [r3, #4]
 8006782:	613b      	str	r3, [r7, #16]
 8006784:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	691b      	ldr	r3, [r3, #16]
 800678a:	2b00      	cmp	r3, #0
 800678c:	d019      	beq.n	80067c2 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	330c      	adds	r3, #12
 8006794:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006796:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006798:	e853 3f00 	ldrex	r3, [r3]
 800679c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800679e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80067a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80067a4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	330c      	adds	r3, #12
 80067ac:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80067ae:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80067b0:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067b2:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80067b4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80067b6:	e841 2300 	strex	r3, r2, [r1]
 80067ba:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80067bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d1e5      	bne.n	800678e <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	3314      	adds	r3, #20
 80067c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067cc:	e853 3f00 	ldrex	r3, [r3]
 80067d0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80067d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067d4:	f043 0301 	orr.w	r3, r3, #1
 80067d8:	657b      	str	r3, [r7, #84]	@ 0x54
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	3314      	adds	r3, #20
 80067e0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80067e2:	63ba      	str	r2, [r7, #56]	@ 0x38
 80067e4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067e6:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80067e8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80067ea:	e841 2300 	strex	r3, r2, [r1]
 80067ee:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80067f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d1e5      	bne.n	80067c2 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	3314      	adds	r3, #20
 80067fc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067fe:	69bb      	ldr	r3, [r7, #24]
 8006800:	e853 3f00 	ldrex	r3, [r3]
 8006804:	617b      	str	r3, [r7, #20]
   return(result);
 8006806:	697b      	ldr	r3, [r7, #20]
 8006808:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800680c:	653b      	str	r3, [r7, #80]	@ 0x50
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	3314      	adds	r3, #20
 8006814:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006816:	627a      	str	r2, [r7, #36]	@ 0x24
 8006818:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800681a:	6a39      	ldr	r1, [r7, #32]
 800681c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800681e:	e841 2300 	strex	r3, r2, [r1]
 8006822:	61fb      	str	r3, [r7, #28]
   return(result);
 8006824:	69fb      	ldr	r3, [r7, #28]
 8006826:	2b00      	cmp	r3, #0
 8006828:	d1e5      	bne.n	80067f6 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800682a:	2300      	movs	r3, #0
}
 800682c:	4618      	mov	r0, r3
 800682e:	3760      	adds	r7, #96	@ 0x60
 8006830:	46bd      	mov	sp, r7
 8006832:	bd80      	pop	{r7, pc}
 8006834:	08006433 	.word	0x08006433
 8006838:	0800655f 	.word	0x0800655f
 800683c:	0800659b 	.word	0x0800659b

08006840 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006840:	b480      	push	{r7}
 8006842:	b089      	sub	sp, #36	@ 0x24
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	330c      	adds	r3, #12
 800684e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	e853 3f00 	ldrex	r3, [r3]
 8006856:	60bb      	str	r3, [r7, #8]
   return(result);
 8006858:	68bb      	ldr	r3, [r7, #8]
 800685a:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800685e:	61fb      	str	r3, [r7, #28]
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	330c      	adds	r3, #12
 8006866:	69fa      	ldr	r2, [r7, #28]
 8006868:	61ba      	str	r2, [r7, #24]
 800686a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800686c:	6979      	ldr	r1, [r7, #20]
 800686e:	69ba      	ldr	r2, [r7, #24]
 8006870:	e841 2300 	strex	r3, r2, [r1]
 8006874:	613b      	str	r3, [r7, #16]
   return(result);
 8006876:	693b      	ldr	r3, [r7, #16]
 8006878:	2b00      	cmp	r3, #0
 800687a:	d1e5      	bne.n	8006848 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	2220      	movs	r2, #32
 8006880:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8006884:	bf00      	nop
 8006886:	3724      	adds	r7, #36	@ 0x24
 8006888:	46bd      	mov	sp, r7
 800688a:	bc80      	pop	{r7}
 800688c:	4770      	bx	lr

0800688e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800688e:	b480      	push	{r7}
 8006890:	b095      	sub	sp, #84	@ 0x54
 8006892:	af00      	add	r7, sp, #0
 8006894:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	330c      	adds	r3, #12
 800689c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800689e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80068a0:	e853 3f00 	ldrex	r3, [r3]
 80068a4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80068a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068a8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80068ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	330c      	adds	r3, #12
 80068b4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80068b6:	643a      	str	r2, [r7, #64]	@ 0x40
 80068b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068ba:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80068bc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80068be:	e841 2300 	strex	r3, r2, [r1]
 80068c2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80068c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d1e5      	bne.n	8006896 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	3314      	adds	r3, #20
 80068d0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068d2:	6a3b      	ldr	r3, [r7, #32]
 80068d4:	e853 3f00 	ldrex	r3, [r3]
 80068d8:	61fb      	str	r3, [r7, #28]
   return(result);
 80068da:	69fb      	ldr	r3, [r7, #28]
 80068dc:	f023 0301 	bic.w	r3, r3, #1
 80068e0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	3314      	adds	r3, #20
 80068e8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80068ea:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80068ec:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068ee:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80068f0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80068f2:	e841 2300 	strex	r3, r2, [r1]
 80068f6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80068f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d1e5      	bne.n	80068ca <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006902:	2b01      	cmp	r3, #1
 8006904:	d119      	bne.n	800693a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	330c      	adds	r3, #12
 800690c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	e853 3f00 	ldrex	r3, [r3]
 8006914:	60bb      	str	r3, [r7, #8]
   return(result);
 8006916:	68bb      	ldr	r3, [r7, #8]
 8006918:	f023 0310 	bic.w	r3, r3, #16
 800691c:	647b      	str	r3, [r7, #68]	@ 0x44
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	330c      	adds	r3, #12
 8006924:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006926:	61ba      	str	r2, [r7, #24]
 8006928:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800692a:	6979      	ldr	r1, [r7, #20]
 800692c:	69ba      	ldr	r2, [r7, #24]
 800692e:	e841 2300 	strex	r3, r2, [r1]
 8006932:	613b      	str	r3, [r7, #16]
   return(result);
 8006934:	693b      	ldr	r3, [r7, #16]
 8006936:	2b00      	cmp	r3, #0
 8006938:	d1e5      	bne.n	8006906 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	2220      	movs	r2, #32
 800693e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	2200      	movs	r2, #0
 8006946:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006948:	bf00      	nop
 800694a:	3754      	adds	r7, #84	@ 0x54
 800694c:	46bd      	mov	sp, r7
 800694e:	bc80      	pop	{r7}
 8006950:	4770      	bx	lr
	...

08006954 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006954:	b580      	push	{r7, lr}
 8006956:	b084      	sub	sp, #16
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	691b      	ldr	r3, [r3, #16]
 8006962:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	68da      	ldr	r2, [r3, #12]
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	430a      	orrs	r2, r1
 8006970:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	689a      	ldr	r2, [r3, #8]
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	691b      	ldr	r3, [r3, #16]
 800697a:	431a      	orrs	r2, r3
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	695b      	ldr	r3, [r3, #20]
 8006980:	4313      	orrs	r3, r2
 8006982:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	68db      	ldr	r3, [r3, #12]
 800698a:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800698e:	f023 030c 	bic.w	r3, r3, #12
 8006992:	687a      	ldr	r2, [r7, #4]
 8006994:	6812      	ldr	r2, [r2, #0]
 8006996:	68b9      	ldr	r1, [r7, #8]
 8006998:	430b      	orrs	r3, r1
 800699a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	695b      	ldr	r3, [r3, #20]
 80069a2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	699a      	ldr	r2, [r3, #24]
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	430a      	orrs	r2, r1
 80069b0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	4a2c      	ldr	r2, [pc, #176]	@ (8006a68 <UART_SetConfig+0x114>)
 80069b8:	4293      	cmp	r3, r2
 80069ba:	d103      	bne.n	80069c4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80069bc:	f7fe ffd2 	bl	8005964 <HAL_RCC_GetPCLK2Freq>
 80069c0:	60f8      	str	r0, [r7, #12]
 80069c2:	e002      	b.n	80069ca <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80069c4:	f7fe ffba 	bl	800593c <HAL_RCC_GetPCLK1Freq>
 80069c8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80069ca:	68fa      	ldr	r2, [r7, #12]
 80069cc:	4613      	mov	r3, r2
 80069ce:	009b      	lsls	r3, r3, #2
 80069d0:	4413      	add	r3, r2
 80069d2:	009a      	lsls	r2, r3, #2
 80069d4:	441a      	add	r2, r3
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	685b      	ldr	r3, [r3, #4]
 80069da:	009b      	lsls	r3, r3, #2
 80069dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80069e0:	4a22      	ldr	r2, [pc, #136]	@ (8006a6c <UART_SetConfig+0x118>)
 80069e2:	fba2 2303 	umull	r2, r3, r2, r3
 80069e6:	095b      	lsrs	r3, r3, #5
 80069e8:	0119      	lsls	r1, r3, #4
 80069ea:	68fa      	ldr	r2, [r7, #12]
 80069ec:	4613      	mov	r3, r2
 80069ee:	009b      	lsls	r3, r3, #2
 80069f0:	4413      	add	r3, r2
 80069f2:	009a      	lsls	r2, r3, #2
 80069f4:	441a      	add	r2, r3
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	685b      	ldr	r3, [r3, #4]
 80069fa:	009b      	lsls	r3, r3, #2
 80069fc:	fbb2 f2f3 	udiv	r2, r2, r3
 8006a00:	4b1a      	ldr	r3, [pc, #104]	@ (8006a6c <UART_SetConfig+0x118>)
 8006a02:	fba3 0302 	umull	r0, r3, r3, r2
 8006a06:	095b      	lsrs	r3, r3, #5
 8006a08:	2064      	movs	r0, #100	@ 0x64
 8006a0a:	fb00 f303 	mul.w	r3, r0, r3
 8006a0e:	1ad3      	subs	r3, r2, r3
 8006a10:	011b      	lsls	r3, r3, #4
 8006a12:	3332      	adds	r3, #50	@ 0x32
 8006a14:	4a15      	ldr	r2, [pc, #84]	@ (8006a6c <UART_SetConfig+0x118>)
 8006a16:	fba2 2303 	umull	r2, r3, r2, r3
 8006a1a:	095b      	lsrs	r3, r3, #5
 8006a1c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006a20:	4419      	add	r1, r3
 8006a22:	68fa      	ldr	r2, [r7, #12]
 8006a24:	4613      	mov	r3, r2
 8006a26:	009b      	lsls	r3, r3, #2
 8006a28:	4413      	add	r3, r2
 8006a2a:	009a      	lsls	r2, r3, #2
 8006a2c:	441a      	add	r2, r3
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	685b      	ldr	r3, [r3, #4]
 8006a32:	009b      	lsls	r3, r3, #2
 8006a34:	fbb2 f2f3 	udiv	r2, r2, r3
 8006a38:	4b0c      	ldr	r3, [pc, #48]	@ (8006a6c <UART_SetConfig+0x118>)
 8006a3a:	fba3 0302 	umull	r0, r3, r3, r2
 8006a3e:	095b      	lsrs	r3, r3, #5
 8006a40:	2064      	movs	r0, #100	@ 0x64
 8006a42:	fb00 f303 	mul.w	r3, r0, r3
 8006a46:	1ad3      	subs	r3, r2, r3
 8006a48:	011b      	lsls	r3, r3, #4
 8006a4a:	3332      	adds	r3, #50	@ 0x32
 8006a4c:	4a07      	ldr	r2, [pc, #28]	@ (8006a6c <UART_SetConfig+0x118>)
 8006a4e:	fba2 2303 	umull	r2, r3, r2, r3
 8006a52:	095b      	lsrs	r3, r3, #5
 8006a54:	f003 020f 	and.w	r2, r3, #15
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	440a      	add	r2, r1
 8006a5e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006a60:	bf00      	nop
 8006a62:	3710      	adds	r7, #16
 8006a64:	46bd      	mov	sp, r7
 8006a66:	bd80      	pop	{r7, pc}
 8006a68:	40013800 	.word	0x40013800
 8006a6c:	51eb851f 	.word	0x51eb851f

08006a70 <__cvt>:
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a76:	461d      	mov	r5, r3
 8006a78:	bfbb      	ittet	lt
 8006a7a:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8006a7e:	461d      	movlt	r5, r3
 8006a80:	2300      	movge	r3, #0
 8006a82:	232d      	movlt	r3, #45	@ 0x2d
 8006a84:	b088      	sub	sp, #32
 8006a86:	4614      	mov	r4, r2
 8006a88:	bfb8      	it	lt
 8006a8a:	4614      	movlt	r4, r2
 8006a8c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8006a8e:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8006a90:	7013      	strb	r3, [r2, #0]
 8006a92:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006a94:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8006a98:	f023 0820 	bic.w	r8, r3, #32
 8006a9c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006aa0:	d005      	beq.n	8006aae <__cvt+0x3e>
 8006aa2:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8006aa6:	d100      	bne.n	8006aaa <__cvt+0x3a>
 8006aa8:	3601      	adds	r6, #1
 8006aaa:	2302      	movs	r3, #2
 8006aac:	e000      	b.n	8006ab0 <__cvt+0x40>
 8006aae:	2303      	movs	r3, #3
 8006ab0:	aa07      	add	r2, sp, #28
 8006ab2:	9204      	str	r2, [sp, #16]
 8006ab4:	aa06      	add	r2, sp, #24
 8006ab6:	e9cd a202 	strd	sl, r2, [sp, #8]
 8006aba:	e9cd 3600 	strd	r3, r6, [sp]
 8006abe:	4622      	mov	r2, r4
 8006ac0:	462b      	mov	r3, r5
 8006ac2:	f001 f8f9 	bl	8007cb8 <_dtoa_r>
 8006ac6:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8006aca:	4607      	mov	r7, r0
 8006acc:	d119      	bne.n	8006b02 <__cvt+0x92>
 8006ace:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8006ad0:	07db      	lsls	r3, r3, #31
 8006ad2:	d50e      	bpl.n	8006af2 <__cvt+0x82>
 8006ad4:	eb00 0906 	add.w	r9, r0, r6
 8006ad8:	2200      	movs	r2, #0
 8006ada:	2300      	movs	r3, #0
 8006adc:	4620      	mov	r0, r4
 8006ade:	4629      	mov	r1, r5
 8006ae0:	f7f9 ff62 	bl	80009a8 <__aeabi_dcmpeq>
 8006ae4:	b108      	cbz	r0, 8006aea <__cvt+0x7a>
 8006ae6:	f8cd 901c 	str.w	r9, [sp, #28]
 8006aea:	2230      	movs	r2, #48	@ 0x30
 8006aec:	9b07      	ldr	r3, [sp, #28]
 8006aee:	454b      	cmp	r3, r9
 8006af0:	d31e      	bcc.n	8006b30 <__cvt+0xc0>
 8006af2:	4638      	mov	r0, r7
 8006af4:	9b07      	ldr	r3, [sp, #28]
 8006af6:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8006af8:	1bdb      	subs	r3, r3, r7
 8006afa:	6013      	str	r3, [r2, #0]
 8006afc:	b008      	add	sp, #32
 8006afe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b02:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006b06:	eb00 0906 	add.w	r9, r0, r6
 8006b0a:	d1e5      	bne.n	8006ad8 <__cvt+0x68>
 8006b0c:	7803      	ldrb	r3, [r0, #0]
 8006b0e:	2b30      	cmp	r3, #48	@ 0x30
 8006b10:	d10a      	bne.n	8006b28 <__cvt+0xb8>
 8006b12:	2200      	movs	r2, #0
 8006b14:	2300      	movs	r3, #0
 8006b16:	4620      	mov	r0, r4
 8006b18:	4629      	mov	r1, r5
 8006b1a:	f7f9 ff45 	bl	80009a8 <__aeabi_dcmpeq>
 8006b1e:	b918      	cbnz	r0, 8006b28 <__cvt+0xb8>
 8006b20:	f1c6 0601 	rsb	r6, r6, #1
 8006b24:	f8ca 6000 	str.w	r6, [sl]
 8006b28:	f8da 3000 	ldr.w	r3, [sl]
 8006b2c:	4499      	add	r9, r3
 8006b2e:	e7d3      	b.n	8006ad8 <__cvt+0x68>
 8006b30:	1c59      	adds	r1, r3, #1
 8006b32:	9107      	str	r1, [sp, #28]
 8006b34:	701a      	strb	r2, [r3, #0]
 8006b36:	e7d9      	b.n	8006aec <__cvt+0x7c>

08006b38 <__exponent>:
 8006b38:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006b3a:	2900      	cmp	r1, #0
 8006b3c:	bfb6      	itet	lt
 8006b3e:	232d      	movlt	r3, #45	@ 0x2d
 8006b40:	232b      	movge	r3, #43	@ 0x2b
 8006b42:	4249      	neglt	r1, r1
 8006b44:	2909      	cmp	r1, #9
 8006b46:	7002      	strb	r2, [r0, #0]
 8006b48:	7043      	strb	r3, [r0, #1]
 8006b4a:	dd29      	ble.n	8006ba0 <__exponent+0x68>
 8006b4c:	f10d 0307 	add.w	r3, sp, #7
 8006b50:	461d      	mov	r5, r3
 8006b52:	270a      	movs	r7, #10
 8006b54:	fbb1 f6f7 	udiv	r6, r1, r7
 8006b58:	461a      	mov	r2, r3
 8006b5a:	fb07 1416 	mls	r4, r7, r6, r1
 8006b5e:	3430      	adds	r4, #48	@ 0x30
 8006b60:	f802 4c01 	strb.w	r4, [r2, #-1]
 8006b64:	460c      	mov	r4, r1
 8006b66:	2c63      	cmp	r4, #99	@ 0x63
 8006b68:	4631      	mov	r1, r6
 8006b6a:	f103 33ff 	add.w	r3, r3, #4294967295
 8006b6e:	dcf1      	bgt.n	8006b54 <__exponent+0x1c>
 8006b70:	3130      	adds	r1, #48	@ 0x30
 8006b72:	1e94      	subs	r4, r2, #2
 8006b74:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006b78:	4623      	mov	r3, r4
 8006b7a:	1c41      	adds	r1, r0, #1
 8006b7c:	42ab      	cmp	r3, r5
 8006b7e:	d30a      	bcc.n	8006b96 <__exponent+0x5e>
 8006b80:	f10d 0309 	add.w	r3, sp, #9
 8006b84:	1a9b      	subs	r3, r3, r2
 8006b86:	42ac      	cmp	r4, r5
 8006b88:	bf88      	it	hi
 8006b8a:	2300      	movhi	r3, #0
 8006b8c:	3302      	adds	r3, #2
 8006b8e:	4403      	add	r3, r0
 8006b90:	1a18      	subs	r0, r3, r0
 8006b92:	b003      	add	sp, #12
 8006b94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006b96:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006b9a:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006b9e:	e7ed      	b.n	8006b7c <__exponent+0x44>
 8006ba0:	2330      	movs	r3, #48	@ 0x30
 8006ba2:	3130      	adds	r1, #48	@ 0x30
 8006ba4:	7083      	strb	r3, [r0, #2]
 8006ba6:	70c1      	strb	r1, [r0, #3]
 8006ba8:	1d03      	adds	r3, r0, #4
 8006baa:	e7f1      	b.n	8006b90 <__exponent+0x58>

08006bac <_printf_float>:
 8006bac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bb0:	b091      	sub	sp, #68	@ 0x44
 8006bb2:	460c      	mov	r4, r1
 8006bb4:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8006bb8:	4616      	mov	r6, r2
 8006bba:	461f      	mov	r7, r3
 8006bbc:	4605      	mov	r5, r0
 8006bbe:	f000 ff67 	bl	8007a90 <_localeconv_r>
 8006bc2:	6803      	ldr	r3, [r0, #0]
 8006bc4:	4618      	mov	r0, r3
 8006bc6:	9308      	str	r3, [sp, #32]
 8006bc8:	f7f9 fac2 	bl	8000150 <strlen>
 8006bcc:	2300      	movs	r3, #0
 8006bce:	930e      	str	r3, [sp, #56]	@ 0x38
 8006bd0:	f8d8 3000 	ldr.w	r3, [r8]
 8006bd4:	9009      	str	r0, [sp, #36]	@ 0x24
 8006bd6:	3307      	adds	r3, #7
 8006bd8:	f023 0307 	bic.w	r3, r3, #7
 8006bdc:	f103 0208 	add.w	r2, r3, #8
 8006be0:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006be4:	f8d4 b000 	ldr.w	fp, [r4]
 8006be8:	f8c8 2000 	str.w	r2, [r8]
 8006bec:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006bf0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8006bf4:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006bf6:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8006bfa:	f04f 32ff 	mov.w	r2, #4294967295
 8006bfe:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006c02:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8006c06:	4b9c      	ldr	r3, [pc, #624]	@ (8006e78 <_printf_float+0x2cc>)
 8006c08:	f7f9 ff00 	bl	8000a0c <__aeabi_dcmpun>
 8006c0c:	bb70      	cbnz	r0, 8006c6c <_printf_float+0xc0>
 8006c0e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006c12:	f04f 32ff 	mov.w	r2, #4294967295
 8006c16:	4b98      	ldr	r3, [pc, #608]	@ (8006e78 <_printf_float+0x2cc>)
 8006c18:	f7f9 feda 	bl	80009d0 <__aeabi_dcmple>
 8006c1c:	bb30      	cbnz	r0, 8006c6c <_printf_float+0xc0>
 8006c1e:	2200      	movs	r2, #0
 8006c20:	2300      	movs	r3, #0
 8006c22:	4640      	mov	r0, r8
 8006c24:	4649      	mov	r1, r9
 8006c26:	f7f9 fec9 	bl	80009bc <__aeabi_dcmplt>
 8006c2a:	b110      	cbz	r0, 8006c32 <_printf_float+0x86>
 8006c2c:	232d      	movs	r3, #45	@ 0x2d
 8006c2e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006c32:	4a92      	ldr	r2, [pc, #584]	@ (8006e7c <_printf_float+0x2d0>)
 8006c34:	4b92      	ldr	r3, [pc, #584]	@ (8006e80 <_printf_float+0x2d4>)
 8006c36:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8006c3a:	bf94      	ite	ls
 8006c3c:	4690      	movls	r8, r2
 8006c3e:	4698      	movhi	r8, r3
 8006c40:	2303      	movs	r3, #3
 8006c42:	f04f 0900 	mov.w	r9, #0
 8006c46:	6123      	str	r3, [r4, #16]
 8006c48:	f02b 0304 	bic.w	r3, fp, #4
 8006c4c:	6023      	str	r3, [r4, #0]
 8006c4e:	4633      	mov	r3, r6
 8006c50:	4621      	mov	r1, r4
 8006c52:	4628      	mov	r0, r5
 8006c54:	9700      	str	r7, [sp, #0]
 8006c56:	aa0f      	add	r2, sp, #60	@ 0x3c
 8006c58:	f000 f9d4 	bl	8007004 <_printf_common>
 8006c5c:	3001      	adds	r0, #1
 8006c5e:	f040 8090 	bne.w	8006d82 <_printf_float+0x1d6>
 8006c62:	f04f 30ff 	mov.w	r0, #4294967295
 8006c66:	b011      	add	sp, #68	@ 0x44
 8006c68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c6c:	4642      	mov	r2, r8
 8006c6e:	464b      	mov	r3, r9
 8006c70:	4640      	mov	r0, r8
 8006c72:	4649      	mov	r1, r9
 8006c74:	f7f9 feca 	bl	8000a0c <__aeabi_dcmpun>
 8006c78:	b148      	cbz	r0, 8006c8e <_printf_float+0xe2>
 8006c7a:	464b      	mov	r3, r9
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	bfb8      	it	lt
 8006c80:	232d      	movlt	r3, #45	@ 0x2d
 8006c82:	4a80      	ldr	r2, [pc, #512]	@ (8006e84 <_printf_float+0x2d8>)
 8006c84:	bfb8      	it	lt
 8006c86:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8006c8a:	4b7f      	ldr	r3, [pc, #508]	@ (8006e88 <_printf_float+0x2dc>)
 8006c8c:	e7d3      	b.n	8006c36 <_printf_float+0x8a>
 8006c8e:	6863      	ldr	r3, [r4, #4]
 8006c90:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8006c94:	1c5a      	adds	r2, r3, #1
 8006c96:	d13f      	bne.n	8006d18 <_printf_float+0x16c>
 8006c98:	2306      	movs	r3, #6
 8006c9a:	6063      	str	r3, [r4, #4]
 8006c9c:	2200      	movs	r2, #0
 8006c9e:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8006ca2:	6023      	str	r3, [r4, #0]
 8006ca4:	9206      	str	r2, [sp, #24]
 8006ca6:	aa0e      	add	r2, sp, #56	@ 0x38
 8006ca8:	e9cd a204 	strd	sl, r2, [sp, #16]
 8006cac:	aa0d      	add	r2, sp, #52	@ 0x34
 8006cae:	9203      	str	r2, [sp, #12]
 8006cb0:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8006cb4:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8006cb8:	6863      	ldr	r3, [r4, #4]
 8006cba:	4642      	mov	r2, r8
 8006cbc:	9300      	str	r3, [sp, #0]
 8006cbe:	4628      	mov	r0, r5
 8006cc0:	464b      	mov	r3, r9
 8006cc2:	910a      	str	r1, [sp, #40]	@ 0x28
 8006cc4:	f7ff fed4 	bl	8006a70 <__cvt>
 8006cc8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006cca:	4680      	mov	r8, r0
 8006ccc:	2947      	cmp	r1, #71	@ 0x47
 8006cce:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8006cd0:	d128      	bne.n	8006d24 <_printf_float+0x178>
 8006cd2:	1cc8      	adds	r0, r1, #3
 8006cd4:	db02      	blt.n	8006cdc <_printf_float+0x130>
 8006cd6:	6863      	ldr	r3, [r4, #4]
 8006cd8:	4299      	cmp	r1, r3
 8006cda:	dd40      	ble.n	8006d5e <_printf_float+0x1b2>
 8006cdc:	f1aa 0a02 	sub.w	sl, sl, #2
 8006ce0:	fa5f fa8a 	uxtb.w	sl, sl
 8006ce4:	4652      	mov	r2, sl
 8006ce6:	3901      	subs	r1, #1
 8006ce8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006cec:	910d      	str	r1, [sp, #52]	@ 0x34
 8006cee:	f7ff ff23 	bl	8006b38 <__exponent>
 8006cf2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006cf4:	4681      	mov	r9, r0
 8006cf6:	1813      	adds	r3, r2, r0
 8006cf8:	2a01      	cmp	r2, #1
 8006cfa:	6123      	str	r3, [r4, #16]
 8006cfc:	dc02      	bgt.n	8006d04 <_printf_float+0x158>
 8006cfe:	6822      	ldr	r2, [r4, #0]
 8006d00:	07d2      	lsls	r2, r2, #31
 8006d02:	d501      	bpl.n	8006d08 <_printf_float+0x15c>
 8006d04:	3301      	adds	r3, #1
 8006d06:	6123      	str	r3, [r4, #16]
 8006d08:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d09e      	beq.n	8006c4e <_printf_float+0xa2>
 8006d10:	232d      	movs	r3, #45	@ 0x2d
 8006d12:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006d16:	e79a      	b.n	8006c4e <_printf_float+0xa2>
 8006d18:	2947      	cmp	r1, #71	@ 0x47
 8006d1a:	d1bf      	bne.n	8006c9c <_printf_float+0xf0>
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d1bd      	bne.n	8006c9c <_printf_float+0xf0>
 8006d20:	2301      	movs	r3, #1
 8006d22:	e7ba      	b.n	8006c9a <_printf_float+0xee>
 8006d24:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006d28:	d9dc      	bls.n	8006ce4 <_printf_float+0x138>
 8006d2a:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8006d2e:	d118      	bne.n	8006d62 <_printf_float+0x1b6>
 8006d30:	2900      	cmp	r1, #0
 8006d32:	6863      	ldr	r3, [r4, #4]
 8006d34:	dd0b      	ble.n	8006d4e <_printf_float+0x1a2>
 8006d36:	6121      	str	r1, [r4, #16]
 8006d38:	b913      	cbnz	r3, 8006d40 <_printf_float+0x194>
 8006d3a:	6822      	ldr	r2, [r4, #0]
 8006d3c:	07d0      	lsls	r0, r2, #31
 8006d3e:	d502      	bpl.n	8006d46 <_printf_float+0x19a>
 8006d40:	3301      	adds	r3, #1
 8006d42:	440b      	add	r3, r1
 8006d44:	6123      	str	r3, [r4, #16]
 8006d46:	f04f 0900 	mov.w	r9, #0
 8006d4a:	65a1      	str	r1, [r4, #88]	@ 0x58
 8006d4c:	e7dc      	b.n	8006d08 <_printf_float+0x15c>
 8006d4e:	b913      	cbnz	r3, 8006d56 <_printf_float+0x1aa>
 8006d50:	6822      	ldr	r2, [r4, #0]
 8006d52:	07d2      	lsls	r2, r2, #31
 8006d54:	d501      	bpl.n	8006d5a <_printf_float+0x1ae>
 8006d56:	3302      	adds	r3, #2
 8006d58:	e7f4      	b.n	8006d44 <_printf_float+0x198>
 8006d5a:	2301      	movs	r3, #1
 8006d5c:	e7f2      	b.n	8006d44 <_printf_float+0x198>
 8006d5e:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8006d62:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006d64:	4299      	cmp	r1, r3
 8006d66:	db05      	blt.n	8006d74 <_printf_float+0x1c8>
 8006d68:	6823      	ldr	r3, [r4, #0]
 8006d6a:	6121      	str	r1, [r4, #16]
 8006d6c:	07d8      	lsls	r0, r3, #31
 8006d6e:	d5ea      	bpl.n	8006d46 <_printf_float+0x19a>
 8006d70:	1c4b      	adds	r3, r1, #1
 8006d72:	e7e7      	b.n	8006d44 <_printf_float+0x198>
 8006d74:	2900      	cmp	r1, #0
 8006d76:	bfcc      	ite	gt
 8006d78:	2201      	movgt	r2, #1
 8006d7a:	f1c1 0202 	rsble	r2, r1, #2
 8006d7e:	4413      	add	r3, r2
 8006d80:	e7e0      	b.n	8006d44 <_printf_float+0x198>
 8006d82:	6823      	ldr	r3, [r4, #0]
 8006d84:	055a      	lsls	r2, r3, #21
 8006d86:	d407      	bmi.n	8006d98 <_printf_float+0x1ec>
 8006d88:	6923      	ldr	r3, [r4, #16]
 8006d8a:	4642      	mov	r2, r8
 8006d8c:	4631      	mov	r1, r6
 8006d8e:	4628      	mov	r0, r5
 8006d90:	47b8      	blx	r7
 8006d92:	3001      	adds	r0, #1
 8006d94:	d12b      	bne.n	8006dee <_printf_float+0x242>
 8006d96:	e764      	b.n	8006c62 <_printf_float+0xb6>
 8006d98:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006d9c:	f240 80dc 	bls.w	8006f58 <_printf_float+0x3ac>
 8006da0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006da4:	2200      	movs	r2, #0
 8006da6:	2300      	movs	r3, #0
 8006da8:	f7f9 fdfe 	bl	80009a8 <__aeabi_dcmpeq>
 8006dac:	2800      	cmp	r0, #0
 8006dae:	d033      	beq.n	8006e18 <_printf_float+0x26c>
 8006db0:	2301      	movs	r3, #1
 8006db2:	4631      	mov	r1, r6
 8006db4:	4628      	mov	r0, r5
 8006db6:	4a35      	ldr	r2, [pc, #212]	@ (8006e8c <_printf_float+0x2e0>)
 8006db8:	47b8      	blx	r7
 8006dba:	3001      	adds	r0, #1
 8006dbc:	f43f af51 	beq.w	8006c62 <_printf_float+0xb6>
 8006dc0:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8006dc4:	4543      	cmp	r3, r8
 8006dc6:	db02      	blt.n	8006dce <_printf_float+0x222>
 8006dc8:	6823      	ldr	r3, [r4, #0]
 8006dca:	07d8      	lsls	r0, r3, #31
 8006dcc:	d50f      	bpl.n	8006dee <_printf_float+0x242>
 8006dce:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006dd2:	4631      	mov	r1, r6
 8006dd4:	4628      	mov	r0, r5
 8006dd6:	47b8      	blx	r7
 8006dd8:	3001      	adds	r0, #1
 8006dda:	f43f af42 	beq.w	8006c62 <_printf_float+0xb6>
 8006dde:	f04f 0900 	mov.w	r9, #0
 8006de2:	f108 38ff 	add.w	r8, r8, #4294967295
 8006de6:	f104 0a1a 	add.w	sl, r4, #26
 8006dea:	45c8      	cmp	r8, r9
 8006dec:	dc09      	bgt.n	8006e02 <_printf_float+0x256>
 8006dee:	6823      	ldr	r3, [r4, #0]
 8006df0:	079b      	lsls	r3, r3, #30
 8006df2:	f100 8102 	bmi.w	8006ffa <_printf_float+0x44e>
 8006df6:	68e0      	ldr	r0, [r4, #12]
 8006df8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006dfa:	4298      	cmp	r0, r3
 8006dfc:	bfb8      	it	lt
 8006dfe:	4618      	movlt	r0, r3
 8006e00:	e731      	b.n	8006c66 <_printf_float+0xba>
 8006e02:	2301      	movs	r3, #1
 8006e04:	4652      	mov	r2, sl
 8006e06:	4631      	mov	r1, r6
 8006e08:	4628      	mov	r0, r5
 8006e0a:	47b8      	blx	r7
 8006e0c:	3001      	adds	r0, #1
 8006e0e:	f43f af28 	beq.w	8006c62 <_printf_float+0xb6>
 8006e12:	f109 0901 	add.w	r9, r9, #1
 8006e16:	e7e8      	b.n	8006dea <_printf_float+0x23e>
 8006e18:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	dc38      	bgt.n	8006e90 <_printf_float+0x2e4>
 8006e1e:	2301      	movs	r3, #1
 8006e20:	4631      	mov	r1, r6
 8006e22:	4628      	mov	r0, r5
 8006e24:	4a19      	ldr	r2, [pc, #100]	@ (8006e8c <_printf_float+0x2e0>)
 8006e26:	47b8      	blx	r7
 8006e28:	3001      	adds	r0, #1
 8006e2a:	f43f af1a 	beq.w	8006c62 <_printf_float+0xb6>
 8006e2e:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8006e32:	ea59 0303 	orrs.w	r3, r9, r3
 8006e36:	d102      	bne.n	8006e3e <_printf_float+0x292>
 8006e38:	6823      	ldr	r3, [r4, #0]
 8006e3a:	07d9      	lsls	r1, r3, #31
 8006e3c:	d5d7      	bpl.n	8006dee <_printf_float+0x242>
 8006e3e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006e42:	4631      	mov	r1, r6
 8006e44:	4628      	mov	r0, r5
 8006e46:	47b8      	blx	r7
 8006e48:	3001      	adds	r0, #1
 8006e4a:	f43f af0a 	beq.w	8006c62 <_printf_float+0xb6>
 8006e4e:	f04f 0a00 	mov.w	sl, #0
 8006e52:	f104 0b1a 	add.w	fp, r4, #26
 8006e56:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006e58:	425b      	negs	r3, r3
 8006e5a:	4553      	cmp	r3, sl
 8006e5c:	dc01      	bgt.n	8006e62 <_printf_float+0x2b6>
 8006e5e:	464b      	mov	r3, r9
 8006e60:	e793      	b.n	8006d8a <_printf_float+0x1de>
 8006e62:	2301      	movs	r3, #1
 8006e64:	465a      	mov	r2, fp
 8006e66:	4631      	mov	r1, r6
 8006e68:	4628      	mov	r0, r5
 8006e6a:	47b8      	blx	r7
 8006e6c:	3001      	adds	r0, #1
 8006e6e:	f43f aef8 	beq.w	8006c62 <_printf_float+0xb6>
 8006e72:	f10a 0a01 	add.w	sl, sl, #1
 8006e76:	e7ee      	b.n	8006e56 <_printf_float+0x2aa>
 8006e78:	7fefffff 	.word	0x7fefffff
 8006e7c:	0800ca96 	.word	0x0800ca96
 8006e80:	0800ca9a 	.word	0x0800ca9a
 8006e84:	0800ca9e 	.word	0x0800ca9e
 8006e88:	0800caa2 	.word	0x0800caa2
 8006e8c:	0800ce30 	.word	0x0800ce30
 8006e90:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006e92:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8006e96:	4553      	cmp	r3, sl
 8006e98:	bfa8      	it	ge
 8006e9a:	4653      	movge	r3, sl
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	4699      	mov	r9, r3
 8006ea0:	dc36      	bgt.n	8006f10 <_printf_float+0x364>
 8006ea2:	f04f 0b00 	mov.w	fp, #0
 8006ea6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006eaa:	f104 021a 	add.w	r2, r4, #26
 8006eae:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006eb0:	930a      	str	r3, [sp, #40]	@ 0x28
 8006eb2:	eba3 0309 	sub.w	r3, r3, r9
 8006eb6:	455b      	cmp	r3, fp
 8006eb8:	dc31      	bgt.n	8006f1e <_printf_float+0x372>
 8006eba:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006ebc:	459a      	cmp	sl, r3
 8006ebe:	dc3a      	bgt.n	8006f36 <_printf_float+0x38a>
 8006ec0:	6823      	ldr	r3, [r4, #0]
 8006ec2:	07da      	lsls	r2, r3, #31
 8006ec4:	d437      	bmi.n	8006f36 <_printf_float+0x38a>
 8006ec6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006ec8:	ebaa 0903 	sub.w	r9, sl, r3
 8006ecc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006ece:	ebaa 0303 	sub.w	r3, sl, r3
 8006ed2:	4599      	cmp	r9, r3
 8006ed4:	bfa8      	it	ge
 8006ed6:	4699      	movge	r9, r3
 8006ed8:	f1b9 0f00 	cmp.w	r9, #0
 8006edc:	dc33      	bgt.n	8006f46 <_printf_float+0x39a>
 8006ede:	f04f 0800 	mov.w	r8, #0
 8006ee2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006ee6:	f104 0b1a 	add.w	fp, r4, #26
 8006eea:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006eec:	ebaa 0303 	sub.w	r3, sl, r3
 8006ef0:	eba3 0309 	sub.w	r3, r3, r9
 8006ef4:	4543      	cmp	r3, r8
 8006ef6:	f77f af7a 	ble.w	8006dee <_printf_float+0x242>
 8006efa:	2301      	movs	r3, #1
 8006efc:	465a      	mov	r2, fp
 8006efe:	4631      	mov	r1, r6
 8006f00:	4628      	mov	r0, r5
 8006f02:	47b8      	blx	r7
 8006f04:	3001      	adds	r0, #1
 8006f06:	f43f aeac 	beq.w	8006c62 <_printf_float+0xb6>
 8006f0a:	f108 0801 	add.w	r8, r8, #1
 8006f0e:	e7ec      	b.n	8006eea <_printf_float+0x33e>
 8006f10:	4642      	mov	r2, r8
 8006f12:	4631      	mov	r1, r6
 8006f14:	4628      	mov	r0, r5
 8006f16:	47b8      	blx	r7
 8006f18:	3001      	adds	r0, #1
 8006f1a:	d1c2      	bne.n	8006ea2 <_printf_float+0x2f6>
 8006f1c:	e6a1      	b.n	8006c62 <_printf_float+0xb6>
 8006f1e:	2301      	movs	r3, #1
 8006f20:	4631      	mov	r1, r6
 8006f22:	4628      	mov	r0, r5
 8006f24:	920a      	str	r2, [sp, #40]	@ 0x28
 8006f26:	47b8      	blx	r7
 8006f28:	3001      	adds	r0, #1
 8006f2a:	f43f ae9a 	beq.w	8006c62 <_printf_float+0xb6>
 8006f2e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006f30:	f10b 0b01 	add.w	fp, fp, #1
 8006f34:	e7bb      	b.n	8006eae <_printf_float+0x302>
 8006f36:	4631      	mov	r1, r6
 8006f38:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006f3c:	4628      	mov	r0, r5
 8006f3e:	47b8      	blx	r7
 8006f40:	3001      	adds	r0, #1
 8006f42:	d1c0      	bne.n	8006ec6 <_printf_float+0x31a>
 8006f44:	e68d      	b.n	8006c62 <_printf_float+0xb6>
 8006f46:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006f48:	464b      	mov	r3, r9
 8006f4a:	4631      	mov	r1, r6
 8006f4c:	4628      	mov	r0, r5
 8006f4e:	4442      	add	r2, r8
 8006f50:	47b8      	blx	r7
 8006f52:	3001      	adds	r0, #1
 8006f54:	d1c3      	bne.n	8006ede <_printf_float+0x332>
 8006f56:	e684      	b.n	8006c62 <_printf_float+0xb6>
 8006f58:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8006f5c:	f1ba 0f01 	cmp.w	sl, #1
 8006f60:	dc01      	bgt.n	8006f66 <_printf_float+0x3ba>
 8006f62:	07db      	lsls	r3, r3, #31
 8006f64:	d536      	bpl.n	8006fd4 <_printf_float+0x428>
 8006f66:	2301      	movs	r3, #1
 8006f68:	4642      	mov	r2, r8
 8006f6a:	4631      	mov	r1, r6
 8006f6c:	4628      	mov	r0, r5
 8006f6e:	47b8      	blx	r7
 8006f70:	3001      	adds	r0, #1
 8006f72:	f43f ae76 	beq.w	8006c62 <_printf_float+0xb6>
 8006f76:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006f7a:	4631      	mov	r1, r6
 8006f7c:	4628      	mov	r0, r5
 8006f7e:	47b8      	blx	r7
 8006f80:	3001      	adds	r0, #1
 8006f82:	f43f ae6e 	beq.w	8006c62 <_printf_float+0xb6>
 8006f86:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006f8a:	2200      	movs	r2, #0
 8006f8c:	2300      	movs	r3, #0
 8006f8e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006f92:	f7f9 fd09 	bl	80009a8 <__aeabi_dcmpeq>
 8006f96:	b9c0      	cbnz	r0, 8006fca <_printf_float+0x41e>
 8006f98:	4653      	mov	r3, sl
 8006f9a:	f108 0201 	add.w	r2, r8, #1
 8006f9e:	4631      	mov	r1, r6
 8006fa0:	4628      	mov	r0, r5
 8006fa2:	47b8      	blx	r7
 8006fa4:	3001      	adds	r0, #1
 8006fa6:	d10c      	bne.n	8006fc2 <_printf_float+0x416>
 8006fa8:	e65b      	b.n	8006c62 <_printf_float+0xb6>
 8006faa:	2301      	movs	r3, #1
 8006fac:	465a      	mov	r2, fp
 8006fae:	4631      	mov	r1, r6
 8006fb0:	4628      	mov	r0, r5
 8006fb2:	47b8      	blx	r7
 8006fb4:	3001      	adds	r0, #1
 8006fb6:	f43f ae54 	beq.w	8006c62 <_printf_float+0xb6>
 8006fba:	f108 0801 	add.w	r8, r8, #1
 8006fbe:	45d0      	cmp	r8, sl
 8006fc0:	dbf3      	blt.n	8006faa <_printf_float+0x3fe>
 8006fc2:	464b      	mov	r3, r9
 8006fc4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006fc8:	e6e0      	b.n	8006d8c <_printf_float+0x1e0>
 8006fca:	f04f 0800 	mov.w	r8, #0
 8006fce:	f104 0b1a 	add.w	fp, r4, #26
 8006fd2:	e7f4      	b.n	8006fbe <_printf_float+0x412>
 8006fd4:	2301      	movs	r3, #1
 8006fd6:	4642      	mov	r2, r8
 8006fd8:	e7e1      	b.n	8006f9e <_printf_float+0x3f2>
 8006fda:	2301      	movs	r3, #1
 8006fdc:	464a      	mov	r2, r9
 8006fde:	4631      	mov	r1, r6
 8006fe0:	4628      	mov	r0, r5
 8006fe2:	47b8      	blx	r7
 8006fe4:	3001      	adds	r0, #1
 8006fe6:	f43f ae3c 	beq.w	8006c62 <_printf_float+0xb6>
 8006fea:	f108 0801 	add.w	r8, r8, #1
 8006fee:	68e3      	ldr	r3, [r4, #12]
 8006ff0:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8006ff2:	1a5b      	subs	r3, r3, r1
 8006ff4:	4543      	cmp	r3, r8
 8006ff6:	dcf0      	bgt.n	8006fda <_printf_float+0x42e>
 8006ff8:	e6fd      	b.n	8006df6 <_printf_float+0x24a>
 8006ffa:	f04f 0800 	mov.w	r8, #0
 8006ffe:	f104 0919 	add.w	r9, r4, #25
 8007002:	e7f4      	b.n	8006fee <_printf_float+0x442>

08007004 <_printf_common>:
 8007004:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007008:	4616      	mov	r6, r2
 800700a:	4698      	mov	r8, r3
 800700c:	688a      	ldr	r2, [r1, #8]
 800700e:	690b      	ldr	r3, [r1, #16]
 8007010:	4607      	mov	r7, r0
 8007012:	4293      	cmp	r3, r2
 8007014:	bfb8      	it	lt
 8007016:	4613      	movlt	r3, r2
 8007018:	6033      	str	r3, [r6, #0]
 800701a:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800701e:	460c      	mov	r4, r1
 8007020:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007024:	b10a      	cbz	r2, 800702a <_printf_common+0x26>
 8007026:	3301      	adds	r3, #1
 8007028:	6033      	str	r3, [r6, #0]
 800702a:	6823      	ldr	r3, [r4, #0]
 800702c:	0699      	lsls	r1, r3, #26
 800702e:	bf42      	ittt	mi
 8007030:	6833      	ldrmi	r3, [r6, #0]
 8007032:	3302      	addmi	r3, #2
 8007034:	6033      	strmi	r3, [r6, #0]
 8007036:	6825      	ldr	r5, [r4, #0]
 8007038:	f015 0506 	ands.w	r5, r5, #6
 800703c:	d106      	bne.n	800704c <_printf_common+0x48>
 800703e:	f104 0a19 	add.w	sl, r4, #25
 8007042:	68e3      	ldr	r3, [r4, #12]
 8007044:	6832      	ldr	r2, [r6, #0]
 8007046:	1a9b      	subs	r3, r3, r2
 8007048:	42ab      	cmp	r3, r5
 800704a:	dc2b      	bgt.n	80070a4 <_printf_common+0xa0>
 800704c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007050:	6822      	ldr	r2, [r4, #0]
 8007052:	3b00      	subs	r3, #0
 8007054:	bf18      	it	ne
 8007056:	2301      	movne	r3, #1
 8007058:	0692      	lsls	r2, r2, #26
 800705a:	d430      	bmi.n	80070be <_printf_common+0xba>
 800705c:	4641      	mov	r1, r8
 800705e:	4638      	mov	r0, r7
 8007060:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007064:	47c8      	blx	r9
 8007066:	3001      	adds	r0, #1
 8007068:	d023      	beq.n	80070b2 <_printf_common+0xae>
 800706a:	6823      	ldr	r3, [r4, #0]
 800706c:	6922      	ldr	r2, [r4, #16]
 800706e:	f003 0306 	and.w	r3, r3, #6
 8007072:	2b04      	cmp	r3, #4
 8007074:	bf14      	ite	ne
 8007076:	2500      	movne	r5, #0
 8007078:	6833      	ldreq	r3, [r6, #0]
 800707a:	f04f 0600 	mov.w	r6, #0
 800707e:	bf08      	it	eq
 8007080:	68e5      	ldreq	r5, [r4, #12]
 8007082:	f104 041a 	add.w	r4, r4, #26
 8007086:	bf08      	it	eq
 8007088:	1aed      	subeq	r5, r5, r3
 800708a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800708e:	bf08      	it	eq
 8007090:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007094:	4293      	cmp	r3, r2
 8007096:	bfc4      	itt	gt
 8007098:	1a9b      	subgt	r3, r3, r2
 800709a:	18ed      	addgt	r5, r5, r3
 800709c:	42b5      	cmp	r5, r6
 800709e:	d11a      	bne.n	80070d6 <_printf_common+0xd2>
 80070a0:	2000      	movs	r0, #0
 80070a2:	e008      	b.n	80070b6 <_printf_common+0xb2>
 80070a4:	2301      	movs	r3, #1
 80070a6:	4652      	mov	r2, sl
 80070a8:	4641      	mov	r1, r8
 80070aa:	4638      	mov	r0, r7
 80070ac:	47c8      	blx	r9
 80070ae:	3001      	adds	r0, #1
 80070b0:	d103      	bne.n	80070ba <_printf_common+0xb6>
 80070b2:	f04f 30ff 	mov.w	r0, #4294967295
 80070b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070ba:	3501      	adds	r5, #1
 80070bc:	e7c1      	b.n	8007042 <_printf_common+0x3e>
 80070be:	2030      	movs	r0, #48	@ 0x30
 80070c0:	18e1      	adds	r1, r4, r3
 80070c2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80070c6:	1c5a      	adds	r2, r3, #1
 80070c8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80070cc:	4422      	add	r2, r4
 80070ce:	3302      	adds	r3, #2
 80070d0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80070d4:	e7c2      	b.n	800705c <_printf_common+0x58>
 80070d6:	2301      	movs	r3, #1
 80070d8:	4622      	mov	r2, r4
 80070da:	4641      	mov	r1, r8
 80070dc:	4638      	mov	r0, r7
 80070de:	47c8      	blx	r9
 80070e0:	3001      	adds	r0, #1
 80070e2:	d0e6      	beq.n	80070b2 <_printf_common+0xae>
 80070e4:	3601      	adds	r6, #1
 80070e6:	e7d9      	b.n	800709c <_printf_common+0x98>

080070e8 <_printf_i>:
 80070e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80070ec:	7e0f      	ldrb	r7, [r1, #24]
 80070ee:	4691      	mov	r9, r2
 80070f0:	2f78      	cmp	r7, #120	@ 0x78
 80070f2:	4680      	mov	r8, r0
 80070f4:	460c      	mov	r4, r1
 80070f6:	469a      	mov	sl, r3
 80070f8:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80070fa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80070fe:	d807      	bhi.n	8007110 <_printf_i+0x28>
 8007100:	2f62      	cmp	r7, #98	@ 0x62
 8007102:	d80a      	bhi.n	800711a <_printf_i+0x32>
 8007104:	2f00      	cmp	r7, #0
 8007106:	f000 80d3 	beq.w	80072b0 <_printf_i+0x1c8>
 800710a:	2f58      	cmp	r7, #88	@ 0x58
 800710c:	f000 80ba 	beq.w	8007284 <_printf_i+0x19c>
 8007110:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007114:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007118:	e03a      	b.n	8007190 <_printf_i+0xa8>
 800711a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800711e:	2b15      	cmp	r3, #21
 8007120:	d8f6      	bhi.n	8007110 <_printf_i+0x28>
 8007122:	a101      	add	r1, pc, #4	@ (adr r1, 8007128 <_printf_i+0x40>)
 8007124:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007128:	08007181 	.word	0x08007181
 800712c:	08007195 	.word	0x08007195
 8007130:	08007111 	.word	0x08007111
 8007134:	08007111 	.word	0x08007111
 8007138:	08007111 	.word	0x08007111
 800713c:	08007111 	.word	0x08007111
 8007140:	08007195 	.word	0x08007195
 8007144:	08007111 	.word	0x08007111
 8007148:	08007111 	.word	0x08007111
 800714c:	08007111 	.word	0x08007111
 8007150:	08007111 	.word	0x08007111
 8007154:	08007297 	.word	0x08007297
 8007158:	080071bf 	.word	0x080071bf
 800715c:	08007251 	.word	0x08007251
 8007160:	08007111 	.word	0x08007111
 8007164:	08007111 	.word	0x08007111
 8007168:	080072b9 	.word	0x080072b9
 800716c:	08007111 	.word	0x08007111
 8007170:	080071bf 	.word	0x080071bf
 8007174:	08007111 	.word	0x08007111
 8007178:	08007111 	.word	0x08007111
 800717c:	08007259 	.word	0x08007259
 8007180:	6833      	ldr	r3, [r6, #0]
 8007182:	1d1a      	adds	r2, r3, #4
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	6032      	str	r2, [r6, #0]
 8007188:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800718c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007190:	2301      	movs	r3, #1
 8007192:	e09e      	b.n	80072d2 <_printf_i+0x1ea>
 8007194:	6833      	ldr	r3, [r6, #0]
 8007196:	6820      	ldr	r0, [r4, #0]
 8007198:	1d19      	adds	r1, r3, #4
 800719a:	6031      	str	r1, [r6, #0]
 800719c:	0606      	lsls	r6, r0, #24
 800719e:	d501      	bpl.n	80071a4 <_printf_i+0xbc>
 80071a0:	681d      	ldr	r5, [r3, #0]
 80071a2:	e003      	b.n	80071ac <_printf_i+0xc4>
 80071a4:	0645      	lsls	r5, r0, #25
 80071a6:	d5fb      	bpl.n	80071a0 <_printf_i+0xb8>
 80071a8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80071ac:	2d00      	cmp	r5, #0
 80071ae:	da03      	bge.n	80071b8 <_printf_i+0xd0>
 80071b0:	232d      	movs	r3, #45	@ 0x2d
 80071b2:	426d      	negs	r5, r5
 80071b4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80071b8:	230a      	movs	r3, #10
 80071ba:	4859      	ldr	r0, [pc, #356]	@ (8007320 <_printf_i+0x238>)
 80071bc:	e011      	b.n	80071e2 <_printf_i+0xfa>
 80071be:	6821      	ldr	r1, [r4, #0]
 80071c0:	6833      	ldr	r3, [r6, #0]
 80071c2:	0608      	lsls	r0, r1, #24
 80071c4:	f853 5b04 	ldr.w	r5, [r3], #4
 80071c8:	d402      	bmi.n	80071d0 <_printf_i+0xe8>
 80071ca:	0649      	lsls	r1, r1, #25
 80071cc:	bf48      	it	mi
 80071ce:	b2ad      	uxthmi	r5, r5
 80071d0:	2f6f      	cmp	r7, #111	@ 0x6f
 80071d2:	6033      	str	r3, [r6, #0]
 80071d4:	bf14      	ite	ne
 80071d6:	230a      	movne	r3, #10
 80071d8:	2308      	moveq	r3, #8
 80071da:	4851      	ldr	r0, [pc, #324]	@ (8007320 <_printf_i+0x238>)
 80071dc:	2100      	movs	r1, #0
 80071de:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80071e2:	6866      	ldr	r6, [r4, #4]
 80071e4:	2e00      	cmp	r6, #0
 80071e6:	bfa8      	it	ge
 80071e8:	6821      	ldrge	r1, [r4, #0]
 80071ea:	60a6      	str	r6, [r4, #8]
 80071ec:	bfa4      	itt	ge
 80071ee:	f021 0104 	bicge.w	r1, r1, #4
 80071f2:	6021      	strge	r1, [r4, #0]
 80071f4:	b90d      	cbnz	r5, 80071fa <_printf_i+0x112>
 80071f6:	2e00      	cmp	r6, #0
 80071f8:	d04b      	beq.n	8007292 <_printf_i+0x1aa>
 80071fa:	4616      	mov	r6, r2
 80071fc:	fbb5 f1f3 	udiv	r1, r5, r3
 8007200:	fb03 5711 	mls	r7, r3, r1, r5
 8007204:	5dc7      	ldrb	r7, [r0, r7]
 8007206:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800720a:	462f      	mov	r7, r5
 800720c:	42bb      	cmp	r3, r7
 800720e:	460d      	mov	r5, r1
 8007210:	d9f4      	bls.n	80071fc <_printf_i+0x114>
 8007212:	2b08      	cmp	r3, #8
 8007214:	d10b      	bne.n	800722e <_printf_i+0x146>
 8007216:	6823      	ldr	r3, [r4, #0]
 8007218:	07df      	lsls	r7, r3, #31
 800721a:	d508      	bpl.n	800722e <_printf_i+0x146>
 800721c:	6923      	ldr	r3, [r4, #16]
 800721e:	6861      	ldr	r1, [r4, #4]
 8007220:	4299      	cmp	r1, r3
 8007222:	bfde      	ittt	le
 8007224:	2330      	movle	r3, #48	@ 0x30
 8007226:	f806 3c01 	strble.w	r3, [r6, #-1]
 800722a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800722e:	1b92      	subs	r2, r2, r6
 8007230:	6122      	str	r2, [r4, #16]
 8007232:	464b      	mov	r3, r9
 8007234:	4621      	mov	r1, r4
 8007236:	4640      	mov	r0, r8
 8007238:	f8cd a000 	str.w	sl, [sp]
 800723c:	aa03      	add	r2, sp, #12
 800723e:	f7ff fee1 	bl	8007004 <_printf_common>
 8007242:	3001      	adds	r0, #1
 8007244:	d14a      	bne.n	80072dc <_printf_i+0x1f4>
 8007246:	f04f 30ff 	mov.w	r0, #4294967295
 800724a:	b004      	add	sp, #16
 800724c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007250:	6823      	ldr	r3, [r4, #0]
 8007252:	f043 0320 	orr.w	r3, r3, #32
 8007256:	6023      	str	r3, [r4, #0]
 8007258:	2778      	movs	r7, #120	@ 0x78
 800725a:	4832      	ldr	r0, [pc, #200]	@ (8007324 <_printf_i+0x23c>)
 800725c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007260:	6823      	ldr	r3, [r4, #0]
 8007262:	6831      	ldr	r1, [r6, #0]
 8007264:	061f      	lsls	r7, r3, #24
 8007266:	f851 5b04 	ldr.w	r5, [r1], #4
 800726a:	d402      	bmi.n	8007272 <_printf_i+0x18a>
 800726c:	065f      	lsls	r7, r3, #25
 800726e:	bf48      	it	mi
 8007270:	b2ad      	uxthmi	r5, r5
 8007272:	6031      	str	r1, [r6, #0]
 8007274:	07d9      	lsls	r1, r3, #31
 8007276:	bf44      	itt	mi
 8007278:	f043 0320 	orrmi.w	r3, r3, #32
 800727c:	6023      	strmi	r3, [r4, #0]
 800727e:	b11d      	cbz	r5, 8007288 <_printf_i+0x1a0>
 8007280:	2310      	movs	r3, #16
 8007282:	e7ab      	b.n	80071dc <_printf_i+0xf4>
 8007284:	4826      	ldr	r0, [pc, #152]	@ (8007320 <_printf_i+0x238>)
 8007286:	e7e9      	b.n	800725c <_printf_i+0x174>
 8007288:	6823      	ldr	r3, [r4, #0]
 800728a:	f023 0320 	bic.w	r3, r3, #32
 800728e:	6023      	str	r3, [r4, #0]
 8007290:	e7f6      	b.n	8007280 <_printf_i+0x198>
 8007292:	4616      	mov	r6, r2
 8007294:	e7bd      	b.n	8007212 <_printf_i+0x12a>
 8007296:	6833      	ldr	r3, [r6, #0]
 8007298:	6825      	ldr	r5, [r4, #0]
 800729a:	1d18      	adds	r0, r3, #4
 800729c:	6961      	ldr	r1, [r4, #20]
 800729e:	6030      	str	r0, [r6, #0]
 80072a0:	062e      	lsls	r6, r5, #24
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	d501      	bpl.n	80072aa <_printf_i+0x1c2>
 80072a6:	6019      	str	r1, [r3, #0]
 80072a8:	e002      	b.n	80072b0 <_printf_i+0x1c8>
 80072aa:	0668      	lsls	r0, r5, #25
 80072ac:	d5fb      	bpl.n	80072a6 <_printf_i+0x1be>
 80072ae:	8019      	strh	r1, [r3, #0]
 80072b0:	2300      	movs	r3, #0
 80072b2:	4616      	mov	r6, r2
 80072b4:	6123      	str	r3, [r4, #16]
 80072b6:	e7bc      	b.n	8007232 <_printf_i+0x14a>
 80072b8:	6833      	ldr	r3, [r6, #0]
 80072ba:	2100      	movs	r1, #0
 80072bc:	1d1a      	adds	r2, r3, #4
 80072be:	6032      	str	r2, [r6, #0]
 80072c0:	681e      	ldr	r6, [r3, #0]
 80072c2:	6862      	ldr	r2, [r4, #4]
 80072c4:	4630      	mov	r0, r6
 80072c6:	f000 fc5a 	bl	8007b7e <memchr>
 80072ca:	b108      	cbz	r0, 80072d0 <_printf_i+0x1e8>
 80072cc:	1b80      	subs	r0, r0, r6
 80072ce:	6060      	str	r0, [r4, #4]
 80072d0:	6863      	ldr	r3, [r4, #4]
 80072d2:	6123      	str	r3, [r4, #16]
 80072d4:	2300      	movs	r3, #0
 80072d6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80072da:	e7aa      	b.n	8007232 <_printf_i+0x14a>
 80072dc:	4632      	mov	r2, r6
 80072de:	4649      	mov	r1, r9
 80072e0:	4640      	mov	r0, r8
 80072e2:	6923      	ldr	r3, [r4, #16]
 80072e4:	47d0      	blx	sl
 80072e6:	3001      	adds	r0, #1
 80072e8:	d0ad      	beq.n	8007246 <_printf_i+0x15e>
 80072ea:	6823      	ldr	r3, [r4, #0]
 80072ec:	079b      	lsls	r3, r3, #30
 80072ee:	d413      	bmi.n	8007318 <_printf_i+0x230>
 80072f0:	68e0      	ldr	r0, [r4, #12]
 80072f2:	9b03      	ldr	r3, [sp, #12]
 80072f4:	4298      	cmp	r0, r3
 80072f6:	bfb8      	it	lt
 80072f8:	4618      	movlt	r0, r3
 80072fa:	e7a6      	b.n	800724a <_printf_i+0x162>
 80072fc:	2301      	movs	r3, #1
 80072fe:	4632      	mov	r2, r6
 8007300:	4649      	mov	r1, r9
 8007302:	4640      	mov	r0, r8
 8007304:	47d0      	blx	sl
 8007306:	3001      	adds	r0, #1
 8007308:	d09d      	beq.n	8007246 <_printf_i+0x15e>
 800730a:	3501      	adds	r5, #1
 800730c:	68e3      	ldr	r3, [r4, #12]
 800730e:	9903      	ldr	r1, [sp, #12]
 8007310:	1a5b      	subs	r3, r3, r1
 8007312:	42ab      	cmp	r3, r5
 8007314:	dcf2      	bgt.n	80072fc <_printf_i+0x214>
 8007316:	e7eb      	b.n	80072f0 <_printf_i+0x208>
 8007318:	2500      	movs	r5, #0
 800731a:	f104 0619 	add.w	r6, r4, #25
 800731e:	e7f5      	b.n	800730c <_printf_i+0x224>
 8007320:	0800caa6 	.word	0x0800caa6
 8007324:	0800cab7 	.word	0x0800cab7

08007328 <_scanf_float>:
 8007328:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800732c:	b087      	sub	sp, #28
 800732e:	9303      	str	r3, [sp, #12]
 8007330:	688b      	ldr	r3, [r1, #8]
 8007332:	4617      	mov	r7, r2
 8007334:	1e5a      	subs	r2, r3, #1
 8007336:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800733a:	bf82      	ittt	hi
 800733c:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8007340:	eb03 0b05 	addhi.w	fp, r3, r5
 8007344:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8007348:	460a      	mov	r2, r1
 800734a:	f04f 0500 	mov.w	r5, #0
 800734e:	bf88      	it	hi
 8007350:	608b      	strhi	r3, [r1, #8]
 8007352:	680b      	ldr	r3, [r1, #0]
 8007354:	4680      	mov	r8, r0
 8007356:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800735a:	f842 3b1c 	str.w	r3, [r2], #28
 800735e:	460c      	mov	r4, r1
 8007360:	bf98      	it	ls
 8007362:	f04f 0b00 	movls.w	fp, #0
 8007366:	4616      	mov	r6, r2
 8007368:	46aa      	mov	sl, r5
 800736a:	46a9      	mov	r9, r5
 800736c:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8007370:	9201      	str	r2, [sp, #4]
 8007372:	9502      	str	r5, [sp, #8]
 8007374:	68a2      	ldr	r2, [r4, #8]
 8007376:	b152      	cbz	r2, 800738e <_scanf_float+0x66>
 8007378:	683b      	ldr	r3, [r7, #0]
 800737a:	781b      	ldrb	r3, [r3, #0]
 800737c:	2b4e      	cmp	r3, #78	@ 0x4e
 800737e:	d865      	bhi.n	800744c <_scanf_float+0x124>
 8007380:	2b40      	cmp	r3, #64	@ 0x40
 8007382:	d83d      	bhi.n	8007400 <_scanf_float+0xd8>
 8007384:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8007388:	b2c8      	uxtb	r0, r1
 800738a:	280e      	cmp	r0, #14
 800738c:	d93b      	bls.n	8007406 <_scanf_float+0xde>
 800738e:	f1b9 0f00 	cmp.w	r9, #0
 8007392:	d003      	beq.n	800739c <_scanf_float+0x74>
 8007394:	6823      	ldr	r3, [r4, #0]
 8007396:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800739a:	6023      	str	r3, [r4, #0]
 800739c:	f10a 3aff 	add.w	sl, sl, #4294967295
 80073a0:	f1ba 0f01 	cmp.w	sl, #1
 80073a4:	f200 8118 	bhi.w	80075d8 <_scanf_float+0x2b0>
 80073a8:	9b01      	ldr	r3, [sp, #4]
 80073aa:	429e      	cmp	r6, r3
 80073ac:	f200 8109 	bhi.w	80075c2 <_scanf_float+0x29a>
 80073b0:	2001      	movs	r0, #1
 80073b2:	b007      	add	sp, #28
 80073b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073b8:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 80073bc:	2a0d      	cmp	r2, #13
 80073be:	d8e6      	bhi.n	800738e <_scanf_float+0x66>
 80073c0:	a101      	add	r1, pc, #4	@ (adr r1, 80073c8 <_scanf_float+0xa0>)
 80073c2:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80073c6:	bf00      	nop
 80073c8:	0800750f 	.word	0x0800750f
 80073cc:	0800738f 	.word	0x0800738f
 80073d0:	0800738f 	.word	0x0800738f
 80073d4:	0800738f 	.word	0x0800738f
 80073d8:	0800756f 	.word	0x0800756f
 80073dc:	08007547 	.word	0x08007547
 80073e0:	0800738f 	.word	0x0800738f
 80073e4:	0800738f 	.word	0x0800738f
 80073e8:	0800751d 	.word	0x0800751d
 80073ec:	0800738f 	.word	0x0800738f
 80073f0:	0800738f 	.word	0x0800738f
 80073f4:	0800738f 	.word	0x0800738f
 80073f8:	0800738f 	.word	0x0800738f
 80073fc:	080074d5 	.word	0x080074d5
 8007400:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8007404:	e7da      	b.n	80073bc <_scanf_float+0x94>
 8007406:	290e      	cmp	r1, #14
 8007408:	d8c1      	bhi.n	800738e <_scanf_float+0x66>
 800740a:	a001      	add	r0, pc, #4	@ (adr r0, 8007410 <_scanf_float+0xe8>)
 800740c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8007410:	080074c5 	.word	0x080074c5
 8007414:	0800738f 	.word	0x0800738f
 8007418:	080074c5 	.word	0x080074c5
 800741c:	0800755b 	.word	0x0800755b
 8007420:	0800738f 	.word	0x0800738f
 8007424:	0800746d 	.word	0x0800746d
 8007428:	080074ab 	.word	0x080074ab
 800742c:	080074ab 	.word	0x080074ab
 8007430:	080074ab 	.word	0x080074ab
 8007434:	080074ab 	.word	0x080074ab
 8007438:	080074ab 	.word	0x080074ab
 800743c:	080074ab 	.word	0x080074ab
 8007440:	080074ab 	.word	0x080074ab
 8007444:	080074ab 	.word	0x080074ab
 8007448:	080074ab 	.word	0x080074ab
 800744c:	2b6e      	cmp	r3, #110	@ 0x6e
 800744e:	d809      	bhi.n	8007464 <_scanf_float+0x13c>
 8007450:	2b60      	cmp	r3, #96	@ 0x60
 8007452:	d8b1      	bhi.n	80073b8 <_scanf_float+0x90>
 8007454:	2b54      	cmp	r3, #84	@ 0x54
 8007456:	d07b      	beq.n	8007550 <_scanf_float+0x228>
 8007458:	2b59      	cmp	r3, #89	@ 0x59
 800745a:	d198      	bne.n	800738e <_scanf_float+0x66>
 800745c:	2d07      	cmp	r5, #7
 800745e:	d196      	bne.n	800738e <_scanf_float+0x66>
 8007460:	2508      	movs	r5, #8
 8007462:	e02c      	b.n	80074be <_scanf_float+0x196>
 8007464:	2b74      	cmp	r3, #116	@ 0x74
 8007466:	d073      	beq.n	8007550 <_scanf_float+0x228>
 8007468:	2b79      	cmp	r3, #121	@ 0x79
 800746a:	e7f6      	b.n	800745a <_scanf_float+0x132>
 800746c:	6821      	ldr	r1, [r4, #0]
 800746e:	05c8      	lsls	r0, r1, #23
 8007470:	d51b      	bpl.n	80074aa <_scanf_float+0x182>
 8007472:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8007476:	6021      	str	r1, [r4, #0]
 8007478:	f109 0901 	add.w	r9, r9, #1
 800747c:	f1bb 0f00 	cmp.w	fp, #0
 8007480:	d003      	beq.n	800748a <_scanf_float+0x162>
 8007482:	3201      	adds	r2, #1
 8007484:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007488:	60a2      	str	r2, [r4, #8]
 800748a:	68a3      	ldr	r3, [r4, #8]
 800748c:	3b01      	subs	r3, #1
 800748e:	60a3      	str	r3, [r4, #8]
 8007490:	6923      	ldr	r3, [r4, #16]
 8007492:	3301      	adds	r3, #1
 8007494:	6123      	str	r3, [r4, #16]
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	3b01      	subs	r3, #1
 800749a:	2b00      	cmp	r3, #0
 800749c:	607b      	str	r3, [r7, #4]
 800749e:	f340 8087 	ble.w	80075b0 <_scanf_float+0x288>
 80074a2:	683b      	ldr	r3, [r7, #0]
 80074a4:	3301      	adds	r3, #1
 80074a6:	603b      	str	r3, [r7, #0]
 80074a8:	e764      	b.n	8007374 <_scanf_float+0x4c>
 80074aa:	eb1a 0105 	adds.w	r1, sl, r5
 80074ae:	f47f af6e 	bne.w	800738e <_scanf_float+0x66>
 80074b2:	460d      	mov	r5, r1
 80074b4:	468a      	mov	sl, r1
 80074b6:	6822      	ldr	r2, [r4, #0]
 80074b8:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 80074bc:	6022      	str	r2, [r4, #0]
 80074be:	f806 3b01 	strb.w	r3, [r6], #1
 80074c2:	e7e2      	b.n	800748a <_scanf_float+0x162>
 80074c4:	6822      	ldr	r2, [r4, #0]
 80074c6:	0610      	lsls	r0, r2, #24
 80074c8:	f57f af61 	bpl.w	800738e <_scanf_float+0x66>
 80074cc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80074d0:	6022      	str	r2, [r4, #0]
 80074d2:	e7f4      	b.n	80074be <_scanf_float+0x196>
 80074d4:	f1ba 0f00 	cmp.w	sl, #0
 80074d8:	d10e      	bne.n	80074f8 <_scanf_float+0x1d0>
 80074da:	f1b9 0f00 	cmp.w	r9, #0
 80074de:	d10e      	bne.n	80074fe <_scanf_float+0x1d6>
 80074e0:	6822      	ldr	r2, [r4, #0]
 80074e2:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80074e6:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80074ea:	d108      	bne.n	80074fe <_scanf_float+0x1d6>
 80074ec:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80074f0:	f04f 0a01 	mov.w	sl, #1
 80074f4:	6022      	str	r2, [r4, #0]
 80074f6:	e7e2      	b.n	80074be <_scanf_float+0x196>
 80074f8:	f1ba 0f02 	cmp.w	sl, #2
 80074fc:	d055      	beq.n	80075aa <_scanf_float+0x282>
 80074fe:	2d01      	cmp	r5, #1
 8007500:	d002      	beq.n	8007508 <_scanf_float+0x1e0>
 8007502:	2d04      	cmp	r5, #4
 8007504:	f47f af43 	bne.w	800738e <_scanf_float+0x66>
 8007508:	3501      	adds	r5, #1
 800750a:	b2ed      	uxtb	r5, r5
 800750c:	e7d7      	b.n	80074be <_scanf_float+0x196>
 800750e:	f1ba 0f01 	cmp.w	sl, #1
 8007512:	f47f af3c 	bne.w	800738e <_scanf_float+0x66>
 8007516:	f04f 0a02 	mov.w	sl, #2
 800751a:	e7d0      	b.n	80074be <_scanf_float+0x196>
 800751c:	b97d      	cbnz	r5, 800753e <_scanf_float+0x216>
 800751e:	f1b9 0f00 	cmp.w	r9, #0
 8007522:	f47f af37 	bne.w	8007394 <_scanf_float+0x6c>
 8007526:	6822      	ldr	r2, [r4, #0]
 8007528:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800752c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8007530:	f040 8103 	bne.w	800773a <_scanf_float+0x412>
 8007534:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8007538:	2501      	movs	r5, #1
 800753a:	6022      	str	r2, [r4, #0]
 800753c:	e7bf      	b.n	80074be <_scanf_float+0x196>
 800753e:	2d03      	cmp	r5, #3
 8007540:	d0e2      	beq.n	8007508 <_scanf_float+0x1e0>
 8007542:	2d05      	cmp	r5, #5
 8007544:	e7de      	b.n	8007504 <_scanf_float+0x1dc>
 8007546:	2d02      	cmp	r5, #2
 8007548:	f47f af21 	bne.w	800738e <_scanf_float+0x66>
 800754c:	2503      	movs	r5, #3
 800754e:	e7b6      	b.n	80074be <_scanf_float+0x196>
 8007550:	2d06      	cmp	r5, #6
 8007552:	f47f af1c 	bne.w	800738e <_scanf_float+0x66>
 8007556:	2507      	movs	r5, #7
 8007558:	e7b1      	b.n	80074be <_scanf_float+0x196>
 800755a:	6822      	ldr	r2, [r4, #0]
 800755c:	0591      	lsls	r1, r2, #22
 800755e:	f57f af16 	bpl.w	800738e <_scanf_float+0x66>
 8007562:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8007566:	6022      	str	r2, [r4, #0]
 8007568:	f8cd 9008 	str.w	r9, [sp, #8]
 800756c:	e7a7      	b.n	80074be <_scanf_float+0x196>
 800756e:	6822      	ldr	r2, [r4, #0]
 8007570:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8007574:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8007578:	d006      	beq.n	8007588 <_scanf_float+0x260>
 800757a:	0550      	lsls	r0, r2, #21
 800757c:	f57f af07 	bpl.w	800738e <_scanf_float+0x66>
 8007580:	f1b9 0f00 	cmp.w	r9, #0
 8007584:	f000 80d9 	beq.w	800773a <_scanf_float+0x412>
 8007588:	0591      	lsls	r1, r2, #22
 800758a:	bf58      	it	pl
 800758c:	9902      	ldrpl	r1, [sp, #8]
 800758e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8007592:	bf58      	it	pl
 8007594:	eba9 0101 	subpl.w	r1, r9, r1
 8007598:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800759c:	f04f 0900 	mov.w	r9, #0
 80075a0:	bf58      	it	pl
 80075a2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80075a6:	6022      	str	r2, [r4, #0]
 80075a8:	e789      	b.n	80074be <_scanf_float+0x196>
 80075aa:	f04f 0a03 	mov.w	sl, #3
 80075ae:	e786      	b.n	80074be <_scanf_float+0x196>
 80075b0:	4639      	mov	r1, r7
 80075b2:	4640      	mov	r0, r8
 80075b4:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80075b8:	4798      	blx	r3
 80075ba:	2800      	cmp	r0, #0
 80075bc:	f43f aeda 	beq.w	8007374 <_scanf_float+0x4c>
 80075c0:	e6e5      	b.n	800738e <_scanf_float+0x66>
 80075c2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80075c6:	463a      	mov	r2, r7
 80075c8:	4640      	mov	r0, r8
 80075ca:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80075ce:	4798      	blx	r3
 80075d0:	6923      	ldr	r3, [r4, #16]
 80075d2:	3b01      	subs	r3, #1
 80075d4:	6123      	str	r3, [r4, #16]
 80075d6:	e6e7      	b.n	80073a8 <_scanf_float+0x80>
 80075d8:	1e6b      	subs	r3, r5, #1
 80075da:	2b06      	cmp	r3, #6
 80075dc:	d824      	bhi.n	8007628 <_scanf_float+0x300>
 80075de:	2d02      	cmp	r5, #2
 80075e0:	d836      	bhi.n	8007650 <_scanf_float+0x328>
 80075e2:	9b01      	ldr	r3, [sp, #4]
 80075e4:	429e      	cmp	r6, r3
 80075e6:	f67f aee3 	bls.w	80073b0 <_scanf_float+0x88>
 80075ea:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80075ee:	463a      	mov	r2, r7
 80075f0:	4640      	mov	r0, r8
 80075f2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80075f6:	4798      	blx	r3
 80075f8:	6923      	ldr	r3, [r4, #16]
 80075fa:	3b01      	subs	r3, #1
 80075fc:	6123      	str	r3, [r4, #16]
 80075fe:	e7f0      	b.n	80075e2 <_scanf_float+0x2ba>
 8007600:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007604:	463a      	mov	r2, r7
 8007606:	4640      	mov	r0, r8
 8007608:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800760c:	4798      	blx	r3
 800760e:	6923      	ldr	r3, [r4, #16]
 8007610:	3b01      	subs	r3, #1
 8007612:	6123      	str	r3, [r4, #16]
 8007614:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007618:	fa5f fa8a 	uxtb.w	sl, sl
 800761c:	f1ba 0f02 	cmp.w	sl, #2
 8007620:	d1ee      	bne.n	8007600 <_scanf_float+0x2d8>
 8007622:	3d03      	subs	r5, #3
 8007624:	b2ed      	uxtb	r5, r5
 8007626:	1b76      	subs	r6, r6, r5
 8007628:	6823      	ldr	r3, [r4, #0]
 800762a:	05da      	lsls	r2, r3, #23
 800762c:	d530      	bpl.n	8007690 <_scanf_float+0x368>
 800762e:	055b      	lsls	r3, r3, #21
 8007630:	d511      	bpl.n	8007656 <_scanf_float+0x32e>
 8007632:	9b01      	ldr	r3, [sp, #4]
 8007634:	429e      	cmp	r6, r3
 8007636:	f67f aebb 	bls.w	80073b0 <_scanf_float+0x88>
 800763a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800763e:	463a      	mov	r2, r7
 8007640:	4640      	mov	r0, r8
 8007642:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007646:	4798      	blx	r3
 8007648:	6923      	ldr	r3, [r4, #16]
 800764a:	3b01      	subs	r3, #1
 800764c:	6123      	str	r3, [r4, #16]
 800764e:	e7f0      	b.n	8007632 <_scanf_float+0x30a>
 8007650:	46aa      	mov	sl, r5
 8007652:	46b3      	mov	fp, r6
 8007654:	e7de      	b.n	8007614 <_scanf_float+0x2ec>
 8007656:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800765a:	6923      	ldr	r3, [r4, #16]
 800765c:	2965      	cmp	r1, #101	@ 0x65
 800765e:	f103 33ff 	add.w	r3, r3, #4294967295
 8007662:	f106 35ff 	add.w	r5, r6, #4294967295
 8007666:	6123      	str	r3, [r4, #16]
 8007668:	d00c      	beq.n	8007684 <_scanf_float+0x35c>
 800766a:	2945      	cmp	r1, #69	@ 0x45
 800766c:	d00a      	beq.n	8007684 <_scanf_float+0x35c>
 800766e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007672:	463a      	mov	r2, r7
 8007674:	4640      	mov	r0, r8
 8007676:	4798      	blx	r3
 8007678:	6923      	ldr	r3, [r4, #16]
 800767a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800767e:	3b01      	subs	r3, #1
 8007680:	1eb5      	subs	r5, r6, #2
 8007682:	6123      	str	r3, [r4, #16]
 8007684:	463a      	mov	r2, r7
 8007686:	4640      	mov	r0, r8
 8007688:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800768c:	4798      	blx	r3
 800768e:	462e      	mov	r6, r5
 8007690:	6822      	ldr	r2, [r4, #0]
 8007692:	f012 0210 	ands.w	r2, r2, #16
 8007696:	d001      	beq.n	800769c <_scanf_float+0x374>
 8007698:	2000      	movs	r0, #0
 800769a:	e68a      	b.n	80073b2 <_scanf_float+0x8a>
 800769c:	7032      	strb	r2, [r6, #0]
 800769e:	6823      	ldr	r3, [r4, #0]
 80076a0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80076a4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80076a8:	d11c      	bne.n	80076e4 <_scanf_float+0x3bc>
 80076aa:	9b02      	ldr	r3, [sp, #8]
 80076ac:	454b      	cmp	r3, r9
 80076ae:	eba3 0209 	sub.w	r2, r3, r9
 80076b2:	d123      	bne.n	80076fc <_scanf_float+0x3d4>
 80076b4:	2200      	movs	r2, #0
 80076b6:	4640      	mov	r0, r8
 80076b8:	9901      	ldr	r1, [sp, #4]
 80076ba:	f002 fc65 	bl	8009f88 <_strtod_r>
 80076be:	9b03      	ldr	r3, [sp, #12]
 80076c0:	6825      	ldr	r5, [r4, #0]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	f015 0f02 	tst.w	r5, #2
 80076c8:	4606      	mov	r6, r0
 80076ca:	460f      	mov	r7, r1
 80076cc:	f103 0204 	add.w	r2, r3, #4
 80076d0:	d01f      	beq.n	8007712 <_scanf_float+0x3ea>
 80076d2:	9903      	ldr	r1, [sp, #12]
 80076d4:	600a      	str	r2, [r1, #0]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	e9c3 6700 	strd	r6, r7, [r3]
 80076dc:	68e3      	ldr	r3, [r4, #12]
 80076de:	3301      	adds	r3, #1
 80076e0:	60e3      	str	r3, [r4, #12]
 80076e2:	e7d9      	b.n	8007698 <_scanf_float+0x370>
 80076e4:	9b04      	ldr	r3, [sp, #16]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d0e4      	beq.n	80076b4 <_scanf_float+0x38c>
 80076ea:	9905      	ldr	r1, [sp, #20]
 80076ec:	230a      	movs	r3, #10
 80076ee:	4640      	mov	r0, r8
 80076f0:	3101      	adds	r1, #1
 80076f2:	f002 fcc9 	bl	800a088 <_strtol_r>
 80076f6:	9b04      	ldr	r3, [sp, #16]
 80076f8:	9e05      	ldr	r6, [sp, #20]
 80076fa:	1ac2      	subs	r2, r0, r3
 80076fc:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8007700:	429e      	cmp	r6, r3
 8007702:	bf28      	it	cs
 8007704:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8007708:	4630      	mov	r0, r6
 800770a:	490d      	ldr	r1, [pc, #52]	@ (8007740 <_scanf_float+0x418>)
 800770c:	f000 f912 	bl	8007934 <siprintf>
 8007710:	e7d0      	b.n	80076b4 <_scanf_float+0x38c>
 8007712:	076d      	lsls	r5, r5, #29
 8007714:	d4dd      	bmi.n	80076d2 <_scanf_float+0x3aa>
 8007716:	9d03      	ldr	r5, [sp, #12]
 8007718:	602a      	str	r2, [r5, #0]
 800771a:	681d      	ldr	r5, [r3, #0]
 800771c:	4602      	mov	r2, r0
 800771e:	460b      	mov	r3, r1
 8007720:	f7f9 f974 	bl	8000a0c <__aeabi_dcmpun>
 8007724:	b120      	cbz	r0, 8007730 <_scanf_float+0x408>
 8007726:	4807      	ldr	r0, [pc, #28]	@ (8007744 <_scanf_float+0x41c>)
 8007728:	f000 fa38 	bl	8007b9c <nanf>
 800772c:	6028      	str	r0, [r5, #0]
 800772e:	e7d5      	b.n	80076dc <_scanf_float+0x3b4>
 8007730:	4630      	mov	r0, r6
 8007732:	4639      	mov	r1, r7
 8007734:	f7f9 f9c8 	bl	8000ac8 <__aeabi_d2f>
 8007738:	e7f8      	b.n	800772c <_scanf_float+0x404>
 800773a:	f04f 0900 	mov.w	r9, #0
 800773e:	e62d      	b.n	800739c <_scanf_float+0x74>
 8007740:	0800cac8 	.word	0x0800cac8
 8007744:	0800ce78 	.word	0x0800ce78

08007748 <std>:
 8007748:	2300      	movs	r3, #0
 800774a:	b510      	push	{r4, lr}
 800774c:	4604      	mov	r4, r0
 800774e:	e9c0 3300 	strd	r3, r3, [r0]
 8007752:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007756:	6083      	str	r3, [r0, #8]
 8007758:	8181      	strh	r1, [r0, #12]
 800775a:	6643      	str	r3, [r0, #100]	@ 0x64
 800775c:	81c2      	strh	r2, [r0, #14]
 800775e:	6183      	str	r3, [r0, #24]
 8007760:	4619      	mov	r1, r3
 8007762:	2208      	movs	r2, #8
 8007764:	305c      	adds	r0, #92	@ 0x5c
 8007766:	f000 f974 	bl	8007a52 <memset>
 800776a:	4b0d      	ldr	r3, [pc, #52]	@ (80077a0 <std+0x58>)
 800776c:	6224      	str	r4, [r4, #32]
 800776e:	6263      	str	r3, [r4, #36]	@ 0x24
 8007770:	4b0c      	ldr	r3, [pc, #48]	@ (80077a4 <std+0x5c>)
 8007772:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007774:	4b0c      	ldr	r3, [pc, #48]	@ (80077a8 <std+0x60>)
 8007776:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007778:	4b0c      	ldr	r3, [pc, #48]	@ (80077ac <std+0x64>)
 800777a:	6323      	str	r3, [r4, #48]	@ 0x30
 800777c:	4b0c      	ldr	r3, [pc, #48]	@ (80077b0 <std+0x68>)
 800777e:	429c      	cmp	r4, r3
 8007780:	d006      	beq.n	8007790 <std+0x48>
 8007782:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007786:	4294      	cmp	r4, r2
 8007788:	d002      	beq.n	8007790 <std+0x48>
 800778a:	33d0      	adds	r3, #208	@ 0xd0
 800778c:	429c      	cmp	r4, r3
 800778e:	d105      	bne.n	800779c <std+0x54>
 8007790:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007794:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007798:	f000 b9ee 	b.w	8007b78 <__retarget_lock_init_recursive>
 800779c:	bd10      	pop	{r4, pc}
 800779e:	bf00      	nop
 80077a0:	080079c9 	.word	0x080079c9
 80077a4:	080079ef 	.word	0x080079ef
 80077a8:	08007a27 	.word	0x08007a27
 80077ac:	08007a4b 	.word	0x08007a4b
 80077b0:	20000958 	.word	0x20000958

080077b4 <stdio_exit_handler>:
 80077b4:	4a02      	ldr	r2, [pc, #8]	@ (80077c0 <stdio_exit_handler+0xc>)
 80077b6:	4903      	ldr	r1, [pc, #12]	@ (80077c4 <stdio_exit_handler+0x10>)
 80077b8:	4803      	ldr	r0, [pc, #12]	@ (80077c8 <stdio_exit_handler+0x14>)
 80077ba:	f000 b869 	b.w	8007890 <_fwalk_sglue>
 80077be:	bf00      	nop
 80077c0:	20000010 	.word	0x20000010
 80077c4:	0800aa69 	.word	0x0800aa69
 80077c8:	20000020 	.word	0x20000020

080077cc <cleanup_stdio>:
 80077cc:	6841      	ldr	r1, [r0, #4]
 80077ce:	4b0c      	ldr	r3, [pc, #48]	@ (8007800 <cleanup_stdio+0x34>)
 80077d0:	b510      	push	{r4, lr}
 80077d2:	4299      	cmp	r1, r3
 80077d4:	4604      	mov	r4, r0
 80077d6:	d001      	beq.n	80077dc <cleanup_stdio+0x10>
 80077d8:	f003 f946 	bl	800aa68 <_fflush_r>
 80077dc:	68a1      	ldr	r1, [r4, #8]
 80077de:	4b09      	ldr	r3, [pc, #36]	@ (8007804 <cleanup_stdio+0x38>)
 80077e0:	4299      	cmp	r1, r3
 80077e2:	d002      	beq.n	80077ea <cleanup_stdio+0x1e>
 80077e4:	4620      	mov	r0, r4
 80077e6:	f003 f93f 	bl	800aa68 <_fflush_r>
 80077ea:	68e1      	ldr	r1, [r4, #12]
 80077ec:	4b06      	ldr	r3, [pc, #24]	@ (8007808 <cleanup_stdio+0x3c>)
 80077ee:	4299      	cmp	r1, r3
 80077f0:	d004      	beq.n	80077fc <cleanup_stdio+0x30>
 80077f2:	4620      	mov	r0, r4
 80077f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80077f8:	f003 b936 	b.w	800aa68 <_fflush_r>
 80077fc:	bd10      	pop	{r4, pc}
 80077fe:	bf00      	nop
 8007800:	20000958 	.word	0x20000958
 8007804:	200009c0 	.word	0x200009c0
 8007808:	20000a28 	.word	0x20000a28

0800780c <global_stdio_init.part.0>:
 800780c:	b510      	push	{r4, lr}
 800780e:	4b0b      	ldr	r3, [pc, #44]	@ (800783c <global_stdio_init.part.0+0x30>)
 8007810:	4c0b      	ldr	r4, [pc, #44]	@ (8007840 <global_stdio_init.part.0+0x34>)
 8007812:	4a0c      	ldr	r2, [pc, #48]	@ (8007844 <global_stdio_init.part.0+0x38>)
 8007814:	4620      	mov	r0, r4
 8007816:	601a      	str	r2, [r3, #0]
 8007818:	2104      	movs	r1, #4
 800781a:	2200      	movs	r2, #0
 800781c:	f7ff ff94 	bl	8007748 <std>
 8007820:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007824:	2201      	movs	r2, #1
 8007826:	2109      	movs	r1, #9
 8007828:	f7ff ff8e 	bl	8007748 <std>
 800782c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007830:	2202      	movs	r2, #2
 8007832:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007836:	2112      	movs	r1, #18
 8007838:	f7ff bf86 	b.w	8007748 <std>
 800783c:	20000a90 	.word	0x20000a90
 8007840:	20000958 	.word	0x20000958
 8007844:	080077b5 	.word	0x080077b5

08007848 <__sfp_lock_acquire>:
 8007848:	4801      	ldr	r0, [pc, #4]	@ (8007850 <__sfp_lock_acquire+0x8>)
 800784a:	f000 b996 	b.w	8007b7a <__retarget_lock_acquire_recursive>
 800784e:	bf00      	nop
 8007850:	20000a99 	.word	0x20000a99

08007854 <__sfp_lock_release>:
 8007854:	4801      	ldr	r0, [pc, #4]	@ (800785c <__sfp_lock_release+0x8>)
 8007856:	f000 b991 	b.w	8007b7c <__retarget_lock_release_recursive>
 800785a:	bf00      	nop
 800785c:	20000a99 	.word	0x20000a99

08007860 <__sinit>:
 8007860:	b510      	push	{r4, lr}
 8007862:	4604      	mov	r4, r0
 8007864:	f7ff fff0 	bl	8007848 <__sfp_lock_acquire>
 8007868:	6a23      	ldr	r3, [r4, #32]
 800786a:	b11b      	cbz	r3, 8007874 <__sinit+0x14>
 800786c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007870:	f7ff bff0 	b.w	8007854 <__sfp_lock_release>
 8007874:	4b04      	ldr	r3, [pc, #16]	@ (8007888 <__sinit+0x28>)
 8007876:	6223      	str	r3, [r4, #32]
 8007878:	4b04      	ldr	r3, [pc, #16]	@ (800788c <__sinit+0x2c>)
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	2b00      	cmp	r3, #0
 800787e:	d1f5      	bne.n	800786c <__sinit+0xc>
 8007880:	f7ff ffc4 	bl	800780c <global_stdio_init.part.0>
 8007884:	e7f2      	b.n	800786c <__sinit+0xc>
 8007886:	bf00      	nop
 8007888:	080077cd 	.word	0x080077cd
 800788c:	20000a90 	.word	0x20000a90

08007890 <_fwalk_sglue>:
 8007890:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007894:	4607      	mov	r7, r0
 8007896:	4688      	mov	r8, r1
 8007898:	4614      	mov	r4, r2
 800789a:	2600      	movs	r6, #0
 800789c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80078a0:	f1b9 0901 	subs.w	r9, r9, #1
 80078a4:	d505      	bpl.n	80078b2 <_fwalk_sglue+0x22>
 80078a6:	6824      	ldr	r4, [r4, #0]
 80078a8:	2c00      	cmp	r4, #0
 80078aa:	d1f7      	bne.n	800789c <_fwalk_sglue+0xc>
 80078ac:	4630      	mov	r0, r6
 80078ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80078b2:	89ab      	ldrh	r3, [r5, #12]
 80078b4:	2b01      	cmp	r3, #1
 80078b6:	d907      	bls.n	80078c8 <_fwalk_sglue+0x38>
 80078b8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80078bc:	3301      	adds	r3, #1
 80078be:	d003      	beq.n	80078c8 <_fwalk_sglue+0x38>
 80078c0:	4629      	mov	r1, r5
 80078c2:	4638      	mov	r0, r7
 80078c4:	47c0      	blx	r8
 80078c6:	4306      	orrs	r6, r0
 80078c8:	3568      	adds	r5, #104	@ 0x68
 80078ca:	e7e9      	b.n	80078a0 <_fwalk_sglue+0x10>

080078cc <sniprintf>:
 80078cc:	b40c      	push	{r2, r3}
 80078ce:	b530      	push	{r4, r5, lr}
 80078d0:	4b17      	ldr	r3, [pc, #92]	@ (8007930 <sniprintf+0x64>)
 80078d2:	1e0c      	subs	r4, r1, #0
 80078d4:	681d      	ldr	r5, [r3, #0]
 80078d6:	b09d      	sub	sp, #116	@ 0x74
 80078d8:	da08      	bge.n	80078ec <sniprintf+0x20>
 80078da:	238b      	movs	r3, #139	@ 0x8b
 80078dc:	f04f 30ff 	mov.w	r0, #4294967295
 80078e0:	602b      	str	r3, [r5, #0]
 80078e2:	b01d      	add	sp, #116	@ 0x74
 80078e4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80078e8:	b002      	add	sp, #8
 80078ea:	4770      	bx	lr
 80078ec:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80078f0:	f8ad 3014 	strh.w	r3, [sp, #20]
 80078f4:	bf0c      	ite	eq
 80078f6:	4623      	moveq	r3, r4
 80078f8:	f104 33ff 	addne.w	r3, r4, #4294967295
 80078fc:	9304      	str	r3, [sp, #16]
 80078fe:	9307      	str	r3, [sp, #28]
 8007900:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007904:	9002      	str	r0, [sp, #8]
 8007906:	9006      	str	r0, [sp, #24]
 8007908:	f8ad 3016 	strh.w	r3, [sp, #22]
 800790c:	4628      	mov	r0, r5
 800790e:	ab21      	add	r3, sp, #132	@ 0x84
 8007910:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8007912:	a902      	add	r1, sp, #8
 8007914:	9301      	str	r3, [sp, #4]
 8007916:	f002 fc15 	bl	800a144 <_svfiprintf_r>
 800791a:	1c43      	adds	r3, r0, #1
 800791c:	bfbc      	itt	lt
 800791e:	238b      	movlt	r3, #139	@ 0x8b
 8007920:	602b      	strlt	r3, [r5, #0]
 8007922:	2c00      	cmp	r4, #0
 8007924:	d0dd      	beq.n	80078e2 <sniprintf+0x16>
 8007926:	2200      	movs	r2, #0
 8007928:	9b02      	ldr	r3, [sp, #8]
 800792a:	701a      	strb	r2, [r3, #0]
 800792c:	e7d9      	b.n	80078e2 <sniprintf+0x16>
 800792e:	bf00      	nop
 8007930:	2000001c 	.word	0x2000001c

08007934 <siprintf>:
 8007934:	b40e      	push	{r1, r2, r3}
 8007936:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800793a:	b500      	push	{lr}
 800793c:	b09c      	sub	sp, #112	@ 0x70
 800793e:	ab1d      	add	r3, sp, #116	@ 0x74
 8007940:	9002      	str	r0, [sp, #8]
 8007942:	9006      	str	r0, [sp, #24]
 8007944:	9107      	str	r1, [sp, #28]
 8007946:	9104      	str	r1, [sp, #16]
 8007948:	4808      	ldr	r0, [pc, #32]	@ (800796c <siprintf+0x38>)
 800794a:	4909      	ldr	r1, [pc, #36]	@ (8007970 <siprintf+0x3c>)
 800794c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007950:	9105      	str	r1, [sp, #20]
 8007952:	6800      	ldr	r0, [r0, #0]
 8007954:	a902      	add	r1, sp, #8
 8007956:	9301      	str	r3, [sp, #4]
 8007958:	f002 fbf4 	bl	800a144 <_svfiprintf_r>
 800795c:	2200      	movs	r2, #0
 800795e:	9b02      	ldr	r3, [sp, #8]
 8007960:	701a      	strb	r2, [r3, #0]
 8007962:	b01c      	add	sp, #112	@ 0x70
 8007964:	f85d eb04 	ldr.w	lr, [sp], #4
 8007968:	b003      	add	sp, #12
 800796a:	4770      	bx	lr
 800796c:	2000001c 	.word	0x2000001c
 8007970:	ffff0208 	.word	0xffff0208

08007974 <siscanf>:
 8007974:	b40e      	push	{r1, r2, r3}
 8007976:	f44f 7201 	mov.w	r2, #516	@ 0x204
 800797a:	b530      	push	{r4, r5, lr}
 800797c:	b09c      	sub	sp, #112	@ 0x70
 800797e:	ac1f      	add	r4, sp, #124	@ 0x7c
 8007980:	f854 5b04 	ldr.w	r5, [r4], #4
 8007984:	f8ad 2014 	strh.w	r2, [sp, #20]
 8007988:	9002      	str	r0, [sp, #8]
 800798a:	9006      	str	r0, [sp, #24]
 800798c:	f7f8 fbe0 	bl	8000150 <strlen>
 8007990:	4b0b      	ldr	r3, [pc, #44]	@ (80079c0 <siscanf+0x4c>)
 8007992:	9003      	str	r0, [sp, #12]
 8007994:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007996:	2300      	movs	r3, #0
 8007998:	930f      	str	r3, [sp, #60]	@ 0x3c
 800799a:	9314      	str	r3, [sp, #80]	@ 0x50
 800799c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80079a0:	9007      	str	r0, [sp, #28]
 80079a2:	4808      	ldr	r0, [pc, #32]	@ (80079c4 <siscanf+0x50>)
 80079a4:	f8ad 3016 	strh.w	r3, [sp, #22]
 80079a8:	462a      	mov	r2, r5
 80079aa:	4623      	mov	r3, r4
 80079ac:	a902      	add	r1, sp, #8
 80079ae:	6800      	ldr	r0, [r0, #0]
 80079b0:	9401      	str	r4, [sp, #4]
 80079b2:	f002 fd1b 	bl	800a3ec <__ssvfiscanf_r>
 80079b6:	b01c      	add	sp, #112	@ 0x70
 80079b8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80079bc:	b003      	add	sp, #12
 80079be:	4770      	bx	lr
 80079c0:	080079eb 	.word	0x080079eb
 80079c4:	2000001c 	.word	0x2000001c

080079c8 <__sread>:
 80079c8:	b510      	push	{r4, lr}
 80079ca:	460c      	mov	r4, r1
 80079cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80079d0:	f000 f884 	bl	8007adc <_read_r>
 80079d4:	2800      	cmp	r0, #0
 80079d6:	bfab      	itete	ge
 80079d8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80079da:	89a3      	ldrhlt	r3, [r4, #12]
 80079dc:	181b      	addge	r3, r3, r0
 80079de:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80079e2:	bfac      	ite	ge
 80079e4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80079e6:	81a3      	strhlt	r3, [r4, #12]
 80079e8:	bd10      	pop	{r4, pc}

080079ea <__seofread>:
 80079ea:	2000      	movs	r0, #0
 80079ec:	4770      	bx	lr

080079ee <__swrite>:
 80079ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80079f2:	461f      	mov	r7, r3
 80079f4:	898b      	ldrh	r3, [r1, #12]
 80079f6:	4605      	mov	r5, r0
 80079f8:	05db      	lsls	r3, r3, #23
 80079fa:	460c      	mov	r4, r1
 80079fc:	4616      	mov	r6, r2
 80079fe:	d505      	bpl.n	8007a0c <__swrite+0x1e>
 8007a00:	2302      	movs	r3, #2
 8007a02:	2200      	movs	r2, #0
 8007a04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a08:	f000 f856 	bl	8007ab8 <_lseek_r>
 8007a0c:	89a3      	ldrh	r3, [r4, #12]
 8007a0e:	4632      	mov	r2, r6
 8007a10:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007a14:	81a3      	strh	r3, [r4, #12]
 8007a16:	4628      	mov	r0, r5
 8007a18:	463b      	mov	r3, r7
 8007a1a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007a1e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007a22:	f000 b86d 	b.w	8007b00 <_write_r>

08007a26 <__sseek>:
 8007a26:	b510      	push	{r4, lr}
 8007a28:	460c      	mov	r4, r1
 8007a2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a2e:	f000 f843 	bl	8007ab8 <_lseek_r>
 8007a32:	1c43      	adds	r3, r0, #1
 8007a34:	89a3      	ldrh	r3, [r4, #12]
 8007a36:	bf15      	itete	ne
 8007a38:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007a3a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007a3e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007a42:	81a3      	strheq	r3, [r4, #12]
 8007a44:	bf18      	it	ne
 8007a46:	81a3      	strhne	r3, [r4, #12]
 8007a48:	bd10      	pop	{r4, pc}

08007a4a <__sclose>:
 8007a4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a4e:	f000 b823 	b.w	8007a98 <_close_r>

08007a52 <memset>:
 8007a52:	4603      	mov	r3, r0
 8007a54:	4402      	add	r2, r0
 8007a56:	4293      	cmp	r3, r2
 8007a58:	d100      	bne.n	8007a5c <memset+0xa>
 8007a5a:	4770      	bx	lr
 8007a5c:	f803 1b01 	strb.w	r1, [r3], #1
 8007a60:	e7f9      	b.n	8007a56 <memset+0x4>

08007a62 <strstr>:
 8007a62:	780a      	ldrb	r2, [r1, #0]
 8007a64:	b570      	push	{r4, r5, r6, lr}
 8007a66:	b96a      	cbnz	r2, 8007a84 <strstr+0x22>
 8007a68:	bd70      	pop	{r4, r5, r6, pc}
 8007a6a:	429a      	cmp	r2, r3
 8007a6c:	d109      	bne.n	8007a82 <strstr+0x20>
 8007a6e:	460c      	mov	r4, r1
 8007a70:	4605      	mov	r5, r0
 8007a72:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d0f6      	beq.n	8007a68 <strstr+0x6>
 8007a7a:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8007a7e:	429e      	cmp	r6, r3
 8007a80:	d0f7      	beq.n	8007a72 <strstr+0x10>
 8007a82:	3001      	adds	r0, #1
 8007a84:	7803      	ldrb	r3, [r0, #0]
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d1ef      	bne.n	8007a6a <strstr+0x8>
 8007a8a:	4618      	mov	r0, r3
 8007a8c:	e7ec      	b.n	8007a68 <strstr+0x6>
	...

08007a90 <_localeconv_r>:
 8007a90:	4800      	ldr	r0, [pc, #0]	@ (8007a94 <_localeconv_r+0x4>)
 8007a92:	4770      	bx	lr
 8007a94:	2000015c 	.word	0x2000015c

08007a98 <_close_r>:
 8007a98:	b538      	push	{r3, r4, r5, lr}
 8007a9a:	2300      	movs	r3, #0
 8007a9c:	4d05      	ldr	r5, [pc, #20]	@ (8007ab4 <_close_r+0x1c>)
 8007a9e:	4604      	mov	r4, r0
 8007aa0:	4608      	mov	r0, r1
 8007aa2:	602b      	str	r3, [r5, #0]
 8007aa4:	f7fb fd65 	bl	8003572 <_close>
 8007aa8:	1c43      	adds	r3, r0, #1
 8007aaa:	d102      	bne.n	8007ab2 <_close_r+0x1a>
 8007aac:	682b      	ldr	r3, [r5, #0]
 8007aae:	b103      	cbz	r3, 8007ab2 <_close_r+0x1a>
 8007ab0:	6023      	str	r3, [r4, #0]
 8007ab2:	bd38      	pop	{r3, r4, r5, pc}
 8007ab4:	20000a94 	.word	0x20000a94

08007ab8 <_lseek_r>:
 8007ab8:	b538      	push	{r3, r4, r5, lr}
 8007aba:	4604      	mov	r4, r0
 8007abc:	4608      	mov	r0, r1
 8007abe:	4611      	mov	r1, r2
 8007ac0:	2200      	movs	r2, #0
 8007ac2:	4d05      	ldr	r5, [pc, #20]	@ (8007ad8 <_lseek_r+0x20>)
 8007ac4:	602a      	str	r2, [r5, #0]
 8007ac6:	461a      	mov	r2, r3
 8007ac8:	f7fb fd77 	bl	80035ba <_lseek>
 8007acc:	1c43      	adds	r3, r0, #1
 8007ace:	d102      	bne.n	8007ad6 <_lseek_r+0x1e>
 8007ad0:	682b      	ldr	r3, [r5, #0]
 8007ad2:	b103      	cbz	r3, 8007ad6 <_lseek_r+0x1e>
 8007ad4:	6023      	str	r3, [r4, #0]
 8007ad6:	bd38      	pop	{r3, r4, r5, pc}
 8007ad8:	20000a94 	.word	0x20000a94

08007adc <_read_r>:
 8007adc:	b538      	push	{r3, r4, r5, lr}
 8007ade:	4604      	mov	r4, r0
 8007ae0:	4608      	mov	r0, r1
 8007ae2:	4611      	mov	r1, r2
 8007ae4:	2200      	movs	r2, #0
 8007ae6:	4d05      	ldr	r5, [pc, #20]	@ (8007afc <_read_r+0x20>)
 8007ae8:	602a      	str	r2, [r5, #0]
 8007aea:	461a      	mov	r2, r3
 8007aec:	f7fb fd08 	bl	8003500 <_read>
 8007af0:	1c43      	adds	r3, r0, #1
 8007af2:	d102      	bne.n	8007afa <_read_r+0x1e>
 8007af4:	682b      	ldr	r3, [r5, #0]
 8007af6:	b103      	cbz	r3, 8007afa <_read_r+0x1e>
 8007af8:	6023      	str	r3, [r4, #0]
 8007afa:	bd38      	pop	{r3, r4, r5, pc}
 8007afc:	20000a94 	.word	0x20000a94

08007b00 <_write_r>:
 8007b00:	b538      	push	{r3, r4, r5, lr}
 8007b02:	4604      	mov	r4, r0
 8007b04:	4608      	mov	r0, r1
 8007b06:	4611      	mov	r1, r2
 8007b08:	2200      	movs	r2, #0
 8007b0a:	4d05      	ldr	r5, [pc, #20]	@ (8007b20 <_write_r+0x20>)
 8007b0c:	602a      	str	r2, [r5, #0]
 8007b0e:	461a      	mov	r2, r3
 8007b10:	f7fb fd13 	bl	800353a <_write>
 8007b14:	1c43      	adds	r3, r0, #1
 8007b16:	d102      	bne.n	8007b1e <_write_r+0x1e>
 8007b18:	682b      	ldr	r3, [r5, #0]
 8007b1a:	b103      	cbz	r3, 8007b1e <_write_r+0x1e>
 8007b1c:	6023      	str	r3, [r4, #0]
 8007b1e:	bd38      	pop	{r3, r4, r5, pc}
 8007b20:	20000a94 	.word	0x20000a94

08007b24 <__errno>:
 8007b24:	4b01      	ldr	r3, [pc, #4]	@ (8007b2c <__errno+0x8>)
 8007b26:	6818      	ldr	r0, [r3, #0]
 8007b28:	4770      	bx	lr
 8007b2a:	bf00      	nop
 8007b2c:	2000001c 	.word	0x2000001c

08007b30 <__libc_init_array>:
 8007b30:	b570      	push	{r4, r5, r6, lr}
 8007b32:	2600      	movs	r6, #0
 8007b34:	4d0c      	ldr	r5, [pc, #48]	@ (8007b68 <__libc_init_array+0x38>)
 8007b36:	4c0d      	ldr	r4, [pc, #52]	@ (8007b6c <__libc_init_array+0x3c>)
 8007b38:	1b64      	subs	r4, r4, r5
 8007b3a:	10a4      	asrs	r4, r4, #2
 8007b3c:	42a6      	cmp	r6, r4
 8007b3e:	d109      	bne.n	8007b54 <__libc_init_array+0x24>
 8007b40:	f004 fe72 	bl	800c828 <_init>
 8007b44:	2600      	movs	r6, #0
 8007b46:	4d0a      	ldr	r5, [pc, #40]	@ (8007b70 <__libc_init_array+0x40>)
 8007b48:	4c0a      	ldr	r4, [pc, #40]	@ (8007b74 <__libc_init_array+0x44>)
 8007b4a:	1b64      	subs	r4, r4, r5
 8007b4c:	10a4      	asrs	r4, r4, #2
 8007b4e:	42a6      	cmp	r6, r4
 8007b50:	d105      	bne.n	8007b5e <__libc_init_array+0x2e>
 8007b52:	bd70      	pop	{r4, r5, r6, pc}
 8007b54:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b58:	4798      	blx	r3
 8007b5a:	3601      	adds	r6, #1
 8007b5c:	e7ee      	b.n	8007b3c <__libc_init_array+0xc>
 8007b5e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b62:	4798      	blx	r3
 8007b64:	3601      	adds	r6, #1
 8007b66:	e7f2      	b.n	8007b4e <__libc_init_array+0x1e>
 8007b68:	0800cf18 	.word	0x0800cf18
 8007b6c:	0800cf18 	.word	0x0800cf18
 8007b70:	0800cf18 	.word	0x0800cf18
 8007b74:	0800cf1c 	.word	0x0800cf1c

08007b78 <__retarget_lock_init_recursive>:
 8007b78:	4770      	bx	lr

08007b7a <__retarget_lock_acquire_recursive>:
 8007b7a:	4770      	bx	lr

08007b7c <__retarget_lock_release_recursive>:
 8007b7c:	4770      	bx	lr

08007b7e <memchr>:
 8007b7e:	4603      	mov	r3, r0
 8007b80:	b510      	push	{r4, lr}
 8007b82:	b2c9      	uxtb	r1, r1
 8007b84:	4402      	add	r2, r0
 8007b86:	4293      	cmp	r3, r2
 8007b88:	4618      	mov	r0, r3
 8007b8a:	d101      	bne.n	8007b90 <memchr+0x12>
 8007b8c:	2000      	movs	r0, #0
 8007b8e:	e003      	b.n	8007b98 <memchr+0x1a>
 8007b90:	7804      	ldrb	r4, [r0, #0]
 8007b92:	3301      	adds	r3, #1
 8007b94:	428c      	cmp	r4, r1
 8007b96:	d1f6      	bne.n	8007b86 <memchr+0x8>
 8007b98:	bd10      	pop	{r4, pc}
	...

08007b9c <nanf>:
 8007b9c:	4800      	ldr	r0, [pc, #0]	@ (8007ba0 <nanf+0x4>)
 8007b9e:	4770      	bx	lr
 8007ba0:	7fc00000 	.word	0x7fc00000

08007ba4 <quorem>:
 8007ba4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ba8:	6903      	ldr	r3, [r0, #16]
 8007baa:	690c      	ldr	r4, [r1, #16]
 8007bac:	4607      	mov	r7, r0
 8007bae:	42a3      	cmp	r3, r4
 8007bb0:	db7e      	blt.n	8007cb0 <quorem+0x10c>
 8007bb2:	3c01      	subs	r4, #1
 8007bb4:	00a3      	lsls	r3, r4, #2
 8007bb6:	f100 0514 	add.w	r5, r0, #20
 8007bba:	f101 0814 	add.w	r8, r1, #20
 8007bbe:	9300      	str	r3, [sp, #0]
 8007bc0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007bc4:	9301      	str	r3, [sp, #4]
 8007bc6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007bca:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007bce:	3301      	adds	r3, #1
 8007bd0:	429a      	cmp	r2, r3
 8007bd2:	fbb2 f6f3 	udiv	r6, r2, r3
 8007bd6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007bda:	d32e      	bcc.n	8007c3a <quorem+0x96>
 8007bdc:	f04f 0a00 	mov.w	sl, #0
 8007be0:	46c4      	mov	ip, r8
 8007be2:	46ae      	mov	lr, r5
 8007be4:	46d3      	mov	fp, sl
 8007be6:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007bea:	b298      	uxth	r0, r3
 8007bec:	fb06 a000 	mla	r0, r6, r0, sl
 8007bf0:	0c1b      	lsrs	r3, r3, #16
 8007bf2:	0c02      	lsrs	r2, r0, #16
 8007bf4:	fb06 2303 	mla	r3, r6, r3, r2
 8007bf8:	f8de 2000 	ldr.w	r2, [lr]
 8007bfc:	b280      	uxth	r0, r0
 8007bfe:	b292      	uxth	r2, r2
 8007c00:	1a12      	subs	r2, r2, r0
 8007c02:	445a      	add	r2, fp
 8007c04:	f8de 0000 	ldr.w	r0, [lr]
 8007c08:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007c0c:	b29b      	uxth	r3, r3
 8007c0e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007c12:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007c16:	b292      	uxth	r2, r2
 8007c18:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007c1c:	45e1      	cmp	r9, ip
 8007c1e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007c22:	f84e 2b04 	str.w	r2, [lr], #4
 8007c26:	d2de      	bcs.n	8007be6 <quorem+0x42>
 8007c28:	9b00      	ldr	r3, [sp, #0]
 8007c2a:	58eb      	ldr	r3, [r5, r3]
 8007c2c:	b92b      	cbnz	r3, 8007c3a <quorem+0x96>
 8007c2e:	9b01      	ldr	r3, [sp, #4]
 8007c30:	3b04      	subs	r3, #4
 8007c32:	429d      	cmp	r5, r3
 8007c34:	461a      	mov	r2, r3
 8007c36:	d32f      	bcc.n	8007c98 <quorem+0xf4>
 8007c38:	613c      	str	r4, [r7, #16]
 8007c3a:	4638      	mov	r0, r7
 8007c3c:	f001 f9c4 	bl	8008fc8 <__mcmp>
 8007c40:	2800      	cmp	r0, #0
 8007c42:	db25      	blt.n	8007c90 <quorem+0xec>
 8007c44:	4629      	mov	r1, r5
 8007c46:	2000      	movs	r0, #0
 8007c48:	f858 2b04 	ldr.w	r2, [r8], #4
 8007c4c:	f8d1 c000 	ldr.w	ip, [r1]
 8007c50:	fa1f fe82 	uxth.w	lr, r2
 8007c54:	fa1f f38c 	uxth.w	r3, ip
 8007c58:	eba3 030e 	sub.w	r3, r3, lr
 8007c5c:	4403      	add	r3, r0
 8007c5e:	0c12      	lsrs	r2, r2, #16
 8007c60:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007c64:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007c68:	b29b      	uxth	r3, r3
 8007c6a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007c6e:	45c1      	cmp	r9, r8
 8007c70:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007c74:	f841 3b04 	str.w	r3, [r1], #4
 8007c78:	d2e6      	bcs.n	8007c48 <quorem+0xa4>
 8007c7a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007c7e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007c82:	b922      	cbnz	r2, 8007c8e <quorem+0xea>
 8007c84:	3b04      	subs	r3, #4
 8007c86:	429d      	cmp	r5, r3
 8007c88:	461a      	mov	r2, r3
 8007c8a:	d30b      	bcc.n	8007ca4 <quorem+0x100>
 8007c8c:	613c      	str	r4, [r7, #16]
 8007c8e:	3601      	adds	r6, #1
 8007c90:	4630      	mov	r0, r6
 8007c92:	b003      	add	sp, #12
 8007c94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c98:	6812      	ldr	r2, [r2, #0]
 8007c9a:	3b04      	subs	r3, #4
 8007c9c:	2a00      	cmp	r2, #0
 8007c9e:	d1cb      	bne.n	8007c38 <quorem+0x94>
 8007ca0:	3c01      	subs	r4, #1
 8007ca2:	e7c6      	b.n	8007c32 <quorem+0x8e>
 8007ca4:	6812      	ldr	r2, [r2, #0]
 8007ca6:	3b04      	subs	r3, #4
 8007ca8:	2a00      	cmp	r2, #0
 8007caa:	d1ef      	bne.n	8007c8c <quorem+0xe8>
 8007cac:	3c01      	subs	r4, #1
 8007cae:	e7ea      	b.n	8007c86 <quorem+0xe2>
 8007cb0:	2000      	movs	r0, #0
 8007cb2:	e7ee      	b.n	8007c92 <quorem+0xee>
 8007cb4:	0000      	movs	r0, r0
	...

08007cb8 <_dtoa_r>:
 8007cb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cbc:	4614      	mov	r4, r2
 8007cbe:	461d      	mov	r5, r3
 8007cc0:	69c7      	ldr	r7, [r0, #28]
 8007cc2:	b097      	sub	sp, #92	@ 0x5c
 8007cc4:	4683      	mov	fp, r0
 8007cc6:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8007cca:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8007ccc:	b97f      	cbnz	r7, 8007cee <_dtoa_r+0x36>
 8007cce:	2010      	movs	r0, #16
 8007cd0:	f000 fe02 	bl	80088d8 <malloc>
 8007cd4:	4602      	mov	r2, r0
 8007cd6:	f8cb 001c 	str.w	r0, [fp, #28]
 8007cda:	b920      	cbnz	r0, 8007ce6 <_dtoa_r+0x2e>
 8007cdc:	21ef      	movs	r1, #239	@ 0xef
 8007cde:	4ba8      	ldr	r3, [pc, #672]	@ (8007f80 <_dtoa_r+0x2c8>)
 8007ce0:	48a8      	ldr	r0, [pc, #672]	@ (8007f84 <_dtoa_r+0x2cc>)
 8007ce2:	f002 ffab 	bl	800ac3c <__assert_func>
 8007ce6:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007cea:	6007      	str	r7, [r0, #0]
 8007cec:	60c7      	str	r7, [r0, #12]
 8007cee:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007cf2:	6819      	ldr	r1, [r3, #0]
 8007cf4:	b159      	cbz	r1, 8007d0e <_dtoa_r+0x56>
 8007cf6:	685a      	ldr	r2, [r3, #4]
 8007cf8:	2301      	movs	r3, #1
 8007cfa:	4093      	lsls	r3, r2
 8007cfc:	604a      	str	r2, [r1, #4]
 8007cfe:	608b      	str	r3, [r1, #8]
 8007d00:	4658      	mov	r0, fp
 8007d02:	f000 fedf 	bl	8008ac4 <_Bfree>
 8007d06:	2200      	movs	r2, #0
 8007d08:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007d0c:	601a      	str	r2, [r3, #0]
 8007d0e:	1e2b      	subs	r3, r5, #0
 8007d10:	bfaf      	iteee	ge
 8007d12:	2300      	movge	r3, #0
 8007d14:	2201      	movlt	r2, #1
 8007d16:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8007d1a:	9303      	strlt	r3, [sp, #12]
 8007d1c:	bfa8      	it	ge
 8007d1e:	6033      	strge	r3, [r6, #0]
 8007d20:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8007d24:	4b98      	ldr	r3, [pc, #608]	@ (8007f88 <_dtoa_r+0x2d0>)
 8007d26:	bfb8      	it	lt
 8007d28:	6032      	strlt	r2, [r6, #0]
 8007d2a:	ea33 0308 	bics.w	r3, r3, r8
 8007d2e:	d112      	bne.n	8007d56 <_dtoa_r+0x9e>
 8007d30:	f242 730f 	movw	r3, #9999	@ 0x270f
 8007d34:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8007d36:	6013      	str	r3, [r2, #0]
 8007d38:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8007d3c:	4323      	orrs	r3, r4
 8007d3e:	f000 8550 	beq.w	80087e2 <_dtoa_r+0xb2a>
 8007d42:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8007d44:	f8df a244 	ldr.w	sl, [pc, #580]	@ 8007f8c <_dtoa_r+0x2d4>
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	f000 8552 	beq.w	80087f2 <_dtoa_r+0xb3a>
 8007d4e:	f10a 0303 	add.w	r3, sl, #3
 8007d52:	f000 bd4c 	b.w	80087ee <_dtoa_r+0xb36>
 8007d56:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007d5a:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8007d5e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007d62:	2200      	movs	r2, #0
 8007d64:	2300      	movs	r3, #0
 8007d66:	f7f8 fe1f 	bl	80009a8 <__aeabi_dcmpeq>
 8007d6a:	4607      	mov	r7, r0
 8007d6c:	b158      	cbz	r0, 8007d86 <_dtoa_r+0xce>
 8007d6e:	2301      	movs	r3, #1
 8007d70:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8007d72:	6013      	str	r3, [r2, #0]
 8007d74:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8007d76:	b113      	cbz	r3, 8007d7e <_dtoa_r+0xc6>
 8007d78:	4b85      	ldr	r3, [pc, #532]	@ (8007f90 <_dtoa_r+0x2d8>)
 8007d7a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8007d7c:	6013      	str	r3, [r2, #0]
 8007d7e:	f8df a214 	ldr.w	sl, [pc, #532]	@ 8007f94 <_dtoa_r+0x2dc>
 8007d82:	f000 bd36 	b.w	80087f2 <_dtoa_r+0xb3a>
 8007d86:	ab14      	add	r3, sp, #80	@ 0x50
 8007d88:	9301      	str	r3, [sp, #4]
 8007d8a:	ab15      	add	r3, sp, #84	@ 0x54
 8007d8c:	9300      	str	r3, [sp, #0]
 8007d8e:	4658      	mov	r0, fp
 8007d90:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8007d94:	f001 fa30 	bl	80091f8 <__d2b>
 8007d98:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8007d9c:	4681      	mov	r9, r0
 8007d9e:	2e00      	cmp	r6, #0
 8007da0:	d077      	beq.n	8007e92 <_dtoa_r+0x1da>
 8007da2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007da6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007da8:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007dac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007db0:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007db4:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8007db8:	9712      	str	r7, [sp, #72]	@ 0x48
 8007dba:	4619      	mov	r1, r3
 8007dbc:	2200      	movs	r2, #0
 8007dbe:	4b76      	ldr	r3, [pc, #472]	@ (8007f98 <_dtoa_r+0x2e0>)
 8007dc0:	f7f8 f9d2 	bl	8000168 <__aeabi_dsub>
 8007dc4:	a368      	add	r3, pc, #416	@ (adr r3, 8007f68 <_dtoa_r+0x2b0>)
 8007dc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dca:	f7f8 fb85 	bl	80004d8 <__aeabi_dmul>
 8007dce:	a368      	add	r3, pc, #416	@ (adr r3, 8007f70 <_dtoa_r+0x2b8>)
 8007dd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dd4:	f7f8 f9ca 	bl	800016c <__adddf3>
 8007dd8:	4604      	mov	r4, r0
 8007dda:	4630      	mov	r0, r6
 8007ddc:	460d      	mov	r5, r1
 8007dde:	f7f8 fb11 	bl	8000404 <__aeabi_i2d>
 8007de2:	a365      	add	r3, pc, #404	@ (adr r3, 8007f78 <_dtoa_r+0x2c0>)
 8007de4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007de8:	f7f8 fb76 	bl	80004d8 <__aeabi_dmul>
 8007dec:	4602      	mov	r2, r0
 8007dee:	460b      	mov	r3, r1
 8007df0:	4620      	mov	r0, r4
 8007df2:	4629      	mov	r1, r5
 8007df4:	f7f8 f9ba 	bl	800016c <__adddf3>
 8007df8:	4604      	mov	r4, r0
 8007dfa:	460d      	mov	r5, r1
 8007dfc:	f7f8 fe1c 	bl	8000a38 <__aeabi_d2iz>
 8007e00:	2200      	movs	r2, #0
 8007e02:	4607      	mov	r7, r0
 8007e04:	2300      	movs	r3, #0
 8007e06:	4620      	mov	r0, r4
 8007e08:	4629      	mov	r1, r5
 8007e0a:	f7f8 fdd7 	bl	80009bc <__aeabi_dcmplt>
 8007e0e:	b140      	cbz	r0, 8007e22 <_dtoa_r+0x16a>
 8007e10:	4638      	mov	r0, r7
 8007e12:	f7f8 faf7 	bl	8000404 <__aeabi_i2d>
 8007e16:	4622      	mov	r2, r4
 8007e18:	462b      	mov	r3, r5
 8007e1a:	f7f8 fdc5 	bl	80009a8 <__aeabi_dcmpeq>
 8007e1e:	b900      	cbnz	r0, 8007e22 <_dtoa_r+0x16a>
 8007e20:	3f01      	subs	r7, #1
 8007e22:	2f16      	cmp	r7, #22
 8007e24:	d853      	bhi.n	8007ece <_dtoa_r+0x216>
 8007e26:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007e2a:	4b5c      	ldr	r3, [pc, #368]	@ (8007f9c <_dtoa_r+0x2e4>)
 8007e2c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007e30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e34:	f7f8 fdc2 	bl	80009bc <__aeabi_dcmplt>
 8007e38:	2800      	cmp	r0, #0
 8007e3a:	d04a      	beq.n	8007ed2 <_dtoa_r+0x21a>
 8007e3c:	2300      	movs	r3, #0
 8007e3e:	3f01      	subs	r7, #1
 8007e40:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007e42:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007e44:	1b9b      	subs	r3, r3, r6
 8007e46:	1e5a      	subs	r2, r3, #1
 8007e48:	bf46      	itte	mi
 8007e4a:	f1c3 0801 	rsbmi	r8, r3, #1
 8007e4e:	2300      	movmi	r3, #0
 8007e50:	f04f 0800 	movpl.w	r8, #0
 8007e54:	9209      	str	r2, [sp, #36]	@ 0x24
 8007e56:	bf48      	it	mi
 8007e58:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8007e5a:	2f00      	cmp	r7, #0
 8007e5c:	db3b      	blt.n	8007ed6 <_dtoa_r+0x21e>
 8007e5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007e60:	970e      	str	r7, [sp, #56]	@ 0x38
 8007e62:	443b      	add	r3, r7
 8007e64:	9309      	str	r3, [sp, #36]	@ 0x24
 8007e66:	2300      	movs	r3, #0
 8007e68:	930a      	str	r3, [sp, #40]	@ 0x28
 8007e6a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007e6c:	2b09      	cmp	r3, #9
 8007e6e:	d866      	bhi.n	8007f3e <_dtoa_r+0x286>
 8007e70:	2b05      	cmp	r3, #5
 8007e72:	bfc4      	itt	gt
 8007e74:	3b04      	subgt	r3, #4
 8007e76:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8007e78:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007e7a:	bfc8      	it	gt
 8007e7c:	2400      	movgt	r4, #0
 8007e7e:	f1a3 0302 	sub.w	r3, r3, #2
 8007e82:	bfd8      	it	le
 8007e84:	2401      	movle	r4, #1
 8007e86:	2b03      	cmp	r3, #3
 8007e88:	d864      	bhi.n	8007f54 <_dtoa_r+0x29c>
 8007e8a:	e8df f003 	tbb	[pc, r3]
 8007e8e:	382b      	.short	0x382b
 8007e90:	5636      	.short	0x5636
 8007e92:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8007e96:	441e      	add	r6, r3
 8007e98:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007e9c:	2b20      	cmp	r3, #32
 8007e9e:	bfc1      	itttt	gt
 8007ea0:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007ea4:	fa08 f803 	lslgt.w	r8, r8, r3
 8007ea8:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8007eac:	fa24 f303 	lsrgt.w	r3, r4, r3
 8007eb0:	bfd6      	itet	le
 8007eb2:	f1c3 0320 	rsble	r3, r3, #32
 8007eb6:	ea48 0003 	orrgt.w	r0, r8, r3
 8007eba:	fa04 f003 	lslle.w	r0, r4, r3
 8007ebe:	f7f8 fa91 	bl	80003e4 <__aeabi_ui2d>
 8007ec2:	2201      	movs	r2, #1
 8007ec4:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8007ec8:	3e01      	subs	r6, #1
 8007eca:	9212      	str	r2, [sp, #72]	@ 0x48
 8007ecc:	e775      	b.n	8007dba <_dtoa_r+0x102>
 8007ece:	2301      	movs	r3, #1
 8007ed0:	e7b6      	b.n	8007e40 <_dtoa_r+0x188>
 8007ed2:	900f      	str	r0, [sp, #60]	@ 0x3c
 8007ed4:	e7b5      	b.n	8007e42 <_dtoa_r+0x18a>
 8007ed6:	427b      	negs	r3, r7
 8007ed8:	930a      	str	r3, [sp, #40]	@ 0x28
 8007eda:	2300      	movs	r3, #0
 8007edc:	eba8 0807 	sub.w	r8, r8, r7
 8007ee0:	930e      	str	r3, [sp, #56]	@ 0x38
 8007ee2:	e7c2      	b.n	8007e6a <_dtoa_r+0x1b2>
 8007ee4:	2300      	movs	r3, #0
 8007ee6:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007ee8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	dc35      	bgt.n	8007f5a <_dtoa_r+0x2a2>
 8007eee:	2301      	movs	r3, #1
 8007ef0:	461a      	mov	r2, r3
 8007ef2:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8007ef6:	9221      	str	r2, [sp, #132]	@ 0x84
 8007ef8:	e00b      	b.n	8007f12 <_dtoa_r+0x25a>
 8007efa:	2301      	movs	r3, #1
 8007efc:	e7f3      	b.n	8007ee6 <_dtoa_r+0x22e>
 8007efe:	2300      	movs	r3, #0
 8007f00:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007f02:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007f04:	18fb      	adds	r3, r7, r3
 8007f06:	9308      	str	r3, [sp, #32]
 8007f08:	3301      	adds	r3, #1
 8007f0a:	2b01      	cmp	r3, #1
 8007f0c:	9307      	str	r3, [sp, #28]
 8007f0e:	bfb8      	it	lt
 8007f10:	2301      	movlt	r3, #1
 8007f12:	2100      	movs	r1, #0
 8007f14:	2204      	movs	r2, #4
 8007f16:	f8db 001c 	ldr.w	r0, [fp, #28]
 8007f1a:	f102 0514 	add.w	r5, r2, #20
 8007f1e:	429d      	cmp	r5, r3
 8007f20:	d91f      	bls.n	8007f62 <_dtoa_r+0x2aa>
 8007f22:	6041      	str	r1, [r0, #4]
 8007f24:	4658      	mov	r0, fp
 8007f26:	f000 fd8d 	bl	8008a44 <_Balloc>
 8007f2a:	4682      	mov	sl, r0
 8007f2c:	2800      	cmp	r0, #0
 8007f2e:	d139      	bne.n	8007fa4 <_dtoa_r+0x2ec>
 8007f30:	4602      	mov	r2, r0
 8007f32:	f240 11af 	movw	r1, #431	@ 0x1af
 8007f36:	4b1a      	ldr	r3, [pc, #104]	@ (8007fa0 <_dtoa_r+0x2e8>)
 8007f38:	e6d2      	b.n	8007ce0 <_dtoa_r+0x28>
 8007f3a:	2301      	movs	r3, #1
 8007f3c:	e7e0      	b.n	8007f00 <_dtoa_r+0x248>
 8007f3e:	2401      	movs	r4, #1
 8007f40:	2300      	movs	r3, #0
 8007f42:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007f44:	9320      	str	r3, [sp, #128]	@ 0x80
 8007f46:	f04f 33ff 	mov.w	r3, #4294967295
 8007f4a:	2200      	movs	r2, #0
 8007f4c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8007f50:	2312      	movs	r3, #18
 8007f52:	e7d0      	b.n	8007ef6 <_dtoa_r+0x23e>
 8007f54:	2301      	movs	r3, #1
 8007f56:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007f58:	e7f5      	b.n	8007f46 <_dtoa_r+0x28e>
 8007f5a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007f5c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8007f60:	e7d7      	b.n	8007f12 <_dtoa_r+0x25a>
 8007f62:	3101      	adds	r1, #1
 8007f64:	0052      	lsls	r2, r2, #1
 8007f66:	e7d8      	b.n	8007f1a <_dtoa_r+0x262>
 8007f68:	636f4361 	.word	0x636f4361
 8007f6c:	3fd287a7 	.word	0x3fd287a7
 8007f70:	8b60c8b3 	.word	0x8b60c8b3
 8007f74:	3fc68a28 	.word	0x3fc68a28
 8007f78:	509f79fb 	.word	0x509f79fb
 8007f7c:	3fd34413 	.word	0x3fd34413
 8007f80:	0800cada 	.word	0x0800cada
 8007f84:	0800caf1 	.word	0x0800caf1
 8007f88:	7ff00000 	.word	0x7ff00000
 8007f8c:	0800cad6 	.word	0x0800cad6
 8007f90:	0800ce31 	.word	0x0800ce31
 8007f94:	0800ce30 	.word	0x0800ce30
 8007f98:	3ff80000 	.word	0x3ff80000
 8007f9c:	0800cbe8 	.word	0x0800cbe8
 8007fa0:	0800cb49 	.word	0x0800cb49
 8007fa4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007fa8:	6018      	str	r0, [r3, #0]
 8007faa:	9b07      	ldr	r3, [sp, #28]
 8007fac:	2b0e      	cmp	r3, #14
 8007fae:	f200 80a4 	bhi.w	80080fa <_dtoa_r+0x442>
 8007fb2:	2c00      	cmp	r4, #0
 8007fb4:	f000 80a1 	beq.w	80080fa <_dtoa_r+0x442>
 8007fb8:	2f00      	cmp	r7, #0
 8007fba:	dd33      	ble.n	8008024 <_dtoa_r+0x36c>
 8007fbc:	4b86      	ldr	r3, [pc, #536]	@ (80081d8 <_dtoa_r+0x520>)
 8007fbe:	f007 020f 	and.w	r2, r7, #15
 8007fc2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007fc6:	05f8      	lsls	r0, r7, #23
 8007fc8:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007fcc:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007fd0:	ea4f 1427 	mov.w	r4, r7, asr #4
 8007fd4:	d516      	bpl.n	8008004 <_dtoa_r+0x34c>
 8007fd6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007fda:	4b80      	ldr	r3, [pc, #512]	@ (80081dc <_dtoa_r+0x524>)
 8007fdc:	2603      	movs	r6, #3
 8007fde:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007fe2:	f7f8 fba3 	bl	800072c <__aeabi_ddiv>
 8007fe6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007fea:	f004 040f 	and.w	r4, r4, #15
 8007fee:	4d7b      	ldr	r5, [pc, #492]	@ (80081dc <_dtoa_r+0x524>)
 8007ff0:	b954      	cbnz	r4, 8008008 <_dtoa_r+0x350>
 8007ff2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007ff6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007ffa:	f7f8 fb97 	bl	800072c <__aeabi_ddiv>
 8007ffe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008002:	e028      	b.n	8008056 <_dtoa_r+0x39e>
 8008004:	2602      	movs	r6, #2
 8008006:	e7f2      	b.n	8007fee <_dtoa_r+0x336>
 8008008:	07e1      	lsls	r1, r4, #31
 800800a:	d508      	bpl.n	800801e <_dtoa_r+0x366>
 800800c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008010:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008014:	f7f8 fa60 	bl	80004d8 <__aeabi_dmul>
 8008018:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800801c:	3601      	adds	r6, #1
 800801e:	1064      	asrs	r4, r4, #1
 8008020:	3508      	adds	r5, #8
 8008022:	e7e5      	b.n	8007ff0 <_dtoa_r+0x338>
 8008024:	f000 80d2 	beq.w	80081cc <_dtoa_r+0x514>
 8008028:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800802c:	427c      	negs	r4, r7
 800802e:	4b6a      	ldr	r3, [pc, #424]	@ (80081d8 <_dtoa_r+0x520>)
 8008030:	f004 020f 	and.w	r2, r4, #15
 8008034:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800803c:	f7f8 fa4c 	bl	80004d8 <__aeabi_dmul>
 8008040:	2602      	movs	r6, #2
 8008042:	2300      	movs	r3, #0
 8008044:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008048:	4d64      	ldr	r5, [pc, #400]	@ (80081dc <_dtoa_r+0x524>)
 800804a:	1124      	asrs	r4, r4, #4
 800804c:	2c00      	cmp	r4, #0
 800804e:	f040 80b2 	bne.w	80081b6 <_dtoa_r+0x4fe>
 8008052:	2b00      	cmp	r3, #0
 8008054:	d1d3      	bne.n	8007ffe <_dtoa_r+0x346>
 8008056:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800805a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800805c:	2b00      	cmp	r3, #0
 800805e:	f000 80b7 	beq.w	80081d0 <_dtoa_r+0x518>
 8008062:	2200      	movs	r2, #0
 8008064:	4620      	mov	r0, r4
 8008066:	4629      	mov	r1, r5
 8008068:	4b5d      	ldr	r3, [pc, #372]	@ (80081e0 <_dtoa_r+0x528>)
 800806a:	f7f8 fca7 	bl	80009bc <__aeabi_dcmplt>
 800806e:	2800      	cmp	r0, #0
 8008070:	f000 80ae 	beq.w	80081d0 <_dtoa_r+0x518>
 8008074:	9b07      	ldr	r3, [sp, #28]
 8008076:	2b00      	cmp	r3, #0
 8008078:	f000 80aa 	beq.w	80081d0 <_dtoa_r+0x518>
 800807c:	9b08      	ldr	r3, [sp, #32]
 800807e:	2b00      	cmp	r3, #0
 8008080:	dd37      	ble.n	80080f2 <_dtoa_r+0x43a>
 8008082:	1e7b      	subs	r3, r7, #1
 8008084:	4620      	mov	r0, r4
 8008086:	9304      	str	r3, [sp, #16]
 8008088:	2200      	movs	r2, #0
 800808a:	4629      	mov	r1, r5
 800808c:	4b55      	ldr	r3, [pc, #340]	@ (80081e4 <_dtoa_r+0x52c>)
 800808e:	f7f8 fa23 	bl	80004d8 <__aeabi_dmul>
 8008092:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008096:	9c08      	ldr	r4, [sp, #32]
 8008098:	3601      	adds	r6, #1
 800809a:	4630      	mov	r0, r6
 800809c:	f7f8 f9b2 	bl	8000404 <__aeabi_i2d>
 80080a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80080a4:	f7f8 fa18 	bl	80004d8 <__aeabi_dmul>
 80080a8:	2200      	movs	r2, #0
 80080aa:	4b4f      	ldr	r3, [pc, #316]	@ (80081e8 <_dtoa_r+0x530>)
 80080ac:	f7f8 f85e 	bl	800016c <__adddf3>
 80080b0:	4605      	mov	r5, r0
 80080b2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80080b6:	2c00      	cmp	r4, #0
 80080b8:	f040 809a 	bne.w	80081f0 <_dtoa_r+0x538>
 80080bc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80080c0:	2200      	movs	r2, #0
 80080c2:	4b4a      	ldr	r3, [pc, #296]	@ (80081ec <_dtoa_r+0x534>)
 80080c4:	f7f8 f850 	bl	8000168 <__aeabi_dsub>
 80080c8:	4602      	mov	r2, r0
 80080ca:	460b      	mov	r3, r1
 80080cc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80080d0:	462a      	mov	r2, r5
 80080d2:	4633      	mov	r3, r6
 80080d4:	f7f8 fc90 	bl	80009f8 <__aeabi_dcmpgt>
 80080d8:	2800      	cmp	r0, #0
 80080da:	f040 828e 	bne.w	80085fa <_dtoa_r+0x942>
 80080de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80080e2:	462a      	mov	r2, r5
 80080e4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80080e8:	f7f8 fc68 	bl	80009bc <__aeabi_dcmplt>
 80080ec:	2800      	cmp	r0, #0
 80080ee:	f040 8127 	bne.w	8008340 <_dtoa_r+0x688>
 80080f2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80080f6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80080fa:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	f2c0 8163 	blt.w	80083c8 <_dtoa_r+0x710>
 8008102:	2f0e      	cmp	r7, #14
 8008104:	f300 8160 	bgt.w	80083c8 <_dtoa_r+0x710>
 8008108:	4b33      	ldr	r3, [pc, #204]	@ (80081d8 <_dtoa_r+0x520>)
 800810a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800810e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008112:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8008116:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008118:	2b00      	cmp	r3, #0
 800811a:	da03      	bge.n	8008124 <_dtoa_r+0x46c>
 800811c:	9b07      	ldr	r3, [sp, #28]
 800811e:	2b00      	cmp	r3, #0
 8008120:	f340 8100 	ble.w	8008324 <_dtoa_r+0x66c>
 8008124:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008128:	4656      	mov	r6, sl
 800812a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800812e:	4620      	mov	r0, r4
 8008130:	4629      	mov	r1, r5
 8008132:	f7f8 fafb 	bl	800072c <__aeabi_ddiv>
 8008136:	f7f8 fc7f 	bl	8000a38 <__aeabi_d2iz>
 800813a:	4680      	mov	r8, r0
 800813c:	f7f8 f962 	bl	8000404 <__aeabi_i2d>
 8008140:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008144:	f7f8 f9c8 	bl	80004d8 <__aeabi_dmul>
 8008148:	4602      	mov	r2, r0
 800814a:	460b      	mov	r3, r1
 800814c:	4620      	mov	r0, r4
 800814e:	4629      	mov	r1, r5
 8008150:	f7f8 f80a 	bl	8000168 <__aeabi_dsub>
 8008154:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8008158:	9d07      	ldr	r5, [sp, #28]
 800815a:	f806 4b01 	strb.w	r4, [r6], #1
 800815e:	eba6 040a 	sub.w	r4, r6, sl
 8008162:	42a5      	cmp	r5, r4
 8008164:	4602      	mov	r2, r0
 8008166:	460b      	mov	r3, r1
 8008168:	f040 8116 	bne.w	8008398 <_dtoa_r+0x6e0>
 800816c:	f7f7 fffe 	bl	800016c <__adddf3>
 8008170:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008174:	4604      	mov	r4, r0
 8008176:	460d      	mov	r5, r1
 8008178:	f7f8 fc3e 	bl	80009f8 <__aeabi_dcmpgt>
 800817c:	2800      	cmp	r0, #0
 800817e:	f040 80f8 	bne.w	8008372 <_dtoa_r+0x6ba>
 8008182:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008186:	4620      	mov	r0, r4
 8008188:	4629      	mov	r1, r5
 800818a:	f7f8 fc0d 	bl	80009a8 <__aeabi_dcmpeq>
 800818e:	b118      	cbz	r0, 8008198 <_dtoa_r+0x4e0>
 8008190:	f018 0f01 	tst.w	r8, #1
 8008194:	f040 80ed 	bne.w	8008372 <_dtoa_r+0x6ba>
 8008198:	4649      	mov	r1, r9
 800819a:	4658      	mov	r0, fp
 800819c:	f000 fc92 	bl	8008ac4 <_Bfree>
 80081a0:	2300      	movs	r3, #0
 80081a2:	7033      	strb	r3, [r6, #0]
 80081a4:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80081a6:	3701      	adds	r7, #1
 80081a8:	601f      	str	r7, [r3, #0]
 80081aa:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	f000 8320 	beq.w	80087f2 <_dtoa_r+0xb3a>
 80081b2:	601e      	str	r6, [r3, #0]
 80081b4:	e31d      	b.n	80087f2 <_dtoa_r+0xb3a>
 80081b6:	07e2      	lsls	r2, r4, #31
 80081b8:	d505      	bpl.n	80081c6 <_dtoa_r+0x50e>
 80081ba:	e9d5 2300 	ldrd	r2, r3, [r5]
 80081be:	f7f8 f98b 	bl	80004d8 <__aeabi_dmul>
 80081c2:	2301      	movs	r3, #1
 80081c4:	3601      	adds	r6, #1
 80081c6:	1064      	asrs	r4, r4, #1
 80081c8:	3508      	adds	r5, #8
 80081ca:	e73f      	b.n	800804c <_dtoa_r+0x394>
 80081cc:	2602      	movs	r6, #2
 80081ce:	e742      	b.n	8008056 <_dtoa_r+0x39e>
 80081d0:	9c07      	ldr	r4, [sp, #28]
 80081d2:	9704      	str	r7, [sp, #16]
 80081d4:	e761      	b.n	800809a <_dtoa_r+0x3e2>
 80081d6:	bf00      	nop
 80081d8:	0800cbe8 	.word	0x0800cbe8
 80081dc:	0800cbc0 	.word	0x0800cbc0
 80081e0:	3ff00000 	.word	0x3ff00000
 80081e4:	40240000 	.word	0x40240000
 80081e8:	401c0000 	.word	0x401c0000
 80081ec:	40140000 	.word	0x40140000
 80081f0:	4b70      	ldr	r3, [pc, #448]	@ (80083b4 <_dtoa_r+0x6fc>)
 80081f2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80081f4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80081f8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80081fc:	4454      	add	r4, sl
 80081fe:	2900      	cmp	r1, #0
 8008200:	d045      	beq.n	800828e <_dtoa_r+0x5d6>
 8008202:	2000      	movs	r0, #0
 8008204:	496c      	ldr	r1, [pc, #432]	@ (80083b8 <_dtoa_r+0x700>)
 8008206:	f7f8 fa91 	bl	800072c <__aeabi_ddiv>
 800820a:	4633      	mov	r3, r6
 800820c:	462a      	mov	r2, r5
 800820e:	f7f7 ffab 	bl	8000168 <__aeabi_dsub>
 8008212:	4656      	mov	r6, sl
 8008214:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008218:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800821c:	f7f8 fc0c 	bl	8000a38 <__aeabi_d2iz>
 8008220:	4605      	mov	r5, r0
 8008222:	f7f8 f8ef 	bl	8000404 <__aeabi_i2d>
 8008226:	4602      	mov	r2, r0
 8008228:	460b      	mov	r3, r1
 800822a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800822e:	f7f7 ff9b 	bl	8000168 <__aeabi_dsub>
 8008232:	4602      	mov	r2, r0
 8008234:	460b      	mov	r3, r1
 8008236:	3530      	adds	r5, #48	@ 0x30
 8008238:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800823c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008240:	f806 5b01 	strb.w	r5, [r6], #1
 8008244:	f7f8 fbba 	bl	80009bc <__aeabi_dcmplt>
 8008248:	2800      	cmp	r0, #0
 800824a:	d163      	bne.n	8008314 <_dtoa_r+0x65c>
 800824c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008250:	2000      	movs	r0, #0
 8008252:	495a      	ldr	r1, [pc, #360]	@ (80083bc <_dtoa_r+0x704>)
 8008254:	f7f7 ff88 	bl	8000168 <__aeabi_dsub>
 8008258:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800825c:	f7f8 fbae 	bl	80009bc <__aeabi_dcmplt>
 8008260:	2800      	cmp	r0, #0
 8008262:	f040 8087 	bne.w	8008374 <_dtoa_r+0x6bc>
 8008266:	42a6      	cmp	r6, r4
 8008268:	f43f af43 	beq.w	80080f2 <_dtoa_r+0x43a>
 800826c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008270:	2200      	movs	r2, #0
 8008272:	4b53      	ldr	r3, [pc, #332]	@ (80083c0 <_dtoa_r+0x708>)
 8008274:	f7f8 f930 	bl	80004d8 <__aeabi_dmul>
 8008278:	2200      	movs	r2, #0
 800827a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800827e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008282:	4b4f      	ldr	r3, [pc, #316]	@ (80083c0 <_dtoa_r+0x708>)
 8008284:	f7f8 f928 	bl	80004d8 <__aeabi_dmul>
 8008288:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800828c:	e7c4      	b.n	8008218 <_dtoa_r+0x560>
 800828e:	4631      	mov	r1, r6
 8008290:	4628      	mov	r0, r5
 8008292:	f7f8 f921 	bl	80004d8 <__aeabi_dmul>
 8008296:	4656      	mov	r6, sl
 8008298:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800829c:	9413      	str	r4, [sp, #76]	@ 0x4c
 800829e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80082a2:	f7f8 fbc9 	bl	8000a38 <__aeabi_d2iz>
 80082a6:	4605      	mov	r5, r0
 80082a8:	f7f8 f8ac 	bl	8000404 <__aeabi_i2d>
 80082ac:	4602      	mov	r2, r0
 80082ae:	460b      	mov	r3, r1
 80082b0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80082b4:	f7f7 ff58 	bl	8000168 <__aeabi_dsub>
 80082b8:	4602      	mov	r2, r0
 80082ba:	460b      	mov	r3, r1
 80082bc:	3530      	adds	r5, #48	@ 0x30
 80082be:	f806 5b01 	strb.w	r5, [r6], #1
 80082c2:	42a6      	cmp	r6, r4
 80082c4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80082c8:	f04f 0200 	mov.w	r2, #0
 80082cc:	d124      	bne.n	8008318 <_dtoa_r+0x660>
 80082ce:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80082d2:	4b39      	ldr	r3, [pc, #228]	@ (80083b8 <_dtoa_r+0x700>)
 80082d4:	f7f7 ff4a 	bl	800016c <__adddf3>
 80082d8:	4602      	mov	r2, r0
 80082da:	460b      	mov	r3, r1
 80082dc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80082e0:	f7f8 fb8a 	bl	80009f8 <__aeabi_dcmpgt>
 80082e4:	2800      	cmp	r0, #0
 80082e6:	d145      	bne.n	8008374 <_dtoa_r+0x6bc>
 80082e8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80082ec:	2000      	movs	r0, #0
 80082ee:	4932      	ldr	r1, [pc, #200]	@ (80083b8 <_dtoa_r+0x700>)
 80082f0:	f7f7 ff3a 	bl	8000168 <__aeabi_dsub>
 80082f4:	4602      	mov	r2, r0
 80082f6:	460b      	mov	r3, r1
 80082f8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80082fc:	f7f8 fb5e 	bl	80009bc <__aeabi_dcmplt>
 8008300:	2800      	cmp	r0, #0
 8008302:	f43f aef6 	beq.w	80080f2 <_dtoa_r+0x43a>
 8008306:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8008308:	1e73      	subs	r3, r6, #1
 800830a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800830c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008310:	2b30      	cmp	r3, #48	@ 0x30
 8008312:	d0f8      	beq.n	8008306 <_dtoa_r+0x64e>
 8008314:	9f04      	ldr	r7, [sp, #16]
 8008316:	e73f      	b.n	8008198 <_dtoa_r+0x4e0>
 8008318:	4b29      	ldr	r3, [pc, #164]	@ (80083c0 <_dtoa_r+0x708>)
 800831a:	f7f8 f8dd 	bl	80004d8 <__aeabi_dmul>
 800831e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008322:	e7bc      	b.n	800829e <_dtoa_r+0x5e6>
 8008324:	d10c      	bne.n	8008340 <_dtoa_r+0x688>
 8008326:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800832a:	2200      	movs	r2, #0
 800832c:	4b25      	ldr	r3, [pc, #148]	@ (80083c4 <_dtoa_r+0x70c>)
 800832e:	f7f8 f8d3 	bl	80004d8 <__aeabi_dmul>
 8008332:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008336:	f7f8 fb55 	bl	80009e4 <__aeabi_dcmpge>
 800833a:	2800      	cmp	r0, #0
 800833c:	f000 815b 	beq.w	80085f6 <_dtoa_r+0x93e>
 8008340:	2400      	movs	r4, #0
 8008342:	4625      	mov	r5, r4
 8008344:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008346:	4656      	mov	r6, sl
 8008348:	43db      	mvns	r3, r3
 800834a:	9304      	str	r3, [sp, #16]
 800834c:	2700      	movs	r7, #0
 800834e:	4621      	mov	r1, r4
 8008350:	4658      	mov	r0, fp
 8008352:	f000 fbb7 	bl	8008ac4 <_Bfree>
 8008356:	2d00      	cmp	r5, #0
 8008358:	d0dc      	beq.n	8008314 <_dtoa_r+0x65c>
 800835a:	b12f      	cbz	r7, 8008368 <_dtoa_r+0x6b0>
 800835c:	42af      	cmp	r7, r5
 800835e:	d003      	beq.n	8008368 <_dtoa_r+0x6b0>
 8008360:	4639      	mov	r1, r7
 8008362:	4658      	mov	r0, fp
 8008364:	f000 fbae 	bl	8008ac4 <_Bfree>
 8008368:	4629      	mov	r1, r5
 800836a:	4658      	mov	r0, fp
 800836c:	f000 fbaa 	bl	8008ac4 <_Bfree>
 8008370:	e7d0      	b.n	8008314 <_dtoa_r+0x65c>
 8008372:	9704      	str	r7, [sp, #16]
 8008374:	4633      	mov	r3, r6
 8008376:	461e      	mov	r6, r3
 8008378:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800837c:	2a39      	cmp	r2, #57	@ 0x39
 800837e:	d107      	bne.n	8008390 <_dtoa_r+0x6d8>
 8008380:	459a      	cmp	sl, r3
 8008382:	d1f8      	bne.n	8008376 <_dtoa_r+0x6be>
 8008384:	9a04      	ldr	r2, [sp, #16]
 8008386:	3201      	adds	r2, #1
 8008388:	9204      	str	r2, [sp, #16]
 800838a:	2230      	movs	r2, #48	@ 0x30
 800838c:	f88a 2000 	strb.w	r2, [sl]
 8008390:	781a      	ldrb	r2, [r3, #0]
 8008392:	3201      	adds	r2, #1
 8008394:	701a      	strb	r2, [r3, #0]
 8008396:	e7bd      	b.n	8008314 <_dtoa_r+0x65c>
 8008398:	2200      	movs	r2, #0
 800839a:	4b09      	ldr	r3, [pc, #36]	@ (80083c0 <_dtoa_r+0x708>)
 800839c:	f7f8 f89c 	bl	80004d8 <__aeabi_dmul>
 80083a0:	2200      	movs	r2, #0
 80083a2:	2300      	movs	r3, #0
 80083a4:	4604      	mov	r4, r0
 80083a6:	460d      	mov	r5, r1
 80083a8:	f7f8 fafe 	bl	80009a8 <__aeabi_dcmpeq>
 80083ac:	2800      	cmp	r0, #0
 80083ae:	f43f aebc 	beq.w	800812a <_dtoa_r+0x472>
 80083b2:	e6f1      	b.n	8008198 <_dtoa_r+0x4e0>
 80083b4:	0800cbe8 	.word	0x0800cbe8
 80083b8:	3fe00000 	.word	0x3fe00000
 80083bc:	3ff00000 	.word	0x3ff00000
 80083c0:	40240000 	.word	0x40240000
 80083c4:	40140000 	.word	0x40140000
 80083c8:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80083ca:	2a00      	cmp	r2, #0
 80083cc:	f000 80db 	beq.w	8008586 <_dtoa_r+0x8ce>
 80083d0:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80083d2:	2a01      	cmp	r2, #1
 80083d4:	f300 80bf 	bgt.w	8008556 <_dtoa_r+0x89e>
 80083d8:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80083da:	2a00      	cmp	r2, #0
 80083dc:	f000 80b7 	beq.w	800854e <_dtoa_r+0x896>
 80083e0:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80083e4:	4646      	mov	r6, r8
 80083e6:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80083e8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80083ea:	2101      	movs	r1, #1
 80083ec:	441a      	add	r2, r3
 80083ee:	4658      	mov	r0, fp
 80083f0:	4498      	add	r8, r3
 80083f2:	9209      	str	r2, [sp, #36]	@ 0x24
 80083f4:	f000 fc64 	bl	8008cc0 <__i2b>
 80083f8:	4605      	mov	r5, r0
 80083fa:	b15e      	cbz	r6, 8008414 <_dtoa_r+0x75c>
 80083fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80083fe:	2b00      	cmp	r3, #0
 8008400:	dd08      	ble.n	8008414 <_dtoa_r+0x75c>
 8008402:	42b3      	cmp	r3, r6
 8008404:	bfa8      	it	ge
 8008406:	4633      	movge	r3, r6
 8008408:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800840a:	eba8 0803 	sub.w	r8, r8, r3
 800840e:	1af6      	subs	r6, r6, r3
 8008410:	1ad3      	subs	r3, r2, r3
 8008412:	9309      	str	r3, [sp, #36]	@ 0x24
 8008414:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008416:	b1f3      	cbz	r3, 8008456 <_dtoa_r+0x79e>
 8008418:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800841a:	2b00      	cmp	r3, #0
 800841c:	f000 80b7 	beq.w	800858e <_dtoa_r+0x8d6>
 8008420:	b18c      	cbz	r4, 8008446 <_dtoa_r+0x78e>
 8008422:	4629      	mov	r1, r5
 8008424:	4622      	mov	r2, r4
 8008426:	4658      	mov	r0, fp
 8008428:	f000 fd08 	bl	8008e3c <__pow5mult>
 800842c:	464a      	mov	r2, r9
 800842e:	4601      	mov	r1, r0
 8008430:	4605      	mov	r5, r0
 8008432:	4658      	mov	r0, fp
 8008434:	f000 fc5a 	bl	8008cec <__multiply>
 8008438:	4649      	mov	r1, r9
 800843a:	9004      	str	r0, [sp, #16]
 800843c:	4658      	mov	r0, fp
 800843e:	f000 fb41 	bl	8008ac4 <_Bfree>
 8008442:	9b04      	ldr	r3, [sp, #16]
 8008444:	4699      	mov	r9, r3
 8008446:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008448:	1b1a      	subs	r2, r3, r4
 800844a:	d004      	beq.n	8008456 <_dtoa_r+0x79e>
 800844c:	4649      	mov	r1, r9
 800844e:	4658      	mov	r0, fp
 8008450:	f000 fcf4 	bl	8008e3c <__pow5mult>
 8008454:	4681      	mov	r9, r0
 8008456:	2101      	movs	r1, #1
 8008458:	4658      	mov	r0, fp
 800845a:	f000 fc31 	bl	8008cc0 <__i2b>
 800845e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008460:	4604      	mov	r4, r0
 8008462:	2b00      	cmp	r3, #0
 8008464:	f000 81c9 	beq.w	80087fa <_dtoa_r+0xb42>
 8008468:	461a      	mov	r2, r3
 800846a:	4601      	mov	r1, r0
 800846c:	4658      	mov	r0, fp
 800846e:	f000 fce5 	bl	8008e3c <__pow5mult>
 8008472:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008474:	4604      	mov	r4, r0
 8008476:	2b01      	cmp	r3, #1
 8008478:	f300 808f 	bgt.w	800859a <_dtoa_r+0x8e2>
 800847c:	9b02      	ldr	r3, [sp, #8]
 800847e:	2b00      	cmp	r3, #0
 8008480:	f040 8087 	bne.w	8008592 <_dtoa_r+0x8da>
 8008484:	9b03      	ldr	r3, [sp, #12]
 8008486:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800848a:	2b00      	cmp	r3, #0
 800848c:	f040 8083 	bne.w	8008596 <_dtoa_r+0x8de>
 8008490:	9b03      	ldr	r3, [sp, #12]
 8008492:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008496:	0d1b      	lsrs	r3, r3, #20
 8008498:	051b      	lsls	r3, r3, #20
 800849a:	b12b      	cbz	r3, 80084a8 <_dtoa_r+0x7f0>
 800849c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800849e:	f108 0801 	add.w	r8, r8, #1
 80084a2:	3301      	adds	r3, #1
 80084a4:	9309      	str	r3, [sp, #36]	@ 0x24
 80084a6:	2301      	movs	r3, #1
 80084a8:	930a      	str	r3, [sp, #40]	@ 0x28
 80084aa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	f000 81aa 	beq.w	8008806 <_dtoa_r+0xb4e>
 80084b2:	6923      	ldr	r3, [r4, #16]
 80084b4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80084b8:	6918      	ldr	r0, [r3, #16]
 80084ba:	f000 fbb5 	bl	8008c28 <__hi0bits>
 80084be:	f1c0 0020 	rsb	r0, r0, #32
 80084c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80084c4:	4418      	add	r0, r3
 80084c6:	f010 001f 	ands.w	r0, r0, #31
 80084ca:	d071      	beq.n	80085b0 <_dtoa_r+0x8f8>
 80084cc:	f1c0 0320 	rsb	r3, r0, #32
 80084d0:	2b04      	cmp	r3, #4
 80084d2:	dd65      	ble.n	80085a0 <_dtoa_r+0x8e8>
 80084d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80084d6:	f1c0 001c 	rsb	r0, r0, #28
 80084da:	4403      	add	r3, r0
 80084dc:	4480      	add	r8, r0
 80084de:	4406      	add	r6, r0
 80084e0:	9309      	str	r3, [sp, #36]	@ 0x24
 80084e2:	f1b8 0f00 	cmp.w	r8, #0
 80084e6:	dd05      	ble.n	80084f4 <_dtoa_r+0x83c>
 80084e8:	4649      	mov	r1, r9
 80084ea:	4642      	mov	r2, r8
 80084ec:	4658      	mov	r0, fp
 80084ee:	f000 fcff 	bl	8008ef0 <__lshift>
 80084f2:	4681      	mov	r9, r0
 80084f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	dd05      	ble.n	8008506 <_dtoa_r+0x84e>
 80084fa:	4621      	mov	r1, r4
 80084fc:	461a      	mov	r2, r3
 80084fe:	4658      	mov	r0, fp
 8008500:	f000 fcf6 	bl	8008ef0 <__lshift>
 8008504:	4604      	mov	r4, r0
 8008506:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008508:	2b00      	cmp	r3, #0
 800850a:	d053      	beq.n	80085b4 <_dtoa_r+0x8fc>
 800850c:	4621      	mov	r1, r4
 800850e:	4648      	mov	r0, r9
 8008510:	f000 fd5a 	bl	8008fc8 <__mcmp>
 8008514:	2800      	cmp	r0, #0
 8008516:	da4d      	bge.n	80085b4 <_dtoa_r+0x8fc>
 8008518:	1e7b      	subs	r3, r7, #1
 800851a:	4649      	mov	r1, r9
 800851c:	9304      	str	r3, [sp, #16]
 800851e:	220a      	movs	r2, #10
 8008520:	2300      	movs	r3, #0
 8008522:	4658      	mov	r0, fp
 8008524:	f000 faf0 	bl	8008b08 <__multadd>
 8008528:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800852a:	4681      	mov	r9, r0
 800852c:	2b00      	cmp	r3, #0
 800852e:	f000 816c 	beq.w	800880a <_dtoa_r+0xb52>
 8008532:	2300      	movs	r3, #0
 8008534:	4629      	mov	r1, r5
 8008536:	220a      	movs	r2, #10
 8008538:	4658      	mov	r0, fp
 800853a:	f000 fae5 	bl	8008b08 <__multadd>
 800853e:	9b08      	ldr	r3, [sp, #32]
 8008540:	4605      	mov	r5, r0
 8008542:	2b00      	cmp	r3, #0
 8008544:	dc61      	bgt.n	800860a <_dtoa_r+0x952>
 8008546:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008548:	2b02      	cmp	r3, #2
 800854a:	dc3b      	bgt.n	80085c4 <_dtoa_r+0x90c>
 800854c:	e05d      	b.n	800860a <_dtoa_r+0x952>
 800854e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008550:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8008554:	e746      	b.n	80083e4 <_dtoa_r+0x72c>
 8008556:	9b07      	ldr	r3, [sp, #28]
 8008558:	1e5c      	subs	r4, r3, #1
 800855a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800855c:	42a3      	cmp	r3, r4
 800855e:	bfbf      	itttt	lt
 8008560:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8008562:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 8008564:	1ae3      	sublt	r3, r4, r3
 8008566:	18d2      	addlt	r2, r2, r3
 8008568:	bfa8      	it	ge
 800856a:	1b1c      	subge	r4, r3, r4
 800856c:	9b07      	ldr	r3, [sp, #28]
 800856e:	bfbe      	ittt	lt
 8008570:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8008572:	920e      	strlt	r2, [sp, #56]	@ 0x38
 8008574:	2400      	movlt	r4, #0
 8008576:	2b00      	cmp	r3, #0
 8008578:	bfb5      	itete	lt
 800857a:	eba8 0603 	sublt.w	r6, r8, r3
 800857e:	4646      	movge	r6, r8
 8008580:	2300      	movlt	r3, #0
 8008582:	9b07      	ldrge	r3, [sp, #28]
 8008584:	e730      	b.n	80083e8 <_dtoa_r+0x730>
 8008586:	4646      	mov	r6, r8
 8008588:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800858a:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800858c:	e735      	b.n	80083fa <_dtoa_r+0x742>
 800858e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008590:	e75c      	b.n	800844c <_dtoa_r+0x794>
 8008592:	2300      	movs	r3, #0
 8008594:	e788      	b.n	80084a8 <_dtoa_r+0x7f0>
 8008596:	9b02      	ldr	r3, [sp, #8]
 8008598:	e786      	b.n	80084a8 <_dtoa_r+0x7f0>
 800859a:	2300      	movs	r3, #0
 800859c:	930a      	str	r3, [sp, #40]	@ 0x28
 800859e:	e788      	b.n	80084b2 <_dtoa_r+0x7fa>
 80085a0:	d09f      	beq.n	80084e2 <_dtoa_r+0x82a>
 80085a2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80085a4:	331c      	adds	r3, #28
 80085a6:	441a      	add	r2, r3
 80085a8:	4498      	add	r8, r3
 80085aa:	441e      	add	r6, r3
 80085ac:	9209      	str	r2, [sp, #36]	@ 0x24
 80085ae:	e798      	b.n	80084e2 <_dtoa_r+0x82a>
 80085b0:	4603      	mov	r3, r0
 80085b2:	e7f6      	b.n	80085a2 <_dtoa_r+0x8ea>
 80085b4:	9b07      	ldr	r3, [sp, #28]
 80085b6:	9704      	str	r7, [sp, #16]
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	dc20      	bgt.n	80085fe <_dtoa_r+0x946>
 80085bc:	9308      	str	r3, [sp, #32]
 80085be:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80085c0:	2b02      	cmp	r3, #2
 80085c2:	dd1e      	ble.n	8008602 <_dtoa_r+0x94a>
 80085c4:	9b08      	ldr	r3, [sp, #32]
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	f47f aebc 	bne.w	8008344 <_dtoa_r+0x68c>
 80085cc:	4621      	mov	r1, r4
 80085ce:	2205      	movs	r2, #5
 80085d0:	4658      	mov	r0, fp
 80085d2:	f000 fa99 	bl	8008b08 <__multadd>
 80085d6:	4601      	mov	r1, r0
 80085d8:	4604      	mov	r4, r0
 80085da:	4648      	mov	r0, r9
 80085dc:	f000 fcf4 	bl	8008fc8 <__mcmp>
 80085e0:	2800      	cmp	r0, #0
 80085e2:	f77f aeaf 	ble.w	8008344 <_dtoa_r+0x68c>
 80085e6:	2331      	movs	r3, #49	@ 0x31
 80085e8:	4656      	mov	r6, sl
 80085ea:	f806 3b01 	strb.w	r3, [r6], #1
 80085ee:	9b04      	ldr	r3, [sp, #16]
 80085f0:	3301      	adds	r3, #1
 80085f2:	9304      	str	r3, [sp, #16]
 80085f4:	e6aa      	b.n	800834c <_dtoa_r+0x694>
 80085f6:	9c07      	ldr	r4, [sp, #28]
 80085f8:	9704      	str	r7, [sp, #16]
 80085fa:	4625      	mov	r5, r4
 80085fc:	e7f3      	b.n	80085e6 <_dtoa_r+0x92e>
 80085fe:	9b07      	ldr	r3, [sp, #28]
 8008600:	9308      	str	r3, [sp, #32]
 8008602:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008604:	2b00      	cmp	r3, #0
 8008606:	f000 8104 	beq.w	8008812 <_dtoa_r+0xb5a>
 800860a:	2e00      	cmp	r6, #0
 800860c:	dd05      	ble.n	800861a <_dtoa_r+0x962>
 800860e:	4629      	mov	r1, r5
 8008610:	4632      	mov	r2, r6
 8008612:	4658      	mov	r0, fp
 8008614:	f000 fc6c 	bl	8008ef0 <__lshift>
 8008618:	4605      	mov	r5, r0
 800861a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800861c:	2b00      	cmp	r3, #0
 800861e:	d05a      	beq.n	80086d6 <_dtoa_r+0xa1e>
 8008620:	4658      	mov	r0, fp
 8008622:	6869      	ldr	r1, [r5, #4]
 8008624:	f000 fa0e 	bl	8008a44 <_Balloc>
 8008628:	4606      	mov	r6, r0
 800862a:	b928      	cbnz	r0, 8008638 <_dtoa_r+0x980>
 800862c:	4602      	mov	r2, r0
 800862e:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8008632:	4b83      	ldr	r3, [pc, #524]	@ (8008840 <_dtoa_r+0xb88>)
 8008634:	f7ff bb54 	b.w	8007ce0 <_dtoa_r+0x28>
 8008638:	692a      	ldr	r2, [r5, #16]
 800863a:	f105 010c 	add.w	r1, r5, #12
 800863e:	3202      	adds	r2, #2
 8008640:	0092      	lsls	r2, r2, #2
 8008642:	300c      	adds	r0, #12
 8008644:	f002 fae6 	bl	800ac14 <memcpy>
 8008648:	2201      	movs	r2, #1
 800864a:	4631      	mov	r1, r6
 800864c:	4658      	mov	r0, fp
 800864e:	f000 fc4f 	bl	8008ef0 <__lshift>
 8008652:	462f      	mov	r7, r5
 8008654:	4605      	mov	r5, r0
 8008656:	f10a 0301 	add.w	r3, sl, #1
 800865a:	9307      	str	r3, [sp, #28]
 800865c:	9b08      	ldr	r3, [sp, #32]
 800865e:	4453      	add	r3, sl
 8008660:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008662:	9b02      	ldr	r3, [sp, #8]
 8008664:	f003 0301 	and.w	r3, r3, #1
 8008668:	930a      	str	r3, [sp, #40]	@ 0x28
 800866a:	9b07      	ldr	r3, [sp, #28]
 800866c:	4621      	mov	r1, r4
 800866e:	3b01      	subs	r3, #1
 8008670:	4648      	mov	r0, r9
 8008672:	9302      	str	r3, [sp, #8]
 8008674:	f7ff fa96 	bl	8007ba4 <quorem>
 8008678:	4639      	mov	r1, r7
 800867a:	9008      	str	r0, [sp, #32]
 800867c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008680:	4648      	mov	r0, r9
 8008682:	f000 fca1 	bl	8008fc8 <__mcmp>
 8008686:	462a      	mov	r2, r5
 8008688:	9009      	str	r0, [sp, #36]	@ 0x24
 800868a:	4621      	mov	r1, r4
 800868c:	4658      	mov	r0, fp
 800868e:	f000 fcb7 	bl	8009000 <__mdiff>
 8008692:	68c2      	ldr	r2, [r0, #12]
 8008694:	4606      	mov	r6, r0
 8008696:	bb02      	cbnz	r2, 80086da <_dtoa_r+0xa22>
 8008698:	4601      	mov	r1, r0
 800869a:	4648      	mov	r0, r9
 800869c:	f000 fc94 	bl	8008fc8 <__mcmp>
 80086a0:	4602      	mov	r2, r0
 80086a2:	4631      	mov	r1, r6
 80086a4:	4658      	mov	r0, fp
 80086a6:	920c      	str	r2, [sp, #48]	@ 0x30
 80086a8:	f000 fa0c 	bl	8008ac4 <_Bfree>
 80086ac:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80086ae:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80086b0:	9e07      	ldr	r6, [sp, #28]
 80086b2:	ea43 0102 	orr.w	r1, r3, r2
 80086b6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80086b8:	4319      	orrs	r1, r3
 80086ba:	d110      	bne.n	80086de <_dtoa_r+0xa26>
 80086bc:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80086c0:	d029      	beq.n	8008716 <_dtoa_r+0xa5e>
 80086c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	dd02      	ble.n	80086ce <_dtoa_r+0xa16>
 80086c8:	9b08      	ldr	r3, [sp, #32]
 80086ca:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80086ce:	9b02      	ldr	r3, [sp, #8]
 80086d0:	f883 8000 	strb.w	r8, [r3]
 80086d4:	e63b      	b.n	800834e <_dtoa_r+0x696>
 80086d6:	4628      	mov	r0, r5
 80086d8:	e7bb      	b.n	8008652 <_dtoa_r+0x99a>
 80086da:	2201      	movs	r2, #1
 80086dc:	e7e1      	b.n	80086a2 <_dtoa_r+0x9ea>
 80086de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	db04      	blt.n	80086ee <_dtoa_r+0xa36>
 80086e4:	9920      	ldr	r1, [sp, #128]	@ 0x80
 80086e6:	430b      	orrs	r3, r1
 80086e8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80086ea:	430b      	orrs	r3, r1
 80086ec:	d120      	bne.n	8008730 <_dtoa_r+0xa78>
 80086ee:	2a00      	cmp	r2, #0
 80086f0:	dded      	ble.n	80086ce <_dtoa_r+0xa16>
 80086f2:	4649      	mov	r1, r9
 80086f4:	2201      	movs	r2, #1
 80086f6:	4658      	mov	r0, fp
 80086f8:	f000 fbfa 	bl	8008ef0 <__lshift>
 80086fc:	4621      	mov	r1, r4
 80086fe:	4681      	mov	r9, r0
 8008700:	f000 fc62 	bl	8008fc8 <__mcmp>
 8008704:	2800      	cmp	r0, #0
 8008706:	dc03      	bgt.n	8008710 <_dtoa_r+0xa58>
 8008708:	d1e1      	bne.n	80086ce <_dtoa_r+0xa16>
 800870a:	f018 0f01 	tst.w	r8, #1
 800870e:	d0de      	beq.n	80086ce <_dtoa_r+0xa16>
 8008710:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008714:	d1d8      	bne.n	80086c8 <_dtoa_r+0xa10>
 8008716:	2339      	movs	r3, #57	@ 0x39
 8008718:	9a02      	ldr	r2, [sp, #8]
 800871a:	7013      	strb	r3, [r2, #0]
 800871c:	4633      	mov	r3, r6
 800871e:	461e      	mov	r6, r3
 8008720:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008724:	3b01      	subs	r3, #1
 8008726:	2a39      	cmp	r2, #57	@ 0x39
 8008728:	d052      	beq.n	80087d0 <_dtoa_r+0xb18>
 800872a:	3201      	adds	r2, #1
 800872c:	701a      	strb	r2, [r3, #0]
 800872e:	e60e      	b.n	800834e <_dtoa_r+0x696>
 8008730:	2a00      	cmp	r2, #0
 8008732:	dd07      	ble.n	8008744 <_dtoa_r+0xa8c>
 8008734:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008738:	d0ed      	beq.n	8008716 <_dtoa_r+0xa5e>
 800873a:	9a02      	ldr	r2, [sp, #8]
 800873c:	f108 0301 	add.w	r3, r8, #1
 8008740:	7013      	strb	r3, [r2, #0]
 8008742:	e604      	b.n	800834e <_dtoa_r+0x696>
 8008744:	9b07      	ldr	r3, [sp, #28]
 8008746:	9a07      	ldr	r2, [sp, #28]
 8008748:	f803 8c01 	strb.w	r8, [r3, #-1]
 800874c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800874e:	4293      	cmp	r3, r2
 8008750:	d028      	beq.n	80087a4 <_dtoa_r+0xaec>
 8008752:	4649      	mov	r1, r9
 8008754:	2300      	movs	r3, #0
 8008756:	220a      	movs	r2, #10
 8008758:	4658      	mov	r0, fp
 800875a:	f000 f9d5 	bl	8008b08 <__multadd>
 800875e:	42af      	cmp	r7, r5
 8008760:	4681      	mov	r9, r0
 8008762:	f04f 0300 	mov.w	r3, #0
 8008766:	f04f 020a 	mov.w	r2, #10
 800876a:	4639      	mov	r1, r7
 800876c:	4658      	mov	r0, fp
 800876e:	d107      	bne.n	8008780 <_dtoa_r+0xac8>
 8008770:	f000 f9ca 	bl	8008b08 <__multadd>
 8008774:	4607      	mov	r7, r0
 8008776:	4605      	mov	r5, r0
 8008778:	9b07      	ldr	r3, [sp, #28]
 800877a:	3301      	adds	r3, #1
 800877c:	9307      	str	r3, [sp, #28]
 800877e:	e774      	b.n	800866a <_dtoa_r+0x9b2>
 8008780:	f000 f9c2 	bl	8008b08 <__multadd>
 8008784:	4629      	mov	r1, r5
 8008786:	4607      	mov	r7, r0
 8008788:	2300      	movs	r3, #0
 800878a:	220a      	movs	r2, #10
 800878c:	4658      	mov	r0, fp
 800878e:	f000 f9bb 	bl	8008b08 <__multadd>
 8008792:	4605      	mov	r5, r0
 8008794:	e7f0      	b.n	8008778 <_dtoa_r+0xac0>
 8008796:	9b08      	ldr	r3, [sp, #32]
 8008798:	2700      	movs	r7, #0
 800879a:	2b00      	cmp	r3, #0
 800879c:	bfcc      	ite	gt
 800879e:	461e      	movgt	r6, r3
 80087a0:	2601      	movle	r6, #1
 80087a2:	4456      	add	r6, sl
 80087a4:	4649      	mov	r1, r9
 80087a6:	2201      	movs	r2, #1
 80087a8:	4658      	mov	r0, fp
 80087aa:	f000 fba1 	bl	8008ef0 <__lshift>
 80087ae:	4621      	mov	r1, r4
 80087b0:	4681      	mov	r9, r0
 80087b2:	f000 fc09 	bl	8008fc8 <__mcmp>
 80087b6:	2800      	cmp	r0, #0
 80087b8:	dcb0      	bgt.n	800871c <_dtoa_r+0xa64>
 80087ba:	d102      	bne.n	80087c2 <_dtoa_r+0xb0a>
 80087bc:	f018 0f01 	tst.w	r8, #1
 80087c0:	d1ac      	bne.n	800871c <_dtoa_r+0xa64>
 80087c2:	4633      	mov	r3, r6
 80087c4:	461e      	mov	r6, r3
 80087c6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80087ca:	2a30      	cmp	r2, #48	@ 0x30
 80087cc:	d0fa      	beq.n	80087c4 <_dtoa_r+0xb0c>
 80087ce:	e5be      	b.n	800834e <_dtoa_r+0x696>
 80087d0:	459a      	cmp	sl, r3
 80087d2:	d1a4      	bne.n	800871e <_dtoa_r+0xa66>
 80087d4:	9b04      	ldr	r3, [sp, #16]
 80087d6:	3301      	adds	r3, #1
 80087d8:	9304      	str	r3, [sp, #16]
 80087da:	2331      	movs	r3, #49	@ 0x31
 80087dc:	f88a 3000 	strb.w	r3, [sl]
 80087e0:	e5b5      	b.n	800834e <_dtoa_r+0x696>
 80087e2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80087e4:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8008844 <_dtoa_r+0xb8c>
 80087e8:	b11b      	cbz	r3, 80087f2 <_dtoa_r+0xb3a>
 80087ea:	f10a 0308 	add.w	r3, sl, #8
 80087ee:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80087f0:	6013      	str	r3, [r2, #0]
 80087f2:	4650      	mov	r0, sl
 80087f4:	b017      	add	sp, #92	@ 0x5c
 80087f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087fa:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80087fc:	2b01      	cmp	r3, #1
 80087fe:	f77f ae3d 	ble.w	800847c <_dtoa_r+0x7c4>
 8008802:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008804:	930a      	str	r3, [sp, #40]	@ 0x28
 8008806:	2001      	movs	r0, #1
 8008808:	e65b      	b.n	80084c2 <_dtoa_r+0x80a>
 800880a:	9b08      	ldr	r3, [sp, #32]
 800880c:	2b00      	cmp	r3, #0
 800880e:	f77f aed6 	ble.w	80085be <_dtoa_r+0x906>
 8008812:	4656      	mov	r6, sl
 8008814:	4621      	mov	r1, r4
 8008816:	4648      	mov	r0, r9
 8008818:	f7ff f9c4 	bl	8007ba4 <quorem>
 800881c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008820:	9b08      	ldr	r3, [sp, #32]
 8008822:	f806 8b01 	strb.w	r8, [r6], #1
 8008826:	eba6 020a 	sub.w	r2, r6, sl
 800882a:	4293      	cmp	r3, r2
 800882c:	ddb3      	ble.n	8008796 <_dtoa_r+0xade>
 800882e:	4649      	mov	r1, r9
 8008830:	2300      	movs	r3, #0
 8008832:	220a      	movs	r2, #10
 8008834:	4658      	mov	r0, fp
 8008836:	f000 f967 	bl	8008b08 <__multadd>
 800883a:	4681      	mov	r9, r0
 800883c:	e7ea      	b.n	8008814 <_dtoa_r+0xb5c>
 800883e:	bf00      	nop
 8008840:	0800cb49 	.word	0x0800cb49
 8008844:	0800cacd 	.word	0x0800cacd

08008848 <_free_r>:
 8008848:	b538      	push	{r3, r4, r5, lr}
 800884a:	4605      	mov	r5, r0
 800884c:	2900      	cmp	r1, #0
 800884e:	d040      	beq.n	80088d2 <_free_r+0x8a>
 8008850:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008854:	1f0c      	subs	r4, r1, #4
 8008856:	2b00      	cmp	r3, #0
 8008858:	bfb8      	it	lt
 800885a:	18e4      	addlt	r4, r4, r3
 800885c:	f000 f8e6 	bl	8008a2c <__malloc_lock>
 8008860:	4a1c      	ldr	r2, [pc, #112]	@ (80088d4 <_free_r+0x8c>)
 8008862:	6813      	ldr	r3, [r2, #0]
 8008864:	b933      	cbnz	r3, 8008874 <_free_r+0x2c>
 8008866:	6063      	str	r3, [r4, #4]
 8008868:	6014      	str	r4, [r2, #0]
 800886a:	4628      	mov	r0, r5
 800886c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008870:	f000 b8e2 	b.w	8008a38 <__malloc_unlock>
 8008874:	42a3      	cmp	r3, r4
 8008876:	d908      	bls.n	800888a <_free_r+0x42>
 8008878:	6820      	ldr	r0, [r4, #0]
 800887a:	1821      	adds	r1, r4, r0
 800887c:	428b      	cmp	r3, r1
 800887e:	bf01      	itttt	eq
 8008880:	6819      	ldreq	r1, [r3, #0]
 8008882:	685b      	ldreq	r3, [r3, #4]
 8008884:	1809      	addeq	r1, r1, r0
 8008886:	6021      	streq	r1, [r4, #0]
 8008888:	e7ed      	b.n	8008866 <_free_r+0x1e>
 800888a:	461a      	mov	r2, r3
 800888c:	685b      	ldr	r3, [r3, #4]
 800888e:	b10b      	cbz	r3, 8008894 <_free_r+0x4c>
 8008890:	42a3      	cmp	r3, r4
 8008892:	d9fa      	bls.n	800888a <_free_r+0x42>
 8008894:	6811      	ldr	r1, [r2, #0]
 8008896:	1850      	adds	r0, r2, r1
 8008898:	42a0      	cmp	r0, r4
 800889a:	d10b      	bne.n	80088b4 <_free_r+0x6c>
 800889c:	6820      	ldr	r0, [r4, #0]
 800889e:	4401      	add	r1, r0
 80088a0:	1850      	adds	r0, r2, r1
 80088a2:	4283      	cmp	r3, r0
 80088a4:	6011      	str	r1, [r2, #0]
 80088a6:	d1e0      	bne.n	800886a <_free_r+0x22>
 80088a8:	6818      	ldr	r0, [r3, #0]
 80088aa:	685b      	ldr	r3, [r3, #4]
 80088ac:	4408      	add	r0, r1
 80088ae:	6010      	str	r0, [r2, #0]
 80088b0:	6053      	str	r3, [r2, #4]
 80088b2:	e7da      	b.n	800886a <_free_r+0x22>
 80088b4:	d902      	bls.n	80088bc <_free_r+0x74>
 80088b6:	230c      	movs	r3, #12
 80088b8:	602b      	str	r3, [r5, #0]
 80088ba:	e7d6      	b.n	800886a <_free_r+0x22>
 80088bc:	6820      	ldr	r0, [r4, #0]
 80088be:	1821      	adds	r1, r4, r0
 80088c0:	428b      	cmp	r3, r1
 80088c2:	bf01      	itttt	eq
 80088c4:	6819      	ldreq	r1, [r3, #0]
 80088c6:	685b      	ldreq	r3, [r3, #4]
 80088c8:	1809      	addeq	r1, r1, r0
 80088ca:	6021      	streq	r1, [r4, #0]
 80088cc:	6063      	str	r3, [r4, #4]
 80088ce:	6054      	str	r4, [r2, #4]
 80088d0:	e7cb      	b.n	800886a <_free_r+0x22>
 80088d2:	bd38      	pop	{r3, r4, r5, pc}
 80088d4:	20000aa0 	.word	0x20000aa0

080088d8 <malloc>:
 80088d8:	4b02      	ldr	r3, [pc, #8]	@ (80088e4 <malloc+0xc>)
 80088da:	4601      	mov	r1, r0
 80088dc:	6818      	ldr	r0, [r3, #0]
 80088de:	f000 b825 	b.w	800892c <_malloc_r>
 80088e2:	bf00      	nop
 80088e4:	2000001c 	.word	0x2000001c

080088e8 <sbrk_aligned>:
 80088e8:	b570      	push	{r4, r5, r6, lr}
 80088ea:	4e0f      	ldr	r6, [pc, #60]	@ (8008928 <sbrk_aligned+0x40>)
 80088ec:	460c      	mov	r4, r1
 80088ee:	6831      	ldr	r1, [r6, #0]
 80088f0:	4605      	mov	r5, r0
 80088f2:	b911      	cbnz	r1, 80088fa <sbrk_aligned+0x12>
 80088f4:	f002 f97e 	bl	800abf4 <_sbrk_r>
 80088f8:	6030      	str	r0, [r6, #0]
 80088fa:	4621      	mov	r1, r4
 80088fc:	4628      	mov	r0, r5
 80088fe:	f002 f979 	bl	800abf4 <_sbrk_r>
 8008902:	1c43      	adds	r3, r0, #1
 8008904:	d103      	bne.n	800890e <sbrk_aligned+0x26>
 8008906:	f04f 34ff 	mov.w	r4, #4294967295
 800890a:	4620      	mov	r0, r4
 800890c:	bd70      	pop	{r4, r5, r6, pc}
 800890e:	1cc4      	adds	r4, r0, #3
 8008910:	f024 0403 	bic.w	r4, r4, #3
 8008914:	42a0      	cmp	r0, r4
 8008916:	d0f8      	beq.n	800890a <sbrk_aligned+0x22>
 8008918:	1a21      	subs	r1, r4, r0
 800891a:	4628      	mov	r0, r5
 800891c:	f002 f96a 	bl	800abf4 <_sbrk_r>
 8008920:	3001      	adds	r0, #1
 8008922:	d1f2      	bne.n	800890a <sbrk_aligned+0x22>
 8008924:	e7ef      	b.n	8008906 <sbrk_aligned+0x1e>
 8008926:	bf00      	nop
 8008928:	20000a9c 	.word	0x20000a9c

0800892c <_malloc_r>:
 800892c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008930:	1ccd      	adds	r5, r1, #3
 8008932:	f025 0503 	bic.w	r5, r5, #3
 8008936:	3508      	adds	r5, #8
 8008938:	2d0c      	cmp	r5, #12
 800893a:	bf38      	it	cc
 800893c:	250c      	movcc	r5, #12
 800893e:	2d00      	cmp	r5, #0
 8008940:	4606      	mov	r6, r0
 8008942:	db01      	blt.n	8008948 <_malloc_r+0x1c>
 8008944:	42a9      	cmp	r1, r5
 8008946:	d904      	bls.n	8008952 <_malloc_r+0x26>
 8008948:	230c      	movs	r3, #12
 800894a:	6033      	str	r3, [r6, #0]
 800894c:	2000      	movs	r0, #0
 800894e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008952:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008a28 <_malloc_r+0xfc>
 8008956:	f000 f869 	bl	8008a2c <__malloc_lock>
 800895a:	f8d8 3000 	ldr.w	r3, [r8]
 800895e:	461c      	mov	r4, r3
 8008960:	bb44      	cbnz	r4, 80089b4 <_malloc_r+0x88>
 8008962:	4629      	mov	r1, r5
 8008964:	4630      	mov	r0, r6
 8008966:	f7ff ffbf 	bl	80088e8 <sbrk_aligned>
 800896a:	1c43      	adds	r3, r0, #1
 800896c:	4604      	mov	r4, r0
 800896e:	d158      	bne.n	8008a22 <_malloc_r+0xf6>
 8008970:	f8d8 4000 	ldr.w	r4, [r8]
 8008974:	4627      	mov	r7, r4
 8008976:	2f00      	cmp	r7, #0
 8008978:	d143      	bne.n	8008a02 <_malloc_r+0xd6>
 800897a:	2c00      	cmp	r4, #0
 800897c:	d04b      	beq.n	8008a16 <_malloc_r+0xea>
 800897e:	6823      	ldr	r3, [r4, #0]
 8008980:	4639      	mov	r1, r7
 8008982:	4630      	mov	r0, r6
 8008984:	eb04 0903 	add.w	r9, r4, r3
 8008988:	f002 f934 	bl	800abf4 <_sbrk_r>
 800898c:	4581      	cmp	r9, r0
 800898e:	d142      	bne.n	8008a16 <_malloc_r+0xea>
 8008990:	6821      	ldr	r1, [r4, #0]
 8008992:	4630      	mov	r0, r6
 8008994:	1a6d      	subs	r5, r5, r1
 8008996:	4629      	mov	r1, r5
 8008998:	f7ff ffa6 	bl	80088e8 <sbrk_aligned>
 800899c:	3001      	adds	r0, #1
 800899e:	d03a      	beq.n	8008a16 <_malloc_r+0xea>
 80089a0:	6823      	ldr	r3, [r4, #0]
 80089a2:	442b      	add	r3, r5
 80089a4:	6023      	str	r3, [r4, #0]
 80089a6:	f8d8 3000 	ldr.w	r3, [r8]
 80089aa:	685a      	ldr	r2, [r3, #4]
 80089ac:	bb62      	cbnz	r2, 8008a08 <_malloc_r+0xdc>
 80089ae:	f8c8 7000 	str.w	r7, [r8]
 80089b2:	e00f      	b.n	80089d4 <_malloc_r+0xa8>
 80089b4:	6822      	ldr	r2, [r4, #0]
 80089b6:	1b52      	subs	r2, r2, r5
 80089b8:	d420      	bmi.n	80089fc <_malloc_r+0xd0>
 80089ba:	2a0b      	cmp	r2, #11
 80089bc:	d917      	bls.n	80089ee <_malloc_r+0xc2>
 80089be:	1961      	adds	r1, r4, r5
 80089c0:	42a3      	cmp	r3, r4
 80089c2:	6025      	str	r5, [r4, #0]
 80089c4:	bf18      	it	ne
 80089c6:	6059      	strne	r1, [r3, #4]
 80089c8:	6863      	ldr	r3, [r4, #4]
 80089ca:	bf08      	it	eq
 80089cc:	f8c8 1000 	streq.w	r1, [r8]
 80089d0:	5162      	str	r2, [r4, r5]
 80089d2:	604b      	str	r3, [r1, #4]
 80089d4:	4630      	mov	r0, r6
 80089d6:	f000 f82f 	bl	8008a38 <__malloc_unlock>
 80089da:	f104 000b 	add.w	r0, r4, #11
 80089de:	1d23      	adds	r3, r4, #4
 80089e0:	f020 0007 	bic.w	r0, r0, #7
 80089e4:	1ac2      	subs	r2, r0, r3
 80089e6:	bf1c      	itt	ne
 80089e8:	1a1b      	subne	r3, r3, r0
 80089ea:	50a3      	strne	r3, [r4, r2]
 80089ec:	e7af      	b.n	800894e <_malloc_r+0x22>
 80089ee:	6862      	ldr	r2, [r4, #4]
 80089f0:	42a3      	cmp	r3, r4
 80089f2:	bf0c      	ite	eq
 80089f4:	f8c8 2000 	streq.w	r2, [r8]
 80089f8:	605a      	strne	r2, [r3, #4]
 80089fa:	e7eb      	b.n	80089d4 <_malloc_r+0xa8>
 80089fc:	4623      	mov	r3, r4
 80089fe:	6864      	ldr	r4, [r4, #4]
 8008a00:	e7ae      	b.n	8008960 <_malloc_r+0x34>
 8008a02:	463c      	mov	r4, r7
 8008a04:	687f      	ldr	r7, [r7, #4]
 8008a06:	e7b6      	b.n	8008976 <_malloc_r+0x4a>
 8008a08:	461a      	mov	r2, r3
 8008a0a:	685b      	ldr	r3, [r3, #4]
 8008a0c:	42a3      	cmp	r3, r4
 8008a0e:	d1fb      	bne.n	8008a08 <_malloc_r+0xdc>
 8008a10:	2300      	movs	r3, #0
 8008a12:	6053      	str	r3, [r2, #4]
 8008a14:	e7de      	b.n	80089d4 <_malloc_r+0xa8>
 8008a16:	230c      	movs	r3, #12
 8008a18:	4630      	mov	r0, r6
 8008a1a:	6033      	str	r3, [r6, #0]
 8008a1c:	f000 f80c 	bl	8008a38 <__malloc_unlock>
 8008a20:	e794      	b.n	800894c <_malloc_r+0x20>
 8008a22:	6005      	str	r5, [r0, #0]
 8008a24:	e7d6      	b.n	80089d4 <_malloc_r+0xa8>
 8008a26:	bf00      	nop
 8008a28:	20000aa0 	.word	0x20000aa0

08008a2c <__malloc_lock>:
 8008a2c:	4801      	ldr	r0, [pc, #4]	@ (8008a34 <__malloc_lock+0x8>)
 8008a2e:	f7ff b8a4 	b.w	8007b7a <__retarget_lock_acquire_recursive>
 8008a32:	bf00      	nop
 8008a34:	20000a98 	.word	0x20000a98

08008a38 <__malloc_unlock>:
 8008a38:	4801      	ldr	r0, [pc, #4]	@ (8008a40 <__malloc_unlock+0x8>)
 8008a3a:	f7ff b89f 	b.w	8007b7c <__retarget_lock_release_recursive>
 8008a3e:	bf00      	nop
 8008a40:	20000a98 	.word	0x20000a98

08008a44 <_Balloc>:
 8008a44:	b570      	push	{r4, r5, r6, lr}
 8008a46:	69c6      	ldr	r6, [r0, #28]
 8008a48:	4604      	mov	r4, r0
 8008a4a:	460d      	mov	r5, r1
 8008a4c:	b976      	cbnz	r6, 8008a6c <_Balloc+0x28>
 8008a4e:	2010      	movs	r0, #16
 8008a50:	f7ff ff42 	bl	80088d8 <malloc>
 8008a54:	4602      	mov	r2, r0
 8008a56:	61e0      	str	r0, [r4, #28]
 8008a58:	b920      	cbnz	r0, 8008a64 <_Balloc+0x20>
 8008a5a:	216b      	movs	r1, #107	@ 0x6b
 8008a5c:	4b17      	ldr	r3, [pc, #92]	@ (8008abc <_Balloc+0x78>)
 8008a5e:	4818      	ldr	r0, [pc, #96]	@ (8008ac0 <_Balloc+0x7c>)
 8008a60:	f002 f8ec 	bl	800ac3c <__assert_func>
 8008a64:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008a68:	6006      	str	r6, [r0, #0]
 8008a6a:	60c6      	str	r6, [r0, #12]
 8008a6c:	69e6      	ldr	r6, [r4, #28]
 8008a6e:	68f3      	ldr	r3, [r6, #12]
 8008a70:	b183      	cbz	r3, 8008a94 <_Balloc+0x50>
 8008a72:	69e3      	ldr	r3, [r4, #28]
 8008a74:	68db      	ldr	r3, [r3, #12]
 8008a76:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008a7a:	b9b8      	cbnz	r0, 8008aac <_Balloc+0x68>
 8008a7c:	2101      	movs	r1, #1
 8008a7e:	fa01 f605 	lsl.w	r6, r1, r5
 8008a82:	1d72      	adds	r2, r6, #5
 8008a84:	4620      	mov	r0, r4
 8008a86:	0092      	lsls	r2, r2, #2
 8008a88:	f002 f8f6 	bl	800ac78 <_calloc_r>
 8008a8c:	b160      	cbz	r0, 8008aa8 <_Balloc+0x64>
 8008a8e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008a92:	e00e      	b.n	8008ab2 <_Balloc+0x6e>
 8008a94:	2221      	movs	r2, #33	@ 0x21
 8008a96:	2104      	movs	r1, #4
 8008a98:	4620      	mov	r0, r4
 8008a9a:	f002 f8ed 	bl	800ac78 <_calloc_r>
 8008a9e:	69e3      	ldr	r3, [r4, #28]
 8008aa0:	60f0      	str	r0, [r6, #12]
 8008aa2:	68db      	ldr	r3, [r3, #12]
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d1e4      	bne.n	8008a72 <_Balloc+0x2e>
 8008aa8:	2000      	movs	r0, #0
 8008aaa:	bd70      	pop	{r4, r5, r6, pc}
 8008aac:	6802      	ldr	r2, [r0, #0]
 8008aae:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008ab2:	2300      	movs	r3, #0
 8008ab4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008ab8:	e7f7      	b.n	8008aaa <_Balloc+0x66>
 8008aba:	bf00      	nop
 8008abc:	0800cada 	.word	0x0800cada
 8008ac0:	0800cb5a 	.word	0x0800cb5a

08008ac4 <_Bfree>:
 8008ac4:	b570      	push	{r4, r5, r6, lr}
 8008ac6:	69c6      	ldr	r6, [r0, #28]
 8008ac8:	4605      	mov	r5, r0
 8008aca:	460c      	mov	r4, r1
 8008acc:	b976      	cbnz	r6, 8008aec <_Bfree+0x28>
 8008ace:	2010      	movs	r0, #16
 8008ad0:	f7ff ff02 	bl	80088d8 <malloc>
 8008ad4:	4602      	mov	r2, r0
 8008ad6:	61e8      	str	r0, [r5, #28]
 8008ad8:	b920      	cbnz	r0, 8008ae4 <_Bfree+0x20>
 8008ada:	218f      	movs	r1, #143	@ 0x8f
 8008adc:	4b08      	ldr	r3, [pc, #32]	@ (8008b00 <_Bfree+0x3c>)
 8008ade:	4809      	ldr	r0, [pc, #36]	@ (8008b04 <_Bfree+0x40>)
 8008ae0:	f002 f8ac 	bl	800ac3c <__assert_func>
 8008ae4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008ae8:	6006      	str	r6, [r0, #0]
 8008aea:	60c6      	str	r6, [r0, #12]
 8008aec:	b13c      	cbz	r4, 8008afe <_Bfree+0x3a>
 8008aee:	69eb      	ldr	r3, [r5, #28]
 8008af0:	6862      	ldr	r2, [r4, #4]
 8008af2:	68db      	ldr	r3, [r3, #12]
 8008af4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008af8:	6021      	str	r1, [r4, #0]
 8008afa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008afe:	bd70      	pop	{r4, r5, r6, pc}
 8008b00:	0800cada 	.word	0x0800cada
 8008b04:	0800cb5a 	.word	0x0800cb5a

08008b08 <__multadd>:
 8008b08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b0c:	4607      	mov	r7, r0
 8008b0e:	460c      	mov	r4, r1
 8008b10:	461e      	mov	r6, r3
 8008b12:	2000      	movs	r0, #0
 8008b14:	690d      	ldr	r5, [r1, #16]
 8008b16:	f101 0c14 	add.w	ip, r1, #20
 8008b1a:	f8dc 3000 	ldr.w	r3, [ip]
 8008b1e:	3001      	adds	r0, #1
 8008b20:	b299      	uxth	r1, r3
 8008b22:	fb02 6101 	mla	r1, r2, r1, r6
 8008b26:	0c1e      	lsrs	r6, r3, #16
 8008b28:	0c0b      	lsrs	r3, r1, #16
 8008b2a:	fb02 3306 	mla	r3, r2, r6, r3
 8008b2e:	b289      	uxth	r1, r1
 8008b30:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008b34:	4285      	cmp	r5, r0
 8008b36:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008b3a:	f84c 1b04 	str.w	r1, [ip], #4
 8008b3e:	dcec      	bgt.n	8008b1a <__multadd+0x12>
 8008b40:	b30e      	cbz	r6, 8008b86 <__multadd+0x7e>
 8008b42:	68a3      	ldr	r3, [r4, #8]
 8008b44:	42ab      	cmp	r3, r5
 8008b46:	dc19      	bgt.n	8008b7c <__multadd+0x74>
 8008b48:	6861      	ldr	r1, [r4, #4]
 8008b4a:	4638      	mov	r0, r7
 8008b4c:	3101      	adds	r1, #1
 8008b4e:	f7ff ff79 	bl	8008a44 <_Balloc>
 8008b52:	4680      	mov	r8, r0
 8008b54:	b928      	cbnz	r0, 8008b62 <__multadd+0x5a>
 8008b56:	4602      	mov	r2, r0
 8008b58:	21ba      	movs	r1, #186	@ 0xba
 8008b5a:	4b0c      	ldr	r3, [pc, #48]	@ (8008b8c <__multadd+0x84>)
 8008b5c:	480c      	ldr	r0, [pc, #48]	@ (8008b90 <__multadd+0x88>)
 8008b5e:	f002 f86d 	bl	800ac3c <__assert_func>
 8008b62:	6922      	ldr	r2, [r4, #16]
 8008b64:	f104 010c 	add.w	r1, r4, #12
 8008b68:	3202      	adds	r2, #2
 8008b6a:	0092      	lsls	r2, r2, #2
 8008b6c:	300c      	adds	r0, #12
 8008b6e:	f002 f851 	bl	800ac14 <memcpy>
 8008b72:	4621      	mov	r1, r4
 8008b74:	4638      	mov	r0, r7
 8008b76:	f7ff ffa5 	bl	8008ac4 <_Bfree>
 8008b7a:	4644      	mov	r4, r8
 8008b7c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008b80:	3501      	adds	r5, #1
 8008b82:	615e      	str	r6, [r3, #20]
 8008b84:	6125      	str	r5, [r4, #16]
 8008b86:	4620      	mov	r0, r4
 8008b88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b8c:	0800cb49 	.word	0x0800cb49
 8008b90:	0800cb5a 	.word	0x0800cb5a

08008b94 <__s2b>:
 8008b94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008b98:	4615      	mov	r5, r2
 8008b9a:	2209      	movs	r2, #9
 8008b9c:	461f      	mov	r7, r3
 8008b9e:	3308      	adds	r3, #8
 8008ba0:	460c      	mov	r4, r1
 8008ba2:	fb93 f3f2 	sdiv	r3, r3, r2
 8008ba6:	4606      	mov	r6, r0
 8008ba8:	2201      	movs	r2, #1
 8008baa:	2100      	movs	r1, #0
 8008bac:	429a      	cmp	r2, r3
 8008bae:	db09      	blt.n	8008bc4 <__s2b+0x30>
 8008bb0:	4630      	mov	r0, r6
 8008bb2:	f7ff ff47 	bl	8008a44 <_Balloc>
 8008bb6:	b940      	cbnz	r0, 8008bca <__s2b+0x36>
 8008bb8:	4602      	mov	r2, r0
 8008bba:	21d3      	movs	r1, #211	@ 0xd3
 8008bbc:	4b18      	ldr	r3, [pc, #96]	@ (8008c20 <__s2b+0x8c>)
 8008bbe:	4819      	ldr	r0, [pc, #100]	@ (8008c24 <__s2b+0x90>)
 8008bc0:	f002 f83c 	bl	800ac3c <__assert_func>
 8008bc4:	0052      	lsls	r2, r2, #1
 8008bc6:	3101      	adds	r1, #1
 8008bc8:	e7f0      	b.n	8008bac <__s2b+0x18>
 8008bca:	9b08      	ldr	r3, [sp, #32]
 8008bcc:	2d09      	cmp	r5, #9
 8008bce:	6143      	str	r3, [r0, #20]
 8008bd0:	f04f 0301 	mov.w	r3, #1
 8008bd4:	6103      	str	r3, [r0, #16]
 8008bd6:	dd16      	ble.n	8008c06 <__s2b+0x72>
 8008bd8:	f104 0909 	add.w	r9, r4, #9
 8008bdc:	46c8      	mov	r8, r9
 8008bde:	442c      	add	r4, r5
 8008be0:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008be4:	4601      	mov	r1, r0
 8008be6:	220a      	movs	r2, #10
 8008be8:	4630      	mov	r0, r6
 8008bea:	3b30      	subs	r3, #48	@ 0x30
 8008bec:	f7ff ff8c 	bl	8008b08 <__multadd>
 8008bf0:	45a0      	cmp	r8, r4
 8008bf2:	d1f5      	bne.n	8008be0 <__s2b+0x4c>
 8008bf4:	f1a5 0408 	sub.w	r4, r5, #8
 8008bf8:	444c      	add	r4, r9
 8008bfa:	1b2d      	subs	r5, r5, r4
 8008bfc:	1963      	adds	r3, r4, r5
 8008bfe:	42bb      	cmp	r3, r7
 8008c00:	db04      	blt.n	8008c0c <__s2b+0x78>
 8008c02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008c06:	2509      	movs	r5, #9
 8008c08:	340a      	adds	r4, #10
 8008c0a:	e7f6      	b.n	8008bfa <__s2b+0x66>
 8008c0c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008c10:	4601      	mov	r1, r0
 8008c12:	220a      	movs	r2, #10
 8008c14:	4630      	mov	r0, r6
 8008c16:	3b30      	subs	r3, #48	@ 0x30
 8008c18:	f7ff ff76 	bl	8008b08 <__multadd>
 8008c1c:	e7ee      	b.n	8008bfc <__s2b+0x68>
 8008c1e:	bf00      	nop
 8008c20:	0800cb49 	.word	0x0800cb49
 8008c24:	0800cb5a 	.word	0x0800cb5a

08008c28 <__hi0bits>:
 8008c28:	4603      	mov	r3, r0
 8008c2a:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008c2e:	bf3a      	itte	cc
 8008c30:	0403      	lslcc	r3, r0, #16
 8008c32:	2010      	movcc	r0, #16
 8008c34:	2000      	movcs	r0, #0
 8008c36:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008c3a:	bf3c      	itt	cc
 8008c3c:	021b      	lslcc	r3, r3, #8
 8008c3e:	3008      	addcc	r0, #8
 8008c40:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008c44:	bf3c      	itt	cc
 8008c46:	011b      	lslcc	r3, r3, #4
 8008c48:	3004      	addcc	r0, #4
 8008c4a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008c4e:	bf3c      	itt	cc
 8008c50:	009b      	lslcc	r3, r3, #2
 8008c52:	3002      	addcc	r0, #2
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	db05      	blt.n	8008c64 <__hi0bits+0x3c>
 8008c58:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008c5c:	f100 0001 	add.w	r0, r0, #1
 8008c60:	bf08      	it	eq
 8008c62:	2020      	moveq	r0, #32
 8008c64:	4770      	bx	lr

08008c66 <__lo0bits>:
 8008c66:	6803      	ldr	r3, [r0, #0]
 8008c68:	4602      	mov	r2, r0
 8008c6a:	f013 0007 	ands.w	r0, r3, #7
 8008c6e:	d00b      	beq.n	8008c88 <__lo0bits+0x22>
 8008c70:	07d9      	lsls	r1, r3, #31
 8008c72:	d421      	bmi.n	8008cb8 <__lo0bits+0x52>
 8008c74:	0798      	lsls	r0, r3, #30
 8008c76:	bf49      	itett	mi
 8008c78:	085b      	lsrmi	r3, r3, #1
 8008c7a:	089b      	lsrpl	r3, r3, #2
 8008c7c:	2001      	movmi	r0, #1
 8008c7e:	6013      	strmi	r3, [r2, #0]
 8008c80:	bf5c      	itt	pl
 8008c82:	2002      	movpl	r0, #2
 8008c84:	6013      	strpl	r3, [r2, #0]
 8008c86:	4770      	bx	lr
 8008c88:	b299      	uxth	r1, r3
 8008c8a:	b909      	cbnz	r1, 8008c90 <__lo0bits+0x2a>
 8008c8c:	2010      	movs	r0, #16
 8008c8e:	0c1b      	lsrs	r3, r3, #16
 8008c90:	b2d9      	uxtb	r1, r3
 8008c92:	b909      	cbnz	r1, 8008c98 <__lo0bits+0x32>
 8008c94:	3008      	adds	r0, #8
 8008c96:	0a1b      	lsrs	r3, r3, #8
 8008c98:	0719      	lsls	r1, r3, #28
 8008c9a:	bf04      	itt	eq
 8008c9c:	091b      	lsreq	r3, r3, #4
 8008c9e:	3004      	addeq	r0, #4
 8008ca0:	0799      	lsls	r1, r3, #30
 8008ca2:	bf04      	itt	eq
 8008ca4:	089b      	lsreq	r3, r3, #2
 8008ca6:	3002      	addeq	r0, #2
 8008ca8:	07d9      	lsls	r1, r3, #31
 8008caa:	d403      	bmi.n	8008cb4 <__lo0bits+0x4e>
 8008cac:	085b      	lsrs	r3, r3, #1
 8008cae:	f100 0001 	add.w	r0, r0, #1
 8008cb2:	d003      	beq.n	8008cbc <__lo0bits+0x56>
 8008cb4:	6013      	str	r3, [r2, #0]
 8008cb6:	4770      	bx	lr
 8008cb8:	2000      	movs	r0, #0
 8008cba:	4770      	bx	lr
 8008cbc:	2020      	movs	r0, #32
 8008cbe:	4770      	bx	lr

08008cc0 <__i2b>:
 8008cc0:	b510      	push	{r4, lr}
 8008cc2:	460c      	mov	r4, r1
 8008cc4:	2101      	movs	r1, #1
 8008cc6:	f7ff febd 	bl	8008a44 <_Balloc>
 8008cca:	4602      	mov	r2, r0
 8008ccc:	b928      	cbnz	r0, 8008cda <__i2b+0x1a>
 8008cce:	f240 1145 	movw	r1, #325	@ 0x145
 8008cd2:	4b04      	ldr	r3, [pc, #16]	@ (8008ce4 <__i2b+0x24>)
 8008cd4:	4804      	ldr	r0, [pc, #16]	@ (8008ce8 <__i2b+0x28>)
 8008cd6:	f001 ffb1 	bl	800ac3c <__assert_func>
 8008cda:	2301      	movs	r3, #1
 8008cdc:	6144      	str	r4, [r0, #20]
 8008cde:	6103      	str	r3, [r0, #16]
 8008ce0:	bd10      	pop	{r4, pc}
 8008ce2:	bf00      	nop
 8008ce4:	0800cb49 	.word	0x0800cb49
 8008ce8:	0800cb5a 	.word	0x0800cb5a

08008cec <__multiply>:
 8008cec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cf0:	4614      	mov	r4, r2
 8008cf2:	690a      	ldr	r2, [r1, #16]
 8008cf4:	6923      	ldr	r3, [r4, #16]
 8008cf6:	460f      	mov	r7, r1
 8008cf8:	429a      	cmp	r2, r3
 8008cfa:	bfa2      	ittt	ge
 8008cfc:	4623      	movge	r3, r4
 8008cfe:	460c      	movge	r4, r1
 8008d00:	461f      	movge	r7, r3
 8008d02:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8008d06:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8008d0a:	68a3      	ldr	r3, [r4, #8]
 8008d0c:	6861      	ldr	r1, [r4, #4]
 8008d0e:	eb0a 0609 	add.w	r6, sl, r9
 8008d12:	42b3      	cmp	r3, r6
 8008d14:	b085      	sub	sp, #20
 8008d16:	bfb8      	it	lt
 8008d18:	3101      	addlt	r1, #1
 8008d1a:	f7ff fe93 	bl	8008a44 <_Balloc>
 8008d1e:	b930      	cbnz	r0, 8008d2e <__multiply+0x42>
 8008d20:	4602      	mov	r2, r0
 8008d22:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008d26:	4b43      	ldr	r3, [pc, #268]	@ (8008e34 <__multiply+0x148>)
 8008d28:	4843      	ldr	r0, [pc, #268]	@ (8008e38 <__multiply+0x14c>)
 8008d2a:	f001 ff87 	bl	800ac3c <__assert_func>
 8008d2e:	f100 0514 	add.w	r5, r0, #20
 8008d32:	462b      	mov	r3, r5
 8008d34:	2200      	movs	r2, #0
 8008d36:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008d3a:	4543      	cmp	r3, r8
 8008d3c:	d321      	bcc.n	8008d82 <__multiply+0x96>
 8008d3e:	f107 0114 	add.w	r1, r7, #20
 8008d42:	f104 0214 	add.w	r2, r4, #20
 8008d46:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8008d4a:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8008d4e:	9302      	str	r3, [sp, #8]
 8008d50:	1b13      	subs	r3, r2, r4
 8008d52:	3b15      	subs	r3, #21
 8008d54:	f023 0303 	bic.w	r3, r3, #3
 8008d58:	3304      	adds	r3, #4
 8008d5a:	f104 0715 	add.w	r7, r4, #21
 8008d5e:	42ba      	cmp	r2, r7
 8008d60:	bf38      	it	cc
 8008d62:	2304      	movcc	r3, #4
 8008d64:	9301      	str	r3, [sp, #4]
 8008d66:	9b02      	ldr	r3, [sp, #8]
 8008d68:	9103      	str	r1, [sp, #12]
 8008d6a:	428b      	cmp	r3, r1
 8008d6c:	d80c      	bhi.n	8008d88 <__multiply+0x9c>
 8008d6e:	2e00      	cmp	r6, #0
 8008d70:	dd03      	ble.n	8008d7a <__multiply+0x8e>
 8008d72:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d05a      	beq.n	8008e30 <__multiply+0x144>
 8008d7a:	6106      	str	r6, [r0, #16]
 8008d7c:	b005      	add	sp, #20
 8008d7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d82:	f843 2b04 	str.w	r2, [r3], #4
 8008d86:	e7d8      	b.n	8008d3a <__multiply+0x4e>
 8008d88:	f8b1 a000 	ldrh.w	sl, [r1]
 8008d8c:	f1ba 0f00 	cmp.w	sl, #0
 8008d90:	d023      	beq.n	8008dda <__multiply+0xee>
 8008d92:	46a9      	mov	r9, r5
 8008d94:	f04f 0c00 	mov.w	ip, #0
 8008d98:	f104 0e14 	add.w	lr, r4, #20
 8008d9c:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008da0:	f8d9 3000 	ldr.w	r3, [r9]
 8008da4:	fa1f fb87 	uxth.w	fp, r7
 8008da8:	b29b      	uxth	r3, r3
 8008daa:	fb0a 330b 	mla	r3, sl, fp, r3
 8008dae:	4463      	add	r3, ip
 8008db0:	f8d9 c000 	ldr.w	ip, [r9]
 8008db4:	0c3f      	lsrs	r7, r7, #16
 8008db6:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8008dba:	fb0a c707 	mla	r7, sl, r7, ip
 8008dbe:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8008dc2:	b29b      	uxth	r3, r3
 8008dc4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008dc8:	4572      	cmp	r2, lr
 8008dca:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008dce:	f849 3b04 	str.w	r3, [r9], #4
 8008dd2:	d8e3      	bhi.n	8008d9c <__multiply+0xb0>
 8008dd4:	9b01      	ldr	r3, [sp, #4]
 8008dd6:	f845 c003 	str.w	ip, [r5, r3]
 8008dda:	9b03      	ldr	r3, [sp, #12]
 8008ddc:	3104      	adds	r1, #4
 8008dde:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008de2:	f1b9 0f00 	cmp.w	r9, #0
 8008de6:	d021      	beq.n	8008e2c <__multiply+0x140>
 8008de8:	46ae      	mov	lr, r5
 8008dea:	f04f 0a00 	mov.w	sl, #0
 8008dee:	682b      	ldr	r3, [r5, #0]
 8008df0:	f104 0c14 	add.w	ip, r4, #20
 8008df4:	f8bc b000 	ldrh.w	fp, [ip]
 8008df8:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8008dfc:	b29b      	uxth	r3, r3
 8008dfe:	fb09 770b 	mla	r7, r9, fp, r7
 8008e02:	4457      	add	r7, sl
 8008e04:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008e08:	f84e 3b04 	str.w	r3, [lr], #4
 8008e0c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008e10:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008e14:	f8be 3000 	ldrh.w	r3, [lr]
 8008e18:	4562      	cmp	r2, ip
 8008e1a:	fb09 330a 	mla	r3, r9, sl, r3
 8008e1e:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8008e22:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008e26:	d8e5      	bhi.n	8008df4 <__multiply+0x108>
 8008e28:	9f01      	ldr	r7, [sp, #4]
 8008e2a:	51eb      	str	r3, [r5, r7]
 8008e2c:	3504      	adds	r5, #4
 8008e2e:	e79a      	b.n	8008d66 <__multiply+0x7a>
 8008e30:	3e01      	subs	r6, #1
 8008e32:	e79c      	b.n	8008d6e <__multiply+0x82>
 8008e34:	0800cb49 	.word	0x0800cb49
 8008e38:	0800cb5a 	.word	0x0800cb5a

08008e3c <__pow5mult>:
 8008e3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008e40:	4615      	mov	r5, r2
 8008e42:	f012 0203 	ands.w	r2, r2, #3
 8008e46:	4607      	mov	r7, r0
 8008e48:	460e      	mov	r6, r1
 8008e4a:	d007      	beq.n	8008e5c <__pow5mult+0x20>
 8008e4c:	4c25      	ldr	r4, [pc, #148]	@ (8008ee4 <__pow5mult+0xa8>)
 8008e4e:	3a01      	subs	r2, #1
 8008e50:	2300      	movs	r3, #0
 8008e52:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008e56:	f7ff fe57 	bl	8008b08 <__multadd>
 8008e5a:	4606      	mov	r6, r0
 8008e5c:	10ad      	asrs	r5, r5, #2
 8008e5e:	d03d      	beq.n	8008edc <__pow5mult+0xa0>
 8008e60:	69fc      	ldr	r4, [r7, #28]
 8008e62:	b97c      	cbnz	r4, 8008e84 <__pow5mult+0x48>
 8008e64:	2010      	movs	r0, #16
 8008e66:	f7ff fd37 	bl	80088d8 <malloc>
 8008e6a:	4602      	mov	r2, r0
 8008e6c:	61f8      	str	r0, [r7, #28]
 8008e6e:	b928      	cbnz	r0, 8008e7c <__pow5mult+0x40>
 8008e70:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008e74:	4b1c      	ldr	r3, [pc, #112]	@ (8008ee8 <__pow5mult+0xac>)
 8008e76:	481d      	ldr	r0, [pc, #116]	@ (8008eec <__pow5mult+0xb0>)
 8008e78:	f001 fee0 	bl	800ac3c <__assert_func>
 8008e7c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008e80:	6004      	str	r4, [r0, #0]
 8008e82:	60c4      	str	r4, [r0, #12]
 8008e84:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008e88:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008e8c:	b94c      	cbnz	r4, 8008ea2 <__pow5mult+0x66>
 8008e8e:	f240 2171 	movw	r1, #625	@ 0x271
 8008e92:	4638      	mov	r0, r7
 8008e94:	f7ff ff14 	bl	8008cc0 <__i2b>
 8008e98:	2300      	movs	r3, #0
 8008e9a:	4604      	mov	r4, r0
 8008e9c:	f8c8 0008 	str.w	r0, [r8, #8]
 8008ea0:	6003      	str	r3, [r0, #0]
 8008ea2:	f04f 0900 	mov.w	r9, #0
 8008ea6:	07eb      	lsls	r3, r5, #31
 8008ea8:	d50a      	bpl.n	8008ec0 <__pow5mult+0x84>
 8008eaa:	4631      	mov	r1, r6
 8008eac:	4622      	mov	r2, r4
 8008eae:	4638      	mov	r0, r7
 8008eb0:	f7ff ff1c 	bl	8008cec <__multiply>
 8008eb4:	4680      	mov	r8, r0
 8008eb6:	4631      	mov	r1, r6
 8008eb8:	4638      	mov	r0, r7
 8008eba:	f7ff fe03 	bl	8008ac4 <_Bfree>
 8008ebe:	4646      	mov	r6, r8
 8008ec0:	106d      	asrs	r5, r5, #1
 8008ec2:	d00b      	beq.n	8008edc <__pow5mult+0xa0>
 8008ec4:	6820      	ldr	r0, [r4, #0]
 8008ec6:	b938      	cbnz	r0, 8008ed8 <__pow5mult+0x9c>
 8008ec8:	4622      	mov	r2, r4
 8008eca:	4621      	mov	r1, r4
 8008ecc:	4638      	mov	r0, r7
 8008ece:	f7ff ff0d 	bl	8008cec <__multiply>
 8008ed2:	6020      	str	r0, [r4, #0]
 8008ed4:	f8c0 9000 	str.w	r9, [r0]
 8008ed8:	4604      	mov	r4, r0
 8008eda:	e7e4      	b.n	8008ea6 <__pow5mult+0x6a>
 8008edc:	4630      	mov	r0, r6
 8008ede:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008ee2:	bf00      	nop
 8008ee4:	0800cbb4 	.word	0x0800cbb4
 8008ee8:	0800cada 	.word	0x0800cada
 8008eec:	0800cb5a 	.word	0x0800cb5a

08008ef0 <__lshift>:
 8008ef0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ef4:	460c      	mov	r4, r1
 8008ef6:	4607      	mov	r7, r0
 8008ef8:	4691      	mov	r9, r2
 8008efa:	6923      	ldr	r3, [r4, #16]
 8008efc:	6849      	ldr	r1, [r1, #4]
 8008efe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008f02:	68a3      	ldr	r3, [r4, #8]
 8008f04:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008f08:	f108 0601 	add.w	r6, r8, #1
 8008f0c:	42b3      	cmp	r3, r6
 8008f0e:	db0b      	blt.n	8008f28 <__lshift+0x38>
 8008f10:	4638      	mov	r0, r7
 8008f12:	f7ff fd97 	bl	8008a44 <_Balloc>
 8008f16:	4605      	mov	r5, r0
 8008f18:	b948      	cbnz	r0, 8008f2e <__lshift+0x3e>
 8008f1a:	4602      	mov	r2, r0
 8008f1c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008f20:	4b27      	ldr	r3, [pc, #156]	@ (8008fc0 <__lshift+0xd0>)
 8008f22:	4828      	ldr	r0, [pc, #160]	@ (8008fc4 <__lshift+0xd4>)
 8008f24:	f001 fe8a 	bl	800ac3c <__assert_func>
 8008f28:	3101      	adds	r1, #1
 8008f2a:	005b      	lsls	r3, r3, #1
 8008f2c:	e7ee      	b.n	8008f0c <__lshift+0x1c>
 8008f2e:	2300      	movs	r3, #0
 8008f30:	f100 0114 	add.w	r1, r0, #20
 8008f34:	f100 0210 	add.w	r2, r0, #16
 8008f38:	4618      	mov	r0, r3
 8008f3a:	4553      	cmp	r3, sl
 8008f3c:	db33      	blt.n	8008fa6 <__lshift+0xb6>
 8008f3e:	6920      	ldr	r0, [r4, #16]
 8008f40:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008f44:	f104 0314 	add.w	r3, r4, #20
 8008f48:	f019 091f 	ands.w	r9, r9, #31
 8008f4c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008f50:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008f54:	d02b      	beq.n	8008fae <__lshift+0xbe>
 8008f56:	468a      	mov	sl, r1
 8008f58:	2200      	movs	r2, #0
 8008f5a:	f1c9 0e20 	rsb	lr, r9, #32
 8008f5e:	6818      	ldr	r0, [r3, #0]
 8008f60:	fa00 f009 	lsl.w	r0, r0, r9
 8008f64:	4310      	orrs	r0, r2
 8008f66:	f84a 0b04 	str.w	r0, [sl], #4
 8008f6a:	f853 2b04 	ldr.w	r2, [r3], #4
 8008f6e:	459c      	cmp	ip, r3
 8008f70:	fa22 f20e 	lsr.w	r2, r2, lr
 8008f74:	d8f3      	bhi.n	8008f5e <__lshift+0x6e>
 8008f76:	ebac 0304 	sub.w	r3, ip, r4
 8008f7a:	3b15      	subs	r3, #21
 8008f7c:	f023 0303 	bic.w	r3, r3, #3
 8008f80:	3304      	adds	r3, #4
 8008f82:	f104 0015 	add.w	r0, r4, #21
 8008f86:	4584      	cmp	ip, r0
 8008f88:	bf38      	it	cc
 8008f8a:	2304      	movcc	r3, #4
 8008f8c:	50ca      	str	r2, [r1, r3]
 8008f8e:	b10a      	cbz	r2, 8008f94 <__lshift+0xa4>
 8008f90:	f108 0602 	add.w	r6, r8, #2
 8008f94:	3e01      	subs	r6, #1
 8008f96:	4638      	mov	r0, r7
 8008f98:	4621      	mov	r1, r4
 8008f9a:	612e      	str	r6, [r5, #16]
 8008f9c:	f7ff fd92 	bl	8008ac4 <_Bfree>
 8008fa0:	4628      	mov	r0, r5
 8008fa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008fa6:	f842 0f04 	str.w	r0, [r2, #4]!
 8008faa:	3301      	adds	r3, #1
 8008fac:	e7c5      	b.n	8008f3a <__lshift+0x4a>
 8008fae:	3904      	subs	r1, #4
 8008fb0:	f853 2b04 	ldr.w	r2, [r3], #4
 8008fb4:	459c      	cmp	ip, r3
 8008fb6:	f841 2f04 	str.w	r2, [r1, #4]!
 8008fba:	d8f9      	bhi.n	8008fb0 <__lshift+0xc0>
 8008fbc:	e7ea      	b.n	8008f94 <__lshift+0xa4>
 8008fbe:	bf00      	nop
 8008fc0:	0800cb49 	.word	0x0800cb49
 8008fc4:	0800cb5a 	.word	0x0800cb5a

08008fc8 <__mcmp>:
 8008fc8:	4603      	mov	r3, r0
 8008fca:	690a      	ldr	r2, [r1, #16]
 8008fcc:	6900      	ldr	r0, [r0, #16]
 8008fce:	b530      	push	{r4, r5, lr}
 8008fd0:	1a80      	subs	r0, r0, r2
 8008fd2:	d10e      	bne.n	8008ff2 <__mcmp+0x2a>
 8008fd4:	3314      	adds	r3, #20
 8008fd6:	3114      	adds	r1, #20
 8008fd8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008fdc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008fe0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008fe4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008fe8:	4295      	cmp	r5, r2
 8008fea:	d003      	beq.n	8008ff4 <__mcmp+0x2c>
 8008fec:	d205      	bcs.n	8008ffa <__mcmp+0x32>
 8008fee:	f04f 30ff 	mov.w	r0, #4294967295
 8008ff2:	bd30      	pop	{r4, r5, pc}
 8008ff4:	42a3      	cmp	r3, r4
 8008ff6:	d3f3      	bcc.n	8008fe0 <__mcmp+0x18>
 8008ff8:	e7fb      	b.n	8008ff2 <__mcmp+0x2a>
 8008ffa:	2001      	movs	r0, #1
 8008ffc:	e7f9      	b.n	8008ff2 <__mcmp+0x2a>
	...

08009000 <__mdiff>:
 8009000:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009004:	4689      	mov	r9, r1
 8009006:	4606      	mov	r6, r0
 8009008:	4611      	mov	r1, r2
 800900a:	4648      	mov	r0, r9
 800900c:	4614      	mov	r4, r2
 800900e:	f7ff ffdb 	bl	8008fc8 <__mcmp>
 8009012:	1e05      	subs	r5, r0, #0
 8009014:	d112      	bne.n	800903c <__mdiff+0x3c>
 8009016:	4629      	mov	r1, r5
 8009018:	4630      	mov	r0, r6
 800901a:	f7ff fd13 	bl	8008a44 <_Balloc>
 800901e:	4602      	mov	r2, r0
 8009020:	b928      	cbnz	r0, 800902e <__mdiff+0x2e>
 8009022:	f240 2137 	movw	r1, #567	@ 0x237
 8009026:	4b3e      	ldr	r3, [pc, #248]	@ (8009120 <__mdiff+0x120>)
 8009028:	483e      	ldr	r0, [pc, #248]	@ (8009124 <__mdiff+0x124>)
 800902a:	f001 fe07 	bl	800ac3c <__assert_func>
 800902e:	2301      	movs	r3, #1
 8009030:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009034:	4610      	mov	r0, r2
 8009036:	b003      	add	sp, #12
 8009038:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800903c:	bfbc      	itt	lt
 800903e:	464b      	movlt	r3, r9
 8009040:	46a1      	movlt	r9, r4
 8009042:	4630      	mov	r0, r6
 8009044:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8009048:	bfba      	itte	lt
 800904a:	461c      	movlt	r4, r3
 800904c:	2501      	movlt	r5, #1
 800904e:	2500      	movge	r5, #0
 8009050:	f7ff fcf8 	bl	8008a44 <_Balloc>
 8009054:	4602      	mov	r2, r0
 8009056:	b918      	cbnz	r0, 8009060 <__mdiff+0x60>
 8009058:	f240 2145 	movw	r1, #581	@ 0x245
 800905c:	4b30      	ldr	r3, [pc, #192]	@ (8009120 <__mdiff+0x120>)
 800905e:	e7e3      	b.n	8009028 <__mdiff+0x28>
 8009060:	f100 0b14 	add.w	fp, r0, #20
 8009064:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8009068:	f109 0310 	add.w	r3, r9, #16
 800906c:	60c5      	str	r5, [r0, #12]
 800906e:	f04f 0c00 	mov.w	ip, #0
 8009072:	f109 0514 	add.w	r5, r9, #20
 8009076:	46d9      	mov	r9, fp
 8009078:	6926      	ldr	r6, [r4, #16]
 800907a:	f104 0e14 	add.w	lr, r4, #20
 800907e:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8009082:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8009086:	9301      	str	r3, [sp, #4]
 8009088:	9b01      	ldr	r3, [sp, #4]
 800908a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800908e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8009092:	b281      	uxth	r1, r0
 8009094:	9301      	str	r3, [sp, #4]
 8009096:	fa1f f38a 	uxth.w	r3, sl
 800909a:	1a5b      	subs	r3, r3, r1
 800909c:	0c00      	lsrs	r0, r0, #16
 800909e:	4463      	add	r3, ip
 80090a0:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80090a4:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80090a8:	b29b      	uxth	r3, r3
 80090aa:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80090ae:	4576      	cmp	r6, lr
 80090b0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80090b4:	f849 3b04 	str.w	r3, [r9], #4
 80090b8:	d8e6      	bhi.n	8009088 <__mdiff+0x88>
 80090ba:	1b33      	subs	r3, r6, r4
 80090bc:	3b15      	subs	r3, #21
 80090be:	f023 0303 	bic.w	r3, r3, #3
 80090c2:	3415      	adds	r4, #21
 80090c4:	3304      	adds	r3, #4
 80090c6:	42a6      	cmp	r6, r4
 80090c8:	bf38      	it	cc
 80090ca:	2304      	movcc	r3, #4
 80090cc:	441d      	add	r5, r3
 80090ce:	445b      	add	r3, fp
 80090d0:	461e      	mov	r6, r3
 80090d2:	462c      	mov	r4, r5
 80090d4:	4544      	cmp	r4, r8
 80090d6:	d30e      	bcc.n	80090f6 <__mdiff+0xf6>
 80090d8:	f108 0103 	add.w	r1, r8, #3
 80090dc:	1b49      	subs	r1, r1, r5
 80090de:	f021 0103 	bic.w	r1, r1, #3
 80090e2:	3d03      	subs	r5, #3
 80090e4:	45a8      	cmp	r8, r5
 80090e6:	bf38      	it	cc
 80090e8:	2100      	movcc	r1, #0
 80090ea:	440b      	add	r3, r1
 80090ec:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80090f0:	b199      	cbz	r1, 800911a <__mdiff+0x11a>
 80090f2:	6117      	str	r7, [r2, #16]
 80090f4:	e79e      	b.n	8009034 <__mdiff+0x34>
 80090f6:	46e6      	mov	lr, ip
 80090f8:	f854 1b04 	ldr.w	r1, [r4], #4
 80090fc:	fa1f fc81 	uxth.w	ip, r1
 8009100:	44f4      	add	ip, lr
 8009102:	0c08      	lsrs	r0, r1, #16
 8009104:	4471      	add	r1, lr
 8009106:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800910a:	b289      	uxth	r1, r1
 800910c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009110:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009114:	f846 1b04 	str.w	r1, [r6], #4
 8009118:	e7dc      	b.n	80090d4 <__mdiff+0xd4>
 800911a:	3f01      	subs	r7, #1
 800911c:	e7e6      	b.n	80090ec <__mdiff+0xec>
 800911e:	bf00      	nop
 8009120:	0800cb49 	.word	0x0800cb49
 8009124:	0800cb5a 	.word	0x0800cb5a

08009128 <__ulp>:
 8009128:	4b0e      	ldr	r3, [pc, #56]	@ (8009164 <__ulp+0x3c>)
 800912a:	400b      	ands	r3, r1
 800912c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8009130:	2b00      	cmp	r3, #0
 8009132:	dc08      	bgt.n	8009146 <__ulp+0x1e>
 8009134:	425b      	negs	r3, r3
 8009136:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800913a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800913e:	da04      	bge.n	800914a <__ulp+0x22>
 8009140:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8009144:	4113      	asrs	r3, r2
 8009146:	2200      	movs	r2, #0
 8009148:	e008      	b.n	800915c <__ulp+0x34>
 800914a:	f1a2 0314 	sub.w	r3, r2, #20
 800914e:	2b1e      	cmp	r3, #30
 8009150:	bfd6      	itet	le
 8009152:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8009156:	2201      	movgt	r2, #1
 8009158:	40da      	lsrle	r2, r3
 800915a:	2300      	movs	r3, #0
 800915c:	4619      	mov	r1, r3
 800915e:	4610      	mov	r0, r2
 8009160:	4770      	bx	lr
 8009162:	bf00      	nop
 8009164:	7ff00000 	.word	0x7ff00000

08009168 <__b2d>:
 8009168:	6902      	ldr	r2, [r0, #16]
 800916a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800916c:	f100 0614 	add.w	r6, r0, #20
 8009170:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 8009174:	f852 4c04 	ldr.w	r4, [r2, #-4]
 8009178:	4f1e      	ldr	r7, [pc, #120]	@ (80091f4 <__b2d+0x8c>)
 800917a:	4620      	mov	r0, r4
 800917c:	f7ff fd54 	bl	8008c28 <__hi0bits>
 8009180:	4603      	mov	r3, r0
 8009182:	f1c0 0020 	rsb	r0, r0, #32
 8009186:	2b0a      	cmp	r3, #10
 8009188:	f1a2 0504 	sub.w	r5, r2, #4
 800918c:	6008      	str	r0, [r1, #0]
 800918e:	dc12      	bgt.n	80091b6 <__b2d+0x4e>
 8009190:	42ae      	cmp	r6, r5
 8009192:	bf2c      	ite	cs
 8009194:	2200      	movcs	r2, #0
 8009196:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800919a:	f1c3 0c0b 	rsb	ip, r3, #11
 800919e:	3315      	adds	r3, #21
 80091a0:	fa24 fe0c 	lsr.w	lr, r4, ip
 80091a4:	fa04 f303 	lsl.w	r3, r4, r3
 80091a8:	fa22 f20c 	lsr.w	r2, r2, ip
 80091ac:	ea4e 0107 	orr.w	r1, lr, r7
 80091b0:	431a      	orrs	r2, r3
 80091b2:	4610      	mov	r0, r2
 80091b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80091b6:	42ae      	cmp	r6, r5
 80091b8:	bf36      	itet	cc
 80091ba:	f1a2 0508 	subcc.w	r5, r2, #8
 80091be:	2200      	movcs	r2, #0
 80091c0:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 80091c4:	3b0b      	subs	r3, #11
 80091c6:	d012      	beq.n	80091ee <__b2d+0x86>
 80091c8:	f1c3 0720 	rsb	r7, r3, #32
 80091cc:	fa22 f107 	lsr.w	r1, r2, r7
 80091d0:	409c      	lsls	r4, r3
 80091d2:	430c      	orrs	r4, r1
 80091d4:	42b5      	cmp	r5, r6
 80091d6:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 80091da:	bf94      	ite	ls
 80091dc:	2400      	movls	r4, #0
 80091de:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 80091e2:	409a      	lsls	r2, r3
 80091e4:	40fc      	lsrs	r4, r7
 80091e6:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 80091ea:	4322      	orrs	r2, r4
 80091ec:	e7e1      	b.n	80091b2 <__b2d+0x4a>
 80091ee:	ea44 0107 	orr.w	r1, r4, r7
 80091f2:	e7de      	b.n	80091b2 <__b2d+0x4a>
 80091f4:	3ff00000 	.word	0x3ff00000

080091f8 <__d2b>:
 80091f8:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 80091fc:	2101      	movs	r1, #1
 80091fe:	4690      	mov	r8, r2
 8009200:	4699      	mov	r9, r3
 8009202:	9e08      	ldr	r6, [sp, #32]
 8009204:	f7ff fc1e 	bl	8008a44 <_Balloc>
 8009208:	4604      	mov	r4, r0
 800920a:	b930      	cbnz	r0, 800921a <__d2b+0x22>
 800920c:	4602      	mov	r2, r0
 800920e:	f240 310f 	movw	r1, #783	@ 0x30f
 8009212:	4b23      	ldr	r3, [pc, #140]	@ (80092a0 <__d2b+0xa8>)
 8009214:	4823      	ldr	r0, [pc, #140]	@ (80092a4 <__d2b+0xac>)
 8009216:	f001 fd11 	bl	800ac3c <__assert_func>
 800921a:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800921e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009222:	b10d      	cbz	r5, 8009228 <__d2b+0x30>
 8009224:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009228:	9301      	str	r3, [sp, #4]
 800922a:	f1b8 0300 	subs.w	r3, r8, #0
 800922e:	d024      	beq.n	800927a <__d2b+0x82>
 8009230:	4668      	mov	r0, sp
 8009232:	9300      	str	r3, [sp, #0]
 8009234:	f7ff fd17 	bl	8008c66 <__lo0bits>
 8009238:	e9dd 1200 	ldrd	r1, r2, [sp]
 800923c:	b1d8      	cbz	r0, 8009276 <__d2b+0x7e>
 800923e:	f1c0 0320 	rsb	r3, r0, #32
 8009242:	fa02 f303 	lsl.w	r3, r2, r3
 8009246:	430b      	orrs	r3, r1
 8009248:	40c2      	lsrs	r2, r0
 800924a:	6163      	str	r3, [r4, #20]
 800924c:	9201      	str	r2, [sp, #4]
 800924e:	9b01      	ldr	r3, [sp, #4]
 8009250:	2b00      	cmp	r3, #0
 8009252:	bf0c      	ite	eq
 8009254:	2201      	moveq	r2, #1
 8009256:	2202      	movne	r2, #2
 8009258:	61a3      	str	r3, [r4, #24]
 800925a:	6122      	str	r2, [r4, #16]
 800925c:	b1ad      	cbz	r5, 800928a <__d2b+0x92>
 800925e:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8009262:	4405      	add	r5, r0
 8009264:	6035      	str	r5, [r6, #0]
 8009266:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800926a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800926c:	6018      	str	r0, [r3, #0]
 800926e:	4620      	mov	r0, r4
 8009270:	b002      	add	sp, #8
 8009272:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8009276:	6161      	str	r1, [r4, #20]
 8009278:	e7e9      	b.n	800924e <__d2b+0x56>
 800927a:	a801      	add	r0, sp, #4
 800927c:	f7ff fcf3 	bl	8008c66 <__lo0bits>
 8009280:	9b01      	ldr	r3, [sp, #4]
 8009282:	2201      	movs	r2, #1
 8009284:	6163      	str	r3, [r4, #20]
 8009286:	3020      	adds	r0, #32
 8009288:	e7e7      	b.n	800925a <__d2b+0x62>
 800928a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800928e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009292:	6030      	str	r0, [r6, #0]
 8009294:	6918      	ldr	r0, [r3, #16]
 8009296:	f7ff fcc7 	bl	8008c28 <__hi0bits>
 800929a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800929e:	e7e4      	b.n	800926a <__d2b+0x72>
 80092a0:	0800cb49 	.word	0x0800cb49
 80092a4:	0800cb5a 	.word	0x0800cb5a

080092a8 <__ratio>:
 80092a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092ac:	b085      	sub	sp, #20
 80092ae:	e9cd 1000 	strd	r1, r0, [sp]
 80092b2:	a902      	add	r1, sp, #8
 80092b4:	f7ff ff58 	bl	8009168 <__b2d>
 80092b8:	468b      	mov	fp, r1
 80092ba:	4606      	mov	r6, r0
 80092bc:	460f      	mov	r7, r1
 80092be:	9800      	ldr	r0, [sp, #0]
 80092c0:	a903      	add	r1, sp, #12
 80092c2:	f7ff ff51 	bl	8009168 <__b2d>
 80092c6:	460d      	mov	r5, r1
 80092c8:	9b01      	ldr	r3, [sp, #4]
 80092ca:	4689      	mov	r9, r1
 80092cc:	6919      	ldr	r1, [r3, #16]
 80092ce:	9b00      	ldr	r3, [sp, #0]
 80092d0:	4604      	mov	r4, r0
 80092d2:	691b      	ldr	r3, [r3, #16]
 80092d4:	4630      	mov	r0, r6
 80092d6:	1ac9      	subs	r1, r1, r3
 80092d8:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80092dc:	1a9b      	subs	r3, r3, r2
 80092de:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	bfcd      	iteet	gt
 80092e6:	463a      	movgt	r2, r7
 80092e8:	462a      	movle	r2, r5
 80092ea:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80092ee:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 80092f2:	bfd8      	it	le
 80092f4:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 80092f8:	464b      	mov	r3, r9
 80092fa:	4622      	mov	r2, r4
 80092fc:	4659      	mov	r1, fp
 80092fe:	f7f7 fa15 	bl	800072c <__aeabi_ddiv>
 8009302:	b005      	add	sp, #20
 8009304:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009308 <__copybits>:
 8009308:	3901      	subs	r1, #1
 800930a:	b570      	push	{r4, r5, r6, lr}
 800930c:	1149      	asrs	r1, r1, #5
 800930e:	6914      	ldr	r4, [r2, #16]
 8009310:	3101      	adds	r1, #1
 8009312:	f102 0314 	add.w	r3, r2, #20
 8009316:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800931a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800931e:	1f05      	subs	r5, r0, #4
 8009320:	42a3      	cmp	r3, r4
 8009322:	d30c      	bcc.n	800933e <__copybits+0x36>
 8009324:	1aa3      	subs	r3, r4, r2
 8009326:	3b11      	subs	r3, #17
 8009328:	f023 0303 	bic.w	r3, r3, #3
 800932c:	3211      	adds	r2, #17
 800932e:	42a2      	cmp	r2, r4
 8009330:	bf88      	it	hi
 8009332:	2300      	movhi	r3, #0
 8009334:	4418      	add	r0, r3
 8009336:	2300      	movs	r3, #0
 8009338:	4288      	cmp	r0, r1
 800933a:	d305      	bcc.n	8009348 <__copybits+0x40>
 800933c:	bd70      	pop	{r4, r5, r6, pc}
 800933e:	f853 6b04 	ldr.w	r6, [r3], #4
 8009342:	f845 6f04 	str.w	r6, [r5, #4]!
 8009346:	e7eb      	b.n	8009320 <__copybits+0x18>
 8009348:	f840 3b04 	str.w	r3, [r0], #4
 800934c:	e7f4      	b.n	8009338 <__copybits+0x30>

0800934e <__any_on>:
 800934e:	f100 0214 	add.w	r2, r0, #20
 8009352:	6900      	ldr	r0, [r0, #16]
 8009354:	114b      	asrs	r3, r1, #5
 8009356:	4298      	cmp	r0, r3
 8009358:	b510      	push	{r4, lr}
 800935a:	db11      	blt.n	8009380 <__any_on+0x32>
 800935c:	dd0a      	ble.n	8009374 <__any_on+0x26>
 800935e:	f011 011f 	ands.w	r1, r1, #31
 8009362:	d007      	beq.n	8009374 <__any_on+0x26>
 8009364:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009368:	fa24 f001 	lsr.w	r0, r4, r1
 800936c:	fa00 f101 	lsl.w	r1, r0, r1
 8009370:	428c      	cmp	r4, r1
 8009372:	d10b      	bne.n	800938c <__any_on+0x3e>
 8009374:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009378:	4293      	cmp	r3, r2
 800937a:	d803      	bhi.n	8009384 <__any_on+0x36>
 800937c:	2000      	movs	r0, #0
 800937e:	bd10      	pop	{r4, pc}
 8009380:	4603      	mov	r3, r0
 8009382:	e7f7      	b.n	8009374 <__any_on+0x26>
 8009384:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009388:	2900      	cmp	r1, #0
 800938a:	d0f5      	beq.n	8009378 <__any_on+0x2a>
 800938c:	2001      	movs	r0, #1
 800938e:	e7f6      	b.n	800937e <__any_on+0x30>

08009390 <sulp>:
 8009390:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009394:	460f      	mov	r7, r1
 8009396:	4690      	mov	r8, r2
 8009398:	f7ff fec6 	bl	8009128 <__ulp>
 800939c:	4604      	mov	r4, r0
 800939e:	460d      	mov	r5, r1
 80093a0:	f1b8 0f00 	cmp.w	r8, #0
 80093a4:	d011      	beq.n	80093ca <sulp+0x3a>
 80093a6:	f3c7 530a 	ubfx	r3, r7, #20, #11
 80093aa:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	dd0b      	ble.n	80093ca <sulp+0x3a>
 80093b2:	2400      	movs	r4, #0
 80093b4:	051b      	lsls	r3, r3, #20
 80093b6:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 80093ba:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 80093be:	4622      	mov	r2, r4
 80093c0:	462b      	mov	r3, r5
 80093c2:	f7f7 f889 	bl	80004d8 <__aeabi_dmul>
 80093c6:	4604      	mov	r4, r0
 80093c8:	460d      	mov	r5, r1
 80093ca:	4620      	mov	r0, r4
 80093cc:	4629      	mov	r1, r5
 80093ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80093d2:	0000      	movs	r0, r0
 80093d4:	0000      	movs	r0, r0
	...

080093d8 <_strtod_l>:
 80093d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093dc:	b09f      	sub	sp, #124	@ 0x7c
 80093de:	9217      	str	r2, [sp, #92]	@ 0x5c
 80093e0:	2200      	movs	r2, #0
 80093e2:	460c      	mov	r4, r1
 80093e4:	921a      	str	r2, [sp, #104]	@ 0x68
 80093e6:	f04f 0a00 	mov.w	sl, #0
 80093ea:	f04f 0b00 	mov.w	fp, #0
 80093ee:	460a      	mov	r2, r1
 80093f0:	9005      	str	r0, [sp, #20]
 80093f2:	9219      	str	r2, [sp, #100]	@ 0x64
 80093f4:	7811      	ldrb	r1, [r2, #0]
 80093f6:	292b      	cmp	r1, #43	@ 0x2b
 80093f8:	d048      	beq.n	800948c <_strtod_l+0xb4>
 80093fa:	d836      	bhi.n	800946a <_strtod_l+0x92>
 80093fc:	290d      	cmp	r1, #13
 80093fe:	d830      	bhi.n	8009462 <_strtod_l+0x8a>
 8009400:	2908      	cmp	r1, #8
 8009402:	d830      	bhi.n	8009466 <_strtod_l+0x8e>
 8009404:	2900      	cmp	r1, #0
 8009406:	d039      	beq.n	800947c <_strtod_l+0xa4>
 8009408:	2200      	movs	r2, #0
 800940a:	920b      	str	r2, [sp, #44]	@ 0x2c
 800940c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800940e:	782a      	ldrb	r2, [r5, #0]
 8009410:	2a30      	cmp	r2, #48	@ 0x30
 8009412:	f040 80b1 	bne.w	8009578 <_strtod_l+0x1a0>
 8009416:	786a      	ldrb	r2, [r5, #1]
 8009418:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800941c:	2a58      	cmp	r2, #88	@ 0x58
 800941e:	d16c      	bne.n	80094fa <_strtod_l+0x122>
 8009420:	9302      	str	r3, [sp, #8]
 8009422:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009424:	4a8e      	ldr	r2, [pc, #568]	@ (8009660 <_strtod_l+0x288>)
 8009426:	9301      	str	r3, [sp, #4]
 8009428:	ab1a      	add	r3, sp, #104	@ 0x68
 800942a:	9300      	str	r3, [sp, #0]
 800942c:	9805      	ldr	r0, [sp, #20]
 800942e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8009430:	a919      	add	r1, sp, #100	@ 0x64
 8009432:	f001 fc9d 	bl	800ad70 <__gethex>
 8009436:	f010 060f 	ands.w	r6, r0, #15
 800943a:	4604      	mov	r4, r0
 800943c:	d005      	beq.n	800944a <_strtod_l+0x72>
 800943e:	2e06      	cmp	r6, #6
 8009440:	d126      	bne.n	8009490 <_strtod_l+0xb8>
 8009442:	2300      	movs	r3, #0
 8009444:	3501      	adds	r5, #1
 8009446:	9519      	str	r5, [sp, #100]	@ 0x64
 8009448:	930b      	str	r3, [sp, #44]	@ 0x2c
 800944a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800944c:	2b00      	cmp	r3, #0
 800944e:	f040 8584 	bne.w	8009f5a <_strtod_l+0xb82>
 8009452:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009454:	b1bb      	cbz	r3, 8009486 <_strtod_l+0xae>
 8009456:	4650      	mov	r0, sl
 8009458:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 800945c:	b01f      	add	sp, #124	@ 0x7c
 800945e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009462:	2920      	cmp	r1, #32
 8009464:	d1d0      	bne.n	8009408 <_strtod_l+0x30>
 8009466:	3201      	adds	r2, #1
 8009468:	e7c3      	b.n	80093f2 <_strtod_l+0x1a>
 800946a:	292d      	cmp	r1, #45	@ 0x2d
 800946c:	d1cc      	bne.n	8009408 <_strtod_l+0x30>
 800946e:	2101      	movs	r1, #1
 8009470:	910b      	str	r1, [sp, #44]	@ 0x2c
 8009472:	1c51      	adds	r1, r2, #1
 8009474:	9119      	str	r1, [sp, #100]	@ 0x64
 8009476:	7852      	ldrb	r2, [r2, #1]
 8009478:	2a00      	cmp	r2, #0
 800947a:	d1c7      	bne.n	800940c <_strtod_l+0x34>
 800947c:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800947e:	9419      	str	r4, [sp, #100]	@ 0x64
 8009480:	2b00      	cmp	r3, #0
 8009482:	f040 8568 	bne.w	8009f56 <_strtod_l+0xb7e>
 8009486:	4650      	mov	r0, sl
 8009488:	4659      	mov	r1, fp
 800948a:	e7e7      	b.n	800945c <_strtod_l+0x84>
 800948c:	2100      	movs	r1, #0
 800948e:	e7ef      	b.n	8009470 <_strtod_l+0x98>
 8009490:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8009492:	b13a      	cbz	r2, 80094a4 <_strtod_l+0xcc>
 8009494:	2135      	movs	r1, #53	@ 0x35
 8009496:	a81c      	add	r0, sp, #112	@ 0x70
 8009498:	f7ff ff36 	bl	8009308 <__copybits>
 800949c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800949e:	9805      	ldr	r0, [sp, #20]
 80094a0:	f7ff fb10 	bl	8008ac4 <_Bfree>
 80094a4:	3e01      	subs	r6, #1
 80094a6:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80094a8:	2e04      	cmp	r6, #4
 80094aa:	d806      	bhi.n	80094ba <_strtod_l+0xe2>
 80094ac:	e8df f006 	tbb	[pc, r6]
 80094b0:	201d0314 	.word	0x201d0314
 80094b4:	14          	.byte	0x14
 80094b5:	00          	.byte	0x00
 80094b6:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 80094ba:	05e1      	lsls	r1, r4, #23
 80094bc:	bf48      	it	mi
 80094be:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 80094c2:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80094c6:	0d1b      	lsrs	r3, r3, #20
 80094c8:	051b      	lsls	r3, r3, #20
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d1bd      	bne.n	800944a <_strtod_l+0x72>
 80094ce:	f7fe fb29 	bl	8007b24 <__errno>
 80094d2:	2322      	movs	r3, #34	@ 0x22
 80094d4:	6003      	str	r3, [r0, #0]
 80094d6:	e7b8      	b.n	800944a <_strtod_l+0x72>
 80094d8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80094dc:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 80094e0:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80094e4:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80094e8:	e7e7      	b.n	80094ba <_strtod_l+0xe2>
 80094ea:	f8df b178 	ldr.w	fp, [pc, #376]	@ 8009664 <_strtod_l+0x28c>
 80094ee:	e7e4      	b.n	80094ba <_strtod_l+0xe2>
 80094f0:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 80094f4:	f04f 3aff 	mov.w	sl, #4294967295
 80094f8:	e7df      	b.n	80094ba <_strtod_l+0xe2>
 80094fa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80094fc:	1c5a      	adds	r2, r3, #1
 80094fe:	9219      	str	r2, [sp, #100]	@ 0x64
 8009500:	785b      	ldrb	r3, [r3, #1]
 8009502:	2b30      	cmp	r3, #48	@ 0x30
 8009504:	d0f9      	beq.n	80094fa <_strtod_l+0x122>
 8009506:	2b00      	cmp	r3, #0
 8009508:	d09f      	beq.n	800944a <_strtod_l+0x72>
 800950a:	2301      	movs	r3, #1
 800950c:	9309      	str	r3, [sp, #36]	@ 0x24
 800950e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009510:	220a      	movs	r2, #10
 8009512:	930c      	str	r3, [sp, #48]	@ 0x30
 8009514:	2300      	movs	r3, #0
 8009516:	461f      	mov	r7, r3
 8009518:	9308      	str	r3, [sp, #32]
 800951a:	930a      	str	r3, [sp, #40]	@ 0x28
 800951c:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800951e:	7805      	ldrb	r5, [r0, #0]
 8009520:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8009524:	b2d9      	uxtb	r1, r3
 8009526:	2909      	cmp	r1, #9
 8009528:	d928      	bls.n	800957c <_strtod_l+0x1a4>
 800952a:	2201      	movs	r2, #1
 800952c:	494e      	ldr	r1, [pc, #312]	@ (8009668 <_strtod_l+0x290>)
 800952e:	f001 fb4e 	bl	800abce <strncmp>
 8009532:	2800      	cmp	r0, #0
 8009534:	d032      	beq.n	800959c <_strtod_l+0x1c4>
 8009536:	2000      	movs	r0, #0
 8009538:	462a      	mov	r2, r5
 800953a:	4681      	mov	r9, r0
 800953c:	463d      	mov	r5, r7
 800953e:	4603      	mov	r3, r0
 8009540:	2a65      	cmp	r2, #101	@ 0x65
 8009542:	d001      	beq.n	8009548 <_strtod_l+0x170>
 8009544:	2a45      	cmp	r2, #69	@ 0x45
 8009546:	d114      	bne.n	8009572 <_strtod_l+0x19a>
 8009548:	b91d      	cbnz	r5, 8009552 <_strtod_l+0x17a>
 800954a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800954c:	4302      	orrs	r2, r0
 800954e:	d095      	beq.n	800947c <_strtod_l+0xa4>
 8009550:	2500      	movs	r5, #0
 8009552:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8009554:	1c62      	adds	r2, r4, #1
 8009556:	9219      	str	r2, [sp, #100]	@ 0x64
 8009558:	7862      	ldrb	r2, [r4, #1]
 800955a:	2a2b      	cmp	r2, #43	@ 0x2b
 800955c:	d077      	beq.n	800964e <_strtod_l+0x276>
 800955e:	2a2d      	cmp	r2, #45	@ 0x2d
 8009560:	d07b      	beq.n	800965a <_strtod_l+0x282>
 8009562:	f04f 0c00 	mov.w	ip, #0
 8009566:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800956a:	2909      	cmp	r1, #9
 800956c:	f240 8082 	bls.w	8009674 <_strtod_l+0x29c>
 8009570:	9419      	str	r4, [sp, #100]	@ 0x64
 8009572:	f04f 0800 	mov.w	r8, #0
 8009576:	e0a2      	b.n	80096be <_strtod_l+0x2e6>
 8009578:	2300      	movs	r3, #0
 800957a:	e7c7      	b.n	800950c <_strtod_l+0x134>
 800957c:	2f08      	cmp	r7, #8
 800957e:	bfd5      	itete	le
 8009580:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8009582:	9908      	ldrgt	r1, [sp, #32]
 8009584:	fb02 3301 	mlale	r3, r2, r1, r3
 8009588:	fb02 3301 	mlagt	r3, r2, r1, r3
 800958c:	f100 0001 	add.w	r0, r0, #1
 8009590:	bfd4      	ite	le
 8009592:	930a      	strle	r3, [sp, #40]	@ 0x28
 8009594:	9308      	strgt	r3, [sp, #32]
 8009596:	3701      	adds	r7, #1
 8009598:	9019      	str	r0, [sp, #100]	@ 0x64
 800959a:	e7bf      	b.n	800951c <_strtod_l+0x144>
 800959c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800959e:	1c5a      	adds	r2, r3, #1
 80095a0:	9219      	str	r2, [sp, #100]	@ 0x64
 80095a2:	785a      	ldrb	r2, [r3, #1]
 80095a4:	b37f      	cbz	r7, 8009606 <_strtod_l+0x22e>
 80095a6:	4681      	mov	r9, r0
 80095a8:	463d      	mov	r5, r7
 80095aa:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 80095ae:	2b09      	cmp	r3, #9
 80095b0:	d912      	bls.n	80095d8 <_strtod_l+0x200>
 80095b2:	2301      	movs	r3, #1
 80095b4:	e7c4      	b.n	8009540 <_strtod_l+0x168>
 80095b6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80095b8:	3001      	adds	r0, #1
 80095ba:	1c5a      	adds	r2, r3, #1
 80095bc:	9219      	str	r2, [sp, #100]	@ 0x64
 80095be:	785a      	ldrb	r2, [r3, #1]
 80095c0:	2a30      	cmp	r2, #48	@ 0x30
 80095c2:	d0f8      	beq.n	80095b6 <_strtod_l+0x1de>
 80095c4:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 80095c8:	2b08      	cmp	r3, #8
 80095ca:	f200 84cb 	bhi.w	8009f64 <_strtod_l+0xb8c>
 80095ce:	4681      	mov	r9, r0
 80095d0:	2000      	movs	r0, #0
 80095d2:	4605      	mov	r5, r0
 80095d4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80095d6:	930c      	str	r3, [sp, #48]	@ 0x30
 80095d8:	3a30      	subs	r2, #48	@ 0x30
 80095da:	f100 0301 	add.w	r3, r0, #1
 80095de:	d02a      	beq.n	8009636 <_strtod_l+0x25e>
 80095e0:	4499      	add	r9, r3
 80095e2:	210a      	movs	r1, #10
 80095e4:	462b      	mov	r3, r5
 80095e6:	eb00 0c05 	add.w	ip, r0, r5
 80095ea:	4563      	cmp	r3, ip
 80095ec:	d10d      	bne.n	800960a <_strtod_l+0x232>
 80095ee:	1c69      	adds	r1, r5, #1
 80095f0:	4401      	add	r1, r0
 80095f2:	4428      	add	r0, r5
 80095f4:	2808      	cmp	r0, #8
 80095f6:	dc16      	bgt.n	8009626 <_strtod_l+0x24e>
 80095f8:	230a      	movs	r3, #10
 80095fa:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80095fc:	fb03 2300 	mla	r3, r3, r0, r2
 8009600:	930a      	str	r3, [sp, #40]	@ 0x28
 8009602:	2300      	movs	r3, #0
 8009604:	e018      	b.n	8009638 <_strtod_l+0x260>
 8009606:	4638      	mov	r0, r7
 8009608:	e7da      	b.n	80095c0 <_strtod_l+0x1e8>
 800960a:	2b08      	cmp	r3, #8
 800960c:	f103 0301 	add.w	r3, r3, #1
 8009610:	dc03      	bgt.n	800961a <_strtod_l+0x242>
 8009612:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8009614:	434e      	muls	r6, r1
 8009616:	960a      	str	r6, [sp, #40]	@ 0x28
 8009618:	e7e7      	b.n	80095ea <_strtod_l+0x212>
 800961a:	2b10      	cmp	r3, #16
 800961c:	bfde      	ittt	le
 800961e:	9e08      	ldrle	r6, [sp, #32]
 8009620:	434e      	mulle	r6, r1
 8009622:	9608      	strle	r6, [sp, #32]
 8009624:	e7e1      	b.n	80095ea <_strtod_l+0x212>
 8009626:	280f      	cmp	r0, #15
 8009628:	dceb      	bgt.n	8009602 <_strtod_l+0x22a>
 800962a:	230a      	movs	r3, #10
 800962c:	9808      	ldr	r0, [sp, #32]
 800962e:	fb03 2300 	mla	r3, r3, r0, r2
 8009632:	9308      	str	r3, [sp, #32]
 8009634:	e7e5      	b.n	8009602 <_strtod_l+0x22a>
 8009636:	4629      	mov	r1, r5
 8009638:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800963a:	460d      	mov	r5, r1
 800963c:	1c50      	adds	r0, r2, #1
 800963e:	9019      	str	r0, [sp, #100]	@ 0x64
 8009640:	7852      	ldrb	r2, [r2, #1]
 8009642:	4618      	mov	r0, r3
 8009644:	e7b1      	b.n	80095aa <_strtod_l+0x1d2>
 8009646:	f04f 0900 	mov.w	r9, #0
 800964a:	2301      	movs	r3, #1
 800964c:	e77d      	b.n	800954a <_strtod_l+0x172>
 800964e:	f04f 0c00 	mov.w	ip, #0
 8009652:	1ca2      	adds	r2, r4, #2
 8009654:	9219      	str	r2, [sp, #100]	@ 0x64
 8009656:	78a2      	ldrb	r2, [r4, #2]
 8009658:	e785      	b.n	8009566 <_strtod_l+0x18e>
 800965a:	f04f 0c01 	mov.w	ip, #1
 800965e:	e7f8      	b.n	8009652 <_strtod_l+0x27a>
 8009660:	0800ccc8 	.word	0x0800ccc8
 8009664:	7ff00000 	.word	0x7ff00000
 8009668:	0800ccb0 	.word	0x0800ccb0
 800966c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800966e:	1c51      	adds	r1, r2, #1
 8009670:	9119      	str	r1, [sp, #100]	@ 0x64
 8009672:	7852      	ldrb	r2, [r2, #1]
 8009674:	2a30      	cmp	r2, #48	@ 0x30
 8009676:	d0f9      	beq.n	800966c <_strtod_l+0x294>
 8009678:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800967c:	2908      	cmp	r1, #8
 800967e:	f63f af78 	bhi.w	8009572 <_strtod_l+0x19a>
 8009682:	f04f 080a 	mov.w	r8, #10
 8009686:	3a30      	subs	r2, #48	@ 0x30
 8009688:	920e      	str	r2, [sp, #56]	@ 0x38
 800968a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800968c:	920f      	str	r2, [sp, #60]	@ 0x3c
 800968e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009690:	1c56      	adds	r6, r2, #1
 8009692:	9619      	str	r6, [sp, #100]	@ 0x64
 8009694:	7852      	ldrb	r2, [r2, #1]
 8009696:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800969a:	f1be 0f09 	cmp.w	lr, #9
 800969e:	d939      	bls.n	8009714 <_strtod_l+0x33c>
 80096a0:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80096a2:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 80096a6:	1a76      	subs	r6, r6, r1
 80096a8:	2e08      	cmp	r6, #8
 80096aa:	dc03      	bgt.n	80096b4 <_strtod_l+0x2dc>
 80096ac:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80096ae:	4588      	cmp	r8, r1
 80096b0:	bfa8      	it	ge
 80096b2:	4688      	movge	r8, r1
 80096b4:	f1bc 0f00 	cmp.w	ip, #0
 80096b8:	d001      	beq.n	80096be <_strtod_l+0x2e6>
 80096ba:	f1c8 0800 	rsb	r8, r8, #0
 80096be:	2d00      	cmp	r5, #0
 80096c0:	d14e      	bne.n	8009760 <_strtod_l+0x388>
 80096c2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80096c4:	4308      	orrs	r0, r1
 80096c6:	f47f aec0 	bne.w	800944a <_strtod_l+0x72>
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	f47f aed6 	bne.w	800947c <_strtod_l+0xa4>
 80096d0:	2a69      	cmp	r2, #105	@ 0x69
 80096d2:	d028      	beq.n	8009726 <_strtod_l+0x34e>
 80096d4:	dc25      	bgt.n	8009722 <_strtod_l+0x34a>
 80096d6:	2a49      	cmp	r2, #73	@ 0x49
 80096d8:	d025      	beq.n	8009726 <_strtod_l+0x34e>
 80096da:	2a4e      	cmp	r2, #78	@ 0x4e
 80096dc:	f47f aece 	bne.w	800947c <_strtod_l+0xa4>
 80096e0:	499a      	ldr	r1, [pc, #616]	@ (800994c <_strtod_l+0x574>)
 80096e2:	a819      	add	r0, sp, #100	@ 0x64
 80096e4:	f001 fd66 	bl	800b1b4 <__match>
 80096e8:	2800      	cmp	r0, #0
 80096ea:	f43f aec7 	beq.w	800947c <_strtod_l+0xa4>
 80096ee:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80096f0:	781b      	ldrb	r3, [r3, #0]
 80096f2:	2b28      	cmp	r3, #40	@ 0x28
 80096f4:	d12e      	bne.n	8009754 <_strtod_l+0x37c>
 80096f6:	4996      	ldr	r1, [pc, #600]	@ (8009950 <_strtod_l+0x578>)
 80096f8:	aa1c      	add	r2, sp, #112	@ 0x70
 80096fa:	a819      	add	r0, sp, #100	@ 0x64
 80096fc:	f001 fd6e 	bl	800b1dc <__hexnan>
 8009700:	2805      	cmp	r0, #5
 8009702:	d127      	bne.n	8009754 <_strtod_l+0x37c>
 8009704:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8009706:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800970a:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800970e:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8009712:	e69a      	b.n	800944a <_strtod_l+0x72>
 8009714:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8009716:	fb08 2101 	mla	r1, r8, r1, r2
 800971a:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800971e:	920e      	str	r2, [sp, #56]	@ 0x38
 8009720:	e7b5      	b.n	800968e <_strtod_l+0x2b6>
 8009722:	2a6e      	cmp	r2, #110	@ 0x6e
 8009724:	e7da      	b.n	80096dc <_strtod_l+0x304>
 8009726:	498b      	ldr	r1, [pc, #556]	@ (8009954 <_strtod_l+0x57c>)
 8009728:	a819      	add	r0, sp, #100	@ 0x64
 800972a:	f001 fd43 	bl	800b1b4 <__match>
 800972e:	2800      	cmp	r0, #0
 8009730:	f43f aea4 	beq.w	800947c <_strtod_l+0xa4>
 8009734:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009736:	4988      	ldr	r1, [pc, #544]	@ (8009958 <_strtod_l+0x580>)
 8009738:	3b01      	subs	r3, #1
 800973a:	a819      	add	r0, sp, #100	@ 0x64
 800973c:	9319      	str	r3, [sp, #100]	@ 0x64
 800973e:	f001 fd39 	bl	800b1b4 <__match>
 8009742:	b910      	cbnz	r0, 800974a <_strtod_l+0x372>
 8009744:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009746:	3301      	adds	r3, #1
 8009748:	9319      	str	r3, [sp, #100]	@ 0x64
 800974a:	f04f 0a00 	mov.w	sl, #0
 800974e:	f8df b20c 	ldr.w	fp, [pc, #524]	@ 800995c <_strtod_l+0x584>
 8009752:	e67a      	b.n	800944a <_strtod_l+0x72>
 8009754:	4882      	ldr	r0, [pc, #520]	@ (8009960 <_strtod_l+0x588>)
 8009756:	f001 fa6b 	bl	800ac30 <nan>
 800975a:	4682      	mov	sl, r0
 800975c:	468b      	mov	fp, r1
 800975e:	e674      	b.n	800944a <_strtod_l+0x72>
 8009760:	eba8 0309 	sub.w	r3, r8, r9
 8009764:	2f00      	cmp	r7, #0
 8009766:	bf08      	it	eq
 8009768:	462f      	moveq	r7, r5
 800976a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800976c:	2d10      	cmp	r5, #16
 800976e:	462c      	mov	r4, r5
 8009770:	9309      	str	r3, [sp, #36]	@ 0x24
 8009772:	bfa8      	it	ge
 8009774:	2410      	movge	r4, #16
 8009776:	f7f6 fe35 	bl	80003e4 <__aeabi_ui2d>
 800977a:	2d09      	cmp	r5, #9
 800977c:	4682      	mov	sl, r0
 800977e:	468b      	mov	fp, r1
 8009780:	dc11      	bgt.n	80097a6 <_strtod_l+0x3ce>
 8009782:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009784:	2b00      	cmp	r3, #0
 8009786:	f43f ae60 	beq.w	800944a <_strtod_l+0x72>
 800978a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800978c:	dd76      	ble.n	800987c <_strtod_l+0x4a4>
 800978e:	2b16      	cmp	r3, #22
 8009790:	dc5d      	bgt.n	800984e <_strtod_l+0x476>
 8009792:	4974      	ldr	r1, [pc, #464]	@ (8009964 <_strtod_l+0x58c>)
 8009794:	4652      	mov	r2, sl
 8009796:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800979a:	465b      	mov	r3, fp
 800979c:	e9d1 0100 	ldrd	r0, r1, [r1]
 80097a0:	f7f6 fe9a 	bl	80004d8 <__aeabi_dmul>
 80097a4:	e7d9      	b.n	800975a <_strtod_l+0x382>
 80097a6:	4b6f      	ldr	r3, [pc, #444]	@ (8009964 <_strtod_l+0x58c>)
 80097a8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80097ac:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 80097b0:	f7f6 fe92 	bl	80004d8 <__aeabi_dmul>
 80097b4:	4682      	mov	sl, r0
 80097b6:	9808      	ldr	r0, [sp, #32]
 80097b8:	468b      	mov	fp, r1
 80097ba:	f7f6 fe13 	bl	80003e4 <__aeabi_ui2d>
 80097be:	4602      	mov	r2, r0
 80097c0:	460b      	mov	r3, r1
 80097c2:	4650      	mov	r0, sl
 80097c4:	4659      	mov	r1, fp
 80097c6:	f7f6 fcd1 	bl	800016c <__adddf3>
 80097ca:	2d0f      	cmp	r5, #15
 80097cc:	4682      	mov	sl, r0
 80097ce:	468b      	mov	fp, r1
 80097d0:	ddd7      	ble.n	8009782 <_strtod_l+0x3aa>
 80097d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80097d4:	1b2c      	subs	r4, r5, r4
 80097d6:	441c      	add	r4, r3
 80097d8:	2c00      	cmp	r4, #0
 80097da:	f340 8096 	ble.w	800990a <_strtod_l+0x532>
 80097de:	f014 030f 	ands.w	r3, r4, #15
 80097e2:	d00a      	beq.n	80097fa <_strtod_l+0x422>
 80097e4:	495f      	ldr	r1, [pc, #380]	@ (8009964 <_strtod_l+0x58c>)
 80097e6:	4652      	mov	r2, sl
 80097e8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80097ec:	e9d1 0100 	ldrd	r0, r1, [r1]
 80097f0:	465b      	mov	r3, fp
 80097f2:	f7f6 fe71 	bl	80004d8 <__aeabi_dmul>
 80097f6:	4682      	mov	sl, r0
 80097f8:	468b      	mov	fp, r1
 80097fa:	f034 040f 	bics.w	r4, r4, #15
 80097fe:	d073      	beq.n	80098e8 <_strtod_l+0x510>
 8009800:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8009804:	dd48      	ble.n	8009898 <_strtod_l+0x4c0>
 8009806:	2400      	movs	r4, #0
 8009808:	46a0      	mov	r8, r4
 800980a:	46a1      	mov	r9, r4
 800980c:	940a      	str	r4, [sp, #40]	@ 0x28
 800980e:	2322      	movs	r3, #34	@ 0x22
 8009810:	f04f 0a00 	mov.w	sl, #0
 8009814:	9a05      	ldr	r2, [sp, #20]
 8009816:	f8df b144 	ldr.w	fp, [pc, #324]	@ 800995c <_strtod_l+0x584>
 800981a:	6013      	str	r3, [r2, #0]
 800981c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800981e:	2b00      	cmp	r3, #0
 8009820:	f43f ae13 	beq.w	800944a <_strtod_l+0x72>
 8009824:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009826:	9805      	ldr	r0, [sp, #20]
 8009828:	f7ff f94c 	bl	8008ac4 <_Bfree>
 800982c:	4649      	mov	r1, r9
 800982e:	9805      	ldr	r0, [sp, #20]
 8009830:	f7ff f948 	bl	8008ac4 <_Bfree>
 8009834:	4641      	mov	r1, r8
 8009836:	9805      	ldr	r0, [sp, #20]
 8009838:	f7ff f944 	bl	8008ac4 <_Bfree>
 800983c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800983e:	9805      	ldr	r0, [sp, #20]
 8009840:	f7ff f940 	bl	8008ac4 <_Bfree>
 8009844:	4621      	mov	r1, r4
 8009846:	9805      	ldr	r0, [sp, #20]
 8009848:	f7ff f93c 	bl	8008ac4 <_Bfree>
 800984c:	e5fd      	b.n	800944a <_strtod_l+0x72>
 800984e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009850:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8009854:	4293      	cmp	r3, r2
 8009856:	dbbc      	blt.n	80097d2 <_strtod_l+0x3fa>
 8009858:	4c42      	ldr	r4, [pc, #264]	@ (8009964 <_strtod_l+0x58c>)
 800985a:	f1c5 050f 	rsb	r5, r5, #15
 800985e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8009862:	4652      	mov	r2, sl
 8009864:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009868:	465b      	mov	r3, fp
 800986a:	f7f6 fe35 	bl	80004d8 <__aeabi_dmul>
 800986e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009870:	1b5d      	subs	r5, r3, r5
 8009872:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8009876:	e9d4 2300 	ldrd	r2, r3, [r4]
 800987a:	e791      	b.n	80097a0 <_strtod_l+0x3c8>
 800987c:	3316      	adds	r3, #22
 800987e:	dba8      	blt.n	80097d2 <_strtod_l+0x3fa>
 8009880:	4b38      	ldr	r3, [pc, #224]	@ (8009964 <_strtod_l+0x58c>)
 8009882:	eba9 0808 	sub.w	r8, r9, r8
 8009886:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800988a:	4650      	mov	r0, sl
 800988c:	e9d8 2300 	ldrd	r2, r3, [r8]
 8009890:	4659      	mov	r1, fp
 8009892:	f7f6 ff4b 	bl	800072c <__aeabi_ddiv>
 8009896:	e760      	b.n	800975a <_strtod_l+0x382>
 8009898:	4b33      	ldr	r3, [pc, #204]	@ (8009968 <_strtod_l+0x590>)
 800989a:	4650      	mov	r0, sl
 800989c:	9308      	str	r3, [sp, #32]
 800989e:	2300      	movs	r3, #0
 80098a0:	4659      	mov	r1, fp
 80098a2:	461e      	mov	r6, r3
 80098a4:	1124      	asrs	r4, r4, #4
 80098a6:	2c01      	cmp	r4, #1
 80098a8:	dc21      	bgt.n	80098ee <_strtod_l+0x516>
 80098aa:	b10b      	cbz	r3, 80098b0 <_strtod_l+0x4d8>
 80098ac:	4682      	mov	sl, r0
 80098ae:	468b      	mov	fp, r1
 80098b0:	492d      	ldr	r1, [pc, #180]	@ (8009968 <_strtod_l+0x590>)
 80098b2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 80098b6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 80098ba:	4652      	mov	r2, sl
 80098bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80098c0:	465b      	mov	r3, fp
 80098c2:	f7f6 fe09 	bl	80004d8 <__aeabi_dmul>
 80098c6:	4b25      	ldr	r3, [pc, #148]	@ (800995c <_strtod_l+0x584>)
 80098c8:	460a      	mov	r2, r1
 80098ca:	400b      	ands	r3, r1
 80098cc:	4927      	ldr	r1, [pc, #156]	@ (800996c <_strtod_l+0x594>)
 80098ce:	4682      	mov	sl, r0
 80098d0:	428b      	cmp	r3, r1
 80098d2:	d898      	bhi.n	8009806 <_strtod_l+0x42e>
 80098d4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 80098d8:	428b      	cmp	r3, r1
 80098da:	bf86      	itte	hi
 80098dc:	f04f 3aff 	movhi.w	sl, #4294967295
 80098e0:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 8009970 <_strtod_l+0x598>
 80098e4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 80098e8:	2300      	movs	r3, #0
 80098ea:	9308      	str	r3, [sp, #32]
 80098ec:	e07a      	b.n	80099e4 <_strtod_l+0x60c>
 80098ee:	07e2      	lsls	r2, r4, #31
 80098f0:	d505      	bpl.n	80098fe <_strtod_l+0x526>
 80098f2:	9b08      	ldr	r3, [sp, #32]
 80098f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098f8:	f7f6 fdee 	bl	80004d8 <__aeabi_dmul>
 80098fc:	2301      	movs	r3, #1
 80098fe:	9a08      	ldr	r2, [sp, #32]
 8009900:	3601      	adds	r6, #1
 8009902:	3208      	adds	r2, #8
 8009904:	1064      	asrs	r4, r4, #1
 8009906:	9208      	str	r2, [sp, #32]
 8009908:	e7cd      	b.n	80098a6 <_strtod_l+0x4ce>
 800990a:	d0ed      	beq.n	80098e8 <_strtod_l+0x510>
 800990c:	4264      	negs	r4, r4
 800990e:	f014 020f 	ands.w	r2, r4, #15
 8009912:	d00a      	beq.n	800992a <_strtod_l+0x552>
 8009914:	4b13      	ldr	r3, [pc, #76]	@ (8009964 <_strtod_l+0x58c>)
 8009916:	4650      	mov	r0, sl
 8009918:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800991c:	4659      	mov	r1, fp
 800991e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009922:	f7f6 ff03 	bl	800072c <__aeabi_ddiv>
 8009926:	4682      	mov	sl, r0
 8009928:	468b      	mov	fp, r1
 800992a:	1124      	asrs	r4, r4, #4
 800992c:	d0dc      	beq.n	80098e8 <_strtod_l+0x510>
 800992e:	2c1f      	cmp	r4, #31
 8009930:	dd20      	ble.n	8009974 <_strtod_l+0x59c>
 8009932:	2400      	movs	r4, #0
 8009934:	46a0      	mov	r8, r4
 8009936:	46a1      	mov	r9, r4
 8009938:	940a      	str	r4, [sp, #40]	@ 0x28
 800993a:	2322      	movs	r3, #34	@ 0x22
 800993c:	9a05      	ldr	r2, [sp, #20]
 800993e:	f04f 0a00 	mov.w	sl, #0
 8009942:	f04f 0b00 	mov.w	fp, #0
 8009946:	6013      	str	r3, [r2, #0]
 8009948:	e768      	b.n	800981c <_strtod_l+0x444>
 800994a:	bf00      	nop
 800994c:	0800caa3 	.word	0x0800caa3
 8009950:	0800ccb4 	.word	0x0800ccb4
 8009954:	0800ca9b 	.word	0x0800ca9b
 8009958:	0800cad0 	.word	0x0800cad0
 800995c:	7ff00000 	.word	0x7ff00000
 8009960:	0800ce78 	.word	0x0800ce78
 8009964:	0800cbe8 	.word	0x0800cbe8
 8009968:	0800cbc0 	.word	0x0800cbc0
 800996c:	7ca00000 	.word	0x7ca00000
 8009970:	7fefffff 	.word	0x7fefffff
 8009974:	f014 0310 	ands.w	r3, r4, #16
 8009978:	bf18      	it	ne
 800997a:	236a      	movne	r3, #106	@ 0x6a
 800997c:	4650      	mov	r0, sl
 800997e:	9308      	str	r3, [sp, #32]
 8009980:	4659      	mov	r1, fp
 8009982:	2300      	movs	r3, #0
 8009984:	4ea9      	ldr	r6, [pc, #676]	@ (8009c2c <_strtod_l+0x854>)
 8009986:	07e2      	lsls	r2, r4, #31
 8009988:	d504      	bpl.n	8009994 <_strtod_l+0x5bc>
 800998a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800998e:	f7f6 fda3 	bl	80004d8 <__aeabi_dmul>
 8009992:	2301      	movs	r3, #1
 8009994:	1064      	asrs	r4, r4, #1
 8009996:	f106 0608 	add.w	r6, r6, #8
 800999a:	d1f4      	bne.n	8009986 <_strtod_l+0x5ae>
 800999c:	b10b      	cbz	r3, 80099a2 <_strtod_l+0x5ca>
 800999e:	4682      	mov	sl, r0
 80099a0:	468b      	mov	fp, r1
 80099a2:	9b08      	ldr	r3, [sp, #32]
 80099a4:	b1b3      	cbz	r3, 80099d4 <_strtod_l+0x5fc>
 80099a6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80099aa:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	4659      	mov	r1, fp
 80099b2:	dd0f      	ble.n	80099d4 <_strtod_l+0x5fc>
 80099b4:	2b1f      	cmp	r3, #31
 80099b6:	dd57      	ble.n	8009a68 <_strtod_l+0x690>
 80099b8:	2b34      	cmp	r3, #52	@ 0x34
 80099ba:	bfd8      	it	le
 80099bc:	f04f 33ff 	movle.w	r3, #4294967295
 80099c0:	f04f 0a00 	mov.w	sl, #0
 80099c4:	bfcf      	iteee	gt
 80099c6:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 80099ca:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 80099ce:	4093      	lslle	r3, r2
 80099d0:	ea03 0b01 	andle.w	fp, r3, r1
 80099d4:	2200      	movs	r2, #0
 80099d6:	2300      	movs	r3, #0
 80099d8:	4650      	mov	r0, sl
 80099da:	4659      	mov	r1, fp
 80099dc:	f7f6 ffe4 	bl	80009a8 <__aeabi_dcmpeq>
 80099e0:	2800      	cmp	r0, #0
 80099e2:	d1a6      	bne.n	8009932 <_strtod_l+0x55a>
 80099e4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80099e6:	463a      	mov	r2, r7
 80099e8:	9300      	str	r3, [sp, #0]
 80099ea:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80099ec:	462b      	mov	r3, r5
 80099ee:	9805      	ldr	r0, [sp, #20]
 80099f0:	f7ff f8d0 	bl	8008b94 <__s2b>
 80099f4:	900a      	str	r0, [sp, #40]	@ 0x28
 80099f6:	2800      	cmp	r0, #0
 80099f8:	f43f af05 	beq.w	8009806 <_strtod_l+0x42e>
 80099fc:	2400      	movs	r4, #0
 80099fe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009a00:	eba9 0308 	sub.w	r3, r9, r8
 8009a04:	2a00      	cmp	r2, #0
 8009a06:	bfa8      	it	ge
 8009a08:	2300      	movge	r3, #0
 8009a0a:	46a0      	mov	r8, r4
 8009a0c:	9312      	str	r3, [sp, #72]	@ 0x48
 8009a0e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8009a12:	9316      	str	r3, [sp, #88]	@ 0x58
 8009a14:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009a16:	9805      	ldr	r0, [sp, #20]
 8009a18:	6859      	ldr	r1, [r3, #4]
 8009a1a:	f7ff f813 	bl	8008a44 <_Balloc>
 8009a1e:	4681      	mov	r9, r0
 8009a20:	2800      	cmp	r0, #0
 8009a22:	f43f aef4 	beq.w	800980e <_strtod_l+0x436>
 8009a26:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009a28:	300c      	adds	r0, #12
 8009a2a:	691a      	ldr	r2, [r3, #16]
 8009a2c:	f103 010c 	add.w	r1, r3, #12
 8009a30:	3202      	adds	r2, #2
 8009a32:	0092      	lsls	r2, r2, #2
 8009a34:	f001 f8ee 	bl	800ac14 <memcpy>
 8009a38:	ab1c      	add	r3, sp, #112	@ 0x70
 8009a3a:	9301      	str	r3, [sp, #4]
 8009a3c:	ab1b      	add	r3, sp, #108	@ 0x6c
 8009a3e:	9300      	str	r3, [sp, #0]
 8009a40:	4652      	mov	r2, sl
 8009a42:	465b      	mov	r3, fp
 8009a44:	9805      	ldr	r0, [sp, #20]
 8009a46:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8009a4a:	f7ff fbd5 	bl	80091f8 <__d2b>
 8009a4e:	901a      	str	r0, [sp, #104]	@ 0x68
 8009a50:	2800      	cmp	r0, #0
 8009a52:	f43f aedc 	beq.w	800980e <_strtod_l+0x436>
 8009a56:	2101      	movs	r1, #1
 8009a58:	9805      	ldr	r0, [sp, #20]
 8009a5a:	f7ff f931 	bl	8008cc0 <__i2b>
 8009a5e:	4680      	mov	r8, r0
 8009a60:	b948      	cbnz	r0, 8009a76 <_strtod_l+0x69e>
 8009a62:	f04f 0800 	mov.w	r8, #0
 8009a66:	e6d2      	b.n	800980e <_strtod_l+0x436>
 8009a68:	f04f 32ff 	mov.w	r2, #4294967295
 8009a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8009a70:	ea03 0a0a 	and.w	sl, r3, sl
 8009a74:	e7ae      	b.n	80099d4 <_strtod_l+0x5fc>
 8009a76:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8009a78:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8009a7a:	2d00      	cmp	r5, #0
 8009a7c:	bfab      	itete	ge
 8009a7e:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8009a80:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8009a82:	18ef      	addge	r7, r5, r3
 8009a84:	1b5e      	sublt	r6, r3, r5
 8009a86:	9b08      	ldr	r3, [sp, #32]
 8009a88:	bfa8      	it	ge
 8009a8a:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8009a8c:	eba5 0503 	sub.w	r5, r5, r3
 8009a90:	4415      	add	r5, r2
 8009a92:	4b67      	ldr	r3, [pc, #412]	@ (8009c30 <_strtod_l+0x858>)
 8009a94:	f105 35ff 	add.w	r5, r5, #4294967295
 8009a98:	bfb8      	it	lt
 8009a9a:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8009a9c:	429d      	cmp	r5, r3
 8009a9e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8009aa2:	da50      	bge.n	8009b46 <_strtod_l+0x76e>
 8009aa4:	1b5b      	subs	r3, r3, r5
 8009aa6:	2b1f      	cmp	r3, #31
 8009aa8:	f04f 0101 	mov.w	r1, #1
 8009aac:	eba2 0203 	sub.w	r2, r2, r3
 8009ab0:	dc3d      	bgt.n	8009b2e <_strtod_l+0x756>
 8009ab2:	fa01 f303 	lsl.w	r3, r1, r3
 8009ab6:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009ab8:	2300      	movs	r3, #0
 8009aba:	9310      	str	r3, [sp, #64]	@ 0x40
 8009abc:	18bd      	adds	r5, r7, r2
 8009abe:	9b08      	ldr	r3, [sp, #32]
 8009ac0:	42af      	cmp	r7, r5
 8009ac2:	4416      	add	r6, r2
 8009ac4:	441e      	add	r6, r3
 8009ac6:	463b      	mov	r3, r7
 8009ac8:	bfa8      	it	ge
 8009aca:	462b      	movge	r3, r5
 8009acc:	42b3      	cmp	r3, r6
 8009ace:	bfa8      	it	ge
 8009ad0:	4633      	movge	r3, r6
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	bfc2      	ittt	gt
 8009ad6:	1aed      	subgt	r5, r5, r3
 8009ad8:	1af6      	subgt	r6, r6, r3
 8009ada:	1aff      	subgt	r7, r7, r3
 8009adc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	dd16      	ble.n	8009b10 <_strtod_l+0x738>
 8009ae2:	4641      	mov	r1, r8
 8009ae4:	461a      	mov	r2, r3
 8009ae6:	9805      	ldr	r0, [sp, #20]
 8009ae8:	f7ff f9a8 	bl	8008e3c <__pow5mult>
 8009aec:	4680      	mov	r8, r0
 8009aee:	2800      	cmp	r0, #0
 8009af0:	d0b7      	beq.n	8009a62 <_strtod_l+0x68a>
 8009af2:	4601      	mov	r1, r0
 8009af4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8009af6:	9805      	ldr	r0, [sp, #20]
 8009af8:	f7ff f8f8 	bl	8008cec <__multiply>
 8009afc:	900e      	str	r0, [sp, #56]	@ 0x38
 8009afe:	2800      	cmp	r0, #0
 8009b00:	f43f ae85 	beq.w	800980e <_strtod_l+0x436>
 8009b04:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009b06:	9805      	ldr	r0, [sp, #20]
 8009b08:	f7fe ffdc 	bl	8008ac4 <_Bfree>
 8009b0c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009b0e:	931a      	str	r3, [sp, #104]	@ 0x68
 8009b10:	2d00      	cmp	r5, #0
 8009b12:	dc1d      	bgt.n	8009b50 <_strtod_l+0x778>
 8009b14:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	dd23      	ble.n	8009b62 <_strtod_l+0x78a>
 8009b1a:	4649      	mov	r1, r9
 8009b1c:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8009b1e:	9805      	ldr	r0, [sp, #20]
 8009b20:	f7ff f98c 	bl	8008e3c <__pow5mult>
 8009b24:	4681      	mov	r9, r0
 8009b26:	b9e0      	cbnz	r0, 8009b62 <_strtod_l+0x78a>
 8009b28:	f04f 0900 	mov.w	r9, #0
 8009b2c:	e66f      	b.n	800980e <_strtod_l+0x436>
 8009b2e:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8009b32:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8009b36:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8009b3a:	35e2      	adds	r5, #226	@ 0xe2
 8009b3c:	fa01 f305 	lsl.w	r3, r1, r5
 8009b40:	9310      	str	r3, [sp, #64]	@ 0x40
 8009b42:	9113      	str	r1, [sp, #76]	@ 0x4c
 8009b44:	e7ba      	b.n	8009abc <_strtod_l+0x6e4>
 8009b46:	2300      	movs	r3, #0
 8009b48:	9310      	str	r3, [sp, #64]	@ 0x40
 8009b4a:	2301      	movs	r3, #1
 8009b4c:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009b4e:	e7b5      	b.n	8009abc <_strtod_l+0x6e4>
 8009b50:	462a      	mov	r2, r5
 8009b52:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009b54:	9805      	ldr	r0, [sp, #20]
 8009b56:	f7ff f9cb 	bl	8008ef0 <__lshift>
 8009b5a:	901a      	str	r0, [sp, #104]	@ 0x68
 8009b5c:	2800      	cmp	r0, #0
 8009b5e:	d1d9      	bne.n	8009b14 <_strtod_l+0x73c>
 8009b60:	e655      	b.n	800980e <_strtod_l+0x436>
 8009b62:	2e00      	cmp	r6, #0
 8009b64:	dd07      	ble.n	8009b76 <_strtod_l+0x79e>
 8009b66:	4649      	mov	r1, r9
 8009b68:	4632      	mov	r2, r6
 8009b6a:	9805      	ldr	r0, [sp, #20]
 8009b6c:	f7ff f9c0 	bl	8008ef0 <__lshift>
 8009b70:	4681      	mov	r9, r0
 8009b72:	2800      	cmp	r0, #0
 8009b74:	d0d8      	beq.n	8009b28 <_strtod_l+0x750>
 8009b76:	2f00      	cmp	r7, #0
 8009b78:	dd08      	ble.n	8009b8c <_strtod_l+0x7b4>
 8009b7a:	4641      	mov	r1, r8
 8009b7c:	463a      	mov	r2, r7
 8009b7e:	9805      	ldr	r0, [sp, #20]
 8009b80:	f7ff f9b6 	bl	8008ef0 <__lshift>
 8009b84:	4680      	mov	r8, r0
 8009b86:	2800      	cmp	r0, #0
 8009b88:	f43f ae41 	beq.w	800980e <_strtod_l+0x436>
 8009b8c:	464a      	mov	r2, r9
 8009b8e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009b90:	9805      	ldr	r0, [sp, #20]
 8009b92:	f7ff fa35 	bl	8009000 <__mdiff>
 8009b96:	4604      	mov	r4, r0
 8009b98:	2800      	cmp	r0, #0
 8009b9a:	f43f ae38 	beq.w	800980e <_strtod_l+0x436>
 8009b9e:	68c3      	ldr	r3, [r0, #12]
 8009ba0:	4641      	mov	r1, r8
 8009ba2:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009ba4:	2300      	movs	r3, #0
 8009ba6:	60c3      	str	r3, [r0, #12]
 8009ba8:	f7ff fa0e 	bl	8008fc8 <__mcmp>
 8009bac:	2800      	cmp	r0, #0
 8009bae:	da45      	bge.n	8009c3c <_strtod_l+0x864>
 8009bb0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009bb2:	ea53 030a 	orrs.w	r3, r3, sl
 8009bb6:	d16b      	bne.n	8009c90 <_strtod_l+0x8b8>
 8009bb8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d167      	bne.n	8009c90 <_strtod_l+0x8b8>
 8009bc0:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009bc4:	0d1b      	lsrs	r3, r3, #20
 8009bc6:	051b      	lsls	r3, r3, #20
 8009bc8:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8009bcc:	d960      	bls.n	8009c90 <_strtod_l+0x8b8>
 8009bce:	6963      	ldr	r3, [r4, #20]
 8009bd0:	b913      	cbnz	r3, 8009bd8 <_strtod_l+0x800>
 8009bd2:	6923      	ldr	r3, [r4, #16]
 8009bd4:	2b01      	cmp	r3, #1
 8009bd6:	dd5b      	ble.n	8009c90 <_strtod_l+0x8b8>
 8009bd8:	4621      	mov	r1, r4
 8009bda:	2201      	movs	r2, #1
 8009bdc:	9805      	ldr	r0, [sp, #20]
 8009bde:	f7ff f987 	bl	8008ef0 <__lshift>
 8009be2:	4641      	mov	r1, r8
 8009be4:	4604      	mov	r4, r0
 8009be6:	f7ff f9ef 	bl	8008fc8 <__mcmp>
 8009bea:	2800      	cmp	r0, #0
 8009bec:	dd50      	ble.n	8009c90 <_strtod_l+0x8b8>
 8009bee:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009bf2:	9a08      	ldr	r2, [sp, #32]
 8009bf4:	0d1b      	lsrs	r3, r3, #20
 8009bf6:	051b      	lsls	r3, r3, #20
 8009bf8:	2a00      	cmp	r2, #0
 8009bfa:	d06a      	beq.n	8009cd2 <_strtod_l+0x8fa>
 8009bfc:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8009c00:	d867      	bhi.n	8009cd2 <_strtod_l+0x8fa>
 8009c02:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8009c06:	f67f ae98 	bls.w	800993a <_strtod_l+0x562>
 8009c0a:	4650      	mov	r0, sl
 8009c0c:	4659      	mov	r1, fp
 8009c0e:	4b09      	ldr	r3, [pc, #36]	@ (8009c34 <_strtod_l+0x85c>)
 8009c10:	2200      	movs	r2, #0
 8009c12:	f7f6 fc61 	bl	80004d8 <__aeabi_dmul>
 8009c16:	4b08      	ldr	r3, [pc, #32]	@ (8009c38 <_strtod_l+0x860>)
 8009c18:	4682      	mov	sl, r0
 8009c1a:	400b      	ands	r3, r1
 8009c1c:	468b      	mov	fp, r1
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	f47f ae00 	bne.w	8009824 <_strtod_l+0x44c>
 8009c24:	2322      	movs	r3, #34	@ 0x22
 8009c26:	9a05      	ldr	r2, [sp, #20]
 8009c28:	6013      	str	r3, [r2, #0]
 8009c2a:	e5fb      	b.n	8009824 <_strtod_l+0x44c>
 8009c2c:	0800cce0 	.word	0x0800cce0
 8009c30:	fffffc02 	.word	0xfffffc02
 8009c34:	39500000 	.word	0x39500000
 8009c38:	7ff00000 	.word	0x7ff00000
 8009c3c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8009c40:	d165      	bne.n	8009d0e <_strtod_l+0x936>
 8009c42:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8009c44:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009c48:	b35a      	cbz	r2, 8009ca2 <_strtod_l+0x8ca>
 8009c4a:	4a99      	ldr	r2, [pc, #612]	@ (8009eb0 <_strtod_l+0xad8>)
 8009c4c:	4293      	cmp	r3, r2
 8009c4e:	d12b      	bne.n	8009ca8 <_strtod_l+0x8d0>
 8009c50:	9b08      	ldr	r3, [sp, #32]
 8009c52:	4651      	mov	r1, sl
 8009c54:	b303      	cbz	r3, 8009c98 <_strtod_l+0x8c0>
 8009c56:	465a      	mov	r2, fp
 8009c58:	4b96      	ldr	r3, [pc, #600]	@ (8009eb4 <_strtod_l+0xadc>)
 8009c5a:	4013      	ands	r3, r2
 8009c5c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8009c60:	f04f 32ff 	mov.w	r2, #4294967295
 8009c64:	d81b      	bhi.n	8009c9e <_strtod_l+0x8c6>
 8009c66:	0d1b      	lsrs	r3, r3, #20
 8009c68:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8009c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8009c70:	4299      	cmp	r1, r3
 8009c72:	d119      	bne.n	8009ca8 <_strtod_l+0x8d0>
 8009c74:	4b90      	ldr	r3, [pc, #576]	@ (8009eb8 <_strtod_l+0xae0>)
 8009c76:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009c78:	429a      	cmp	r2, r3
 8009c7a:	d102      	bne.n	8009c82 <_strtod_l+0x8aa>
 8009c7c:	3101      	adds	r1, #1
 8009c7e:	f43f adc6 	beq.w	800980e <_strtod_l+0x436>
 8009c82:	f04f 0a00 	mov.w	sl, #0
 8009c86:	4b8b      	ldr	r3, [pc, #556]	@ (8009eb4 <_strtod_l+0xadc>)
 8009c88:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009c8a:	401a      	ands	r2, r3
 8009c8c:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8009c90:	9b08      	ldr	r3, [sp, #32]
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d1b9      	bne.n	8009c0a <_strtod_l+0x832>
 8009c96:	e5c5      	b.n	8009824 <_strtod_l+0x44c>
 8009c98:	f04f 33ff 	mov.w	r3, #4294967295
 8009c9c:	e7e8      	b.n	8009c70 <_strtod_l+0x898>
 8009c9e:	4613      	mov	r3, r2
 8009ca0:	e7e6      	b.n	8009c70 <_strtod_l+0x898>
 8009ca2:	ea53 030a 	orrs.w	r3, r3, sl
 8009ca6:	d0a2      	beq.n	8009bee <_strtod_l+0x816>
 8009ca8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009caa:	b1db      	cbz	r3, 8009ce4 <_strtod_l+0x90c>
 8009cac:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009cae:	4213      	tst	r3, r2
 8009cb0:	d0ee      	beq.n	8009c90 <_strtod_l+0x8b8>
 8009cb2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009cb4:	4650      	mov	r0, sl
 8009cb6:	4659      	mov	r1, fp
 8009cb8:	9a08      	ldr	r2, [sp, #32]
 8009cba:	b1bb      	cbz	r3, 8009cec <_strtod_l+0x914>
 8009cbc:	f7ff fb68 	bl	8009390 <sulp>
 8009cc0:	4602      	mov	r2, r0
 8009cc2:	460b      	mov	r3, r1
 8009cc4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009cc8:	f7f6 fa50 	bl	800016c <__adddf3>
 8009ccc:	4682      	mov	sl, r0
 8009cce:	468b      	mov	fp, r1
 8009cd0:	e7de      	b.n	8009c90 <_strtod_l+0x8b8>
 8009cd2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8009cd6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8009cda:	f04f 3aff 	mov.w	sl, #4294967295
 8009cde:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8009ce2:	e7d5      	b.n	8009c90 <_strtod_l+0x8b8>
 8009ce4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009ce6:	ea13 0f0a 	tst.w	r3, sl
 8009cea:	e7e1      	b.n	8009cb0 <_strtod_l+0x8d8>
 8009cec:	f7ff fb50 	bl	8009390 <sulp>
 8009cf0:	4602      	mov	r2, r0
 8009cf2:	460b      	mov	r3, r1
 8009cf4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009cf8:	f7f6 fa36 	bl	8000168 <__aeabi_dsub>
 8009cfc:	2200      	movs	r2, #0
 8009cfe:	2300      	movs	r3, #0
 8009d00:	4682      	mov	sl, r0
 8009d02:	468b      	mov	fp, r1
 8009d04:	f7f6 fe50 	bl	80009a8 <__aeabi_dcmpeq>
 8009d08:	2800      	cmp	r0, #0
 8009d0a:	d0c1      	beq.n	8009c90 <_strtod_l+0x8b8>
 8009d0c:	e615      	b.n	800993a <_strtod_l+0x562>
 8009d0e:	4641      	mov	r1, r8
 8009d10:	4620      	mov	r0, r4
 8009d12:	f7ff fac9 	bl	80092a8 <__ratio>
 8009d16:	2200      	movs	r2, #0
 8009d18:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8009d1c:	4606      	mov	r6, r0
 8009d1e:	460f      	mov	r7, r1
 8009d20:	f7f6 fe56 	bl	80009d0 <__aeabi_dcmple>
 8009d24:	2800      	cmp	r0, #0
 8009d26:	d06d      	beq.n	8009e04 <_strtod_l+0xa2c>
 8009d28:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d178      	bne.n	8009e20 <_strtod_l+0xa48>
 8009d2e:	f1ba 0f00 	cmp.w	sl, #0
 8009d32:	d156      	bne.n	8009de2 <_strtod_l+0xa0a>
 8009d34:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009d36:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d158      	bne.n	8009df0 <_strtod_l+0xa18>
 8009d3e:	2200      	movs	r2, #0
 8009d40:	4630      	mov	r0, r6
 8009d42:	4639      	mov	r1, r7
 8009d44:	4b5d      	ldr	r3, [pc, #372]	@ (8009ebc <_strtod_l+0xae4>)
 8009d46:	f7f6 fe39 	bl	80009bc <__aeabi_dcmplt>
 8009d4a:	2800      	cmp	r0, #0
 8009d4c:	d157      	bne.n	8009dfe <_strtod_l+0xa26>
 8009d4e:	4630      	mov	r0, r6
 8009d50:	4639      	mov	r1, r7
 8009d52:	2200      	movs	r2, #0
 8009d54:	4b5a      	ldr	r3, [pc, #360]	@ (8009ec0 <_strtod_l+0xae8>)
 8009d56:	f7f6 fbbf 	bl	80004d8 <__aeabi_dmul>
 8009d5a:	4606      	mov	r6, r0
 8009d5c:	460f      	mov	r7, r1
 8009d5e:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8009d62:	9606      	str	r6, [sp, #24]
 8009d64:	9307      	str	r3, [sp, #28]
 8009d66:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009d6a:	4d52      	ldr	r5, [pc, #328]	@ (8009eb4 <_strtod_l+0xadc>)
 8009d6c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8009d70:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009d72:	401d      	ands	r5, r3
 8009d74:	4b53      	ldr	r3, [pc, #332]	@ (8009ec4 <_strtod_l+0xaec>)
 8009d76:	429d      	cmp	r5, r3
 8009d78:	f040 80aa 	bne.w	8009ed0 <_strtod_l+0xaf8>
 8009d7c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009d7e:	4650      	mov	r0, sl
 8009d80:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8009d84:	4659      	mov	r1, fp
 8009d86:	f7ff f9cf 	bl	8009128 <__ulp>
 8009d8a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009d8e:	f7f6 fba3 	bl	80004d8 <__aeabi_dmul>
 8009d92:	4652      	mov	r2, sl
 8009d94:	465b      	mov	r3, fp
 8009d96:	f7f6 f9e9 	bl	800016c <__adddf3>
 8009d9a:	460b      	mov	r3, r1
 8009d9c:	4945      	ldr	r1, [pc, #276]	@ (8009eb4 <_strtod_l+0xadc>)
 8009d9e:	4a4a      	ldr	r2, [pc, #296]	@ (8009ec8 <_strtod_l+0xaf0>)
 8009da0:	4019      	ands	r1, r3
 8009da2:	4291      	cmp	r1, r2
 8009da4:	4682      	mov	sl, r0
 8009da6:	d942      	bls.n	8009e2e <_strtod_l+0xa56>
 8009da8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009daa:	4b43      	ldr	r3, [pc, #268]	@ (8009eb8 <_strtod_l+0xae0>)
 8009dac:	429a      	cmp	r2, r3
 8009dae:	d103      	bne.n	8009db8 <_strtod_l+0x9e0>
 8009db0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009db2:	3301      	adds	r3, #1
 8009db4:	f43f ad2b 	beq.w	800980e <_strtod_l+0x436>
 8009db8:	f04f 3aff 	mov.w	sl, #4294967295
 8009dbc:	f8df b0f8 	ldr.w	fp, [pc, #248]	@ 8009eb8 <_strtod_l+0xae0>
 8009dc0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009dc2:	9805      	ldr	r0, [sp, #20]
 8009dc4:	f7fe fe7e 	bl	8008ac4 <_Bfree>
 8009dc8:	4649      	mov	r1, r9
 8009dca:	9805      	ldr	r0, [sp, #20]
 8009dcc:	f7fe fe7a 	bl	8008ac4 <_Bfree>
 8009dd0:	4641      	mov	r1, r8
 8009dd2:	9805      	ldr	r0, [sp, #20]
 8009dd4:	f7fe fe76 	bl	8008ac4 <_Bfree>
 8009dd8:	4621      	mov	r1, r4
 8009dda:	9805      	ldr	r0, [sp, #20]
 8009ddc:	f7fe fe72 	bl	8008ac4 <_Bfree>
 8009de0:	e618      	b.n	8009a14 <_strtod_l+0x63c>
 8009de2:	f1ba 0f01 	cmp.w	sl, #1
 8009de6:	d103      	bne.n	8009df0 <_strtod_l+0xa18>
 8009de8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	f43f ada5 	beq.w	800993a <_strtod_l+0x562>
 8009df0:	2200      	movs	r2, #0
 8009df2:	4b36      	ldr	r3, [pc, #216]	@ (8009ecc <_strtod_l+0xaf4>)
 8009df4:	2600      	movs	r6, #0
 8009df6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009dfa:	4f30      	ldr	r7, [pc, #192]	@ (8009ebc <_strtod_l+0xae4>)
 8009dfc:	e7b3      	b.n	8009d66 <_strtod_l+0x98e>
 8009dfe:	2600      	movs	r6, #0
 8009e00:	4f2f      	ldr	r7, [pc, #188]	@ (8009ec0 <_strtod_l+0xae8>)
 8009e02:	e7ac      	b.n	8009d5e <_strtod_l+0x986>
 8009e04:	4630      	mov	r0, r6
 8009e06:	4639      	mov	r1, r7
 8009e08:	4b2d      	ldr	r3, [pc, #180]	@ (8009ec0 <_strtod_l+0xae8>)
 8009e0a:	2200      	movs	r2, #0
 8009e0c:	f7f6 fb64 	bl	80004d8 <__aeabi_dmul>
 8009e10:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009e12:	4606      	mov	r6, r0
 8009e14:	460f      	mov	r7, r1
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d0a1      	beq.n	8009d5e <_strtod_l+0x986>
 8009e1a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8009e1e:	e7a2      	b.n	8009d66 <_strtod_l+0x98e>
 8009e20:	2200      	movs	r2, #0
 8009e22:	4b26      	ldr	r3, [pc, #152]	@ (8009ebc <_strtod_l+0xae4>)
 8009e24:	4616      	mov	r6, r2
 8009e26:	461f      	mov	r7, r3
 8009e28:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009e2c:	e79b      	b.n	8009d66 <_strtod_l+0x98e>
 8009e2e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8009e32:	9b08      	ldr	r3, [sp, #32]
 8009e34:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d1c1      	bne.n	8009dc0 <_strtod_l+0x9e8>
 8009e3c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009e40:	0d1b      	lsrs	r3, r3, #20
 8009e42:	051b      	lsls	r3, r3, #20
 8009e44:	429d      	cmp	r5, r3
 8009e46:	d1bb      	bne.n	8009dc0 <_strtod_l+0x9e8>
 8009e48:	4630      	mov	r0, r6
 8009e4a:	4639      	mov	r1, r7
 8009e4c:	f7f7 f9f6 	bl	800123c <__aeabi_d2lz>
 8009e50:	f7f6 fb14 	bl	800047c <__aeabi_l2d>
 8009e54:	4602      	mov	r2, r0
 8009e56:	460b      	mov	r3, r1
 8009e58:	4630      	mov	r0, r6
 8009e5a:	4639      	mov	r1, r7
 8009e5c:	f7f6 f984 	bl	8000168 <__aeabi_dsub>
 8009e60:	460b      	mov	r3, r1
 8009e62:	4602      	mov	r2, r0
 8009e64:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8009e68:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8009e6c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009e6e:	ea46 060a 	orr.w	r6, r6, sl
 8009e72:	431e      	orrs	r6, r3
 8009e74:	d069      	beq.n	8009f4a <_strtod_l+0xb72>
 8009e76:	a30a      	add	r3, pc, #40	@ (adr r3, 8009ea0 <_strtod_l+0xac8>)
 8009e78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e7c:	f7f6 fd9e 	bl	80009bc <__aeabi_dcmplt>
 8009e80:	2800      	cmp	r0, #0
 8009e82:	f47f accf 	bne.w	8009824 <_strtod_l+0x44c>
 8009e86:	a308      	add	r3, pc, #32	@ (adr r3, 8009ea8 <_strtod_l+0xad0>)
 8009e88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e8c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009e90:	f7f6 fdb2 	bl	80009f8 <__aeabi_dcmpgt>
 8009e94:	2800      	cmp	r0, #0
 8009e96:	d093      	beq.n	8009dc0 <_strtod_l+0x9e8>
 8009e98:	e4c4      	b.n	8009824 <_strtod_l+0x44c>
 8009e9a:	bf00      	nop
 8009e9c:	f3af 8000 	nop.w
 8009ea0:	94a03595 	.word	0x94a03595
 8009ea4:	3fdfffff 	.word	0x3fdfffff
 8009ea8:	35afe535 	.word	0x35afe535
 8009eac:	3fe00000 	.word	0x3fe00000
 8009eb0:	000fffff 	.word	0x000fffff
 8009eb4:	7ff00000 	.word	0x7ff00000
 8009eb8:	7fefffff 	.word	0x7fefffff
 8009ebc:	3ff00000 	.word	0x3ff00000
 8009ec0:	3fe00000 	.word	0x3fe00000
 8009ec4:	7fe00000 	.word	0x7fe00000
 8009ec8:	7c9fffff 	.word	0x7c9fffff
 8009ecc:	bff00000 	.word	0xbff00000
 8009ed0:	9b08      	ldr	r3, [sp, #32]
 8009ed2:	b323      	cbz	r3, 8009f1e <_strtod_l+0xb46>
 8009ed4:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8009ed8:	d821      	bhi.n	8009f1e <_strtod_l+0xb46>
 8009eda:	a327      	add	r3, pc, #156	@ (adr r3, 8009f78 <_strtod_l+0xba0>)
 8009edc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ee0:	4630      	mov	r0, r6
 8009ee2:	4639      	mov	r1, r7
 8009ee4:	f7f6 fd74 	bl	80009d0 <__aeabi_dcmple>
 8009ee8:	b1a0      	cbz	r0, 8009f14 <_strtod_l+0xb3c>
 8009eea:	4639      	mov	r1, r7
 8009eec:	4630      	mov	r0, r6
 8009eee:	f7f6 fdcb 	bl	8000a88 <__aeabi_d2uiz>
 8009ef2:	2801      	cmp	r0, #1
 8009ef4:	bf38      	it	cc
 8009ef6:	2001      	movcc	r0, #1
 8009ef8:	f7f6 fa74 	bl	80003e4 <__aeabi_ui2d>
 8009efc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009efe:	4606      	mov	r6, r0
 8009f00:	460f      	mov	r7, r1
 8009f02:	b9fb      	cbnz	r3, 8009f44 <_strtod_l+0xb6c>
 8009f04:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009f08:	9014      	str	r0, [sp, #80]	@ 0x50
 8009f0a:	9315      	str	r3, [sp, #84]	@ 0x54
 8009f0c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8009f10:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8009f14:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009f16:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8009f1a:	1b5b      	subs	r3, r3, r5
 8009f1c:	9311      	str	r3, [sp, #68]	@ 0x44
 8009f1e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009f22:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8009f26:	f7ff f8ff 	bl	8009128 <__ulp>
 8009f2a:	4602      	mov	r2, r0
 8009f2c:	460b      	mov	r3, r1
 8009f2e:	4650      	mov	r0, sl
 8009f30:	4659      	mov	r1, fp
 8009f32:	f7f6 fad1 	bl	80004d8 <__aeabi_dmul>
 8009f36:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8009f3a:	f7f6 f917 	bl	800016c <__adddf3>
 8009f3e:	4682      	mov	sl, r0
 8009f40:	468b      	mov	fp, r1
 8009f42:	e776      	b.n	8009e32 <_strtod_l+0xa5a>
 8009f44:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8009f48:	e7e0      	b.n	8009f0c <_strtod_l+0xb34>
 8009f4a:	a30d      	add	r3, pc, #52	@ (adr r3, 8009f80 <_strtod_l+0xba8>)
 8009f4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f50:	f7f6 fd34 	bl	80009bc <__aeabi_dcmplt>
 8009f54:	e79e      	b.n	8009e94 <_strtod_l+0xabc>
 8009f56:	2300      	movs	r3, #0
 8009f58:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009f5a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009f5c:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8009f5e:	6013      	str	r3, [r2, #0]
 8009f60:	f7ff ba77 	b.w	8009452 <_strtod_l+0x7a>
 8009f64:	2a65      	cmp	r2, #101	@ 0x65
 8009f66:	f43f ab6e 	beq.w	8009646 <_strtod_l+0x26e>
 8009f6a:	2a45      	cmp	r2, #69	@ 0x45
 8009f6c:	f43f ab6b 	beq.w	8009646 <_strtod_l+0x26e>
 8009f70:	2301      	movs	r3, #1
 8009f72:	f7ff bba6 	b.w	80096c2 <_strtod_l+0x2ea>
 8009f76:	bf00      	nop
 8009f78:	ffc00000 	.word	0xffc00000
 8009f7c:	41dfffff 	.word	0x41dfffff
 8009f80:	94a03595 	.word	0x94a03595
 8009f84:	3fcfffff 	.word	0x3fcfffff

08009f88 <_strtod_r>:
 8009f88:	4b01      	ldr	r3, [pc, #4]	@ (8009f90 <_strtod_r+0x8>)
 8009f8a:	f7ff ba25 	b.w	80093d8 <_strtod_l>
 8009f8e:	bf00      	nop
 8009f90:	2000006c 	.word	0x2000006c

08009f94 <_strtol_l.constprop.0>:
 8009f94:	2b24      	cmp	r3, #36	@ 0x24
 8009f96:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f9a:	4686      	mov	lr, r0
 8009f9c:	4690      	mov	r8, r2
 8009f9e:	d801      	bhi.n	8009fa4 <_strtol_l.constprop.0+0x10>
 8009fa0:	2b01      	cmp	r3, #1
 8009fa2:	d106      	bne.n	8009fb2 <_strtol_l.constprop.0+0x1e>
 8009fa4:	f7fd fdbe 	bl	8007b24 <__errno>
 8009fa8:	2316      	movs	r3, #22
 8009faa:	6003      	str	r3, [r0, #0]
 8009fac:	2000      	movs	r0, #0
 8009fae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009fb2:	460d      	mov	r5, r1
 8009fb4:	4833      	ldr	r0, [pc, #204]	@ (800a084 <_strtol_l.constprop.0+0xf0>)
 8009fb6:	462a      	mov	r2, r5
 8009fb8:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009fbc:	5d06      	ldrb	r6, [r0, r4]
 8009fbe:	f016 0608 	ands.w	r6, r6, #8
 8009fc2:	d1f8      	bne.n	8009fb6 <_strtol_l.constprop.0+0x22>
 8009fc4:	2c2d      	cmp	r4, #45	@ 0x2d
 8009fc6:	d12d      	bne.n	800a024 <_strtol_l.constprop.0+0x90>
 8009fc8:	2601      	movs	r6, #1
 8009fca:	782c      	ldrb	r4, [r5, #0]
 8009fcc:	1c95      	adds	r5, r2, #2
 8009fce:	f033 0210 	bics.w	r2, r3, #16
 8009fd2:	d109      	bne.n	8009fe8 <_strtol_l.constprop.0+0x54>
 8009fd4:	2c30      	cmp	r4, #48	@ 0x30
 8009fd6:	d12a      	bne.n	800a02e <_strtol_l.constprop.0+0x9a>
 8009fd8:	782a      	ldrb	r2, [r5, #0]
 8009fda:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009fde:	2a58      	cmp	r2, #88	@ 0x58
 8009fe0:	d125      	bne.n	800a02e <_strtol_l.constprop.0+0x9a>
 8009fe2:	2310      	movs	r3, #16
 8009fe4:	786c      	ldrb	r4, [r5, #1]
 8009fe6:	3502      	adds	r5, #2
 8009fe8:	2200      	movs	r2, #0
 8009fea:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8009fee:	f10c 3cff 	add.w	ip, ip, #4294967295
 8009ff2:	fbbc f9f3 	udiv	r9, ip, r3
 8009ff6:	4610      	mov	r0, r2
 8009ff8:	fb03 ca19 	mls	sl, r3, r9, ip
 8009ffc:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800a000:	2f09      	cmp	r7, #9
 800a002:	d81b      	bhi.n	800a03c <_strtol_l.constprop.0+0xa8>
 800a004:	463c      	mov	r4, r7
 800a006:	42a3      	cmp	r3, r4
 800a008:	dd27      	ble.n	800a05a <_strtol_l.constprop.0+0xc6>
 800a00a:	1c57      	adds	r7, r2, #1
 800a00c:	d007      	beq.n	800a01e <_strtol_l.constprop.0+0x8a>
 800a00e:	4581      	cmp	r9, r0
 800a010:	d320      	bcc.n	800a054 <_strtol_l.constprop.0+0xc0>
 800a012:	d101      	bne.n	800a018 <_strtol_l.constprop.0+0x84>
 800a014:	45a2      	cmp	sl, r4
 800a016:	db1d      	blt.n	800a054 <_strtol_l.constprop.0+0xc0>
 800a018:	2201      	movs	r2, #1
 800a01a:	fb00 4003 	mla	r0, r0, r3, r4
 800a01e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a022:	e7eb      	b.n	8009ffc <_strtol_l.constprop.0+0x68>
 800a024:	2c2b      	cmp	r4, #43	@ 0x2b
 800a026:	bf04      	itt	eq
 800a028:	782c      	ldrbeq	r4, [r5, #0]
 800a02a:	1c95      	addeq	r5, r2, #2
 800a02c:	e7cf      	b.n	8009fce <_strtol_l.constprop.0+0x3a>
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d1da      	bne.n	8009fe8 <_strtol_l.constprop.0+0x54>
 800a032:	2c30      	cmp	r4, #48	@ 0x30
 800a034:	bf0c      	ite	eq
 800a036:	2308      	moveq	r3, #8
 800a038:	230a      	movne	r3, #10
 800a03a:	e7d5      	b.n	8009fe8 <_strtol_l.constprop.0+0x54>
 800a03c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800a040:	2f19      	cmp	r7, #25
 800a042:	d801      	bhi.n	800a048 <_strtol_l.constprop.0+0xb4>
 800a044:	3c37      	subs	r4, #55	@ 0x37
 800a046:	e7de      	b.n	800a006 <_strtol_l.constprop.0+0x72>
 800a048:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800a04c:	2f19      	cmp	r7, #25
 800a04e:	d804      	bhi.n	800a05a <_strtol_l.constprop.0+0xc6>
 800a050:	3c57      	subs	r4, #87	@ 0x57
 800a052:	e7d8      	b.n	800a006 <_strtol_l.constprop.0+0x72>
 800a054:	f04f 32ff 	mov.w	r2, #4294967295
 800a058:	e7e1      	b.n	800a01e <_strtol_l.constprop.0+0x8a>
 800a05a:	1c53      	adds	r3, r2, #1
 800a05c:	d108      	bne.n	800a070 <_strtol_l.constprop.0+0xdc>
 800a05e:	2322      	movs	r3, #34	@ 0x22
 800a060:	4660      	mov	r0, ip
 800a062:	f8ce 3000 	str.w	r3, [lr]
 800a066:	f1b8 0f00 	cmp.w	r8, #0
 800a06a:	d0a0      	beq.n	8009fae <_strtol_l.constprop.0+0x1a>
 800a06c:	1e69      	subs	r1, r5, #1
 800a06e:	e006      	b.n	800a07e <_strtol_l.constprop.0+0xea>
 800a070:	b106      	cbz	r6, 800a074 <_strtol_l.constprop.0+0xe0>
 800a072:	4240      	negs	r0, r0
 800a074:	f1b8 0f00 	cmp.w	r8, #0
 800a078:	d099      	beq.n	8009fae <_strtol_l.constprop.0+0x1a>
 800a07a:	2a00      	cmp	r2, #0
 800a07c:	d1f6      	bne.n	800a06c <_strtol_l.constprop.0+0xd8>
 800a07e:	f8c8 1000 	str.w	r1, [r8]
 800a082:	e794      	b.n	8009fae <_strtol_l.constprop.0+0x1a>
 800a084:	0800cd09 	.word	0x0800cd09

0800a088 <_strtol_r>:
 800a088:	f7ff bf84 	b.w	8009f94 <_strtol_l.constprop.0>

0800a08c <__ssputs_r>:
 800a08c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a090:	461f      	mov	r7, r3
 800a092:	688e      	ldr	r6, [r1, #8]
 800a094:	4682      	mov	sl, r0
 800a096:	42be      	cmp	r6, r7
 800a098:	460c      	mov	r4, r1
 800a09a:	4690      	mov	r8, r2
 800a09c:	680b      	ldr	r3, [r1, #0]
 800a09e:	d82d      	bhi.n	800a0fc <__ssputs_r+0x70>
 800a0a0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a0a4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800a0a8:	d026      	beq.n	800a0f8 <__ssputs_r+0x6c>
 800a0aa:	6965      	ldr	r5, [r4, #20]
 800a0ac:	6909      	ldr	r1, [r1, #16]
 800a0ae:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a0b2:	eba3 0901 	sub.w	r9, r3, r1
 800a0b6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a0ba:	1c7b      	adds	r3, r7, #1
 800a0bc:	444b      	add	r3, r9
 800a0be:	106d      	asrs	r5, r5, #1
 800a0c0:	429d      	cmp	r5, r3
 800a0c2:	bf38      	it	cc
 800a0c4:	461d      	movcc	r5, r3
 800a0c6:	0553      	lsls	r3, r2, #21
 800a0c8:	d527      	bpl.n	800a11a <__ssputs_r+0x8e>
 800a0ca:	4629      	mov	r1, r5
 800a0cc:	f7fe fc2e 	bl	800892c <_malloc_r>
 800a0d0:	4606      	mov	r6, r0
 800a0d2:	b360      	cbz	r0, 800a12e <__ssputs_r+0xa2>
 800a0d4:	464a      	mov	r2, r9
 800a0d6:	6921      	ldr	r1, [r4, #16]
 800a0d8:	f000 fd9c 	bl	800ac14 <memcpy>
 800a0dc:	89a3      	ldrh	r3, [r4, #12]
 800a0de:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800a0e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a0e6:	81a3      	strh	r3, [r4, #12]
 800a0e8:	6126      	str	r6, [r4, #16]
 800a0ea:	444e      	add	r6, r9
 800a0ec:	6026      	str	r6, [r4, #0]
 800a0ee:	463e      	mov	r6, r7
 800a0f0:	6165      	str	r5, [r4, #20]
 800a0f2:	eba5 0509 	sub.w	r5, r5, r9
 800a0f6:	60a5      	str	r5, [r4, #8]
 800a0f8:	42be      	cmp	r6, r7
 800a0fa:	d900      	bls.n	800a0fe <__ssputs_r+0x72>
 800a0fc:	463e      	mov	r6, r7
 800a0fe:	4632      	mov	r2, r6
 800a100:	4641      	mov	r1, r8
 800a102:	6820      	ldr	r0, [r4, #0]
 800a104:	f000 fd49 	bl	800ab9a <memmove>
 800a108:	2000      	movs	r0, #0
 800a10a:	68a3      	ldr	r3, [r4, #8]
 800a10c:	1b9b      	subs	r3, r3, r6
 800a10e:	60a3      	str	r3, [r4, #8]
 800a110:	6823      	ldr	r3, [r4, #0]
 800a112:	4433      	add	r3, r6
 800a114:	6023      	str	r3, [r4, #0]
 800a116:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a11a:	462a      	mov	r2, r5
 800a11c:	f001 f90b 	bl	800b336 <_realloc_r>
 800a120:	4606      	mov	r6, r0
 800a122:	2800      	cmp	r0, #0
 800a124:	d1e0      	bne.n	800a0e8 <__ssputs_r+0x5c>
 800a126:	4650      	mov	r0, sl
 800a128:	6921      	ldr	r1, [r4, #16]
 800a12a:	f7fe fb8d 	bl	8008848 <_free_r>
 800a12e:	230c      	movs	r3, #12
 800a130:	f8ca 3000 	str.w	r3, [sl]
 800a134:	89a3      	ldrh	r3, [r4, #12]
 800a136:	f04f 30ff 	mov.w	r0, #4294967295
 800a13a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a13e:	81a3      	strh	r3, [r4, #12]
 800a140:	e7e9      	b.n	800a116 <__ssputs_r+0x8a>
	...

0800a144 <_svfiprintf_r>:
 800a144:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a148:	4698      	mov	r8, r3
 800a14a:	898b      	ldrh	r3, [r1, #12]
 800a14c:	4607      	mov	r7, r0
 800a14e:	061b      	lsls	r3, r3, #24
 800a150:	460d      	mov	r5, r1
 800a152:	4614      	mov	r4, r2
 800a154:	b09d      	sub	sp, #116	@ 0x74
 800a156:	d510      	bpl.n	800a17a <_svfiprintf_r+0x36>
 800a158:	690b      	ldr	r3, [r1, #16]
 800a15a:	b973      	cbnz	r3, 800a17a <_svfiprintf_r+0x36>
 800a15c:	2140      	movs	r1, #64	@ 0x40
 800a15e:	f7fe fbe5 	bl	800892c <_malloc_r>
 800a162:	6028      	str	r0, [r5, #0]
 800a164:	6128      	str	r0, [r5, #16]
 800a166:	b930      	cbnz	r0, 800a176 <_svfiprintf_r+0x32>
 800a168:	230c      	movs	r3, #12
 800a16a:	603b      	str	r3, [r7, #0]
 800a16c:	f04f 30ff 	mov.w	r0, #4294967295
 800a170:	b01d      	add	sp, #116	@ 0x74
 800a172:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a176:	2340      	movs	r3, #64	@ 0x40
 800a178:	616b      	str	r3, [r5, #20]
 800a17a:	2300      	movs	r3, #0
 800a17c:	9309      	str	r3, [sp, #36]	@ 0x24
 800a17e:	2320      	movs	r3, #32
 800a180:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a184:	2330      	movs	r3, #48	@ 0x30
 800a186:	f04f 0901 	mov.w	r9, #1
 800a18a:	f8cd 800c 	str.w	r8, [sp, #12]
 800a18e:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800a328 <_svfiprintf_r+0x1e4>
 800a192:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a196:	4623      	mov	r3, r4
 800a198:	469a      	mov	sl, r3
 800a19a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a19e:	b10a      	cbz	r2, 800a1a4 <_svfiprintf_r+0x60>
 800a1a0:	2a25      	cmp	r2, #37	@ 0x25
 800a1a2:	d1f9      	bne.n	800a198 <_svfiprintf_r+0x54>
 800a1a4:	ebba 0b04 	subs.w	fp, sl, r4
 800a1a8:	d00b      	beq.n	800a1c2 <_svfiprintf_r+0x7e>
 800a1aa:	465b      	mov	r3, fp
 800a1ac:	4622      	mov	r2, r4
 800a1ae:	4629      	mov	r1, r5
 800a1b0:	4638      	mov	r0, r7
 800a1b2:	f7ff ff6b 	bl	800a08c <__ssputs_r>
 800a1b6:	3001      	adds	r0, #1
 800a1b8:	f000 80a7 	beq.w	800a30a <_svfiprintf_r+0x1c6>
 800a1bc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a1be:	445a      	add	r2, fp
 800a1c0:	9209      	str	r2, [sp, #36]	@ 0x24
 800a1c2:	f89a 3000 	ldrb.w	r3, [sl]
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	f000 809f 	beq.w	800a30a <_svfiprintf_r+0x1c6>
 800a1cc:	2300      	movs	r3, #0
 800a1ce:	f04f 32ff 	mov.w	r2, #4294967295
 800a1d2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a1d6:	f10a 0a01 	add.w	sl, sl, #1
 800a1da:	9304      	str	r3, [sp, #16]
 800a1dc:	9307      	str	r3, [sp, #28]
 800a1de:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a1e2:	931a      	str	r3, [sp, #104]	@ 0x68
 800a1e4:	4654      	mov	r4, sl
 800a1e6:	2205      	movs	r2, #5
 800a1e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a1ec:	484e      	ldr	r0, [pc, #312]	@ (800a328 <_svfiprintf_r+0x1e4>)
 800a1ee:	f7fd fcc6 	bl	8007b7e <memchr>
 800a1f2:	9a04      	ldr	r2, [sp, #16]
 800a1f4:	b9d8      	cbnz	r0, 800a22e <_svfiprintf_r+0xea>
 800a1f6:	06d0      	lsls	r0, r2, #27
 800a1f8:	bf44      	itt	mi
 800a1fa:	2320      	movmi	r3, #32
 800a1fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a200:	0711      	lsls	r1, r2, #28
 800a202:	bf44      	itt	mi
 800a204:	232b      	movmi	r3, #43	@ 0x2b
 800a206:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a20a:	f89a 3000 	ldrb.w	r3, [sl]
 800a20e:	2b2a      	cmp	r3, #42	@ 0x2a
 800a210:	d015      	beq.n	800a23e <_svfiprintf_r+0xfa>
 800a212:	4654      	mov	r4, sl
 800a214:	2000      	movs	r0, #0
 800a216:	f04f 0c0a 	mov.w	ip, #10
 800a21a:	9a07      	ldr	r2, [sp, #28]
 800a21c:	4621      	mov	r1, r4
 800a21e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a222:	3b30      	subs	r3, #48	@ 0x30
 800a224:	2b09      	cmp	r3, #9
 800a226:	d94b      	bls.n	800a2c0 <_svfiprintf_r+0x17c>
 800a228:	b1b0      	cbz	r0, 800a258 <_svfiprintf_r+0x114>
 800a22a:	9207      	str	r2, [sp, #28]
 800a22c:	e014      	b.n	800a258 <_svfiprintf_r+0x114>
 800a22e:	eba0 0308 	sub.w	r3, r0, r8
 800a232:	fa09 f303 	lsl.w	r3, r9, r3
 800a236:	4313      	orrs	r3, r2
 800a238:	46a2      	mov	sl, r4
 800a23a:	9304      	str	r3, [sp, #16]
 800a23c:	e7d2      	b.n	800a1e4 <_svfiprintf_r+0xa0>
 800a23e:	9b03      	ldr	r3, [sp, #12]
 800a240:	1d19      	adds	r1, r3, #4
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	9103      	str	r1, [sp, #12]
 800a246:	2b00      	cmp	r3, #0
 800a248:	bfbb      	ittet	lt
 800a24a:	425b      	neglt	r3, r3
 800a24c:	f042 0202 	orrlt.w	r2, r2, #2
 800a250:	9307      	strge	r3, [sp, #28]
 800a252:	9307      	strlt	r3, [sp, #28]
 800a254:	bfb8      	it	lt
 800a256:	9204      	strlt	r2, [sp, #16]
 800a258:	7823      	ldrb	r3, [r4, #0]
 800a25a:	2b2e      	cmp	r3, #46	@ 0x2e
 800a25c:	d10a      	bne.n	800a274 <_svfiprintf_r+0x130>
 800a25e:	7863      	ldrb	r3, [r4, #1]
 800a260:	2b2a      	cmp	r3, #42	@ 0x2a
 800a262:	d132      	bne.n	800a2ca <_svfiprintf_r+0x186>
 800a264:	9b03      	ldr	r3, [sp, #12]
 800a266:	3402      	adds	r4, #2
 800a268:	1d1a      	adds	r2, r3, #4
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	9203      	str	r2, [sp, #12]
 800a26e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a272:	9305      	str	r3, [sp, #20]
 800a274:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800a32c <_svfiprintf_r+0x1e8>
 800a278:	2203      	movs	r2, #3
 800a27a:	4650      	mov	r0, sl
 800a27c:	7821      	ldrb	r1, [r4, #0]
 800a27e:	f7fd fc7e 	bl	8007b7e <memchr>
 800a282:	b138      	cbz	r0, 800a294 <_svfiprintf_r+0x150>
 800a284:	2240      	movs	r2, #64	@ 0x40
 800a286:	9b04      	ldr	r3, [sp, #16]
 800a288:	eba0 000a 	sub.w	r0, r0, sl
 800a28c:	4082      	lsls	r2, r0
 800a28e:	4313      	orrs	r3, r2
 800a290:	3401      	adds	r4, #1
 800a292:	9304      	str	r3, [sp, #16]
 800a294:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a298:	2206      	movs	r2, #6
 800a29a:	4825      	ldr	r0, [pc, #148]	@ (800a330 <_svfiprintf_r+0x1ec>)
 800a29c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a2a0:	f7fd fc6d 	bl	8007b7e <memchr>
 800a2a4:	2800      	cmp	r0, #0
 800a2a6:	d036      	beq.n	800a316 <_svfiprintf_r+0x1d2>
 800a2a8:	4b22      	ldr	r3, [pc, #136]	@ (800a334 <_svfiprintf_r+0x1f0>)
 800a2aa:	bb1b      	cbnz	r3, 800a2f4 <_svfiprintf_r+0x1b0>
 800a2ac:	9b03      	ldr	r3, [sp, #12]
 800a2ae:	3307      	adds	r3, #7
 800a2b0:	f023 0307 	bic.w	r3, r3, #7
 800a2b4:	3308      	adds	r3, #8
 800a2b6:	9303      	str	r3, [sp, #12]
 800a2b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a2ba:	4433      	add	r3, r6
 800a2bc:	9309      	str	r3, [sp, #36]	@ 0x24
 800a2be:	e76a      	b.n	800a196 <_svfiprintf_r+0x52>
 800a2c0:	460c      	mov	r4, r1
 800a2c2:	2001      	movs	r0, #1
 800a2c4:	fb0c 3202 	mla	r2, ip, r2, r3
 800a2c8:	e7a8      	b.n	800a21c <_svfiprintf_r+0xd8>
 800a2ca:	2300      	movs	r3, #0
 800a2cc:	f04f 0c0a 	mov.w	ip, #10
 800a2d0:	4619      	mov	r1, r3
 800a2d2:	3401      	adds	r4, #1
 800a2d4:	9305      	str	r3, [sp, #20]
 800a2d6:	4620      	mov	r0, r4
 800a2d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a2dc:	3a30      	subs	r2, #48	@ 0x30
 800a2de:	2a09      	cmp	r2, #9
 800a2e0:	d903      	bls.n	800a2ea <_svfiprintf_r+0x1a6>
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d0c6      	beq.n	800a274 <_svfiprintf_r+0x130>
 800a2e6:	9105      	str	r1, [sp, #20]
 800a2e8:	e7c4      	b.n	800a274 <_svfiprintf_r+0x130>
 800a2ea:	4604      	mov	r4, r0
 800a2ec:	2301      	movs	r3, #1
 800a2ee:	fb0c 2101 	mla	r1, ip, r1, r2
 800a2f2:	e7f0      	b.n	800a2d6 <_svfiprintf_r+0x192>
 800a2f4:	ab03      	add	r3, sp, #12
 800a2f6:	9300      	str	r3, [sp, #0]
 800a2f8:	462a      	mov	r2, r5
 800a2fa:	4638      	mov	r0, r7
 800a2fc:	4b0e      	ldr	r3, [pc, #56]	@ (800a338 <_svfiprintf_r+0x1f4>)
 800a2fe:	a904      	add	r1, sp, #16
 800a300:	f7fc fc54 	bl	8006bac <_printf_float>
 800a304:	1c42      	adds	r2, r0, #1
 800a306:	4606      	mov	r6, r0
 800a308:	d1d6      	bne.n	800a2b8 <_svfiprintf_r+0x174>
 800a30a:	89ab      	ldrh	r3, [r5, #12]
 800a30c:	065b      	lsls	r3, r3, #25
 800a30e:	f53f af2d 	bmi.w	800a16c <_svfiprintf_r+0x28>
 800a312:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a314:	e72c      	b.n	800a170 <_svfiprintf_r+0x2c>
 800a316:	ab03      	add	r3, sp, #12
 800a318:	9300      	str	r3, [sp, #0]
 800a31a:	462a      	mov	r2, r5
 800a31c:	4638      	mov	r0, r7
 800a31e:	4b06      	ldr	r3, [pc, #24]	@ (800a338 <_svfiprintf_r+0x1f4>)
 800a320:	a904      	add	r1, sp, #16
 800a322:	f7fc fee1 	bl	80070e8 <_printf_i>
 800a326:	e7ed      	b.n	800a304 <_svfiprintf_r+0x1c0>
 800a328:	0800ce09 	.word	0x0800ce09
 800a32c:	0800ce0f 	.word	0x0800ce0f
 800a330:	0800ce13 	.word	0x0800ce13
 800a334:	08006bad 	.word	0x08006bad
 800a338:	0800a08d 	.word	0x0800a08d

0800a33c <_sungetc_r>:
 800a33c:	b538      	push	{r3, r4, r5, lr}
 800a33e:	1c4b      	adds	r3, r1, #1
 800a340:	4614      	mov	r4, r2
 800a342:	d103      	bne.n	800a34c <_sungetc_r+0x10>
 800a344:	f04f 35ff 	mov.w	r5, #4294967295
 800a348:	4628      	mov	r0, r5
 800a34a:	bd38      	pop	{r3, r4, r5, pc}
 800a34c:	8993      	ldrh	r3, [r2, #12]
 800a34e:	b2cd      	uxtb	r5, r1
 800a350:	f023 0320 	bic.w	r3, r3, #32
 800a354:	8193      	strh	r3, [r2, #12]
 800a356:	6853      	ldr	r3, [r2, #4]
 800a358:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800a35a:	b18a      	cbz	r2, 800a380 <_sungetc_r+0x44>
 800a35c:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800a35e:	429a      	cmp	r2, r3
 800a360:	dd08      	ble.n	800a374 <_sungetc_r+0x38>
 800a362:	6823      	ldr	r3, [r4, #0]
 800a364:	1e5a      	subs	r2, r3, #1
 800a366:	6022      	str	r2, [r4, #0]
 800a368:	f803 5c01 	strb.w	r5, [r3, #-1]
 800a36c:	6863      	ldr	r3, [r4, #4]
 800a36e:	3301      	adds	r3, #1
 800a370:	6063      	str	r3, [r4, #4]
 800a372:	e7e9      	b.n	800a348 <_sungetc_r+0xc>
 800a374:	4621      	mov	r1, r4
 800a376:	f000 fbd8 	bl	800ab2a <__submore>
 800a37a:	2800      	cmp	r0, #0
 800a37c:	d0f1      	beq.n	800a362 <_sungetc_r+0x26>
 800a37e:	e7e1      	b.n	800a344 <_sungetc_r+0x8>
 800a380:	6921      	ldr	r1, [r4, #16]
 800a382:	6822      	ldr	r2, [r4, #0]
 800a384:	b141      	cbz	r1, 800a398 <_sungetc_r+0x5c>
 800a386:	4291      	cmp	r1, r2
 800a388:	d206      	bcs.n	800a398 <_sungetc_r+0x5c>
 800a38a:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 800a38e:	42a9      	cmp	r1, r5
 800a390:	d102      	bne.n	800a398 <_sungetc_r+0x5c>
 800a392:	3a01      	subs	r2, #1
 800a394:	6022      	str	r2, [r4, #0]
 800a396:	e7ea      	b.n	800a36e <_sungetc_r+0x32>
 800a398:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 800a39c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a3a0:	6363      	str	r3, [r4, #52]	@ 0x34
 800a3a2:	2303      	movs	r3, #3
 800a3a4:	63a3      	str	r3, [r4, #56]	@ 0x38
 800a3a6:	4623      	mov	r3, r4
 800a3a8:	f803 5f46 	strb.w	r5, [r3, #70]!
 800a3ac:	6023      	str	r3, [r4, #0]
 800a3ae:	2301      	movs	r3, #1
 800a3b0:	e7de      	b.n	800a370 <_sungetc_r+0x34>

0800a3b2 <__ssrefill_r>:
 800a3b2:	b510      	push	{r4, lr}
 800a3b4:	460c      	mov	r4, r1
 800a3b6:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800a3b8:	b169      	cbz	r1, 800a3d6 <__ssrefill_r+0x24>
 800a3ba:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a3be:	4299      	cmp	r1, r3
 800a3c0:	d001      	beq.n	800a3c6 <__ssrefill_r+0x14>
 800a3c2:	f7fe fa41 	bl	8008848 <_free_r>
 800a3c6:	2000      	movs	r0, #0
 800a3c8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a3ca:	6360      	str	r0, [r4, #52]	@ 0x34
 800a3cc:	6063      	str	r3, [r4, #4]
 800a3ce:	b113      	cbz	r3, 800a3d6 <__ssrefill_r+0x24>
 800a3d0:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800a3d2:	6023      	str	r3, [r4, #0]
 800a3d4:	bd10      	pop	{r4, pc}
 800a3d6:	6923      	ldr	r3, [r4, #16]
 800a3d8:	f04f 30ff 	mov.w	r0, #4294967295
 800a3dc:	6023      	str	r3, [r4, #0]
 800a3de:	2300      	movs	r3, #0
 800a3e0:	6063      	str	r3, [r4, #4]
 800a3e2:	89a3      	ldrh	r3, [r4, #12]
 800a3e4:	f043 0320 	orr.w	r3, r3, #32
 800a3e8:	81a3      	strh	r3, [r4, #12]
 800a3ea:	e7f3      	b.n	800a3d4 <__ssrefill_r+0x22>

0800a3ec <__ssvfiscanf_r>:
 800a3ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a3f0:	460c      	mov	r4, r1
 800a3f2:	2100      	movs	r1, #0
 800a3f4:	4606      	mov	r6, r0
 800a3f6:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 800a3fa:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 800a3fe:	49aa      	ldr	r1, [pc, #680]	@ (800a6a8 <__ssvfiscanf_r+0x2bc>)
 800a400:	f10d 0804 	add.w	r8, sp, #4
 800a404:	91a0      	str	r1, [sp, #640]	@ 0x280
 800a406:	49a9      	ldr	r1, [pc, #676]	@ (800a6ac <__ssvfiscanf_r+0x2c0>)
 800a408:	4fa9      	ldr	r7, [pc, #676]	@ (800a6b0 <__ssvfiscanf_r+0x2c4>)
 800a40a:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 800a40e:	91a1      	str	r1, [sp, #644]	@ 0x284
 800a410:	9300      	str	r3, [sp, #0]
 800a412:	7813      	ldrb	r3, [r2, #0]
 800a414:	2b00      	cmp	r3, #0
 800a416:	f000 8159 	beq.w	800a6cc <__ssvfiscanf_r+0x2e0>
 800a41a:	5cf9      	ldrb	r1, [r7, r3]
 800a41c:	1c55      	adds	r5, r2, #1
 800a41e:	f011 0108 	ands.w	r1, r1, #8
 800a422:	d019      	beq.n	800a458 <__ssvfiscanf_r+0x6c>
 800a424:	6863      	ldr	r3, [r4, #4]
 800a426:	2b00      	cmp	r3, #0
 800a428:	dd0f      	ble.n	800a44a <__ssvfiscanf_r+0x5e>
 800a42a:	6823      	ldr	r3, [r4, #0]
 800a42c:	781a      	ldrb	r2, [r3, #0]
 800a42e:	5cba      	ldrb	r2, [r7, r2]
 800a430:	0712      	lsls	r2, r2, #28
 800a432:	d401      	bmi.n	800a438 <__ssvfiscanf_r+0x4c>
 800a434:	462a      	mov	r2, r5
 800a436:	e7ec      	b.n	800a412 <__ssvfiscanf_r+0x26>
 800a438:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800a43a:	3301      	adds	r3, #1
 800a43c:	3201      	adds	r2, #1
 800a43e:	9245      	str	r2, [sp, #276]	@ 0x114
 800a440:	6862      	ldr	r2, [r4, #4]
 800a442:	6023      	str	r3, [r4, #0]
 800a444:	3a01      	subs	r2, #1
 800a446:	6062      	str	r2, [r4, #4]
 800a448:	e7ec      	b.n	800a424 <__ssvfiscanf_r+0x38>
 800a44a:	4621      	mov	r1, r4
 800a44c:	4630      	mov	r0, r6
 800a44e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800a450:	4798      	blx	r3
 800a452:	2800      	cmp	r0, #0
 800a454:	d0e9      	beq.n	800a42a <__ssvfiscanf_r+0x3e>
 800a456:	e7ed      	b.n	800a434 <__ssvfiscanf_r+0x48>
 800a458:	2b25      	cmp	r3, #37	@ 0x25
 800a45a:	d012      	beq.n	800a482 <__ssvfiscanf_r+0x96>
 800a45c:	4699      	mov	r9, r3
 800a45e:	6863      	ldr	r3, [r4, #4]
 800a460:	2b00      	cmp	r3, #0
 800a462:	f340 8094 	ble.w	800a58e <__ssvfiscanf_r+0x1a2>
 800a466:	6822      	ldr	r2, [r4, #0]
 800a468:	7813      	ldrb	r3, [r2, #0]
 800a46a:	454b      	cmp	r3, r9
 800a46c:	f040 812e 	bne.w	800a6cc <__ssvfiscanf_r+0x2e0>
 800a470:	6863      	ldr	r3, [r4, #4]
 800a472:	3201      	adds	r2, #1
 800a474:	3b01      	subs	r3, #1
 800a476:	6063      	str	r3, [r4, #4]
 800a478:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 800a47a:	6022      	str	r2, [r4, #0]
 800a47c:	3301      	adds	r3, #1
 800a47e:	9345      	str	r3, [sp, #276]	@ 0x114
 800a480:	e7d8      	b.n	800a434 <__ssvfiscanf_r+0x48>
 800a482:	9141      	str	r1, [sp, #260]	@ 0x104
 800a484:	9143      	str	r1, [sp, #268]	@ 0x10c
 800a486:	7853      	ldrb	r3, [r2, #1]
 800a488:	2b2a      	cmp	r3, #42	@ 0x2a
 800a48a:	bf04      	itt	eq
 800a48c:	2310      	moveq	r3, #16
 800a48e:	1c95      	addeq	r5, r2, #2
 800a490:	f04f 020a 	mov.w	r2, #10
 800a494:	bf08      	it	eq
 800a496:	9341      	streq	r3, [sp, #260]	@ 0x104
 800a498:	46a9      	mov	r9, r5
 800a49a:	f819 1b01 	ldrb.w	r1, [r9], #1
 800a49e:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 800a4a2:	2b09      	cmp	r3, #9
 800a4a4:	d91e      	bls.n	800a4e4 <__ssvfiscanf_r+0xf8>
 800a4a6:	f8df a20c 	ldr.w	sl, [pc, #524]	@ 800a6b4 <__ssvfiscanf_r+0x2c8>
 800a4aa:	2203      	movs	r2, #3
 800a4ac:	4650      	mov	r0, sl
 800a4ae:	f7fd fb66 	bl	8007b7e <memchr>
 800a4b2:	b138      	cbz	r0, 800a4c4 <__ssvfiscanf_r+0xd8>
 800a4b4:	2301      	movs	r3, #1
 800a4b6:	464d      	mov	r5, r9
 800a4b8:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800a4ba:	eba0 000a 	sub.w	r0, r0, sl
 800a4be:	4083      	lsls	r3, r0
 800a4c0:	4313      	orrs	r3, r2
 800a4c2:	9341      	str	r3, [sp, #260]	@ 0x104
 800a4c4:	f815 3b01 	ldrb.w	r3, [r5], #1
 800a4c8:	2b78      	cmp	r3, #120	@ 0x78
 800a4ca:	d806      	bhi.n	800a4da <__ssvfiscanf_r+0xee>
 800a4cc:	2b57      	cmp	r3, #87	@ 0x57
 800a4ce:	d810      	bhi.n	800a4f2 <__ssvfiscanf_r+0x106>
 800a4d0:	2b25      	cmp	r3, #37	@ 0x25
 800a4d2:	d0c3      	beq.n	800a45c <__ssvfiscanf_r+0x70>
 800a4d4:	d856      	bhi.n	800a584 <__ssvfiscanf_r+0x198>
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d064      	beq.n	800a5a4 <__ssvfiscanf_r+0x1b8>
 800a4da:	2303      	movs	r3, #3
 800a4dc:	9347      	str	r3, [sp, #284]	@ 0x11c
 800a4de:	230a      	movs	r3, #10
 800a4e0:	9342      	str	r3, [sp, #264]	@ 0x108
 800a4e2:	e077      	b.n	800a5d4 <__ssvfiscanf_r+0x1e8>
 800a4e4:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 800a4e6:	464d      	mov	r5, r9
 800a4e8:	fb02 1103 	mla	r1, r2, r3, r1
 800a4ec:	3930      	subs	r1, #48	@ 0x30
 800a4ee:	9143      	str	r1, [sp, #268]	@ 0x10c
 800a4f0:	e7d2      	b.n	800a498 <__ssvfiscanf_r+0xac>
 800a4f2:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 800a4f6:	2a20      	cmp	r2, #32
 800a4f8:	d8ef      	bhi.n	800a4da <__ssvfiscanf_r+0xee>
 800a4fa:	a101      	add	r1, pc, #4	@ (adr r1, 800a500 <__ssvfiscanf_r+0x114>)
 800a4fc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800a500:	0800a5b3 	.word	0x0800a5b3
 800a504:	0800a4db 	.word	0x0800a4db
 800a508:	0800a4db 	.word	0x0800a4db
 800a50c:	0800a60d 	.word	0x0800a60d
 800a510:	0800a4db 	.word	0x0800a4db
 800a514:	0800a4db 	.word	0x0800a4db
 800a518:	0800a4db 	.word	0x0800a4db
 800a51c:	0800a4db 	.word	0x0800a4db
 800a520:	0800a4db 	.word	0x0800a4db
 800a524:	0800a4db 	.word	0x0800a4db
 800a528:	0800a4db 	.word	0x0800a4db
 800a52c:	0800a623 	.word	0x0800a623
 800a530:	0800a609 	.word	0x0800a609
 800a534:	0800a58b 	.word	0x0800a58b
 800a538:	0800a58b 	.word	0x0800a58b
 800a53c:	0800a58b 	.word	0x0800a58b
 800a540:	0800a4db 	.word	0x0800a4db
 800a544:	0800a5c5 	.word	0x0800a5c5
 800a548:	0800a4db 	.word	0x0800a4db
 800a54c:	0800a4db 	.word	0x0800a4db
 800a550:	0800a4db 	.word	0x0800a4db
 800a554:	0800a4db 	.word	0x0800a4db
 800a558:	0800a633 	.word	0x0800a633
 800a55c:	0800a5cd 	.word	0x0800a5cd
 800a560:	0800a5ab 	.word	0x0800a5ab
 800a564:	0800a4db 	.word	0x0800a4db
 800a568:	0800a4db 	.word	0x0800a4db
 800a56c:	0800a62f 	.word	0x0800a62f
 800a570:	0800a4db 	.word	0x0800a4db
 800a574:	0800a609 	.word	0x0800a609
 800a578:	0800a4db 	.word	0x0800a4db
 800a57c:	0800a4db 	.word	0x0800a4db
 800a580:	0800a5b3 	.word	0x0800a5b3
 800a584:	3b45      	subs	r3, #69	@ 0x45
 800a586:	2b02      	cmp	r3, #2
 800a588:	d8a7      	bhi.n	800a4da <__ssvfiscanf_r+0xee>
 800a58a:	2305      	movs	r3, #5
 800a58c:	e021      	b.n	800a5d2 <__ssvfiscanf_r+0x1e6>
 800a58e:	4621      	mov	r1, r4
 800a590:	4630      	mov	r0, r6
 800a592:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800a594:	4798      	blx	r3
 800a596:	2800      	cmp	r0, #0
 800a598:	f43f af65 	beq.w	800a466 <__ssvfiscanf_r+0x7a>
 800a59c:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800a59e:	2800      	cmp	r0, #0
 800a5a0:	f040 808c 	bne.w	800a6bc <__ssvfiscanf_r+0x2d0>
 800a5a4:	f04f 30ff 	mov.w	r0, #4294967295
 800a5a8:	e08c      	b.n	800a6c4 <__ssvfiscanf_r+0x2d8>
 800a5aa:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800a5ac:	f042 0220 	orr.w	r2, r2, #32
 800a5b0:	9241      	str	r2, [sp, #260]	@ 0x104
 800a5b2:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800a5b4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a5b8:	9241      	str	r2, [sp, #260]	@ 0x104
 800a5ba:	2210      	movs	r2, #16
 800a5bc:	2b6e      	cmp	r3, #110	@ 0x6e
 800a5be:	9242      	str	r2, [sp, #264]	@ 0x108
 800a5c0:	d902      	bls.n	800a5c8 <__ssvfiscanf_r+0x1dc>
 800a5c2:	e005      	b.n	800a5d0 <__ssvfiscanf_r+0x1e4>
 800a5c4:	2300      	movs	r3, #0
 800a5c6:	9342      	str	r3, [sp, #264]	@ 0x108
 800a5c8:	2303      	movs	r3, #3
 800a5ca:	e002      	b.n	800a5d2 <__ssvfiscanf_r+0x1e6>
 800a5cc:	2308      	movs	r3, #8
 800a5ce:	9342      	str	r3, [sp, #264]	@ 0x108
 800a5d0:	2304      	movs	r3, #4
 800a5d2:	9347      	str	r3, [sp, #284]	@ 0x11c
 800a5d4:	6863      	ldr	r3, [r4, #4]
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	dd39      	ble.n	800a64e <__ssvfiscanf_r+0x262>
 800a5da:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800a5dc:	0659      	lsls	r1, r3, #25
 800a5de:	d404      	bmi.n	800a5ea <__ssvfiscanf_r+0x1fe>
 800a5e0:	6823      	ldr	r3, [r4, #0]
 800a5e2:	781a      	ldrb	r2, [r3, #0]
 800a5e4:	5cba      	ldrb	r2, [r7, r2]
 800a5e6:	0712      	lsls	r2, r2, #28
 800a5e8:	d438      	bmi.n	800a65c <__ssvfiscanf_r+0x270>
 800a5ea:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 800a5ec:	2b02      	cmp	r3, #2
 800a5ee:	dc47      	bgt.n	800a680 <__ssvfiscanf_r+0x294>
 800a5f0:	466b      	mov	r3, sp
 800a5f2:	4622      	mov	r2, r4
 800a5f4:	4630      	mov	r0, r6
 800a5f6:	a941      	add	r1, sp, #260	@ 0x104
 800a5f8:	f000 f86a 	bl	800a6d0 <_scanf_chars>
 800a5fc:	2801      	cmp	r0, #1
 800a5fe:	d065      	beq.n	800a6cc <__ssvfiscanf_r+0x2e0>
 800a600:	2802      	cmp	r0, #2
 800a602:	f47f af17 	bne.w	800a434 <__ssvfiscanf_r+0x48>
 800a606:	e7c9      	b.n	800a59c <__ssvfiscanf_r+0x1b0>
 800a608:	220a      	movs	r2, #10
 800a60a:	e7d7      	b.n	800a5bc <__ssvfiscanf_r+0x1d0>
 800a60c:	4629      	mov	r1, r5
 800a60e:	4640      	mov	r0, r8
 800a610:	f000 fa52 	bl	800aab8 <__sccl>
 800a614:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800a616:	4605      	mov	r5, r0
 800a618:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a61c:	9341      	str	r3, [sp, #260]	@ 0x104
 800a61e:	2301      	movs	r3, #1
 800a620:	e7d7      	b.n	800a5d2 <__ssvfiscanf_r+0x1e6>
 800a622:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800a624:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a628:	9341      	str	r3, [sp, #260]	@ 0x104
 800a62a:	2300      	movs	r3, #0
 800a62c:	e7d1      	b.n	800a5d2 <__ssvfiscanf_r+0x1e6>
 800a62e:	2302      	movs	r3, #2
 800a630:	e7cf      	b.n	800a5d2 <__ssvfiscanf_r+0x1e6>
 800a632:	9841      	ldr	r0, [sp, #260]	@ 0x104
 800a634:	06c3      	lsls	r3, r0, #27
 800a636:	f53f aefd 	bmi.w	800a434 <__ssvfiscanf_r+0x48>
 800a63a:	9b00      	ldr	r3, [sp, #0]
 800a63c:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800a63e:	1d19      	adds	r1, r3, #4
 800a640:	9100      	str	r1, [sp, #0]
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	07c0      	lsls	r0, r0, #31
 800a646:	bf4c      	ite	mi
 800a648:	801a      	strhmi	r2, [r3, #0]
 800a64a:	601a      	strpl	r2, [r3, #0]
 800a64c:	e6f2      	b.n	800a434 <__ssvfiscanf_r+0x48>
 800a64e:	4621      	mov	r1, r4
 800a650:	4630      	mov	r0, r6
 800a652:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800a654:	4798      	blx	r3
 800a656:	2800      	cmp	r0, #0
 800a658:	d0bf      	beq.n	800a5da <__ssvfiscanf_r+0x1ee>
 800a65a:	e79f      	b.n	800a59c <__ssvfiscanf_r+0x1b0>
 800a65c:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800a65e:	3201      	adds	r2, #1
 800a660:	9245      	str	r2, [sp, #276]	@ 0x114
 800a662:	6862      	ldr	r2, [r4, #4]
 800a664:	3a01      	subs	r2, #1
 800a666:	2a00      	cmp	r2, #0
 800a668:	6062      	str	r2, [r4, #4]
 800a66a:	dd02      	ble.n	800a672 <__ssvfiscanf_r+0x286>
 800a66c:	3301      	adds	r3, #1
 800a66e:	6023      	str	r3, [r4, #0]
 800a670:	e7b6      	b.n	800a5e0 <__ssvfiscanf_r+0x1f4>
 800a672:	4621      	mov	r1, r4
 800a674:	4630      	mov	r0, r6
 800a676:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800a678:	4798      	blx	r3
 800a67a:	2800      	cmp	r0, #0
 800a67c:	d0b0      	beq.n	800a5e0 <__ssvfiscanf_r+0x1f4>
 800a67e:	e78d      	b.n	800a59c <__ssvfiscanf_r+0x1b0>
 800a680:	2b04      	cmp	r3, #4
 800a682:	dc06      	bgt.n	800a692 <__ssvfiscanf_r+0x2a6>
 800a684:	466b      	mov	r3, sp
 800a686:	4622      	mov	r2, r4
 800a688:	4630      	mov	r0, r6
 800a68a:	a941      	add	r1, sp, #260	@ 0x104
 800a68c:	f000 f87a 	bl	800a784 <_scanf_i>
 800a690:	e7b4      	b.n	800a5fc <__ssvfiscanf_r+0x210>
 800a692:	4b09      	ldr	r3, [pc, #36]	@ (800a6b8 <__ssvfiscanf_r+0x2cc>)
 800a694:	2b00      	cmp	r3, #0
 800a696:	f43f aecd 	beq.w	800a434 <__ssvfiscanf_r+0x48>
 800a69a:	466b      	mov	r3, sp
 800a69c:	4622      	mov	r2, r4
 800a69e:	4630      	mov	r0, r6
 800a6a0:	a941      	add	r1, sp, #260	@ 0x104
 800a6a2:	f7fc fe41 	bl	8007328 <_scanf_float>
 800a6a6:	e7a9      	b.n	800a5fc <__ssvfiscanf_r+0x210>
 800a6a8:	0800a33d 	.word	0x0800a33d
 800a6ac:	0800a3b3 	.word	0x0800a3b3
 800a6b0:	0800cd09 	.word	0x0800cd09
 800a6b4:	0800ce0f 	.word	0x0800ce0f
 800a6b8:	08007329 	.word	0x08007329
 800a6bc:	89a3      	ldrh	r3, [r4, #12]
 800a6be:	065b      	lsls	r3, r3, #25
 800a6c0:	f53f af70 	bmi.w	800a5a4 <__ssvfiscanf_r+0x1b8>
 800a6c4:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 800a6c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a6cc:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800a6ce:	e7f9      	b.n	800a6c4 <__ssvfiscanf_r+0x2d8>

0800a6d0 <_scanf_chars>:
 800a6d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a6d4:	4615      	mov	r5, r2
 800a6d6:	688a      	ldr	r2, [r1, #8]
 800a6d8:	4680      	mov	r8, r0
 800a6da:	460c      	mov	r4, r1
 800a6dc:	b932      	cbnz	r2, 800a6ec <_scanf_chars+0x1c>
 800a6de:	698a      	ldr	r2, [r1, #24]
 800a6e0:	2a00      	cmp	r2, #0
 800a6e2:	bf14      	ite	ne
 800a6e4:	f04f 32ff 	movne.w	r2, #4294967295
 800a6e8:	2201      	moveq	r2, #1
 800a6ea:	608a      	str	r2, [r1, #8]
 800a6ec:	2700      	movs	r7, #0
 800a6ee:	6822      	ldr	r2, [r4, #0]
 800a6f0:	f8df 908c 	ldr.w	r9, [pc, #140]	@ 800a780 <_scanf_chars+0xb0>
 800a6f4:	06d1      	lsls	r1, r2, #27
 800a6f6:	bf5f      	itttt	pl
 800a6f8:	681a      	ldrpl	r2, [r3, #0]
 800a6fa:	1d11      	addpl	r1, r2, #4
 800a6fc:	6019      	strpl	r1, [r3, #0]
 800a6fe:	6816      	ldrpl	r6, [r2, #0]
 800a700:	69a0      	ldr	r0, [r4, #24]
 800a702:	b188      	cbz	r0, 800a728 <_scanf_chars+0x58>
 800a704:	2801      	cmp	r0, #1
 800a706:	d107      	bne.n	800a718 <_scanf_chars+0x48>
 800a708:	682b      	ldr	r3, [r5, #0]
 800a70a:	781a      	ldrb	r2, [r3, #0]
 800a70c:	6963      	ldr	r3, [r4, #20]
 800a70e:	5c9b      	ldrb	r3, [r3, r2]
 800a710:	b953      	cbnz	r3, 800a728 <_scanf_chars+0x58>
 800a712:	2f00      	cmp	r7, #0
 800a714:	d031      	beq.n	800a77a <_scanf_chars+0xaa>
 800a716:	e022      	b.n	800a75e <_scanf_chars+0x8e>
 800a718:	2802      	cmp	r0, #2
 800a71a:	d120      	bne.n	800a75e <_scanf_chars+0x8e>
 800a71c:	682b      	ldr	r3, [r5, #0]
 800a71e:	781b      	ldrb	r3, [r3, #0]
 800a720:	f819 3003 	ldrb.w	r3, [r9, r3]
 800a724:	071b      	lsls	r3, r3, #28
 800a726:	d41a      	bmi.n	800a75e <_scanf_chars+0x8e>
 800a728:	6823      	ldr	r3, [r4, #0]
 800a72a:	3701      	adds	r7, #1
 800a72c:	06da      	lsls	r2, r3, #27
 800a72e:	bf5e      	ittt	pl
 800a730:	682b      	ldrpl	r3, [r5, #0]
 800a732:	781b      	ldrbpl	r3, [r3, #0]
 800a734:	f806 3b01 	strbpl.w	r3, [r6], #1
 800a738:	682a      	ldr	r2, [r5, #0]
 800a73a:	686b      	ldr	r3, [r5, #4]
 800a73c:	3201      	adds	r2, #1
 800a73e:	602a      	str	r2, [r5, #0]
 800a740:	68a2      	ldr	r2, [r4, #8]
 800a742:	3b01      	subs	r3, #1
 800a744:	3a01      	subs	r2, #1
 800a746:	606b      	str	r3, [r5, #4]
 800a748:	60a2      	str	r2, [r4, #8]
 800a74a:	b142      	cbz	r2, 800a75e <_scanf_chars+0x8e>
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	dcd7      	bgt.n	800a700 <_scanf_chars+0x30>
 800a750:	4629      	mov	r1, r5
 800a752:	4640      	mov	r0, r8
 800a754:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800a758:	4798      	blx	r3
 800a75a:	2800      	cmp	r0, #0
 800a75c:	d0d0      	beq.n	800a700 <_scanf_chars+0x30>
 800a75e:	6823      	ldr	r3, [r4, #0]
 800a760:	f013 0310 	ands.w	r3, r3, #16
 800a764:	d105      	bne.n	800a772 <_scanf_chars+0xa2>
 800a766:	68e2      	ldr	r2, [r4, #12]
 800a768:	3201      	adds	r2, #1
 800a76a:	60e2      	str	r2, [r4, #12]
 800a76c:	69a2      	ldr	r2, [r4, #24]
 800a76e:	b102      	cbz	r2, 800a772 <_scanf_chars+0xa2>
 800a770:	7033      	strb	r3, [r6, #0]
 800a772:	2000      	movs	r0, #0
 800a774:	6923      	ldr	r3, [r4, #16]
 800a776:	443b      	add	r3, r7
 800a778:	6123      	str	r3, [r4, #16]
 800a77a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a77e:	bf00      	nop
 800a780:	0800cd09 	.word	0x0800cd09

0800a784 <_scanf_i>:
 800a784:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a788:	460c      	mov	r4, r1
 800a78a:	4698      	mov	r8, r3
 800a78c:	4b72      	ldr	r3, [pc, #456]	@ (800a958 <_scanf_i+0x1d4>)
 800a78e:	b087      	sub	sp, #28
 800a790:	4682      	mov	sl, r0
 800a792:	4616      	mov	r6, r2
 800a794:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a798:	ab03      	add	r3, sp, #12
 800a79a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800a79e:	4b6f      	ldr	r3, [pc, #444]	@ (800a95c <_scanf_i+0x1d8>)
 800a7a0:	69a1      	ldr	r1, [r4, #24]
 800a7a2:	4a6f      	ldr	r2, [pc, #444]	@ (800a960 <_scanf_i+0x1dc>)
 800a7a4:	4627      	mov	r7, r4
 800a7a6:	2903      	cmp	r1, #3
 800a7a8:	bf08      	it	eq
 800a7aa:	461a      	moveq	r2, r3
 800a7ac:	68a3      	ldr	r3, [r4, #8]
 800a7ae:	9201      	str	r2, [sp, #4]
 800a7b0:	1e5a      	subs	r2, r3, #1
 800a7b2:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800a7b6:	bf81      	itttt	hi
 800a7b8:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800a7bc:	eb03 0905 	addhi.w	r9, r3, r5
 800a7c0:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800a7c4:	60a3      	strhi	r3, [r4, #8]
 800a7c6:	f857 3b1c 	ldr.w	r3, [r7], #28
 800a7ca:	bf98      	it	ls
 800a7cc:	f04f 0900 	movls.w	r9, #0
 800a7d0:	463d      	mov	r5, r7
 800a7d2:	f04f 0b00 	mov.w	fp, #0
 800a7d6:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 800a7da:	6023      	str	r3, [r4, #0]
 800a7dc:	6831      	ldr	r1, [r6, #0]
 800a7de:	ab03      	add	r3, sp, #12
 800a7e0:	2202      	movs	r2, #2
 800a7e2:	7809      	ldrb	r1, [r1, #0]
 800a7e4:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800a7e8:	f7fd f9c9 	bl	8007b7e <memchr>
 800a7ec:	b328      	cbz	r0, 800a83a <_scanf_i+0xb6>
 800a7ee:	f1bb 0f01 	cmp.w	fp, #1
 800a7f2:	d159      	bne.n	800a8a8 <_scanf_i+0x124>
 800a7f4:	6862      	ldr	r2, [r4, #4]
 800a7f6:	b92a      	cbnz	r2, 800a804 <_scanf_i+0x80>
 800a7f8:	2108      	movs	r1, #8
 800a7fa:	6822      	ldr	r2, [r4, #0]
 800a7fc:	6061      	str	r1, [r4, #4]
 800a7fe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a802:	6022      	str	r2, [r4, #0]
 800a804:	6822      	ldr	r2, [r4, #0]
 800a806:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 800a80a:	6022      	str	r2, [r4, #0]
 800a80c:	68a2      	ldr	r2, [r4, #8]
 800a80e:	1e51      	subs	r1, r2, #1
 800a810:	60a1      	str	r1, [r4, #8]
 800a812:	b192      	cbz	r2, 800a83a <_scanf_i+0xb6>
 800a814:	6832      	ldr	r2, [r6, #0]
 800a816:	1c51      	adds	r1, r2, #1
 800a818:	6031      	str	r1, [r6, #0]
 800a81a:	7812      	ldrb	r2, [r2, #0]
 800a81c:	f805 2b01 	strb.w	r2, [r5], #1
 800a820:	6872      	ldr	r2, [r6, #4]
 800a822:	3a01      	subs	r2, #1
 800a824:	2a00      	cmp	r2, #0
 800a826:	6072      	str	r2, [r6, #4]
 800a828:	dc07      	bgt.n	800a83a <_scanf_i+0xb6>
 800a82a:	4631      	mov	r1, r6
 800a82c:	4650      	mov	r0, sl
 800a82e:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 800a832:	4790      	blx	r2
 800a834:	2800      	cmp	r0, #0
 800a836:	f040 8085 	bne.w	800a944 <_scanf_i+0x1c0>
 800a83a:	f10b 0b01 	add.w	fp, fp, #1
 800a83e:	f1bb 0f03 	cmp.w	fp, #3
 800a842:	d1cb      	bne.n	800a7dc <_scanf_i+0x58>
 800a844:	6863      	ldr	r3, [r4, #4]
 800a846:	b90b      	cbnz	r3, 800a84c <_scanf_i+0xc8>
 800a848:	230a      	movs	r3, #10
 800a84a:	6063      	str	r3, [r4, #4]
 800a84c:	6863      	ldr	r3, [r4, #4]
 800a84e:	4945      	ldr	r1, [pc, #276]	@ (800a964 <_scanf_i+0x1e0>)
 800a850:	6960      	ldr	r0, [r4, #20]
 800a852:	1ac9      	subs	r1, r1, r3
 800a854:	f000 f930 	bl	800aab8 <__sccl>
 800a858:	f04f 0b00 	mov.w	fp, #0
 800a85c:	68a3      	ldr	r3, [r4, #8]
 800a85e:	6822      	ldr	r2, [r4, #0]
 800a860:	2b00      	cmp	r3, #0
 800a862:	d03d      	beq.n	800a8e0 <_scanf_i+0x15c>
 800a864:	6831      	ldr	r1, [r6, #0]
 800a866:	6960      	ldr	r0, [r4, #20]
 800a868:	f891 c000 	ldrb.w	ip, [r1]
 800a86c:	f810 000c 	ldrb.w	r0, [r0, ip]
 800a870:	2800      	cmp	r0, #0
 800a872:	d035      	beq.n	800a8e0 <_scanf_i+0x15c>
 800a874:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 800a878:	d124      	bne.n	800a8c4 <_scanf_i+0x140>
 800a87a:	0510      	lsls	r0, r2, #20
 800a87c:	d522      	bpl.n	800a8c4 <_scanf_i+0x140>
 800a87e:	f10b 0b01 	add.w	fp, fp, #1
 800a882:	f1b9 0f00 	cmp.w	r9, #0
 800a886:	d003      	beq.n	800a890 <_scanf_i+0x10c>
 800a888:	3301      	adds	r3, #1
 800a88a:	f109 39ff 	add.w	r9, r9, #4294967295
 800a88e:	60a3      	str	r3, [r4, #8]
 800a890:	6873      	ldr	r3, [r6, #4]
 800a892:	3b01      	subs	r3, #1
 800a894:	2b00      	cmp	r3, #0
 800a896:	6073      	str	r3, [r6, #4]
 800a898:	dd1b      	ble.n	800a8d2 <_scanf_i+0x14e>
 800a89a:	6833      	ldr	r3, [r6, #0]
 800a89c:	3301      	adds	r3, #1
 800a89e:	6033      	str	r3, [r6, #0]
 800a8a0:	68a3      	ldr	r3, [r4, #8]
 800a8a2:	3b01      	subs	r3, #1
 800a8a4:	60a3      	str	r3, [r4, #8]
 800a8a6:	e7d9      	b.n	800a85c <_scanf_i+0xd8>
 800a8a8:	f1bb 0f02 	cmp.w	fp, #2
 800a8ac:	d1ae      	bne.n	800a80c <_scanf_i+0x88>
 800a8ae:	6822      	ldr	r2, [r4, #0]
 800a8b0:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 800a8b4:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800a8b8:	d1bf      	bne.n	800a83a <_scanf_i+0xb6>
 800a8ba:	2110      	movs	r1, #16
 800a8bc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a8c0:	6061      	str	r1, [r4, #4]
 800a8c2:	e7a2      	b.n	800a80a <_scanf_i+0x86>
 800a8c4:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 800a8c8:	6022      	str	r2, [r4, #0]
 800a8ca:	780b      	ldrb	r3, [r1, #0]
 800a8cc:	f805 3b01 	strb.w	r3, [r5], #1
 800a8d0:	e7de      	b.n	800a890 <_scanf_i+0x10c>
 800a8d2:	4631      	mov	r1, r6
 800a8d4:	4650      	mov	r0, sl
 800a8d6:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800a8da:	4798      	blx	r3
 800a8dc:	2800      	cmp	r0, #0
 800a8de:	d0df      	beq.n	800a8a0 <_scanf_i+0x11c>
 800a8e0:	6823      	ldr	r3, [r4, #0]
 800a8e2:	05d9      	lsls	r1, r3, #23
 800a8e4:	d50d      	bpl.n	800a902 <_scanf_i+0x17e>
 800a8e6:	42bd      	cmp	r5, r7
 800a8e8:	d909      	bls.n	800a8fe <_scanf_i+0x17a>
 800a8ea:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800a8ee:	4632      	mov	r2, r6
 800a8f0:	4650      	mov	r0, sl
 800a8f2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a8f6:	f105 39ff 	add.w	r9, r5, #4294967295
 800a8fa:	4798      	blx	r3
 800a8fc:	464d      	mov	r5, r9
 800a8fe:	42bd      	cmp	r5, r7
 800a900:	d028      	beq.n	800a954 <_scanf_i+0x1d0>
 800a902:	6822      	ldr	r2, [r4, #0]
 800a904:	f012 0210 	ands.w	r2, r2, #16
 800a908:	d113      	bne.n	800a932 <_scanf_i+0x1ae>
 800a90a:	702a      	strb	r2, [r5, #0]
 800a90c:	4639      	mov	r1, r7
 800a90e:	6863      	ldr	r3, [r4, #4]
 800a910:	4650      	mov	r0, sl
 800a912:	9e01      	ldr	r6, [sp, #4]
 800a914:	47b0      	blx	r6
 800a916:	f8d8 3000 	ldr.w	r3, [r8]
 800a91a:	6821      	ldr	r1, [r4, #0]
 800a91c:	1d1a      	adds	r2, r3, #4
 800a91e:	f8c8 2000 	str.w	r2, [r8]
 800a922:	f011 0f20 	tst.w	r1, #32
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	d00f      	beq.n	800a94a <_scanf_i+0x1c6>
 800a92a:	6018      	str	r0, [r3, #0]
 800a92c:	68e3      	ldr	r3, [r4, #12]
 800a92e:	3301      	adds	r3, #1
 800a930:	60e3      	str	r3, [r4, #12]
 800a932:	2000      	movs	r0, #0
 800a934:	6923      	ldr	r3, [r4, #16]
 800a936:	1bed      	subs	r5, r5, r7
 800a938:	445d      	add	r5, fp
 800a93a:	442b      	add	r3, r5
 800a93c:	6123      	str	r3, [r4, #16]
 800a93e:	b007      	add	sp, #28
 800a940:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a944:	f04f 0b00 	mov.w	fp, #0
 800a948:	e7ca      	b.n	800a8e0 <_scanf_i+0x15c>
 800a94a:	07ca      	lsls	r2, r1, #31
 800a94c:	bf4c      	ite	mi
 800a94e:	8018      	strhmi	r0, [r3, #0]
 800a950:	6018      	strpl	r0, [r3, #0]
 800a952:	e7eb      	b.n	800a92c <_scanf_i+0x1a8>
 800a954:	2001      	movs	r0, #1
 800a956:	e7f2      	b.n	800a93e <_scanf_i+0x1ba>
 800a958:	0800ca60 	.word	0x0800ca60
 800a95c:	0800a089 	.word	0x0800a089
 800a960:	0800b471 	.word	0x0800b471
 800a964:	0800ce2a 	.word	0x0800ce2a

0800a968 <__sflush_r>:
 800a968:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a96c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a96e:	0716      	lsls	r6, r2, #28
 800a970:	4605      	mov	r5, r0
 800a972:	460c      	mov	r4, r1
 800a974:	d454      	bmi.n	800aa20 <__sflush_r+0xb8>
 800a976:	684b      	ldr	r3, [r1, #4]
 800a978:	2b00      	cmp	r3, #0
 800a97a:	dc02      	bgt.n	800a982 <__sflush_r+0x1a>
 800a97c:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a97e:	2b00      	cmp	r3, #0
 800a980:	dd48      	ble.n	800aa14 <__sflush_r+0xac>
 800a982:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a984:	2e00      	cmp	r6, #0
 800a986:	d045      	beq.n	800aa14 <__sflush_r+0xac>
 800a988:	2300      	movs	r3, #0
 800a98a:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a98e:	682f      	ldr	r7, [r5, #0]
 800a990:	6a21      	ldr	r1, [r4, #32]
 800a992:	602b      	str	r3, [r5, #0]
 800a994:	d030      	beq.n	800a9f8 <__sflush_r+0x90>
 800a996:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a998:	89a3      	ldrh	r3, [r4, #12]
 800a99a:	0759      	lsls	r1, r3, #29
 800a99c:	d505      	bpl.n	800a9aa <__sflush_r+0x42>
 800a99e:	6863      	ldr	r3, [r4, #4]
 800a9a0:	1ad2      	subs	r2, r2, r3
 800a9a2:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a9a4:	b10b      	cbz	r3, 800a9aa <__sflush_r+0x42>
 800a9a6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a9a8:	1ad2      	subs	r2, r2, r3
 800a9aa:	2300      	movs	r3, #0
 800a9ac:	4628      	mov	r0, r5
 800a9ae:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a9b0:	6a21      	ldr	r1, [r4, #32]
 800a9b2:	47b0      	blx	r6
 800a9b4:	1c43      	adds	r3, r0, #1
 800a9b6:	89a3      	ldrh	r3, [r4, #12]
 800a9b8:	d106      	bne.n	800a9c8 <__sflush_r+0x60>
 800a9ba:	6829      	ldr	r1, [r5, #0]
 800a9bc:	291d      	cmp	r1, #29
 800a9be:	d82b      	bhi.n	800aa18 <__sflush_r+0xb0>
 800a9c0:	4a28      	ldr	r2, [pc, #160]	@ (800aa64 <__sflush_r+0xfc>)
 800a9c2:	410a      	asrs	r2, r1
 800a9c4:	07d6      	lsls	r6, r2, #31
 800a9c6:	d427      	bmi.n	800aa18 <__sflush_r+0xb0>
 800a9c8:	2200      	movs	r2, #0
 800a9ca:	6062      	str	r2, [r4, #4]
 800a9cc:	6922      	ldr	r2, [r4, #16]
 800a9ce:	04d9      	lsls	r1, r3, #19
 800a9d0:	6022      	str	r2, [r4, #0]
 800a9d2:	d504      	bpl.n	800a9de <__sflush_r+0x76>
 800a9d4:	1c42      	adds	r2, r0, #1
 800a9d6:	d101      	bne.n	800a9dc <__sflush_r+0x74>
 800a9d8:	682b      	ldr	r3, [r5, #0]
 800a9da:	b903      	cbnz	r3, 800a9de <__sflush_r+0x76>
 800a9dc:	6560      	str	r0, [r4, #84]	@ 0x54
 800a9de:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a9e0:	602f      	str	r7, [r5, #0]
 800a9e2:	b1b9      	cbz	r1, 800aa14 <__sflush_r+0xac>
 800a9e4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a9e8:	4299      	cmp	r1, r3
 800a9ea:	d002      	beq.n	800a9f2 <__sflush_r+0x8a>
 800a9ec:	4628      	mov	r0, r5
 800a9ee:	f7fd ff2b 	bl	8008848 <_free_r>
 800a9f2:	2300      	movs	r3, #0
 800a9f4:	6363      	str	r3, [r4, #52]	@ 0x34
 800a9f6:	e00d      	b.n	800aa14 <__sflush_r+0xac>
 800a9f8:	2301      	movs	r3, #1
 800a9fa:	4628      	mov	r0, r5
 800a9fc:	47b0      	blx	r6
 800a9fe:	4602      	mov	r2, r0
 800aa00:	1c50      	adds	r0, r2, #1
 800aa02:	d1c9      	bne.n	800a998 <__sflush_r+0x30>
 800aa04:	682b      	ldr	r3, [r5, #0]
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d0c6      	beq.n	800a998 <__sflush_r+0x30>
 800aa0a:	2b1d      	cmp	r3, #29
 800aa0c:	d001      	beq.n	800aa12 <__sflush_r+0xaa>
 800aa0e:	2b16      	cmp	r3, #22
 800aa10:	d11d      	bne.n	800aa4e <__sflush_r+0xe6>
 800aa12:	602f      	str	r7, [r5, #0]
 800aa14:	2000      	movs	r0, #0
 800aa16:	e021      	b.n	800aa5c <__sflush_r+0xf4>
 800aa18:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800aa1c:	b21b      	sxth	r3, r3
 800aa1e:	e01a      	b.n	800aa56 <__sflush_r+0xee>
 800aa20:	690f      	ldr	r7, [r1, #16]
 800aa22:	2f00      	cmp	r7, #0
 800aa24:	d0f6      	beq.n	800aa14 <__sflush_r+0xac>
 800aa26:	0793      	lsls	r3, r2, #30
 800aa28:	bf18      	it	ne
 800aa2a:	2300      	movne	r3, #0
 800aa2c:	680e      	ldr	r6, [r1, #0]
 800aa2e:	bf08      	it	eq
 800aa30:	694b      	ldreq	r3, [r1, #20]
 800aa32:	1bf6      	subs	r6, r6, r7
 800aa34:	600f      	str	r7, [r1, #0]
 800aa36:	608b      	str	r3, [r1, #8]
 800aa38:	2e00      	cmp	r6, #0
 800aa3a:	ddeb      	ble.n	800aa14 <__sflush_r+0xac>
 800aa3c:	4633      	mov	r3, r6
 800aa3e:	463a      	mov	r2, r7
 800aa40:	4628      	mov	r0, r5
 800aa42:	6a21      	ldr	r1, [r4, #32]
 800aa44:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800aa48:	47e0      	blx	ip
 800aa4a:	2800      	cmp	r0, #0
 800aa4c:	dc07      	bgt.n	800aa5e <__sflush_r+0xf6>
 800aa4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aa52:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800aa56:	f04f 30ff 	mov.w	r0, #4294967295
 800aa5a:	81a3      	strh	r3, [r4, #12]
 800aa5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aa5e:	4407      	add	r7, r0
 800aa60:	1a36      	subs	r6, r6, r0
 800aa62:	e7e9      	b.n	800aa38 <__sflush_r+0xd0>
 800aa64:	dfbffffe 	.word	0xdfbffffe

0800aa68 <_fflush_r>:
 800aa68:	b538      	push	{r3, r4, r5, lr}
 800aa6a:	690b      	ldr	r3, [r1, #16]
 800aa6c:	4605      	mov	r5, r0
 800aa6e:	460c      	mov	r4, r1
 800aa70:	b913      	cbnz	r3, 800aa78 <_fflush_r+0x10>
 800aa72:	2500      	movs	r5, #0
 800aa74:	4628      	mov	r0, r5
 800aa76:	bd38      	pop	{r3, r4, r5, pc}
 800aa78:	b118      	cbz	r0, 800aa82 <_fflush_r+0x1a>
 800aa7a:	6a03      	ldr	r3, [r0, #32]
 800aa7c:	b90b      	cbnz	r3, 800aa82 <_fflush_r+0x1a>
 800aa7e:	f7fc feef 	bl	8007860 <__sinit>
 800aa82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d0f3      	beq.n	800aa72 <_fflush_r+0xa>
 800aa8a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800aa8c:	07d0      	lsls	r0, r2, #31
 800aa8e:	d404      	bmi.n	800aa9a <_fflush_r+0x32>
 800aa90:	0599      	lsls	r1, r3, #22
 800aa92:	d402      	bmi.n	800aa9a <_fflush_r+0x32>
 800aa94:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800aa96:	f7fd f870 	bl	8007b7a <__retarget_lock_acquire_recursive>
 800aa9a:	4628      	mov	r0, r5
 800aa9c:	4621      	mov	r1, r4
 800aa9e:	f7ff ff63 	bl	800a968 <__sflush_r>
 800aaa2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800aaa4:	4605      	mov	r5, r0
 800aaa6:	07da      	lsls	r2, r3, #31
 800aaa8:	d4e4      	bmi.n	800aa74 <_fflush_r+0xc>
 800aaaa:	89a3      	ldrh	r3, [r4, #12]
 800aaac:	059b      	lsls	r3, r3, #22
 800aaae:	d4e1      	bmi.n	800aa74 <_fflush_r+0xc>
 800aab0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800aab2:	f7fd f863 	bl	8007b7c <__retarget_lock_release_recursive>
 800aab6:	e7dd      	b.n	800aa74 <_fflush_r+0xc>

0800aab8 <__sccl>:
 800aab8:	b570      	push	{r4, r5, r6, lr}
 800aaba:	780b      	ldrb	r3, [r1, #0]
 800aabc:	4604      	mov	r4, r0
 800aabe:	2b5e      	cmp	r3, #94	@ 0x5e
 800aac0:	bf0b      	itete	eq
 800aac2:	784b      	ldrbeq	r3, [r1, #1]
 800aac4:	1c4a      	addne	r2, r1, #1
 800aac6:	1c8a      	addeq	r2, r1, #2
 800aac8:	2100      	movne	r1, #0
 800aaca:	bf08      	it	eq
 800aacc:	2101      	moveq	r1, #1
 800aace:	3801      	subs	r0, #1
 800aad0:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 800aad4:	f800 1f01 	strb.w	r1, [r0, #1]!
 800aad8:	42a8      	cmp	r0, r5
 800aada:	d1fb      	bne.n	800aad4 <__sccl+0x1c>
 800aadc:	b90b      	cbnz	r3, 800aae2 <__sccl+0x2a>
 800aade:	1e50      	subs	r0, r2, #1
 800aae0:	bd70      	pop	{r4, r5, r6, pc}
 800aae2:	f081 0101 	eor.w	r1, r1, #1
 800aae6:	4610      	mov	r0, r2
 800aae8:	54e1      	strb	r1, [r4, r3]
 800aaea:	4602      	mov	r2, r0
 800aaec:	f812 5b01 	ldrb.w	r5, [r2], #1
 800aaf0:	2d2d      	cmp	r5, #45	@ 0x2d
 800aaf2:	d005      	beq.n	800ab00 <__sccl+0x48>
 800aaf4:	2d5d      	cmp	r5, #93	@ 0x5d
 800aaf6:	d016      	beq.n	800ab26 <__sccl+0x6e>
 800aaf8:	2d00      	cmp	r5, #0
 800aafa:	d0f1      	beq.n	800aae0 <__sccl+0x28>
 800aafc:	462b      	mov	r3, r5
 800aafe:	e7f2      	b.n	800aae6 <__sccl+0x2e>
 800ab00:	7846      	ldrb	r6, [r0, #1]
 800ab02:	2e5d      	cmp	r6, #93	@ 0x5d
 800ab04:	d0fa      	beq.n	800aafc <__sccl+0x44>
 800ab06:	42b3      	cmp	r3, r6
 800ab08:	dcf8      	bgt.n	800aafc <__sccl+0x44>
 800ab0a:	461a      	mov	r2, r3
 800ab0c:	3002      	adds	r0, #2
 800ab0e:	3201      	adds	r2, #1
 800ab10:	4296      	cmp	r6, r2
 800ab12:	54a1      	strb	r1, [r4, r2]
 800ab14:	dcfb      	bgt.n	800ab0e <__sccl+0x56>
 800ab16:	1af2      	subs	r2, r6, r3
 800ab18:	3a01      	subs	r2, #1
 800ab1a:	42b3      	cmp	r3, r6
 800ab1c:	bfa8      	it	ge
 800ab1e:	2200      	movge	r2, #0
 800ab20:	1c5d      	adds	r5, r3, #1
 800ab22:	18ab      	adds	r3, r5, r2
 800ab24:	e7e1      	b.n	800aaea <__sccl+0x32>
 800ab26:	4610      	mov	r0, r2
 800ab28:	e7da      	b.n	800aae0 <__sccl+0x28>

0800ab2a <__submore>:
 800ab2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab2e:	460c      	mov	r4, r1
 800ab30:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800ab32:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ab36:	4299      	cmp	r1, r3
 800ab38:	d11b      	bne.n	800ab72 <__submore+0x48>
 800ab3a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800ab3e:	f7fd fef5 	bl	800892c <_malloc_r>
 800ab42:	b918      	cbnz	r0, 800ab4c <__submore+0x22>
 800ab44:	f04f 30ff 	mov.w	r0, #4294967295
 800ab48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ab4c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ab50:	63a3      	str	r3, [r4, #56]	@ 0x38
 800ab52:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 800ab56:	6360      	str	r0, [r4, #52]	@ 0x34
 800ab58:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 800ab5c:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800ab60:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 800ab64:	7043      	strb	r3, [r0, #1]
 800ab66:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800ab6a:	7003      	strb	r3, [r0, #0]
 800ab6c:	6020      	str	r0, [r4, #0]
 800ab6e:	2000      	movs	r0, #0
 800ab70:	e7ea      	b.n	800ab48 <__submore+0x1e>
 800ab72:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 800ab74:	0077      	lsls	r7, r6, #1
 800ab76:	463a      	mov	r2, r7
 800ab78:	f000 fbdd 	bl	800b336 <_realloc_r>
 800ab7c:	4605      	mov	r5, r0
 800ab7e:	2800      	cmp	r0, #0
 800ab80:	d0e0      	beq.n	800ab44 <__submore+0x1a>
 800ab82:	eb00 0806 	add.w	r8, r0, r6
 800ab86:	4601      	mov	r1, r0
 800ab88:	4632      	mov	r2, r6
 800ab8a:	4640      	mov	r0, r8
 800ab8c:	f000 f842 	bl	800ac14 <memcpy>
 800ab90:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 800ab94:	f8c4 8000 	str.w	r8, [r4]
 800ab98:	e7e9      	b.n	800ab6e <__submore+0x44>

0800ab9a <memmove>:
 800ab9a:	4288      	cmp	r0, r1
 800ab9c:	b510      	push	{r4, lr}
 800ab9e:	eb01 0402 	add.w	r4, r1, r2
 800aba2:	d902      	bls.n	800abaa <memmove+0x10>
 800aba4:	4284      	cmp	r4, r0
 800aba6:	4623      	mov	r3, r4
 800aba8:	d807      	bhi.n	800abba <memmove+0x20>
 800abaa:	1e43      	subs	r3, r0, #1
 800abac:	42a1      	cmp	r1, r4
 800abae:	d008      	beq.n	800abc2 <memmove+0x28>
 800abb0:	f811 2b01 	ldrb.w	r2, [r1], #1
 800abb4:	f803 2f01 	strb.w	r2, [r3, #1]!
 800abb8:	e7f8      	b.n	800abac <memmove+0x12>
 800abba:	4601      	mov	r1, r0
 800abbc:	4402      	add	r2, r0
 800abbe:	428a      	cmp	r2, r1
 800abc0:	d100      	bne.n	800abc4 <memmove+0x2a>
 800abc2:	bd10      	pop	{r4, pc}
 800abc4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800abc8:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800abcc:	e7f7      	b.n	800abbe <memmove+0x24>

0800abce <strncmp>:
 800abce:	b510      	push	{r4, lr}
 800abd0:	b16a      	cbz	r2, 800abee <strncmp+0x20>
 800abd2:	3901      	subs	r1, #1
 800abd4:	1884      	adds	r4, r0, r2
 800abd6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800abda:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800abde:	429a      	cmp	r2, r3
 800abe0:	d103      	bne.n	800abea <strncmp+0x1c>
 800abe2:	42a0      	cmp	r0, r4
 800abe4:	d001      	beq.n	800abea <strncmp+0x1c>
 800abe6:	2a00      	cmp	r2, #0
 800abe8:	d1f5      	bne.n	800abd6 <strncmp+0x8>
 800abea:	1ad0      	subs	r0, r2, r3
 800abec:	bd10      	pop	{r4, pc}
 800abee:	4610      	mov	r0, r2
 800abf0:	e7fc      	b.n	800abec <strncmp+0x1e>
	...

0800abf4 <_sbrk_r>:
 800abf4:	b538      	push	{r3, r4, r5, lr}
 800abf6:	2300      	movs	r3, #0
 800abf8:	4d05      	ldr	r5, [pc, #20]	@ (800ac10 <_sbrk_r+0x1c>)
 800abfa:	4604      	mov	r4, r0
 800abfc:	4608      	mov	r0, r1
 800abfe:	602b      	str	r3, [r5, #0]
 800ac00:	f7f8 fce8 	bl	80035d4 <_sbrk>
 800ac04:	1c43      	adds	r3, r0, #1
 800ac06:	d102      	bne.n	800ac0e <_sbrk_r+0x1a>
 800ac08:	682b      	ldr	r3, [r5, #0]
 800ac0a:	b103      	cbz	r3, 800ac0e <_sbrk_r+0x1a>
 800ac0c:	6023      	str	r3, [r4, #0]
 800ac0e:	bd38      	pop	{r3, r4, r5, pc}
 800ac10:	20000a94 	.word	0x20000a94

0800ac14 <memcpy>:
 800ac14:	440a      	add	r2, r1
 800ac16:	4291      	cmp	r1, r2
 800ac18:	f100 33ff 	add.w	r3, r0, #4294967295
 800ac1c:	d100      	bne.n	800ac20 <memcpy+0xc>
 800ac1e:	4770      	bx	lr
 800ac20:	b510      	push	{r4, lr}
 800ac22:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ac26:	4291      	cmp	r1, r2
 800ac28:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ac2c:	d1f9      	bne.n	800ac22 <memcpy+0xe>
 800ac2e:	bd10      	pop	{r4, pc}

0800ac30 <nan>:
 800ac30:	2000      	movs	r0, #0
 800ac32:	4901      	ldr	r1, [pc, #4]	@ (800ac38 <nan+0x8>)
 800ac34:	4770      	bx	lr
 800ac36:	bf00      	nop
 800ac38:	7ff80000 	.word	0x7ff80000

0800ac3c <__assert_func>:
 800ac3c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ac3e:	4614      	mov	r4, r2
 800ac40:	461a      	mov	r2, r3
 800ac42:	4b09      	ldr	r3, [pc, #36]	@ (800ac68 <__assert_func+0x2c>)
 800ac44:	4605      	mov	r5, r0
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	68d8      	ldr	r0, [r3, #12]
 800ac4a:	b954      	cbnz	r4, 800ac62 <__assert_func+0x26>
 800ac4c:	4b07      	ldr	r3, [pc, #28]	@ (800ac6c <__assert_func+0x30>)
 800ac4e:	461c      	mov	r4, r3
 800ac50:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ac54:	9100      	str	r1, [sp, #0]
 800ac56:	462b      	mov	r3, r5
 800ac58:	4905      	ldr	r1, [pc, #20]	@ (800ac70 <__assert_func+0x34>)
 800ac5a:	f000 fc19 	bl	800b490 <fiprintf>
 800ac5e:	f000 fc29 	bl	800b4b4 <abort>
 800ac62:	4b04      	ldr	r3, [pc, #16]	@ (800ac74 <__assert_func+0x38>)
 800ac64:	e7f4      	b.n	800ac50 <__assert_func+0x14>
 800ac66:	bf00      	nop
 800ac68:	2000001c 	.word	0x2000001c
 800ac6c:	0800ce78 	.word	0x0800ce78
 800ac70:	0800ce4a 	.word	0x0800ce4a
 800ac74:	0800ce3d 	.word	0x0800ce3d

0800ac78 <_calloc_r>:
 800ac78:	b570      	push	{r4, r5, r6, lr}
 800ac7a:	fba1 5402 	umull	r5, r4, r1, r2
 800ac7e:	b93c      	cbnz	r4, 800ac90 <_calloc_r+0x18>
 800ac80:	4629      	mov	r1, r5
 800ac82:	f7fd fe53 	bl	800892c <_malloc_r>
 800ac86:	4606      	mov	r6, r0
 800ac88:	b928      	cbnz	r0, 800ac96 <_calloc_r+0x1e>
 800ac8a:	2600      	movs	r6, #0
 800ac8c:	4630      	mov	r0, r6
 800ac8e:	bd70      	pop	{r4, r5, r6, pc}
 800ac90:	220c      	movs	r2, #12
 800ac92:	6002      	str	r2, [r0, #0]
 800ac94:	e7f9      	b.n	800ac8a <_calloc_r+0x12>
 800ac96:	462a      	mov	r2, r5
 800ac98:	4621      	mov	r1, r4
 800ac9a:	f7fc feda 	bl	8007a52 <memset>
 800ac9e:	e7f5      	b.n	800ac8c <_calloc_r+0x14>

0800aca0 <rshift>:
 800aca0:	6903      	ldr	r3, [r0, #16]
 800aca2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800aca6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800acaa:	f100 0414 	add.w	r4, r0, #20
 800acae:	ea4f 1261 	mov.w	r2, r1, asr #5
 800acb2:	dd46      	ble.n	800ad42 <rshift+0xa2>
 800acb4:	f011 011f 	ands.w	r1, r1, #31
 800acb8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800acbc:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800acc0:	d10c      	bne.n	800acdc <rshift+0x3c>
 800acc2:	4629      	mov	r1, r5
 800acc4:	f100 0710 	add.w	r7, r0, #16
 800acc8:	42b1      	cmp	r1, r6
 800acca:	d335      	bcc.n	800ad38 <rshift+0x98>
 800accc:	1a9b      	subs	r3, r3, r2
 800acce:	009b      	lsls	r3, r3, #2
 800acd0:	1eea      	subs	r2, r5, #3
 800acd2:	4296      	cmp	r6, r2
 800acd4:	bf38      	it	cc
 800acd6:	2300      	movcc	r3, #0
 800acd8:	4423      	add	r3, r4
 800acda:	e015      	b.n	800ad08 <rshift+0x68>
 800acdc:	46a1      	mov	r9, r4
 800acde:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800ace2:	f1c1 0820 	rsb	r8, r1, #32
 800ace6:	40cf      	lsrs	r7, r1
 800ace8:	f105 0e04 	add.w	lr, r5, #4
 800acec:	4576      	cmp	r6, lr
 800acee:	46f4      	mov	ip, lr
 800acf0:	d816      	bhi.n	800ad20 <rshift+0x80>
 800acf2:	1a9a      	subs	r2, r3, r2
 800acf4:	0092      	lsls	r2, r2, #2
 800acf6:	3a04      	subs	r2, #4
 800acf8:	3501      	adds	r5, #1
 800acfa:	42ae      	cmp	r6, r5
 800acfc:	bf38      	it	cc
 800acfe:	2200      	movcc	r2, #0
 800ad00:	18a3      	adds	r3, r4, r2
 800ad02:	50a7      	str	r7, [r4, r2]
 800ad04:	b107      	cbz	r7, 800ad08 <rshift+0x68>
 800ad06:	3304      	adds	r3, #4
 800ad08:	42a3      	cmp	r3, r4
 800ad0a:	eba3 0204 	sub.w	r2, r3, r4
 800ad0e:	bf08      	it	eq
 800ad10:	2300      	moveq	r3, #0
 800ad12:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800ad16:	6102      	str	r2, [r0, #16]
 800ad18:	bf08      	it	eq
 800ad1a:	6143      	streq	r3, [r0, #20]
 800ad1c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ad20:	f8dc c000 	ldr.w	ip, [ip]
 800ad24:	fa0c fc08 	lsl.w	ip, ip, r8
 800ad28:	ea4c 0707 	orr.w	r7, ip, r7
 800ad2c:	f849 7b04 	str.w	r7, [r9], #4
 800ad30:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ad34:	40cf      	lsrs	r7, r1
 800ad36:	e7d9      	b.n	800acec <rshift+0x4c>
 800ad38:	f851 cb04 	ldr.w	ip, [r1], #4
 800ad3c:	f847 cf04 	str.w	ip, [r7, #4]!
 800ad40:	e7c2      	b.n	800acc8 <rshift+0x28>
 800ad42:	4623      	mov	r3, r4
 800ad44:	e7e0      	b.n	800ad08 <rshift+0x68>

0800ad46 <__hexdig_fun>:
 800ad46:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800ad4a:	2b09      	cmp	r3, #9
 800ad4c:	d802      	bhi.n	800ad54 <__hexdig_fun+0xe>
 800ad4e:	3820      	subs	r0, #32
 800ad50:	b2c0      	uxtb	r0, r0
 800ad52:	4770      	bx	lr
 800ad54:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800ad58:	2b05      	cmp	r3, #5
 800ad5a:	d801      	bhi.n	800ad60 <__hexdig_fun+0x1a>
 800ad5c:	3847      	subs	r0, #71	@ 0x47
 800ad5e:	e7f7      	b.n	800ad50 <__hexdig_fun+0xa>
 800ad60:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800ad64:	2b05      	cmp	r3, #5
 800ad66:	d801      	bhi.n	800ad6c <__hexdig_fun+0x26>
 800ad68:	3827      	subs	r0, #39	@ 0x27
 800ad6a:	e7f1      	b.n	800ad50 <__hexdig_fun+0xa>
 800ad6c:	2000      	movs	r0, #0
 800ad6e:	4770      	bx	lr

0800ad70 <__gethex>:
 800ad70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad74:	468a      	mov	sl, r1
 800ad76:	4690      	mov	r8, r2
 800ad78:	b085      	sub	sp, #20
 800ad7a:	9302      	str	r3, [sp, #8]
 800ad7c:	680b      	ldr	r3, [r1, #0]
 800ad7e:	9001      	str	r0, [sp, #4]
 800ad80:	1c9c      	adds	r4, r3, #2
 800ad82:	46a1      	mov	r9, r4
 800ad84:	f814 0b01 	ldrb.w	r0, [r4], #1
 800ad88:	2830      	cmp	r0, #48	@ 0x30
 800ad8a:	d0fa      	beq.n	800ad82 <__gethex+0x12>
 800ad8c:	eba9 0303 	sub.w	r3, r9, r3
 800ad90:	f1a3 0b02 	sub.w	fp, r3, #2
 800ad94:	f7ff ffd7 	bl	800ad46 <__hexdig_fun>
 800ad98:	4605      	mov	r5, r0
 800ad9a:	2800      	cmp	r0, #0
 800ad9c:	d168      	bne.n	800ae70 <__gethex+0x100>
 800ad9e:	2201      	movs	r2, #1
 800ada0:	4648      	mov	r0, r9
 800ada2:	499f      	ldr	r1, [pc, #636]	@ (800b020 <__gethex+0x2b0>)
 800ada4:	f7ff ff13 	bl	800abce <strncmp>
 800ada8:	4607      	mov	r7, r0
 800adaa:	2800      	cmp	r0, #0
 800adac:	d167      	bne.n	800ae7e <__gethex+0x10e>
 800adae:	f899 0001 	ldrb.w	r0, [r9, #1]
 800adb2:	4626      	mov	r6, r4
 800adb4:	f7ff ffc7 	bl	800ad46 <__hexdig_fun>
 800adb8:	2800      	cmp	r0, #0
 800adba:	d062      	beq.n	800ae82 <__gethex+0x112>
 800adbc:	4623      	mov	r3, r4
 800adbe:	7818      	ldrb	r0, [r3, #0]
 800adc0:	4699      	mov	r9, r3
 800adc2:	2830      	cmp	r0, #48	@ 0x30
 800adc4:	f103 0301 	add.w	r3, r3, #1
 800adc8:	d0f9      	beq.n	800adbe <__gethex+0x4e>
 800adca:	f7ff ffbc 	bl	800ad46 <__hexdig_fun>
 800adce:	fab0 f580 	clz	r5, r0
 800add2:	f04f 0b01 	mov.w	fp, #1
 800add6:	096d      	lsrs	r5, r5, #5
 800add8:	464a      	mov	r2, r9
 800adda:	4616      	mov	r6, r2
 800addc:	7830      	ldrb	r0, [r6, #0]
 800adde:	3201      	adds	r2, #1
 800ade0:	f7ff ffb1 	bl	800ad46 <__hexdig_fun>
 800ade4:	2800      	cmp	r0, #0
 800ade6:	d1f8      	bne.n	800adda <__gethex+0x6a>
 800ade8:	2201      	movs	r2, #1
 800adea:	4630      	mov	r0, r6
 800adec:	498c      	ldr	r1, [pc, #560]	@ (800b020 <__gethex+0x2b0>)
 800adee:	f7ff feee 	bl	800abce <strncmp>
 800adf2:	2800      	cmp	r0, #0
 800adf4:	d13f      	bne.n	800ae76 <__gethex+0x106>
 800adf6:	b944      	cbnz	r4, 800ae0a <__gethex+0x9a>
 800adf8:	1c74      	adds	r4, r6, #1
 800adfa:	4622      	mov	r2, r4
 800adfc:	4616      	mov	r6, r2
 800adfe:	7830      	ldrb	r0, [r6, #0]
 800ae00:	3201      	adds	r2, #1
 800ae02:	f7ff ffa0 	bl	800ad46 <__hexdig_fun>
 800ae06:	2800      	cmp	r0, #0
 800ae08:	d1f8      	bne.n	800adfc <__gethex+0x8c>
 800ae0a:	1ba4      	subs	r4, r4, r6
 800ae0c:	00a7      	lsls	r7, r4, #2
 800ae0e:	7833      	ldrb	r3, [r6, #0]
 800ae10:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800ae14:	2b50      	cmp	r3, #80	@ 0x50
 800ae16:	d13e      	bne.n	800ae96 <__gethex+0x126>
 800ae18:	7873      	ldrb	r3, [r6, #1]
 800ae1a:	2b2b      	cmp	r3, #43	@ 0x2b
 800ae1c:	d033      	beq.n	800ae86 <__gethex+0x116>
 800ae1e:	2b2d      	cmp	r3, #45	@ 0x2d
 800ae20:	d034      	beq.n	800ae8c <__gethex+0x11c>
 800ae22:	2400      	movs	r4, #0
 800ae24:	1c71      	adds	r1, r6, #1
 800ae26:	7808      	ldrb	r0, [r1, #0]
 800ae28:	f7ff ff8d 	bl	800ad46 <__hexdig_fun>
 800ae2c:	1e43      	subs	r3, r0, #1
 800ae2e:	b2db      	uxtb	r3, r3
 800ae30:	2b18      	cmp	r3, #24
 800ae32:	d830      	bhi.n	800ae96 <__gethex+0x126>
 800ae34:	f1a0 0210 	sub.w	r2, r0, #16
 800ae38:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800ae3c:	f7ff ff83 	bl	800ad46 <__hexdig_fun>
 800ae40:	f100 3cff 	add.w	ip, r0, #4294967295
 800ae44:	fa5f fc8c 	uxtb.w	ip, ip
 800ae48:	f1bc 0f18 	cmp.w	ip, #24
 800ae4c:	f04f 030a 	mov.w	r3, #10
 800ae50:	d91e      	bls.n	800ae90 <__gethex+0x120>
 800ae52:	b104      	cbz	r4, 800ae56 <__gethex+0xe6>
 800ae54:	4252      	negs	r2, r2
 800ae56:	4417      	add	r7, r2
 800ae58:	f8ca 1000 	str.w	r1, [sl]
 800ae5c:	b1ed      	cbz	r5, 800ae9a <__gethex+0x12a>
 800ae5e:	f1bb 0f00 	cmp.w	fp, #0
 800ae62:	bf0c      	ite	eq
 800ae64:	2506      	moveq	r5, #6
 800ae66:	2500      	movne	r5, #0
 800ae68:	4628      	mov	r0, r5
 800ae6a:	b005      	add	sp, #20
 800ae6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae70:	2500      	movs	r5, #0
 800ae72:	462c      	mov	r4, r5
 800ae74:	e7b0      	b.n	800add8 <__gethex+0x68>
 800ae76:	2c00      	cmp	r4, #0
 800ae78:	d1c7      	bne.n	800ae0a <__gethex+0x9a>
 800ae7a:	4627      	mov	r7, r4
 800ae7c:	e7c7      	b.n	800ae0e <__gethex+0x9e>
 800ae7e:	464e      	mov	r6, r9
 800ae80:	462f      	mov	r7, r5
 800ae82:	2501      	movs	r5, #1
 800ae84:	e7c3      	b.n	800ae0e <__gethex+0x9e>
 800ae86:	2400      	movs	r4, #0
 800ae88:	1cb1      	adds	r1, r6, #2
 800ae8a:	e7cc      	b.n	800ae26 <__gethex+0xb6>
 800ae8c:	2401      	movs	r4, #1
 800ae8e:	e7fb      	b.n	800ae88 <__gethex+0x118>
 800ae90:	fb03 0002 	mla	r0, r3, r2, r0
 800ae94:	e7ce      	b.n	800ae34 <__gethex+0xc4>
 800ae96:	4631      	mov	r1, r6
 800ae98:	e7de      	b.n	800ae58 <__gethex+0xe8>
 800ae9a:	4629      	mov	r1, r5
 800ae9c:	eba6 0309 	sub.w	r3, r6, r9
 800aea0:	3b01      	subs	r3, #1
 800aea2:	2b07      	cmp	r3, #7
 800aea4:	dc0a      	bgt.n	800aebc <__gethex+0x14c>
 800aea6:	9801      	ldr	r0, [sp, #4]
 800aea8:	f7fd fdcc 	bl	8008a44 <_Balloc>
 800aeac:	4604      	mov	r4, r0
 800aeae:	b940      	cbnz	r0, 800aec2 <__gethex+0x152>
 800aeb0:	4602      	mov	r2, r0
 800aeb2:	21e4      	movs	r1, #228	@ 0xe4
 800aeb4:	4b5b      	ldr	r3, [pc, #364]	@ (800b024 <__gethex+0x2b4>)
 800aeb6:	485c      	ldr	r0, [pc, #368]	@ (800b028 <__gethex+0x2b8>)
 800aeb8:	f7ff fec0 	bl	800ac3c <__assert_func>
 800aebc:	3101      	adds	r1, #1
 800aebe:	105b      	asrs	r3, r3, #1
 800aec0:	e7ef      	b.n	800aea2 <__gethex+0x132>
 800aec2:	2300      	movs	r3, #0
 800aec4:	f100 0a14 	add.w	sl, r0, #20
 800aec8:	4655      	mov	r5, sl
 800aeca:	469b      	mov	fp, r3
 800aecc:	45b1      	cmp	r9, r6
 800aece:	d337      	bcc.n	800af40 <__gethex+0x1d0>
 800aed0:	f845 bb04 	str.w	fp, [r5], #4
 800aed4:	eba5 050a 	sub.w	r5, r5, sl
 800aed8:	10ad      	asrs	r5, r5, #2
 800aeda:	6125      	str	r5, [r4, #16]
 800aedc:	4658      	mov	r0, fp
 800aede:	f7fd fea3 	bl	8008c28 <__hi0bits>
 800aee2:	016d      	lsls	r5, r5, #5
 800aee4:	f8d8 6000 	ldr.w	r6, [r8]
 800aee8:	1a2d      	subs	r5, r5, r0
 800aeea:	42b5      	cmp	r5, r6
 800aeec:	dd54      	ble.n	800af98 <__gethex+0x228>
 800aeee:	1bad      	subs	r5, r5, r6
 800aef0:	4629      	mov	r1, r5
 800aef2:	4620      	mov	r0, r4
 800aef4:	f7fe fa2b 	bl	800934e <__any_on>
 800aef8:	4681      	mov	r9, r0
 800aefa:	b178      	cbz	r0, 800af1c <__gethex+0x1ac>
 800aefc:	f04f 0901 	mov.w	r9, #1
 800af00:	1e6b      	subs	r3, r5, #1
 800af02:	1159      	asrs	r1, r3, #5
 800af04:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800af08:	f003 021f 	and.w	r2, r3, #31
 800af0c:	fa09 f202 	lsl.w	r2, r9, r2
 800af10:	420a      	tst	r2, r1
 800af12:	d003      	beq.n	800af1c <__gethex+0x1ac>
 800af14:	454b      	cmp	r3, r9
 800af16:	dc36      	bgt.n	800af86 <__gethex+0x216>
 800af18:	f04f 0902 	mov.w	r9, #2
 800af1c:	4629      	mov	r1, r5
 800af1e:	4620      	mov	r0, r4
 800af20:	f7ff febe 	bl	800aca0 <rshift>
 800af24:	442f      	add	r7, r5
 800af26:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800af2a:	42bb      	cmp	r3, r7
 800af2c:	da42      	bge.n	800afb4 <__gethex+0x244>
 800af2e:	4621      	mov	r1, r4
 800af30:	9801      	ldr	r0, [sp, #4]
 800af32:	f7fd fdc7 	bl	8008ac4 <_Bfree>
 800af36:	2300      	movs	r3, #0
 800af38:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800af3a:	25a3      	movs	r5, #163	@ 0xa3
 800af3c:	6013      	str	r3, [r2, #0]
 800af3e:	e793      	b.n	800ae68 <__gethex+0xf8>
 800af40:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800af44:	2a2e      	cmp	r2, #46	@ 0x2e
 800af46:	d012      	beq.n	800af6e <__gethex+0x1fe>
 800af48:	2b20      	cmp	r3, #32
 800af4a:	d104      	bne.n	800af56 <__gethex+0x1e6>
 800af4c:	f845 bb04 	str.w	fp, [r5], #4
 800af50:	f04f 0b00 	mov.w	fp, #0
 800af54:	465b      	mov	r3, fp
 800af56:	7830      	ldrb	r0, [r6, #0]
 800af58:	9303      	str	r3, [sp, #12]
 800af5a:	f7ff fef4 	bl	800ad46 <__hexdig_fun>
 800af5e:	9b03      	ldr	r3, [sp, #12]
 800af60:	f000 000f 	and.w	r0, r0, #15
 800af64:	4098      	lsls	r0, r3
 800af66:	ea4b 0b00 	orr.w	fp, fp, r0
 800af6a:	3304      	adds	r3, #4
 800af6c:	e7ae      	b.n	800aecc <__gethex+0x15c>
 800af6e:	45b1      	cmp	r9, r6
 800af70:	d8ea      	bhi.n	800af48 <__gethex+0x1d8>
 800af72:	2201      	movs	r2, #1
 800af74:	4630      	mov	r0, r6
 800af76:	492a      	ldr	r1, [pc, #168]	@ (800b020 <__gethex+0x2b0>)
 800af78:	9303      	str	r3, [sp, #12]
 800af7a:	f7ff fe28 	bl	800abce <strncmp>
 800af7e:	9b03      	ldr	r3, [sp, #12]
 800af80:	2800      	cmp	r0, #0
 800af82:	d1e1      	bne.n	800af48 <__gethex+0x1d8>
 800af84:	e7a2      	b.n	800aecc <__gethex+0x15c>
 800af86:	4620      	mov	r0, r4
 800af88:	1ea9      	subs	r1, r5, #2
 800af8a:	f7fe f9e0 	bl	800934e <__any_on>
 800af8e:	2800      	cmp	r0, #0
 800af90:	d0c2      	beq.n	800af18 <__gethex+0x1a8>
 800af92:	f04f 0903 	mov.w	r9, #3
 800af96:	e7c1      	b.n	800af1c <__gethex+0x1ac>
 800af98:	da09      	bge.n	800afae <__gethex+0x23e>
 800af9a:	1b75      	subs	r5, r6, r5
 800af9c:	4621      	mov	r1, r4
 800af9e:	462a      	mov	r2, r5
 800afa0:	9801      	ldr	r0, [sp, #4]
 800afa2:	f7fd ffa5 	bl	8008ef0 <__lshift>
 800afa6:	4604      	mov	r4, r0
 800afa8:	1b7f      	subs	r7, r7, r5
 800afaa:	f100 0a14 	add.w	sl, r0, #20
 800afae:	f04f 0900 	mov.w	r9, #0
 800afb2:	e7b8      	b.n	800af26 <__gethex+0x1b6>
 800afb4:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800afb8:	42bd      	cmp	r5, r7
 800afba:	dd6f      	ble.n	800b09c <__gethex+0x32c>
 800afbc:	1bed      	subs	r5, r5, r7
 800afbe:	42ae      	cmp	r6, r5
 800afc0:	dc34      	bgt.n	800b02c <__gethex+0x2bc>
 800afc2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800afc6:	2b02      	cmp	r3, #2
 800afc8:	d022      	beq.n	800b010 <__gethex+0x2a0>
 800afca:	2b03      	cmp	r3, #3
 800afcc:	d024      	beq.n	800b018 <__gethex+0x2a8>
 800afce:	2b01      	cmp	r3, #1
 800afd0:	d115      	bne.n	800affe <__gethex+0x28e>
 800afd2:	42ae      	cmp	r6, r5
 800afd4:	d113      	bne.n	800affe <__gethex+0x28e>
 800afd6:	2e01      	cmp	r6, #1
 800afd8:	d10b      	bne.n	800aff2 <__gethex+0x282>
 800afda:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800afde:	9a02      	ldr	r2, [sp, #8]
 800afe0:	2562      	movs	r5, #98	@ 0x62
 800afe2:	6013      	str	r3, [r2, #0]
 800afe4:	2301      	movs	r3, #1
 800afe6:	6123      	str	r3, [r4, #16]
 800afe8:	f8ca 3000 	str.w	r3, [sl]
 800afec:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800afee:	601c      	str	r4, [r3, #0]
 800aff0:	e73a      	b.n	800ae68 <__gethex+0xf8>
 800aff2:	4620      	mov	r0, r4
 800aff4:	1e71      	subs	r1, r6, #1
 800aff6:	f7fe f9aa 	bl	800934e <__any_on>
 800affa:	2800      	cmp	r0, #0
 800affc:	d1ed      	bne.n	800afda <__gethex+0x26a>
 800affe:	4621      	mov	r1, r4
 800b000:	9801      	ldr	r0, [sp, #4]
 800b002:	f7fd fd5f 	bl	8008ac4 <_Bfree>
 800b006:	2300      	movs	r3, #0
 800b008:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b00a:	2550      	movs	r5, #80	@ 0x50
 800b00c:	6013      	str	r3, [r2, #0]
 800b00e:	e72b      	b.n	800ae68 <__gethex+0xf8>
 800b010:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b012:	2b00      	cmp	r3, #0
 800b014:	d1f3      	bne.n	800affe <__gethex+0x28e>
 800b016:	e7e0      	b.n	800afda <__gethex+0x26a>
 800b018:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d1dd      	bne.n	800afda <__gethex+0x26a>
 800b01e:	e7ee      	b.n	800affe <__gethex+0x28e>
 800b020:	0800ccb0 	.word	0x0800ccb0
 800b024:	0800cb49 	.word	0x0800cb49
 800b028:	0800ce79 	.word	0x0800ce79
 800b02c:	1e6f      	subs	r7, r5, #1
 800b02e:	f1b9 0f00 	cmp.w	r9, #0
 800b032:	d130      	bne.n	800b096 <__gethex+0x326>
 800b034:	b127      	cbz	r7, 800b040 <__gethex+0x2d0>
 800b036:	4639      	mov	r1, r7
 800b038:	4620      	mov	r0, r4
 800b03a:	f7fe f988 	bl	800934e <__any_on>
 800b03e:	4681      	mov	r9, r0
 800b040:	2301      	movs	r3, #1
 800b042:	4629      	mov	r1, r5
 800b044:	1b76      	subs	r6, r6, r5
 800b046:	2502      	movs	r5, #2
 800b048:	117a      	asrs	r2, r7, #5
 800b04a:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800b04e:	f007 071f 	and.w	r7, r7, #31
 800b052:	40bb      	lsls	r3, r7
 800b054:	4213      	tst	r3, r2
 800b056:	4620      	mov	r0, r4
 800b058:	bf18      	it	ne
 800b05a:	f049 0902 	orrne.w	r9, r9, #2
 800b05e:	f7ff fe1f 	bl	800aca0 <rshift>
 800b062:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800b066:	f1b9 0f00 	cmp.w	r9, #0
 800b06a:	d047      	beq.n	800b0fc <__gethex+0x38c>
 800b06c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b070:	2b02      	cmp	r3, #2
 800b072:	d015      	beq.n	800b0a0 <__gethex+0x330>
 800b074:	2b03      	cmp	r3, #3
 800b076:	d017      	beq.n	800b0a8 <__gethex+0x338>
 800b078:	2b01      	cmp	r3, #1
 800b07a:	d109      	bne.n	800b090 <__gethex+0x320>
 800b07c:	f019 0f02 	tst.w	r9, #2
 800b080:	d006      	beq.n	800b090 <__gethex+0x320>
 800b082:	f8da 3000 	ldr.w	r3, [sl]
 800b086:	ea49 0903 	orr.w	r9, r9, r3
 800b08a:	f019 0f01 	tst.w	r9, #1
 800b08e:	d10e      	bne.n	800b0ae <__gethex+0x33e>
 800b090:	f045 0510 	orr.w	r5, r5, #16
 800b094:	e032      	b.n	800b0fc <__gethex+0x38c>
 800b096:	f04f 0901 	mov.w	r9, #1
 800b09a:	e7d1      	b.n	800b040 <__gethex+0x2d0>
 800b09c:	2501      	movs	r5, #1
 800b09e:	e7e2      	b.n	800b066 <__gethex+0x2f6>
 800b0a0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b0a2:	f1c3 0301 	rsb	r3, r3, #1
 800b0a6:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b0a8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d0f0      	beq.n	800b090 <__gethex+0x320>
 800b0ae:	f04f 0c00 	mov.w	ip, #0
 800b0b2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800b0b6:	f104 0314 	add.w	r3, r4, #20
 800b0ba:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800b0be:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800b0c2:	4618      	mov	r0, r3
 800b0c4:	f853 2b04 	ldr.w	r2, [r3], #4
 800b0c8:	f1b2 3fff 	cmp.w	r2, #4294967295
 800b0cc:	d01b      	beq.n	800b106 <__gethex+0x396>
 800b0ce:	3201      	adds	r2, #1
 800b0d0:	6002      	str	r2, [r0, #0]
 800b0d2:	2d02      	cmp	r5, #2
 800b0d4:	f104 0314 	add.w	r3, r4, #20
 800b0d8:	d13c      	bne.n	800b154 <__gethex+0x3e4>
 800b0da:	f8d8 2000 	ldr.w	r2, [r8]
 800b0de:	3a01      	subs	r2, #1
 800b0e0:	42b2      	cmp	r2, r6
 800b0e2:	d109      	bne.n	800b0f8 <__gethex+0x388>
 800b0e4:	2201      	movs	r2, #1
 800b0e6:	1171      	asrs	r1, r6, #5
 800b0e8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b0ec:	f006 061f 	and.w	r6, r6, #31
 800b0f0:	fa02 f606 	lsl.w	r6, r2, r6
 800b0f4:	421e      	tst	r6, r3
 800b0f6:	d13a      	bne.n	800b16e <__gethex+0x3fe>
 800b0f8:	f045 0520 	orr.w	r5, r5, #32
 800b0fc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b0fe:	601c      	str	r4, [r3, #0]
 800b100:	9b02      	ldr	r3, [sp, #8]
 800b102:	601f      	str	r7, [r3, #0]
 800b104:	e6b0      	b.n	800ae68 <__gethex+0xf8>
 800b106:	4299      	cmp	r1, r3
 800b108:	f843 cc04 	str.w	ip, [r3, #-4]
 800b10c:	d8d9      	bhi.n	800b0c2 <__gethex+0x352>
 800b10e:	68a3      	ldr	r3, [r4, #8]
 800b110:	459b      	cmp	fp, r3
 800b112:	db17      	blt.n	800b144 <__gethex+0x3d4>
 800b114:	6861      	ldr	r1, [r4, #4]
 800b116:	9801      	ldr	r0, [sp, #4]
 800b118:	3101      	adds	r1, #1
 800b11a:	f7fd fc93 	bl	8008a44 <_Balloc>
 800b11e:	4681      	mov	r9, r0
 800b120:	b918      	cbnz	r0, 800b12a <__gethex+0x3ba>
 800b122:	4602      	mov	r2, r0
 800b124:	2184      	movs	r1, #132	@ 0x84
 800b126:	4b19      	ldr	r3, [pc, #100]	@ (800b18c <__gethex+0x41c>)
 800b128:	e6c5      	b.n	800aeb6 <__gethex+0x146>
 800b12a:	6922      	ldr	r2, [r4, #16]
 800b12c:	f104 010c 	add.w	r1, r4, #12
 800b130:	3202      	adds	r2, #2
 800b132:	0092      	lsls	r2, r2, #2
 800b134:	300c      	adds	r0, #12
 800b136:	f7ff fd6d 	bl	800ac14 <memcpy>
 800b13a:	4621      	mov	r1, r4
 800b13c:	9801      	ldr	r0, [sp, #4]
 800b13e:	f7fd fcc1 	bl	8008ac4 <_Bfree>
 800b142:	464c      	mov	r4, r9
 800b144:	6923      	ldr	r3, [r4, #16]
 800b146:	1c5a      	adds	r2, r3, #1
 800b148:	6122      	str	r2, [r4, #16]
 800b14a:	2201      	movs	r2, #1
 800b14c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b150:	615a      	str	r2, [r3, #20]
 800b152:	e7be      	b.n	800b0d2 <__gethex+0x362>
 800b154:	6922      	ldr	r2, [r4, #16]
 800b156:	455a      	cmp	r2, fp
 800b158:	dd0b      	ble.n	800b172 <__gethex+0x402>
 800b15a:	2101      	movs	r1, #1
 800b15c:	4620      	mov	r0, r4
 800b15e:	f7ff fd9f 	bl	800aca0 <rshift>
 800b162:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b166:	3701      	adds	r7, #1
 800b168:	42bb      	cmp	r3, r7
 800b16a:	f6ff aee0 	blt.w	800af2e <__gethex+0x1be>
 800b16e:	2501      	movs	r5, #1
 800b170:	e7c2      	b.n	800b0f8 <__gethex+0x388>
 800b172:	f016 061f 	ands.w	r6, r6, #31
 800b176:	d0fa      	beq.n	800b16e <__gethex+0x3fe>
 800b178:	4453      	add	r3, sl
 800b17a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800b17e:	f7fd fd53 	bl	8008c28 <__hi0bits>
 800b182:	f1c6 0620 	rsb	r6, r6, #32
 800b186:	42b0      	cmp	r0, r6
 800b188:	dbe7      	blt.n	800b15a <__gethex+0x3ea>
 800b18a:	e7f0      	b.n	800b16e <__gethex+0x3fe>
 800b18c:	0800cb49 	.word	0x0800cb49

0800b190 <L_shift>:
 800b190:	f1c2 0208 	rsb	r2, r2, #8
 800b194:	0092      	lsls	r2, r2, #2
 800b196:	b570      	push	{r4, r5, r6, lr}
 800b198:	f1c2 0620 	rsb	r6, r2, #32
 800b19c:	6843      	ldr	r3, [r0, #4]
 800b19e:	6804      	ldr	r4, [r0, #0]
 800b1a0:	fa03 f506 	lsl.w	r5, r3, r6
 800b1a4:	432c      	orrs	r4, r5
 800b1a6:	40d3      	lsrs	r3, r2
 800b1a8:	6004      	str	r4, [r0, #0]
 800b1aa:	f840 3f04 	str.w	r3, [r0, #4]!
 800b1ae:	4288      	cmp	r0, r1
 800b1b0:	d3f4      	bcc.n	800b19c <L_shift+0xc>
 800b1b2:	bd70      	pop	{r4, r5, r6, pc}

0800b1b4 <__match>:
 800b1b4:	b530      	push	{r4, r5, lr}
 800b1b6:	6803      	ldr	r3, [r0, #0]
 800b1b8:	3301      	adds	r3, #1
 800b1ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b1be:	b914      	cbnz	r4, 800b1c6 <__match+0x12>
 800b1c0:	6003      	str	r3, [r0, #0]
 800b1c2:	2001      	movs	r0, #1
 800b1c4:	bd30      	pop	{r4, r5, pc}
 800b1c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b1ca:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800b1ce:	2d19      	cmp	r5, #25
 800b1d0:	bf98      	it	ls
 800b1d2:	3220      	addls	r2, #32
 800b1d4:	42a2      	cmp	r2, r4
 800b1d6:	d0f0      	beq.n	800b1ba <__match+0x6>
 800b1d8:	2000      	movs	r0, #0
 800b1da:	e7f3      	b.n	800b1c4 <__match+0x10>

0800b1dc <__hexnan>:
 800b1dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1e0:	2500      	movs	r5, #0
 800b1e2:	680b      	ldr	r3, [r1, #0]
 800b1e4:	4682      	mov	sl, r0
 800b1e6:	115e      	asrs	r6, r3, #5
 800b1e8:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b1ec:	f013 031f 	ands.w	r3, r3, #31
 800b1f0:	bf18      	it	ne
 800b1f2:	3604      	addne	r6, #4
 800b1f4:	1f37      	subs	r7, r6, #4
 800b1f6:	4690      	mov	r8, r2
 800b1f8:	46b9      	mov	r9, r7
 800b1fa:	463c      	mov	r4, r7
 800b1fc:	46ab      	mov	fp, r5
 800b1fe:	b087      	sub	sp, #28
 800b200:	6801      	ldr	r1, [r0, #0]
 800b202:	9301      	str	r3, [sp, #4]
 800b204:	f846 5c04 	str.w	r5, [r6, #-4]
 800b208:	9502      	str	r5, [sp, #8]
 800b20a:	784a      	ldrb	r2, [r1, #1]
 800b20c:	1c4b      	adds	r3, r1, #1
 800b20e:	9303      	str	r3, [sp, #12]
 800b210:	b342      	cbz	r2, 800b264 <__hexnan+0x88>
 800b212:	4610      	mov	r0, r2
 800b214:	9105      	str	r1, [sp, #20]
 800b216:	9204      	str	r2, [sp, #16]
 800b218:	f7ff fd95 	bl	800ad46 <__hexdig_fun>
 800b21c:	2800      	cmp	r0, #0
 800b21e:	d151      	bne.n	800b2c4 <__hexnan+0xe8>
 800b220:	9a04      	ldr	r2, [sp, #16]
 800b222:	9905      	ldr	r1, [sp, #20]
 800b224:	2a20      	cmp	r2, #32
 800b226:	d818      	bhi.n	800b25a <__hexnan+0x7e>
 800b228:	9b02      	ldr	r3, [sp, #8]
 800b22a:	459b      	cmp	fp, r3
 800b22c:	dd13      	ble.n	800b256 <__hexnan+0x7a>
 800b22e:	454c      	cmp	r4, r9
 800b230:	d206      	bcs.n	800b240 <__hexnan+0x64>
 800b232:	2d07      	cmp	r5, #7
 800b234:	dc04      	bgt.n	800b240 <__hexnan+0x64>
 800b236:	462a      	mov	r2, r5
 800b238:	4649      	mov	r1, r9
 800b23a:	4620      	mov	r0, r4
 800b23c:	f7ff ffa8 	bl	800b190 <L_shift>
 800b240:	4544      	cmp	r4, r8
 800b242:	d952      	bls.n	800b2ea <__hexnan+0x10e>
 800b244:	2300      	movs	r3, #0
 800b246:	f1a4 0904 	sub.w	r9, r4, #4
 800b24a:	f844 3c04 	str.w	r3, [r4, #-4]
 800b24e:	461d      	mov	r5, r3
 800b250:	464c      	mov	r4, r9
 800b252:	f8cd b008 	str.w	fp, [sp, #8]
 800b256:	9903      	ldr	r1, [sp, #12]
 800b258:	e7d7      	b.n	800b20a <__hexnan+0x2e>
 800b25a:	2a29      	cmp	r2, #41	@ 0x29
 800b25c:	d157      	bne.n	800b30e <__hexnan+0x132>
 800b25e:	3102      	adds	r1, #2
 800b260:	f8ca 1000 	str.w	r1, [sl]
 800b264:	f1bb 0f00 	cmp.w	fp, #0
 800b268:	d051      	beq.n	800b30e <__hexnan+0x132>
 800b26a:	454c      	cmp	r4, r9
 800b26c:	d206      	bcs.n	800b27c <__hexnan+0xa0>
 800b26e:	2d07      	cmp	r5, #7
 800b270:	dc04      	bgt.n	800b27c <__hexnan+0xa0>
 800b272:	462a      	mov	r2, r5
 800b274:	4649      	mov	r1, r9
 800b276:	4620      	mov	r0, r4
 800b278:	f7ff ff8a 	bl	800b190 <L_shift>
 800b27c:	4544      	cmp	r4, r8
 800b27e:	d936      	bls.n	800b2ee <__hexnan+0x112>
 800b280:	4623      	mov	r3, r4
 800b282:	f1a8 0204 	sub.w	r2, r8, #4
 800b286:	f853 1b04 	ldr.w	r1, [r3], #4
 800b28a:	429f      	cmp	r7, r3
 800b28c:	f842 1f04 	str.w	r1, [r2, #4]!
 800b290:	d2f9      	bcs.n	800b286 <__hexnan+0xaa>
 800b292:	1b3b      	subs	r3, r7, r4
 800b294:	f023 0303 	bic.w	r3, r3, #3
 800b298:	3304      	adds	r3, #4
 800b29a:	3401      	adds	r4, #1
 800b29c:	3e03      	subs	r6, #3
 800b29e:	42b4      	cmp	r4, r6
 800b2a0:	bf88      	it	hi
 800b2a2:	2304      	movhi	r3, #4
 800b2a4:	2200      	movs	r2, #0
 800b2a6:	4443      	add	r3, r8
 800b2a8:	f843 2b04 	str.w	r2, [r3], #4
 800b2ac:	429f      	cmp	r7, r3
 800b2ae:	d2fb      	bcs.n	800b2a8 <__hexnan+0xcc>
 800b2b0:	683b      	ldr	r3, [r7, #0]
 800b2b2:	b91b      	cbnz	r3, 800b2bc <__hexnan+0xe0>
 800b2b4:	4547      	cmp	r7, r8
 800b2b6:	d128      	bne.n	800b30a <__hexnan+0x12e>
 800b2b8:	2301      	movs	r3, #1
 800b2ba:	603b      	str	r3, [r7, #0]
 800b2bc:	2005      	movs	r0, #5
 800b2be:	b007      	add	sp, #28
 800b2c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b2c4:	3501      	adds	r5, #1
 800b2c6:	2d08      	cmp	r5, #8
 800b2c8:	f10b 0b01 	add.w	fp, fp, #1
 800b2cc:	dd06      	ble.n	800b2dc <__hexnan+0x100>
 800b2ce:	4544      	cmp	r4, r8
 800b2d0:	d9c1      	bls.n	800b256 <__hexnan+0x7a>
 800b2d2:	2300      	movs	r3, #0
 800b2d4:	2501      	movs	r5, #1
 800b2d6:	f844 3c04 	str.w	r3, [r4, #-4]
 800b2da:	3c04      	subs	r4, #4
 800b2dc:	6822      	ldr	r2, [r4, #0]
 800b2de:	f000 000f 	and.w	r0, r0, #15
 800b2e2:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800b2e6:	6020      	str	r0, [r4, #0]
 800b2e8:	e7b5      	b.n	800b256 <__hexnan+0x7a>
 800b2ea:	2508      	movs	r5, #8
 800b2ec:	e7b3      	b.n	800b256 <__hexnan+0x7a>
 800b2ee:	9b01      	ldr	r3, [sp, #4]
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	d0dd      	beq.n	800b2b0 <__hexnan+0xd4>
 800b2f4:	f04f 32ff 	mov.w	r2, #4294967295
 800b2f8:	f1c3 0320 	rsb	r3, r3, #32
 800b2fc:	40da      	lsrs	r2, r3
 800b2fe:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800b302:	4013      	ands	r3, r2
 800b304:	f846 3c04 	str.w	r3, [r6, #-4]
 800b308:	e7d2      	b.n	800b2b0 <__hexnan+0xd4>
 800b30a:	3f04      	subs	r7, #4
 800b30c:	e7d0      	b.n	800b2b0 <__hexnan+0xd4>
 800b30e:	2004      	movs	r0, #4
 800b310:	e7d5      	b.n	800b2be <__hexnan+0xe2>

0800b312 <__ascii_mbtowc>:
 800b312:	b082      	sub	sp, #8
 800b314:	b901      	cbnz	r1, 800b318 <__ascii_mbtowc+0x6>
 800b316:	a901      	add	r1, sp, #4
 800b318:	b142      	cbz	r2, 800b32c <__ascii_mbtowc+0x1a>
 800b31a:	b14b      	cbz	r3, 800b330 <__ascii_mbtowc+0x1e>
 800b31c:	7813      	ldrb	r3, [r2, #0]
 800b31e:	600b      	str	r3, [r1, #0]
 800b320:	7812      	ldrb	r2, [r2, #0]
 800b322:	1e10      	subs	r0, r2, #0
 800b324:	bf18      	it	ne
 800b326:	2001      	movne	r0, #1
 800b328:	b002      	add	sp, #8
 800b32a:	4770      	bx	lr
 800b32c:	4610      	mov	r0, r2
 800b32e:	e7fb      	b.n	800b328 <__ascii_mbtowc+0x16>
 800b330:	f06f 0001 	mvn.w	r0, #1
 800b334:	e7f8      	b.n	800b328 <__ascii_mbtowc+0x16>

0800b336 <_realloc_r>:
 800b336:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b33a:	4680      	mov	r8, r0
 800b33c:	4615      	mov	r5, r2
 800b33e:	460c      	mov	r4, r1
 800b340:	b921      	cbnz	r1, 800b34c <_realloc_r+0x16>
 800b342:	4611      	mov	r1, r2
 800b344:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b348:	f7fd baf0 	b.w	800892c <_malloc_r>
 800b34c:	b92a      	cbnz	r2, 800b35a <_realloc_r+0x24>
 800b34e:	f7fd fa7b 	bl	8008848 <_free_r>
 800b352:	2400      	movs	r4, #0
 800b354:	4620      	mov	r0, r4
 800b356:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b35a:	f000 f8b2 	bl	800b4c2 <_malloc_usable_size_r>
 800b35e:	4285      	cmp	r5, r0
 800b360:	4606      	mov	r6, r0
 800b362:	d802      	bhi.n	800b36a <_realloc_r+0x34>
 800b364:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800b368:	d8f4      	bhi.n	800b354 <_realloc_r+0x1e>
 800b36a:	4629      	mov	r1, r5
 800b36c:	4640      	mov	r0, r8
 800b36e:	f7fd fadd 	bl	800892c <_malloc_r>
 800b372:	4607      	mov	r7, r0
 800b374:	2800      	cmp	r0, #0
 800b376:	d0ec      	beq.n	800b352 <_realloc_r+0x1c>
 800b378:	42b5      	cmp	r5, r6
 800b37a:	462a      	mov	r2, r5
 800b37c:	4621      	mov	r1, r4
 800b37e:	bf28      	it	cs
 800b380:	4632      	movcs	r2, r6
 800b382:	f7ff fc47 	bl	800ac14 <memcpy>
 800b386:	4621      	mov	r1, r4
 800b388:	4640      	mov	r0, r8
 800b38a:	f7fd fa5d 	bl	8008848 <_free_r>
 800b38e:	463c      	mov	r4, r7
 800b390:	e7e0      	b.n	800b354 <_realloc_r+0x1e>
	...

0800b394 <_strtoul_l.constprop.0>:
 800b394:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b398:	4686      	mov	lr, r0
 800b39a:	460d      	mov	r5, r1
 800b39c:	4e33      	ldr	r6, [pc, #204]	@ (800b46c <_strtoul_l.constprop.0+0xd8>)
 800b39e:	4628      	mov	r0, r5
 800b3a0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b3a4:	5d37      	ldrb	r7, [r6, r4]
 800b3a6:	f017 0708 	ands.w	r7, r7, #8
 800b3aa:	d1f8      	bne.n	800b39e <_strtoul_l.constprop.0+0xa>
 800b3ac:	2c2d      	cmp	r4, #45	@ 0x2d
 800b3ae:	d12f      	bne.n	800b410 <_strtoul_l.constprop.0+0x7c>
 800b3b0:	2701      	movs	r7, #1
 800b3b2:	782c      	ldrb	r4, [r5, #0]
 800b3b4:	1c85      	adds	r5, r0, #2
 800b3b6:	f033 0010 	bics.w	r0, r3, #16
 800b3ba:	d109      	bne.n	800b3d0 <_strtoul_l.constprop.0+0x3c>
 800b3bc:	2c30      	cmp	r4, #48	@ 0x30
 800b3be:	d12c      	bne.n	800b41a <_strtoul_l.constprop.0+0x86>
 800b3c0:	7828      	ldrb	r0, [r5, #0]
 800b3c2:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800b3c6:	2858      	cmp	r0, #88	@ 0x58
 800b3c8:	d127      	bne.n	800b41a <_strtoul_l.constprop.0+0x86>
 800b3ca:	2310      	movs	r3, #16
 800b3cc:	786c      	ldrb	r4, [r5, #1]
 800b3ce:	3502      	adds	r5, #2
 800b3d0:	f04f 38ff 	mov.w	r8, #4294967295
 800b3d4:	fbb8 f8f3 	udiv	r8, r8, r3
 800b3d8:	2600      	movs	r6, #0
 800b3da:	fb03 f908 	mul.w	r9, r3, r8
 800b3de:	4630      	mov	r0, r6
 800b3e0:	ea6f 0909 	mvn.w	r9, r9
 800b3e4:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800b3e8:	f1bc 0f09 	cmp.w	ip, #9
 800b3ec:	d81c      	bhi.n	800b428 <_strtoul_l.constprop.0+0x94>
 800b3ee:	4664      	mov	r4, ip
 800b3f0:	42a3      	cmp	r3, r4
 800b3f2:	dd2a      	ble.n	800b44a <_strtoul_l.constprop.0+0xb6>
 800b3f4:	f1b6 3fff 	cmp.w	r6, #4294967295
 800b3f8:	d007      	beq.n	800b40a <_strtoul_l.constprop.0+0x76>
 800b3fa:	4580      	cmp	r8, r0
 800b3fc:	d322      	bcc.n	800b444 <_strtoul_l.constprop.0+0xb0>
 800b3fe:	d101      	bne.n	800b404 <_strtoul_l.constprop.0+0x70>
 800b400:	45a1      	cmp	r9, r4
 800b402:	db1f      	blt.n	800b444 <_strtoul_l.constprop.0+0xb0>
 800b404:	2601      	movs	r6, #1
 800b406:	fb00 4003 	mla	r0, r0, r3, r4
 800b40a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b40e:	e7e9      	b.n	800b3e4 <_strtoul_l.constprop.0+0x50>
 800b410:	2c2b      	cmp	r4, #43	@ 0x2b
 800b412:	bf04      	itt	eq
 800b414:	782c      	ldrbeq	r4, [r5, #0]
 800b416:	1c85      	addeq	r5, r0, #2
 800b418:	e7cd      	b.n	800b3b6 <_strtoul_l.constprop.0+0x22>
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	d1d8      	bne.n	800b3d0 <_strtoul_l.constprop.0+0x3c>
 800b41e:	2c30      	cmp	r4, #48	@ 0x30
 800b420:	bf0c      	ite	eq
 800b422:	2308      	moveq	r3, #8
 800b424:	230a      	movne	r3, #10
 800b426:	e7d3      	b.n	800b3d0 <_strtoul_l.constprop.0+0x3c>
 800b428:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 800b42c:	f1bc 0f19 	cmp.w	ip, #25
 800b430:	d801      	bhi.n	800b436 <_strtoul_l.constprop.0+0xa2>
 800b432:	3c37      	subs	r4, #55	@ 0x37
 800b434:	e7dc      	b.n	800b3f0 <_strtoul_l.constprop.0+0x5c>
 800b436:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800b43a:	f1bc 0f19 	cmp.w	ip, #25
 800b43e:	d804      	bhi.n	800b44a <_strtoul_l.constprop.0+0xb6>
 800b440:	3c57      	subs	r4, #87	@ 0x57
 800b442:	e7d5      	b.n	800b3f0 <_strtoul_l.constprop.0+0x5c>
 800b444:	f04f 36ff 	mov.w	r6, #4294967295
 800b448:	e7df      	b.n	800b40a <_strtoul_l.constprop.0+0x76>
 800b44a:	1c73      	adds	r3, r6, #1
 800b44c:	d106      	bne.n	800b45c <_strtoul_l.constprop.0+0xc8>
 800b44e:	2322      	movs	r3, #34	@ 0x22
 800b450:	4630      	mov	r0, r6
 800b452:	f8ce 3000 	str.w	r3, [lr]
 800b456:	b932      	cbnz	r2, 800b466 <_strtoul_l.constprop.0+0xd2>
 800b458:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b45c:	b107      	cbz	r7, 800b460 <_strtoul_l.constprop.0+0xcc>
 800b45e:	4240      	negs	r0, r0
 800b460:	2a00      	cmp	r2, #0
 800b462:	d0f9      	beq.n	800b458 <_strtoul_l.constprop.0+0xc4>
 800b464:	b106      	cbz	r6, 800b468 <_strtoul_l.constprop.0+0xd4>
 800b466:	1e69      	subs	r1, r5, #1
 800b468:	6011      	str	r1, [r2, #0]
 800b46a:	e7f5      	b.n	800b458 <_strtoul_l.constprop.0+0xc4>
 800b46c:	0800cd09 	.word	0x0800cd09

0800b470 <_strtoul_r>:
 800b470:	f7ff bf90 	b.w	800b394 <_strtoul_l.constprop.0>

0800b474 <__ascii_wctomb>:
 800b474:	4603      	mov	r3, r0
 800b476:	4608      	mov	r0, r1
 800b478:	b141      	cbz	r1, 800b48c <__ascii_wctomb+0x18>
 800b47a:	2aff      	cmp	r2, #255	@ 0xff
 800b47c:	d904      	bls.n	800b488 <__ascii_wctomb+0x14>
 800b47e:	228a      	movs	r2, #138	@ 0x8a
 800b480:	f04f 30ff 	mov.w	r0, #4294967295
 800b484:	601a      	str	r2, [r3, #0]
 800b486:	4770      	bx	lr
 800b488:	2001      	movs	r0, #1
 800b48a:	700a      	strb	r2, [r1, #0]
 800b48c:	4770      	bx	lr
	...

0800b490 <fiprintf>:
 800b490:	b40e      	push	{r1, r2, r3}
 800b492:	b503      	push	{r0, r1, lr}
 800b494:	4601      	mov	r1, r0
 800b496:	ab03      	add	r3, sp, #12
 800b498:	4805      	ldr	r0, [pc, #20]	@ (800b4b0 <fiprintf+0x20>)
 800b49a:	f853 2b04 	ldr.w	r2, [r3], #4
 800b49e:	6800      	ldr	r0, [r0, #0]
 800b4a0:	9301      	str	r3, [sp, #4]
 800b4a2:	f000 f83d 	bl	800b520 <_vfiprintf_r>
 800b4a6:	b002      	add	sp, #8
 800b4a8:	f85d eb04 	ldr.w	lr, [sp], #4
 800b4ac:	b003      	add	sp, #12
 800b4ae:	4770      	bx	lr
 800b4b0:	2000001c 	.word	0x2000001c

0800b4b4 <abort>:
 800b4b4:	2006      	movs	r0, #6
 800b4b6:	b508      	push	{r3, lr}
 800b4b8:	f000 fa06 	bl	800b8c8 <raise>
 800b4bc:	2001      	movs	r0, #1
 800b4be:	f7f8 f814 	bl	80034ea <_exit>

0800b4c2 <_malloc_usable_size_r>:
 800b4c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b4c6:	1f18      	subs	r0, r3, #4
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	bfbc      	itt	lt
 800b4cc:	580b      	ldrlt	r3, [r1, r0]
 800b4ce:	18c0      	addlt	r0, r0, r3
 800b4d0:	4770      	bx	lr

0800b4d2 <__sfputc_r>:
 800b4d2:	6893      	ldr	r3, [r2, #8]
 800b4d4:	b410      	push	{r4}
 800b4d6:	3b01      	subs	r3, #1
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	6093      	str	r3, [r2, #8]
 800b4dc:	da07      	bge.n	800b4ee <__sfputc_r+0x1c>
 800b4de:	6994      	ldr	r4, [r2, #24]
 800b4e0:	42a3      	cmp	r3, r4
 800b4e2:	db01      	blt.n	800b4e8 <__sfputc_r+0x16>
 800b4e4:	290a      	cmp	r1, #10
 800b4e6:	d102      	bne.n	800b4ee <__sfputc_r+0x1c>
 800b4e8:	bc10      	pop	{r4}
 800b4ea:	f000 b931 	b.w	800b750 <__swbuf_r>
 800b4ee:	6813      	ldr	r3, [r2, #0]
 800b4f0:	1c58      	adds	r0, r3, #1
 800b4f2:	6010      	str	r0, [r2, #0]
 800b4f4:	7019      	strb	r1, [r3, #0]
 800b4f6:	4608      	mov	r0, r1
 800b4f8:	bc10      	pop	{r4}
 800b4fa:	4770      	bx	lr

0800b4fc <__sfputs_r>:
 800b4fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b4fe:	4606      	mov	r6, r0
 800b500:	460f      	mov	r7, r1
 800b502:	4614      	mov	r4, r2
 800b504:	18d5      	adds	r5, r2, r3
 800b506:	42ac      	cmp	r4, r5
 800b508:	d101      	bne.n	800b50e <__sfputs_r+0x12>
 800b50a:	2000      	movs	r0, #0
 800b50c:	e007      	b.n	800b51e <__sfputs_r+0x22>
 800b50e:	463a      	mov	r2, r7
 800b510:	4630      	mov	r0, r6
 800b512:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b516:	f7ff ffdc 	bl	800b4d2 <__sfputc_r>
 800b51a:	1c43      	adds	r3, r0, #1
 800b51c:	d1f3      	bne.n	800b506 <__sfputs_r+0xa>
 800b51e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b520 <_vfiprintf_r>:
 800b520:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b524:	460d      	mov	r5, r1
 800b526:	4614      	mov	r4, r2
 800b528:	4698      	mov	r8, r3
 800b52a:	4606      	mov	r6, r0
 800b52c:	b09d      	sub	sp, #116	@ 0x74
 800b52e:	b118      	cbz	r0, 800b538 <_vfiprintf_r+0x18>
 800b530:	6a03      	ldr	r3, [r0, #32]
 800b532:	b90b      	cbnz	r3, 800b538 <_vfiprintf_r+0x18>
 800b534:	f7fc f994 	bl	8007860 <__sinit>
 800b538:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b53a:	07d9      	lsls	r1, r3, #31
 800b53c:	d405      	bmi.n	800b54a <_vfiprintf_r+0x2a>
 800b53e:	89ab      	ldrh	r3, [r5, #12]
 800b540:	059a      	lsls	r2, r3, #22
 800b542:	d402      	bmi.n	800b54a <_vfiprintf_r+0x2a>
 800b544:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b546:	f7fc fb18 	bl	8007b7a <__retarget_lock_acquire_recursive>
 800b54a:	89ab      	ldrh	r3, [r5, #12]
 800b54c:	071b      	lsls	r3, r3, #28
 800b54e:	d501      	bpl.n	800b554 <_vfiprintf_r+0x34>
 800b550:	692b      	ldr	r3, [r5, #16]
 800b552:	b99b      	cbnz	r3, 800b57c <_vfiprintf_r+0x5c>
 800b554:	4629      	mov	r1, r5
 800b556:	4630      	mov	r0, r6
 800b558:	f000 f938 	bl	800b7cc <__swsetup_r>
 800b55c:	b170      	cbz	r0, 800b57c <_vfiprintf_r+0x5c>
 800b55e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b560:	07dc      	lsls	r4, r3, #31
 800b562:	d504      	bpl.n	800b56e <_vfiprintf_r+0x4e>
 800b564:	f04f 30ff 	mov.w	r0, #4294967295
 800b568:	b01d      	add	sp, #116	@ 0x74
 800b56a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b56e:	89ab      	ldrh	r3, [r5, #12]
 800b570:	0598      	lsls	r0, r3, #22
 800b572:	d4f7      	bmi.n	800b564 <_vfiprintf_r+0x44>
 800b574:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b576:	f7fc fb01 	bl	8007b7c <__retarget_lock_release_recursive>
 800b57a:	e7f3      	b.n	800b564 <_vfiprintf_r+0x44>
 800b57c:	2300      	movs	r3, #0
 800b57e:	9309      	str	r3, [sp, #36]	@ 0x24
 800b580:	2320      	movs	r3, #32
 800b582:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b586:	2330      	movs	r3, #48	@ 0x30
 800b588:	f04f 0901 	mov.w	r9, #1
 800b58c:	f8cd 800c 	str.w	r8, [sp, #12]
 800b590:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800b73c <_vfiprintf_r+0x21c>
 800b594:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b598:	4623      	mov	r3, r4
 800b59a:	469a      	mov	sl, r3
 800b59c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b5a0:	b10a      	cbz	r2, 800b5a6 <_vfiprintf_r+0x86>
 800b5a2:	2a25      	cmp	r2, #37	@ 0x25
 800b5a4:	d1f9      	bne.n	800b59a <_vfiprintf_r+0x7a>
 800b5a6:	ebba 0b04 	subs.w	fp, sl, r4
 800b5aa:	d00b      	beq.n	800b5c4 <_vfiprintf_r+0xa4>
 800b5ac:	465b      	mov	r3, fp
 800b5ae:	4622      	mov	r2, r4
 800b5b0:	4629      	mov	r1, r5
 800b5b2:	4630      	mov	r0, r6
 800b5b4:	f7ff ffa2 	bl	800b4fc <__sfputs_r>
 800b5b8:	3001      	adds	r0, #1
 800b5ba:	f000 80a7 	beq.w	800b70c <_vfiprintf_r+0x1ec>
 800b5be:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b5c0:	445a      	add	r2, fp
 800b5c2:	9209      	str	r2, [sp, #36]	@ 0x24
 800b5c4:	f89a 3000 	ldrb.w	r3, [sl]
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	f000 809f 	beq.w	800b70c <_vfiprintf_r+0x1ec>
 800b5ce:	2300      	movs	r3, #0
 800b5d0:	f04f 32ff 	mov.w	r2, #4294967295
 800b5d4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b5d8:	f10a 0a01 	add.w	sl, sl, #1
 800b5dc:	9304      	str	r3, [sp, #16]
 800b5de:	9307      	str	r3, [sp, #28]
 800b5e0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b5e4:	931a      	str	r3, [sp, #104]	@ 0x68
 800b5e6:	4654      	mov	r4, sl
 800b5e8:	2205      	movs	r2, #5
 800b5ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b5ee:	4853      	ldr	r0, [pc, #332]	@ (800b73c <_vfiprintf_r+0x21c>)
 800b5f0:	f7fc fac5 	bl	8007b7e <memchr>
 800b5f4:	9a04      	ldr	r2, [sp, #16]
 800b5f6:	b9d8      	cbnz	r0, 800b630 <_vfiprintf_r+0x110>
 800b5f8:	06d1      	lsls	r1, r2, #27
 800b5fa:	bf44      	itt	mi
 800b5fc:	2320      	movmi	r3, #32
 800b5fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b602:	0713      	lsls	r3, r2, #28
 800b604:	bf44      	itt	mi
 800b606:	232b      	movmi	r3, #43	@ 0x2b
 800b608:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b60c:	f89a 3000 	ldrb.w	r3, [sl]
 800b610:	2b2a      	cmp	r3, #42	@ 0x2a
 800b612:	d015      	beq.n	800b640 <_vfiprintf_r+0x120>
 800b614:	4654      	mov	r4, sl
 800b616:	2000      	movs	r0, #0
 800b618:	f04f 0c0a 	mov.w	ip, #10
 800b61c:	9a07      	ldr	r2, [sp, #28]
 800b61e:	4621      	mov	r1, r4
 800b620:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b624:	3b30      	subs	r3, #48	@ 0x30
 800b626:	2b09      	cmp	r3, #9
 800b628:	d94b      	bls.n	800b6c2 <_vfiprintf_r+0x1a2>
 800b62a:	b1b0      	cbz	r0, 800b65a <_vfiprintf_r+0x13a>
 800b62c:	9207      	str	r2, [sp, #28]
 800b62e:	e014      	b.n	800b65a <_vfiprintf_r+0x13a>
 800b630:	eba0 0308 	sub.w	r3, r0, r8
 800b634:	fa09 f303 	lsl.w	r3, r9, r3
 800b638:	4313      	orrs	r3, r2
 800b63a:	46a2      	mov	sl, r4
 800b63c:	9304      	str	r3, [sp, #16]
 800b63e:	e7d2      	b.n	800b5e6 <_vfiprintf_r+0xc6>
 800b640:	9b03      	ldr	r3, [sp, #12]
 800b642:	1d19      	adds	r1, r3, #4
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	9103      	str	r1, [sp, #12]
 800b648:	2b00      	cmp	r3, #0
 800b64a:	bfbb      	ittet	lt
 800b64c:	425b      	neglt	r3, r3
 800b64e:	f042 0202 	orrlt.w	r2, r2, #2
 800b652:	9307      	strge	r3, [sp, #28]
 800b654:	9307      	strlt	r3, [sp, #28]
 800b656:	bfb8      	it	lt
 800b658:	9204      	strlt	r2, [sp, #16]
 800b65a:	7823      	ldrb	r3, [r4, #0]
 800b65c:	2b2e      	cmp	r3, #46	@ 0x2e
 800b65e:	d10a      	bne.n	800b676 <_vfiprintf_r+0x156>
 800b660:	7863      	ldrb	r3, [r4, #1]
 800b662:	2b2a      	cmp	r3, #42	@ 0x2a
 800b664:	d132      	bne.n	800b6cc <_vfiprintf_r+0x1ac>
 800b666:	9b03      	ldr	r3, [sp, #12]
 800b668:	3402      	adds	r4, #2
 800b66a:	1d1a      	adds	r2, r3, #4
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	9203      	str	r2, [sp, #12]
 800b670:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b674:	9305      	str	r3, [sp, #20]
 800b676:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800b740 <_vfiprintf_r+0x220>
 800b67a:	2203      	movs	r2, #3
 800b67c:	4650      	mov	r0, sl
 800b67e:	7821      	ldrb	r1, [r4, #0]
 800b680:	f7fc fa7d 	bl	8007b7e <memchr>
 800b684:	b138      	cbz	r0, 800b696 <_vfiprintf_r+0x176>
 800b686:	2240      	movs	r2, #64	@ 0x40
 800b688:	9b04      	ldr	r3, [sp, #16]
 800b68a:	eba0 000a 	sub.w	r0, r0, sl
 800b68e:	4082      	lsls	r2, r0
 800b690:	4313      	orrs	r3, r2
 800b692:	3401      	adds	r4, #1
 800b694:	9304      	str	r3, [sp, #16]
 800b696:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b69a:	2206      	movs	r2, #6
 800b69c:	4829      	ldr	r0, [pc, #164]	@ (800b744 <_vfiprintf_r+0x224>)
 800b69e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b6a2:	f7fc fa6c 	bl	8007b7e <memchr>
 800b6a6:	2800      	cmp	r0, #0
 800b6a8:	d03f      	beq.n	800b72a <_vfiprintf_r+0x20a>
 800b6aa:	4b27      	ldr	r3, [pc, #156]	@ (800b748 <_vfiprintf_r+0x228>)
 800b6ac:	bb1b      	cbnz	r3, 800b6f6 <_vfiprintf_r+0x1d6>
 800b6ae:	9b03      	ldr	r3, [sp, #12]
 800b6b0:	3307      	adds	r3, #7
 800b6b2:	f023 0307 	bic.w	r3, r3, #7
 800b6b6:	3308      	adds	r3, #8
 800b6b8:	9303      	str	r3, [sp, #12]
 800b6ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b6bc:	443b      	add	r3, r7
 800b6be:	9309      	str	r3, [sp, #36]	@ 0x24
 800b6c0:	e76a      	b.n	800b598 <_vfiprintf_r+0x78>
 800b6c2:	460c      	mov	r4, r1
 800b6c4:	2001      	movs	r0, #1
 800b6c6:	fb0c 3202 	mla	r2, ip, r2, r3
 800b6ca:	e7a8      	b.n	800b61e <_vfiprintf_r+0xfe>
 800b6cc:	2300      	movs	r3, #0
 800b6ce:	f04f 0c0a 	mov.w	ip, #10
 800b6d2:	4619      	mov	r1, r3
 800b6d4:	3401      	adds	r4, #1
 800b6d6:	9305      	str	r3, [sp, #20]
 800b6d8:	4620      	mov	r0, r4
 800b6da:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b6de:	3a30      	subs	r2, #48	@ 0x30
 800b6e0:	2a09      	cmp	r2, #9
 800b6e2:	d903      	bls.n	800b6ec <_vfiprintf_r+0x1cc>
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	d0c6      	beq.n	800b676 <_vfiprintf_r+0x156>
 800b6e8:	9105      	str	r1, [sp, #20]
 800b6ea:	e7c4      	b.n	800b676 <_vfiprintf_r+0x156>
 800b6ec:	4604      	mov	r4, r0
 800b6ee:	2301      	movs	r3, #1
 800b6f0:	fb0c 2101 	mla	r1, ip, r1, r2
 800b6f4:	e7f0      	b.n	800b6d8 <_vfiprintf_r+0x1b8>
 800b6f6:	ab03      	add	r3, sp, #12
 800b6f8:	9300      	str	r3, [sp, #0]
 800b6fa:	462a      	mov	r2, r5
 800b6fc:	4630      	mov	r0, r6
 800b6fe:	4b13      	ldr	r3, [pc, #76]	@ (800b74c <_vfiprintf_r+0x22c>)
 800b700:	a904      	add	r1, sp, #16
 800b702:	f7fb fa53 	bl	8006bac <_printf_float>
 800b706:	4607      	mov	r7, r0
 800b708:	1c78      	adds	r0, r7, #1
 800b70a:	d1d6      	bne.n	800b6ba <_vfiprintf_r+0x19a>
 800b70c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b70e:	07d9      	lsls	r1, r3, #31
 800b710:	d405      	bmi.n	800b71e <_vfiprintf_r+0x1fe>
 800b712:	89ab      	ldrh	r3, [r5, #12]
 800b714:	059a      	lsls	r2, r3, #22
 800b716:	d402      	bmi.n	800b71e <_vfiprintf_r+0x1fe>
 800b718:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b71a:	f7fc fa2f 	bl	8007b7c <__retarget_lock_release_recursive>
 800b71e:	89ab      	ldrh	r3, [r5, #12]
 800b720:	065b      	lsls	r3, r3, #25
 800b722:	f53f af1f 	bmi.w	800b564 <_vfiprintf_r+0x44>
 800b726:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b728:	e71e      	b.n	800b568 <_vfiprintf_r+0x48>
 800b72a:	ab03      	add	r3, sp, #12
 800b72c:	9300      	str	r3, [sp, #0]
 800b72e:	462a      	mov	r2, r5
 800b730:	4630      	mov	r0, r6
 800b732:	4b06      	ldr	r3, [pc, #24]	@ (800b74c <_vfiprintf_r+0x22c>)
 800b734:	a904      	add	r1, sp, #16
 800b736:	f7fb fcd7 	bl	80070e8 <_printf_i>
 800b73a:	e7e4      	b.n	800b706 <_vfiprintf_r+0x1e6>
 800b73c:	0800ce09 	.word	0x0800ce09
 800b740:	0800ce0f 	.word	0x0800ce0f
 800b744:	0800ce13 	.word	0x0800ce13
 800b748:	08006bad 	.word	0x08006bad
 800b74c:	0800b4fd 	.word	0x0800b4fd

0800b750 <__swbuf_r>:
 800b750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b752:	460e      	mov	r6, r1
 800b754:	4614      	mov	r4, r2
 800b756:	4605      	mov	r5, r0
 800b758:	b118      	cbz	r0, 800b762 <__swbuf_r+0x12>
 800b75a:	6a03      	ldr	r3, [r0, #32]
 800b75c:	b90b      	cbnz	r3, 800b762 <__swbuf_r+0x12>
 800b75e:	f7fc f87f 	bl	8007860 <__sinit>
 800b762:	69a3      	ldr	r3, [r4, #24]
 800b764:	60a3      	str	r3, [r4, #8]
 800b766:	89a3      	ldrh	r3, [r4, #12]
 800b768:	071a      	lsls	r2, r3, #28
 800b76a:	d501      	bpl.n	800b770 <__swbuf_r+0x20>
 800b76c:	6923      	ldr	r3, [r4, #16]
 800b76e:	b943      	cbnz	r3, 800b782 <__swbuf_r+0x32>
 800b770:	4621      	mov	r1, r4
 800b772:	4628      	mov	r0, r5
 800b774:	f000 f82a 	bl	800b7cc <__swsetup_r>
 800b778:	b118      	cbz	r0, 800b782 <__swbuf_r+0x32>
 800b77a:	f04f 37ff 	mov.w	r7, #4294967295
 800b77e:	4638      	mov	r0, r7
 800b780:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b782:	6823      	ldr	r3, [r4, #0]
 800b784:	6922      	ldr	r2, [r4, #16]
 800b786:	b2f6      	uxtb	r6, r6
 800b788:	1a98      	subs	r0, r3, r2
 800b78a:	6963      	ldr	r3, [r4, #20]
 800b78c:	4637      	mov	r7, r6
 800b78e:	4283      	cmp	r3, r0
 800b790:	dc05      	bgt.n	800b79e <__swbuf_r+0x4e>
 800b792:	4621      	mov	r1, r4
 800b794:	4628      	mov	r0, r5
 800b796:	f7ff f967 	bl	800aa68 <_fflush_r>
 800b79a:	2800      	cmp	r0, #0
 800b79c:	d1ed      	bne.n	800b77a <__swbuf_r+0x2a>
 800b79e:	68a3      	ldr	r3, [r4, #8]
 800b7a0:	3b01      	subs	r3, #1
 800b7a2:	60a3      	str	r3, [r4, #8]
 800b7a4:	6823      	ldr	r3, [r4, #0]
 800b7a6:	1c5a      	adds	r2, r3, #1
 800b7a8:	6022      	str	r2, [r4, #0]
 800b7aa:	701e      	strb	r6, [r3, #0]
 800b7ac:	6962      	ldr	r2, [r4, #20]
 800b7ae:	1c43      	adds	r3, r0, #1
 800b7b0:	429a      	cmp	r2, r3
 800b7b2:	d004      	beq.n	800b7be <__swbuf_r+0x6e>
 800b7b4:	89a3      	ldrh	r3, [r4, #12]
 800b7b6:	07db      	lsls	r3, r3, #31
 800b7b8:	d5e1      	bpl.n	800b77e <__swbuf_r+0x2e>
 800b7ba:	2e0a      	cmp	r6, #10
 800b7bc:	d1df      	bne.n	800b77e <__swbuf_r+0x2e>
 800b7be:	4621      	mov	r1, r4
 800b7c0:	4628      	mov	r0, r5
 800b7c2:	f7ff f951 	bl	800aa68 <_fflush_r>
 800b7c6:	2800      	cmp	r0, #0
 800b7c8:	d0d9      	beq.n	800b77e <__swbuf_r+0x2e>
 800b7ca:	e7d6      	b.n	800b77a <__swbuf_r+0x2a>

0800b7cc <__swsetup_r>:
 800b7cc:	b538      	push	{r3, r4, r5, lr}
 800b7ce:	4b29      	ldr	r3, [pc, #164]	@ (800b874 <__swsetup_r+0xa8>)
 800b7d0:	4605      	mov	r5, r0
 800b7d2:	6818      	ldr	r0, [r3, #0]
 800b7d4:	460c      	mov	r4, r1
 800b7d6:	b118      	cbz	r0, 800b7e0 <__swsetup_r+0x14>
 800b7d8:	6a03      	ldr	r3, [r0, #32]
 800b7da:	b90b      	cbnz	r3, 800b7e0 <__swsetup_r+0x14>
 800b7dc:	f7fc f840 	bl	8007860 <__sinit>
 800b7e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b7e4:	0719      	lsls	r1, r3, #28
 800b7e6:	d422      	bmi.n	800b82e <__swsetup_r+0x62>
 800b7e8:	06da      	lsls	r2, r3, #27
 800b7ea:	d407      	bmi.n	800b7fc <__swsetup_r+0x30>
 800b7ec:	2209      	movs	r2, #9
 800b7ee:	602a      	str	r2, [r5, #0]
 800b7f0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b7f4:	f04f 30ff 	mov.w	r0, #4294967295
 800b7f8:	81a3      	strh	r3, [r4, #12]
 800b7fa:	e033      	b.n	800b864 <__swsetup_r+0x98>
 800b7fc:	0758      	lsls	r0, r3, #29
 800b7fe:	d512      	bpl.n	800b826 <__swsetup_r+0x5a>
 800b800:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b802:	b141      	cbz	r1, 800b816 <__swsetup_r+0x4a>
 800b804:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b808:	4299      	cmp	r1, r3
 800b80a:	d002      	beq.n	800b812 <__swsetup_r+0x46>
 800b80c:	4628      	mov	r0, r5
 800b80e:	f7fd f81b 	bl	8008848 <_free_r>
 800b812:	2300      	movs	r3, #0
 800b814:	6363      	str	r3, [r4, #52]	@ 0x34
 800b816:	89a3      	ldrh	r3, [r4, #12]
 800b818:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b81c:	81a3      	strh	r3, [r4, #12]
 800b81e:	2300      	movs	r3, #0
 800b820:	6063      	str	r3, [r4, #4]
 800b822:	6923      	ldr	r3, [r4, #16]
 800b824:	6023      	str	r3, [r4, #0]
 800b826:	89a3      	ldrh	r3, [r4, #12]
 800b828:	f043 0308 	orr.w	r3, r3, #8
 800b82c:	81a3      	strh	r3, [r4, #12]
 800b82e:	6923      	ldr	r3, [r4, #16]
 800b830:	b94b      	cbnz	r3, 800b846 <__swsetup_r+0x7a>
 800b832:	89a3      	ldrh	r3, [r4, #12]
 800b834:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b838:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b83c:	d003      	beq.n	800b846 <__swsetup_r+0x7a>
 800b83e:	4621      	mov	r1, r4
 800b840:	4628      	mov	r0, r5
 800b842:	f000 f882 	bl	800b94a <__smakebuf_r>
 800b846:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b84a:	f013 0201 	ands.w	r2, r3, #1
 800b84e:	d00a      	beq.n	800b866 <__swsetup_r+0x9a>
 800b850:	2200      	movs	r2, #0
 800b852:	60a2      	str	r2, [r4, #8]
 800b854:	6962      	ldr	r2, [r4, #20]
 800b856:	4252      	negs	r2, r2
 800b858:	61a2      	str	r2, [r4, #24]
 800b85a:	6922      	ldr	r2, [r4, #16]
 800b85c:	b942      	cbnz	r2, 800b870 <__swsetup_r+0xa4>
 800b85e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b862:	d1c5      	bne.n	800b7f0 <__swsetup_r+0x24>
 800b864:	bd38      	pop	{r3, r4, r5, pc}
 800b866:	0799      	lsls	r1, r3, #30
 800b868:	bf58      	it	pl
 800b86a:	6962      	ldrpl	r2, [r4, #20]
 800b86c:	60a2      	str	r2, [r4, #8]
 800b86e:	e7f4      	b.n	800b85a <__swsetup_r+0x8e>
 800b870:	2000      	movs	r0, #0
 800b872:	e7f7      	b.n	800b864 <__swsetup_r+0x98>
 800b874:	2000001c 	.word	0x2000001c

0800b878 <_raise_r>:
 800b878:	291f      	cmp	r1, #31
 800b87a:	b538      	push	{r3, r4, r5, lr}
 800b87c:	4605      	mov	r5, r0
 800b87e:	460c      	mov	r4, r1
 800b880:	d904      	bls.n	800b88c <_raise_r+0x14>
 800b882:	2316      	movs	r3, #22
 800b884:	6003      	str	r3, [r0, #0]
 800b886:	f04f 30ff 	mov.w	r0, #4294967295
 800b88a:	bd38      	pop	{r3, r4, r5, pc}
 800b88c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b88e:	b112      	cbz	r2, 800b896 <_raise_r+0x1e>
 800b890:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b894:	b94b      	cbnz	r3, 800b8aa <_raise_r+0x32>
 800b896:	4628      	mov	r0, r5
 800b898:	f000 f830 	bl	800b8fc <_getpid_r>
 800b89c:	4622      	mov	r2, r4
 800b89e:	4601      	mov	r1, r0
 800b8a0:	4628      	mov	r0, r5
 800b8a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b8a6:	f000 b817 	b.w	800b8d8 <_kill_r>
 800b8aa:	2b01      	cmp	r3, #1
 800b8ac:	d00a      	beq.n	800b8c4 <_raise_r+0x4c>
 800b8ae:	1c59      	adds	r1, r3, #1
 800b8b0:	d103      	bne.n	800b8ba <_raise_r+0x42>
 800b8b2:	2316      	movs	r3, #22
 800b8b4:	6003      	str	r3, [r0, #0]
 800b8b6:	2001      	movs	r0, #1
 800b8b8:	e7e7      	b.n	800b88a <_raise_r+0x12>
 800b8ba:	2100      	movs	r1, #0
 800b8bc:	4620      	mov	r0, r4
 800b8be:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b8c2:	4798      	blx	r3
 800b8c4:	2000      	movs	r0, #0
 800b8c6:	e7e0      	b.n	800b88a <_raise_r+0x12>

0800b8c8 <raise>:
 800b8c8:	4b02      	ldr	r3, [pc, #8]	@ (800b8d4 <raise+0xc>)
 800b8ca:	4601      	mov	r1, r0
 800b8cc:	6818      	ldr	r0, [r3, #0]
 800b8ce:	f7ff bfd3 	b.w	800b878 <_raise_r>
 800b8d2:	bf00      	nop
 800b8d4:	2000001c 	.word	0x2000001c

0800b8d8 <_kill_r>:
 800b8d8:	b538      	push	{r3, r4, r5, lr}
 800b8da:	2300      	movs	r3, #0
 800b8dc:	4d06      	ldr	r5, [pc, #24]	@ (800b8f8 <_kill_r+0x20>)
 800b8de:	4604      	mov	r4, r0
 800b8e0:	4608      	mov	r0, r1
 800b8e2:	4611      	mov	r1, r2
 800b8e4:	602b      	str	r3, [r5, #0]
 800b8e6:	f7f7 fdf0 	bl	80034ca <_kill>
 800b8ea:	1c43      	adds	r3, r0, #1
 800b8ec:	d102      	bne.n	800b8f4 <_kill_r+0x1c>
 800b8ee:	682b      	ldr	r3, [r5, #0]
 800b8f0:	b103      	cbz	r3, 800b8f4 <_kill_r+0x1c>
 800b8f2:	6023      	str	r3, [r4, #0]
 800b8f4:	bd38      	pop	{r3, r4, r5, pc}
 800b8f6:	bf00      	nop
 800b8f8:	20000a94 	.word	0x20000a94

0800b8fc <_getpid_r>:
 800b8fc:	f7f7 bdde 	b.w	80034bc <_getpid>

0800b900 <__swhatbuf_r>:
 800b900:	b570      	push	{r4, r5, r6, lr}
 800b902:	460c      	mov	r4, r1
 800b904:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b908:	4615      	mov	r5, r2
 800b90a:	2900      	cmp	r1, #0
 800b90c:	461e      	mov	r6, r3
 800b90e:	b096      	sub	sp, #88	@ 0x58
 800b910:	da0c      	bge.n	800b92c <__swhatbuf_r+0x2c>
 800b912:	89a3      	ldrh	r3, [r4, #12]
 800b914:	2100      	movs	r1, #0
 800b916:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b91a:	bf14      	ite	ne
 800b91c:	2340      	movne	r3, #64	@ 0x40
 800b91e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b922:	2000      	movs	r0, #0
 800b924:	6031      	str	r1, [r6, #0]
 800b926:	602b      	str	r3, [r5, #0]
 800b928:	b016      	add	sp, #88	@ 0x58
 800b92a:	bd70      	pop	{r4, r5, r6, pc}
 800b92c:	466a      	mov	r2, sp
 800b92e:	f000 f849 	bl	800b9c4 <_fstat_r>
 800b932:	2800      	cmp	r0, #0
 800b934:	dbed      	blt.n	800b912 <__swhatbuf_r+0x12>
 800b936:	9901      	ldr	r1, [sp, #4]
 800b938:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b93c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b940:	4259      	negs	r1, r3
 800b942:	4159      	adcs	r1, r3
 800b944:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b948:	e7eb      	b.n	800b922 <__swhatbuf_r+0x22>

0800b94a <__smakebuf_r>:
 800b94a:	898b      	ldrh	r3, [r1, #12]
 800b94c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b94e:	079d      	lsls	r5, r3, #30
 800b950:	4606      	mov	r6, r0
 800b952:	460c      	mov	r4, r1
 800b954:	d507      	bpl.n	800b966 <__smakebuf_r+0x1c>
 800b956:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b95a:	6023      	str	r3, [r4, #0]
 800b95c:	6123      	str	r3, [r4, #16]
 800b95e:	2301      	movs	r3, #1
 800b960:	6163      	str	r3, [r4, #20]
 800b962:	b003      	add	sp, #12
 800b964:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b966:	466a      	mov	r2, sp
 800b968:	ab01      	add	r3, sp, #4
 800b96a:	f7ff ffc9 	bl	800b900 <__swhatbuf_r>
 800b96e:	9f00      	ldr	r7, [sp, #0]
 800b970:	4605      	mov	r5, r0
 800b972:	4639      	mov	r1, r7
 800b974:	4630      	mov	r0, r6
 800b976:	f7fc ffd9 	bl	800892c <_malloc_r>
 800b97a:	b948      	cbnz	r0, 800b990 <__smakebuf_r+0x46>
 800b97c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b980:	059a      	lsls	r2, r3, #22
 800b982:	d4ee      	bmi.n	800b962 <__smakebuf_r+0x18>
 800b984:	f023 0303 	bic.w	r3, r3, #3
 800b988:	f043 0302 	orr.w	r3, r3, #2
 800b98c:	81a3      	strh	r3, [r4, #12]
 800b98e:	e7e2      	b.n	800b956 <__smakebuf_r+0xc>
 800b990:	89a3      	ldrh	r3, [r4, #12]
 800b992:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b996:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b99a:	81a3      	strh	r3, [r4, #12]
 800b99c:	9b01      	ldr	r3, [sp, #4]
 800b99e:	6020      	str	r0, [r4, #0]
 800b9a0:	b15b      	cbz	r3, 800b9ba <__smakebuf_r+0x70>
 800b9a2:	4630      	mov	r0, r6
 800b9a4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b9a8:	f000 f81e 	bl	800b9e8 <_isatty_r>
 800b9ac:	b128      	cbz	r0, 800b9ba <__smakebuf_r+0x70>
 800b9ae:	89a3      	ldrh	r3, [r4, #12]
 800b9b0:	f023 0303 	bic.w	r3, r3, #3
 800b9b4:	f043 0301 	orr.w	r3, r3, #1
 800b9b8:	81a3      	strh	r3, [r4, #12]
 800b9ba:	89a3      	ldrh	r3, [r4, #12]
 800b9bc:	431d      	orrs	r5, r3
 800b9be:	81a5      	strh	r5, [r4, #12]
 800b9c0:	e7cf      	b.n	800b962 <__smakebuf_r+0x18>
	...

0800b9c4 <_fstat_r>:
 800b9c4:	b538      	push	{r3, r4, r5, lr}
 800b9c6:	2300      	movs	r3, #0
 800b9c8:	4d06      	ldr	r5, [pc, #24]	@ (800b9e4 <_fstat_r+0x20>)
 800b9ca:	4604      	mov	r4, r0
 800b9cc:	4608      	mov	r0, r1
 800b9ce:	4611      	mov	r1, r2
 800b9d0:	602b      	str	r3, [r5, #0]
 800b9d2:	f7f7 fdd9 	bl	8003588 <_fstat>
 800b9d6:	1c43      	adds	r3, r0, #1
 800b9d8:	d102      	bne.n	800b9e0 <_fstat_r+0x1c>
 800b9da:	682b      	ldr	r3, [r5, #0]
 800b9dc:	b103      	cbz	r3, 800b9e0 <_fstat_r+0x1c>
 800b9de:	6023      	str	r3, [r4, #0]
 800b9e0:	bd38      	pop	{r3, r4, r5, pc}
 800b9e2:	bf00      	nop
 800b9e4:	20000a94 	.word	0x20000a94

0800b9e8 <_isatty_r>:
 800b9e8:	b538      	push	{r3, r4, r5, lr}
 800b9ea:	2300      	movs	r3, #0
 800b9ec:	4d05      	ldr	r5, [pc, #20]	@ (800ba04 <_isatty_r+0x1c>)
 800b9ee:	4604      	mov	r4, r0
 800b9f0:	4608      	mov	r0, r1
 800b9f2:	602b      	str	r3, [r5, #0]
 800b9f4:	f7f7 fdd7 	bl	80035a6 <_isatty>
 800b9f8:	1c43      	adds	r3, r0, #1
 800b9fa:	d102      	bne.n	800ba02 <_isatty_r+0x1a>
 800b9fc:	682b      	ldr	r3, [r5, #0]
 800b9fe:	b103      	cbz	r3, 800ba02 <_isatty_r+0x1a>
 800ba00:	6023      	str	r3, [r4, #0]
 800ba02:	bd38      	pop	{r3, r4, r5, pc}
 800ba04:	20000a94 	.word	0x20000a94

0800ba08 <pow>:
 800ba08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ba0c:	4614      	mov	r4, r2
 800ba0e:	461d      	mov	r5, r3
 800ba10:	4680      	mov	r8, r0
 800ba12:	4689      	mov	r9, r1
 800ba14:	f000 f868 	bl	800bae8 <__ieee754_pow>
 800ba18:	4622      	mov	r2, r4
 800ba1a:	4606      	mov	r6, r0
 800ba1c:	460f      	mov	r7, r1
 800ba1e:	462b      	mov	r3, r5
 800ba20:	4620      	mov	r0, r4
 800ba22:	4629      	mov	r1, r5
 800ba24:	f7f4 fff2 	bl	8000a0c <__aeabi_dcmpun>
 800ba28:	bbc8      	cbnz	r0, 800ba9e <pow+0x96>
 800ba2a:	2200      	movs	r2, #0
 800ba2c:	2300      	movs	r3, #0
 800ba2e:	4640      	mov	r0, r8
 800ba30:	4649      	mov	r1, r9
 800ba32:	f7f4 ffb9 	bl	80009a8 <__aeabi_dcmpeq>
 800ba36:	b1b8      	cbz	r0, 800ba68 <pow+0x60>
 800ba38:	2200      	movs	r2, #0
 800ba3a:	2300      	movs	r3, #0
 800ba3c:	4620      	mov	r0, r4
 800ba3e:	4629      	mov	r1, r5
 800ba40:	f7f4 ffb2 	bl	80009a8 <__aeabi_dcmpeq>
 800ba44:	2800      	cmp	r0, #0
 800ba46:	d141      	bne.n	800bacc <pow+0xc4>
 800ba48:	4620      	mov	r0, r4
 800ba4a:	4629      	mov	r1, r5
 800ba4c:	f000 f844 	bl	800bad8 <finite>
 800ba50:	b328      	cbz	r0, 800ba9e <pow+0x96>
 800ba52:	2200      	movs	r2, #0
 800ba54:	2300      	movs	r3, #0
 800ba56:	4620      	mov	r0, r4
 800ba58:	4629      	mov	r1, r5
 800ba5a:	f7f4 ffaf 	bl	80009bc <__aeabi_dcmplt>
 800ba5e:	b1f0      	cbz	r0, 800ba9e <pow+0x96>
 800ba60:	f7fc f860 	bl	8007b24 <__errno>
 800ba64:	2322      	movs	r3, #34	@ 0x22
 800ba66:	e019      	b.n	800ba9c <pow+0x94>
 800ba68:	4630      	mov	r0, r6
 800ba6a:	4639      	mov	r1, r7
 800ba6c:	f000 f834 	bl	800bad8 <finite>
 800ba70:	b9c8      	cbnz	r0, 800baa6 <pow+0x9e>
 800ba72:	4640      	mov	r0, r8
 800ba74:	4649      	mov	r1, r9
 800ba76:	f000 f82f 	bl	800bad8 <finite>
 800ba7a:	b1a0      	cbz	r0, 800baa6 <pow+0x9e>
 800ba7c:	4620      	mov	r0, r4
 800ba7e:	4629      	mov	r1, r5
 800ba80:	f000 f82a 	bl	800bad8 <finite>
 800ba84:	b178      	cbz	r0, 800baa6 <pow+0x9e>
 800ba86:	4632      	mov	r2, r6
 800ba88:	463b      	mov	r3, r7
 800ba8a:	4630      	mov	r0, r6
 800ba8c:	4639      	mov	r1, r7
 800ba8e:	f7f4 ffbd 	bl	8000a0c <__aeabi_dcmpun>
 800ba92:	2800      	cmp	r0, #0
 800ba94:	d0e4      	beq.n	800ba60 <pow+0x58>
 800ba96:	f7fc f845 	bl	8007b24 <__errno>
 800ba9a:	2321      	movs	r3, #33	@ 0x21
 800ba9c:	6003      	str	r3, [r0, #0]
 800ba9e:	4630      	mov	r0, r6
 800baa0:	4639      	mov	r1, r7
 800baa2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800baa6:	2200      	movs	r2, #0
 800baa8:	2300      	movs	r3, #0
 800baaa:	4630      	mov	r0, r6
 800baac:	4639      	mov	r1, r7
 800baae:	f7f4 ff7b 	bl	80009a8 <__aeabi_dcmpeq>
 800bab2:	2800      	cmp	r0, #0
 800bab4:	d0f3      	beq.n	800ba9e <pow+0x96>
 800bab6:	4640      	mov	r0, r8
 800bab8:	4649      	mov	r1, r9
 800baba:	f000 f80d 	bl	800bad8 <finite>
 800babe:	2800      	cmp	r0, #0
 800bac0:	d0ed      	beq.n	800ba9e <pow+0x96>
 800bac2:	4620      	mov	r0, r4
 800bac4:	4629      	mov	r1, r5
 800bac6:	f000 f807 	bl	800bad8 <finite>
 800baca:	e7c8      	b.n	800ba5e <pow+0x56>
 800bacc:	2600      	movs	r6, #0
 800bace:	4f01      	ldr	r7, [pc, #4]	@ (800bad4 <pow+0xcc>)
 800bad0:	e7e5      	b.n	800ba9e <pow+0x96>
 800bad2:	bf00      	nop
 800bad4:	3ff00000 	.word	0x3ff00000

0800bad8 <finite>:
 800bad8:	f041 4000 	orr.w	r0, r1, #2147483648	@ 0x80000000
 800badc:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 800bae0:	0fc0      	lsrs	r0, r0, #31
 800bae2:	4770      	bx	lr
 800bae4:	0000      	movs	r0, r0
	...

0800bae8 <__ieee754_pow>:
 800bae8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800baec:	b091      	sub	sp, #68	@ 0x44
 800baee:	e9cd 2300 	strd	r2, r3, [sp]
 800baf2:	468b      	mov	fp, r1
 800baf4:	e9dd 1800 	ldrd	r1, r8, [sp]
 800baf8:	f028 4700 	bic.w	r7, r8, #2147483648	@ 0x80000000
 800bafc:	4682      	mov	sl, r0
 800bafe:	ea57 0001 	orrs.w	r0, r7, r1
 800bb02:	d112      	bne.n	800bb2a <__ieee754_pow+0x42>
 800bb04:	4653      	mov	r3, sl
 800bb06:	f48b 2200 	eor.w	r2, fp, #524288	@ 0x80000
 800bb0a:	18db      	adds	r3, r3, r3
 800bb0c:	4152      	adcs	r2, r2
 800bb0e:	4298      	cmp	r0, r3
 800bb10:	4b91      	ldr	r3, [pc, #580]	@ (800bd58 <__ieee754_pow+0x270>)
 800bb12:	4193      	sbcs	r3, r2
 800bb14:	f080 84ce 	bcs.w	800c4b4 <__ieee754_pow+0x9cc>
 800bb18:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bb1c:	4650      	mov	r0, sl
 800bb1e:	4659      	mov	r1, fp
 800bb20:	f7f4 fb24 	bl	800016c <__adddf3>
 800bb24:	b011      	add	sp, #68	@ 0x44
 800bb26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb2a:	4b8c      	ldr	r3, [pc, #560]	@ (800bd5c <__ieee754_pow+0x274>)
 800bb2c:	f02b 4600 	bic.w	r6, fp, #2147483648	@ 0x80000000
 800bb30:	429e      	cmp	r6, r3
 800bb32:	465d      	mov	r5, fp
 800bb34:	46d1      	mov	r9, sl
 800bb36:	d807      	bhi.n	800bb48 <__ieee754_pow+0x60>
 800bb38:	d102      	bne.n	800bb40 <__ieee754_pow+0x58>
 800bb3a:	f1ba 0f00 	cmp.w	sl, #0
 800bb3e:	d1eb      	bne.n	800bb18 <__ieee754_pow+0x30>
 800bb40:	429f      	cmp	r7, r3
 800bb42:	d801      	bhi.n	800bb48 <__ieee754_pow+0x60>
 800bb44:	d10f      	bne.n	800bb66 <__ieee754_pow+0x7e>
 800bb46:	b171      	cbz	r1, 800bb66 <__ieee754_pow+0x7e>
 800bb48:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 800bb4c:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 800bb50:	ea55 0509 	orrs.w	r5, r5, r9
 800bb54:	d1e0      	bne.n	800bb18 <__ieee754_pow+0x30>
 800bb56:	e9dd 3200 	ldrd	r3, r2, [sp]
 800bb5a:	18db      	adds	r3, r3, r3
 800bb5c:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 800bb60:	4152      	adcs	r2, r2
 800bb62:	429d      	cmp	r5, r3
 800bb64:	e7d4      	b.n	800bb10 <__ieee754_pow+0x28>
 800bb66:	2d00      	cmp	r5, #0
 800bb68:	4633      	mov	r3, r6
 800bb6a:	da39      	bge.n	800bbe0 <__ieee754_pow+0xf8>
 800bb6c:	4a7c      	ldr	r2, [pc, #496]	@ (800bd60 <__ieee754_pow+0x278>)
 800bb6e:	4297      	cmp	r7, r2
 800bb70:	d84e      	bhi.n	800bc10 <__ieee754_pow+0x128>
 800bb72:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 800bb76:	4297      	cmp	r7, r2
 800bb78:	f240 84ab 	bls.w	800c4d2 <__ieee754_pow+0x9ea>
 800bb7c:	153a      	asrs	r2, r7, #20
 800bb7e:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800bb82:	2a14      	cmp	r2, #20
 800bb84:	dd0f      	ble.n	800bba6 <__ieee754_pow+0xbe>
 800bb86:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 800bb8a:	fa21 f402 	lsr.w	r4, r1, r2
 800bb8e:	fa04 f202 	lsl.w	r2, r4, r2
 800bb92:	428a      	cmp	r2, r1
 800bb94:	f040 849d 	bne.w	800c4d2 <__ieee754_pow+0x9ea>
 800bb98:	f004 0401 	and.w	r4, r4, #1
 800bb9c:	f1c4 0402 	rsb	r4, r4, #2
 800bba0:	2900      	cmp	r1, #0
 800bba2:	d15a      	bne.n	800bc5a <__ieee754_pow+0x172>
 800bba4:	e00e      	b.n	800bbc4 <__ieee754_pow+0xdc>
 800bba6:	2900      	cmp	r1, #0
 800bba8:	d156      	bne.n	800bc58 <__ieee754_pow+0x170>
 800bbaa:	f1c2 0214 	rsb	r2, r2, #20
 800bbae:	fa47 f402 	asr.w	r4, r7, r2
 800bbb2:	fa04 f202 	lsl.w	r2, r4, r2
 800bbb6:	42ba      	cmp	r2, r7
 800bbb8:	f040 8488 	bne.w	800c4cc <__ieee754_pow+0x9e4>
 800bbbc:	f004 0401 	and.w	r4, r4, #1
 800bbc0:	f1c4 0402 	rsb	r4, r4, #2
 800bbc4:	4a67      	ldr	r2, [pc, #412]	@ (800bd64 <__ieee754_pow+0x27c>)
 800bbc6:	4297      	cmp	r7, r2
 800bbc8:	d130      	bne.n	800bc2c <__ieee754_pow+0x144>
 800bbca:	f1b8 0f00 	cmp.w	r8, #0
 800bbce:	f280 8479 	bge.w	800c4c4 <__ieee754_pow+0x9dc>
 800bbd2:	4652      	mov	r2, sl
 800bbd4:	465b      	mov	r3, fp
 800bbd6:	2000      	movs	r0, #0
 800bbd8:	4962      	ldr	r1, [pc, #392]	@ (800bd64 <__ieee754_pow+0x27c>)
 800bbda:	f7f4 fda7 	bl	800072c <__aeabi_ddiv>
 800bbde:	e7a1      	b.n	800bb24 <__ieee754_pow+0x3c>
 800bbe0:	2400      	movs	r4, #0
 800bbe2:	2900      	cmp	r1, #0
 800bbe4:	d139      	bne.n	800bc5a <__ieee754_pow+0x172>
 800bbe6:	4a5d      	ldr	r2, [pc, #372]	@ (800bd5c <__ieee754_pow+0x274>)
 800bbe8:	4297      	cmp	r7, r2
 800bbea:	d1eb      	bne.n	800bbc4 <__ieee754_pow+0xdc>
 800bbec:	f106 4340 	add.w	r3, r6, #3221225472	@ 0xc0000000
 800bbf0:	f503 1380 	add.w	r3, r3, #1048576	@ 0x100000
 800bbf4:	ea53 0309 	orrs.w	r3, r3, r9
 800bbf8:	f000 845c 	beq.w	800c4b4 <__ieee754_pow+0x9cc>
 800bbfc:	4b5a      	ldr	r3, [pc, #360]	@ (800bd68 <__ieee754_pow+0x280>)
 800bbfe:	429e      	cmp	r6, r3
 800bc00:	d908      	bls.n	800bc14 <__ieee754_pow+0x12c>
 800bc02:	f1b8 0f00 	cmp.w	r8, #0
 800bc06:	f2c0 8459 	blt.w	800c4bc <__ieee754_pow+0x9d4>
 800bc0a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bc0e:	e789      	b.n	800bb24 <__ieee754_pow+0x3c>
 800bc10:	2402      	movs	r4, #2
 800bc12:	e7e6      	b.n	800bbe2 <__ieee754_pow+0xfa>
 800bc14:	f1b8 0f00 	cmp.w	r8, #0
 800bc18:	f04f 0000 	mov.w	r0, #0
 800bc1c:	f04f 0100 	mov.w	r1, #0
 800bc20:	da80      	bge.n	800bb24 <__ieee754_pow+0x3c>
 800bc22:	e9dd 0300 	ldrd	r0, r3, [sp]
 800bc26:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800bc2a:	e77b      	b.n	800bb24 <__ieee754_pow+0x3c>
 800bc2c:	f1b8 4f80 	cmp.w	r8, #1073741824	@ 0x40000000
 800bc30:	d106      	bne.n	800bc40 <__ieee754_pow+0x158>
 800bc32:	4652      	mov	r2, sl
 800bc34:	465b      	mov	r3, fp
 800bc36:	4650      	mov	r0, sl
 800bc38:	4659      	mov	r1, fp
 800bc3a:	f7f4 fc4d 	bl	80004d8 <__aeabi_dmul>
 800bc3e:	e771      	b.n	800bb24 <__ieee754_pow+0x3c>
 800bc40:	4a4a      	ldr	r2, [pc, #296]	@ (800bd6c <__ieee754_pow+0x284>)
 800bc42:	4590      	cmp	r8, r2
 800bc44:	d109      	bne.n	800bc5a <__ieee754_pow+0x172>
 800bc46:	2d00      	cmp	r5, #0
 800bc48:	db07      	blt.n	800bc5a <__ieee754_pow+0x172>
 800bc4a:	4650      	mov	r0, sl
 800bc4c:	4659      	mov	r1, fp
 800bc4e:	b011      	add	sp, #68	@ 0x44
 800bc50:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc54:	f000 bd12 	b.w	800c67c <__ieee754_sqrt>
 800bc58:	2400      	movs	r4, #0
 800bc5a:	4650      	mov	r0, sl
 800bc5c:	4659      	mov	r1, fp
 800bc5e:	9302      	str	r3, [sp, #8]
 800bc60:	f000 fc6a 	bl	800c538 <fabs>
 800bc64:	9b02      	ldr	r3, [sp, #8]
 800bc66:	f1b9 0f00 	cmp.w	r9, #0
 800bc6a:	d127      	bne.n	800bcbc <__ieee754_pow+0x1d4>
 800bc6c:	4a3d      	ldr	r2, [pc, #244]	@ (800bd64 <__ieee754_pow+0x27c>)
 800bc6e:	f025 4c40 	bic.w	ip, r5, #3221225472	@ 0xc0000000
 800bc72:	4594      	cmp	ip, r2
 800bc74:	d000      	beq.n	800bc78 <__ieee754_pow+0x190>
 800bc76:	bb0e      	cbnz	r6, 800bcbc <__ieee754_pow+0x1d4>
 800bc78:	f1b8 0f00 	cmp.w	r8, #0
 800bc7c:	da05      	bge.n	800bc8a <__ieee754_pow+0x1a2>
 800bc7e:	4602      	mov	r2, r0
 800bc80:	460b      	mov	r3, r1
 800bc82:	2000      	movs	r0, #0
 800bc84:	4937      	ldr	r1, [pc, #220]	@ (800bd64 <__ieee754_pow+0x27c>)
 800bc86:	f7f4 fd51 	bl	800072c <__aeabi_ddiv>
 800bc8a:	2d00      	cmp	r5, #0
 800bc8c:	f6bf af4a 	bge.w	800bb24 <__ieee754_pow+0x3c>
 800bc90:	f106 4640 	add.w	r6, r6, #3221225472	@ 0xc0000000
 800bc94:	f506 1680 	add.w	r6, r6, #1048576	@ 0x100000
 800bc98:	4326      	orrs	r6, r4
 800bc9a:	d108      	bne.n	800bcae <__ieee754_pow+0x1c6>
 800bc9c:	4602      	mov	r2, r0
 800bc9e:	460b      	mov	r3, r1
 800bca0:	4610      	mov	r0, r2
 800bca2:	4619      	mov	r1, r3
 800bca4:	f7f4 fa60 	bl	8000168 <__aeabi_dsub>
 800bca8:	4602      	mov	r2, r0
 800bcaa:	460b      	mov	r3, r1
 800bcac:	e795      	b.n	800bbda <__ieee754_pow+0xf2>
 800bcae:	2c01      	cmp	r4, #1
 800bcb0:	f47f af38 	bne.w	800bb24 <__ieee754_pow+0x3c>
 800bcb4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800bcb8:	4619      	mov	r1, r3
 800bcba:	e733      	b.n	800bb24 <__ieee754_pow+0x3c>
 800bcbc:	0fea      	lsrs	r2, r5, #31
 800bcbe:	3a01      	subs	r2, #1
 800bcc0:	ea52 0c04 	orrs.w	ip, r2, r4
 800bcc4:	d102      	bne.n	800bccc <__ieee754_pow+0x1e4>
 800bcc6:	4652      	mov	r2, sl
 800bcc8:	465b      	mov	r3, fp
 800bcca:	e7e9      	b.n	800bca0 <__ieee754_pow+0x1b8>
 800bccc:	f04f 0900 	mov.w	r9, #0
 800bcd0:	3c01      	subs	r4, #1
 800bcd2:	4314      	orrs	r4, r2
 800bcd4:	bf14      	ite	ne
 800bcd6:	f8df a08c 	ldrne.w	sl, [pc, #140]	@ 800bd64 <__ieee754_pow+0x27c>
 800bcda:	f8df a094 	ldreq.w	sl, [pc, #148]	@ 800bd70 <__ieee754_pow+0x288>
 800bcde:	f1b7 4f84 	cmp.w	r7, #1107296256	@ 0x42000000
 800bce2:	e9cd 9a02 	strd	r9, sl, [sp, #8]
 800bce6:	f240 8107 	bls.w	800bef8 <__ieee754_pow+0x410>
 800bcea:	4b22      	ldr	r3, [pc, #136]	@ (800bd74 <__ieee754_pow+0x28c>)
 800bcec:	429f      	cmp	r7, r3
 800bcee:	4b1e      	ldr	r3, [pc, #120]	@ (800bd68 <__ieee754_pow+0x280>)
 800bcf0:	d913      	bls.n	800bd1a <__ieee754_pow+0x232>
 800bcf2:	429e      	cmp	r6, r3
 800bcf4:	d808      	bhi.n	800bd08 <__ieee754_pow+0x220>
 800bcf6:	f1b8 0f00 	cmp.w	r8, #0
 800bcfa:	da08      	bge.n	800bd0e <__ieee754_pow+0x226>
 800bcfc:	2000      	movs	r0, #0
 800bcfe:	b011      	add	sp, #68	@ 0x44
 800bd00:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd04:	f000 bcb4 	b.w	800c670 <__math_oflow>
 800bd08:	f1b8 0f00 	cmp.w	r8, #0
 800bd0c:	dcf6      	bgt.n	800bcfc <__ieee754_pow+0x214>
 800bd0e:	2000      	movs	r0, #0
 800bd10:	b011      	add	sp, #68	@ 0x44
 800bd12:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd16:	f000 bca6 	b.w	800c666 <__math_uflow>
 800bd1a:	429e      	cmp	r6, r3
 800bd1c:	d20c      	bcs.n	800bd38 <__ieee754_pow+0x250>
 800bd1e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bd22:	2200      	movs	r2, #0
 800bd24:	2300      	movs	r3, #0
 800bd26:	f7f4 fe49 	bl	80009bc <__aeabi_dcmplt>
 800bd2a:	3800      	subs	r0, #0
 800bd2c:	bf18      	it	ne
 800bd2e:	2001      	movne	r0, #1
 800bd30:	f1b8 0f00 	cmp.w	r8, #0
 800bd34:	daec      	bge.n	800bd10 <__ieee754_pow+0x228>
 800bd36:	e7e2      	b.n	800bcfe <__ieee754_pow+0x216>
 800bd38:	4b0a      	ldr	r3, [pc, #40]	@ (800bd64 <__ieee754_pow+0x27c>)
 800bd3a:	2200      	movs	r2, #0
 800bd3c:	429e      	cmp	r6, r3
 800bd3e:	d91b      	bls.n	800bd78 <__ieee754_pow+0x290>
 800bd40:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bd44:	2300      	movs	r3, #0
 800bd46:	f7f4 fe39 	bl	80009bc <__aeabi_dcmplt>
 800bd4a:	3800      	subs	r0, #0
 800bd4c:	bf18      	it	ne
 800bd4e:	2001      	movne	r0, #1
 800bd50:	f1b8 0f00 	cmp.w	r8, #0
 800bd54:	dcd3      	bgt.n	800bcfe <__ieee754_pow+0x216>
 800bd56:	e7db      	b.n	800bd10 <__ieee754_pow+0x228>
 800bd58:	fff00000 	.word	0xfff00000
 800bd5c:	7ff00000 	.word	0x7ff00000
 800bd60:	433fffff 	.word	0x433fffff
 800bd64:	3ff00000 	.word	0x3ff00000
 800bd68:	3fefffff 	.word	0x3fefffff
 800bd6c:	3fe00000 	.word	0x3fe00000
 800bd70:	bff00000 	.word	0xbff00000
 800bd74:	43f00000 	.word	0x43f00000
 800bd78:	4b5b      	ldr	r3, [pc, #364]	@ (800bee8 <__ieee754_pow+0x400>)
 800bd7a:	f7f4 f9f5 	bl	8000168 <__aeabi_dsub>
 800bd7e:	a352      	add	r3, pc, #328	@ (adr r3, 800bec8 <__ieee754_pow+0x3e0>)
 800bd80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd84:	4604      	mov	r4, r0
 800bd86:	460d      	mov	r5, r1
 800bd88:	f7f4 fba6 	bl	80004d8 <__aeabi_dmul>
 800bd8c:	a350      	add	r3, pc, #320	@ (adr r3, 800bed0 <__ieee754_pow+0x3e8>)
 800bd8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd92:	4606      	mov	r6, r0
 800bd94:	460f      	mov	r7, r1
 800bd96:	4620      	mov	r0, r4
 800bd98:	4629      	mov	r1, r5
 800bd9a:	f7f4 fb9d 	bl	80004d8 <__aeabi_dmul>
 800bd9e:	2200      	movs	r2, #0
 800bda0:	4682      	mov	sl, r0
 800bda2:	468b      	mov	fp, r1
 800bda4:	4620      	mov	r0, r4
 800bda6:	4629      	mov	r1, r5
 800bda8:	4b50      	ldr	r3, [pc, #320]	@ (800beec <__ieee754_pow+0x404>)
 800bdaa:	f7f4 fb95 	bl	80004d8 <__aeabi_dmul>
 800bdae:	4602      	mov	r2, r0
 800bdb0:	460b      	mov	r3, r1
 800bdb2:	a149      	add	r1, pc, #292	@ (adr r1, 800bed8 <__ieee754_pow+0x3f0>)
 800bdb4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bdb8:	f7f4 f9d6 	bl	8000168 <__aeabi_dsub>
 800bdbc:	4622      	mov	r2, r4
 800bdbe:	462b      	mov	r3, r5
 800bdc0:	f7f4 fb8a 	bl	80004d8 <__aeabi_dmul>
 800bdc4:	4602      	mov	r2, r0
 800bdc6:	460b      	mov	r3, r1
 800bdc8:	2000      	movs	r0, #0
 800bdca:	4949      	ldr	r1, [pc, #292]	@ (800bef0 <__ieee754_pow+0x408>)
 800bdcc:	f7f4 f9cc 	bl	8000168 <__aeabi_dsub>
 800bdd0:	4622      	mov	r2, r4
 800bdd2:	4680      	mov	r8, r0
 800bdd4:	4689      	mov	r9, r1
 800bdd6:	462b      	mov	r3, r5
 800bdd8:	4620      	mov	r0, r4
 800bdda:	4629      	mov	r1, r5
 800bddc:	f7f4 fb7c 	bl	80004d8 <__aeabi_dmul>
 800bde0:	4602      	mov	r2, r0
 800bde2:	460b      	mov	r3, r1
 800bde4:	4640      	mov	r0, r8
 800bde6:	4649      	mov	r1, r9
 800bde8:	f7f4 fb76 	bl	80004d8 <__aeabi_dmul>
 800bdec:	a33c      	add	r3, pc, #240	@ (adr r3, 800bee0 <__ieee754_pow+0x3f8>)
 800bdee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdf2:	f7f4 fb71 	bl	80004d8 <__aeabi_dmul>
 800bdf6:	4602      	mov	r2, r0
 800bdf8:	460b      	mov	r3, r1
 800bdfa:	4650      	mov	r0, sl
 800bdfc:	4659      	mov	r1, fp
 800bdfe:	f7f4 f9b3 	bl	8000168 <__aeabi_dsub>
 800be02:	2400      	movs	r4, #0
 800be04:	4602      	mov	r2, r0
 800be06:	460b      	mov	r3, r1
 800be08:	4680      	mov	r8, r0
 800be0a:	4689      	mov	r9, r1
 800be0c:	4630      	mov	r0, r6
 800be0e:	4639      	mov	r1, r7
 800be10:	f7f4 f9ac 	bl	800016c <__adddf3>
 800be14:	4632      	mov	r2, r6
 800be16:	463b      	mov	r3, r7
 800be18:	4620      	mov	r0, r4
 800be1a:	460d      	mov	r5, r1
 800be1c:	f7f4 f9a4 	bl	8000168 <__aeabi_dsub>
 800be20:	4602      	mov	r2, r0
 800be22:	460b      	mov	r3, r1
 800be24:	4640      	mov	r0, r8
 800be26:	4649      	mov	r1, r9
 800be28:	f7f4 f99e 	bl	8000168 <__aeabi_dsub>
 800be2c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800be30:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800be34:	2300      	movs	r3, #0
 800be36:	9304      	str	r3, [sp, #16]
 800be38:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800be3c:	4606      	mov	r6, r0
 800be3e:	460f      	mov	r7, r1
 800be40:	e9dd 0100 	ldrd	r0, r1, [sp]
 800be44:	4652      	mov	r2, sl
 800be46:	465b      	mov	r3, fp
 800be48:	f7f4 f98e 	bl	8000168 <__aeabi_dsub>
 800be4c:	4622      	mov	r2, r4
 800be4e:	462b      	mov	r3, r5
 800be50:	f7f4 fb42 	bl	80004d8 <__aeabi_dmul>
 800be54:	e9dd 2300 	ldrd	r2, r3, [sp]
 800be58:	4680      	mov	r8, r0
 800be5a:	4689      	mov	r9, r1
 800be5c:	4630      	mov	r0, r6
 800be5e:	4639      	mov	r1, r7
 800be60:	f7f4 fb3a 	bl	80004d8 <__aeabi_dmul>
 800be64:	4602      	mov	r2, r0
 800be66:	460b      	mov	r3, r1
 800be68:	4640      	mov	r0, r8
 800be6a:	4649      	mov	r1, r9
 800be6c:	f7f4 f97e 	bl	800016c <__adddf3>
 800be70:	4652      	mov	r2, sl
 800be72:	465b      	mov	r3, fp
 800be74:	4606      	mov	r6, r0
 800be76:	460f      	mov	r7, r1
 800be78:	4620      	mov	r0, r4
 800be7a:	4629      	mov	r1, r5
 800be7c:	f7f4 fb2c 	bl	80004d8 <__aeabi_dmul>
 800be80:	460b      	mov	r3, r1
 800be82:	4602      	mov	r2, r0
 800be84:	4680      	mov	r8, r0
 800be86:	4689      	mov	r9, r1
 800be88:	4630      	mov	r0, r6
 800be8a:	4639      	mov	r1, r7
 800be8c:	f7f4 f96e 	bl	800016c <__adddf3>
 800be90:	4b18      	ldr	r3, [pc, #96]	@ (800bef4 <__ieee754_pow+0x40c>)
 800be92:	4604      	mov	r4, r0
 800be94:	4299      	cmp	r1, r3
 800be96:	460d      	mov	r5, r1
 800be98:	468a      	mov	sl, r1
 800be9a:	468b      	mov	fp, r1
 800be9c:	f340 82e0 	ble.w	800c460 <__ieee754_pow+0x978>
 800bea0:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 800bea4:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 800bea8:	4303      	orrs	r3, r0
 800beaa:	f000 81df 	beq.w	800c26c <__ieee754_pow+0x784>
 800beae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800beb2:	2200      	movs	r2, #0
 800beb4:	2300      	movs	r3, #0
 800beb6:	f7f4 fd81 	bl	80009bc <__aeabi_dcmplt>
 800beba:	3800      	subs	r0, #0
 800bebc:	bf18      	it	ne
 800bebe:	2001      	movne	r0, #1
 800bec0:	e71d      	b.n	800bcfe <__ieee754_pow+0x216>
 800bec2:	bf00      	nop
 800bec4:	f3af 8000 	nop.w
 800bec8:	60000000 	.word	0x60000000
 800becc:	3ff71547 	.word	0x3ff71547
 800bed0:	f85ddf44 	.word	0xf85ddf44
 800bed4:	3e54ae0b 	.word	0x3e54ae0b
 800bed8:	55555555 	.word	0x55555555
 800bedc:	3fd55555 	.word	0x3fd55555
 800bee0:	652b82fe 	.word	0x652b82fe
 800bee4:	3ff71547 	.word	0x3ff71547
 800bee8:	3ff00000 	.word	0x3ff00000
 800beec:	3fd00000 	.word	0x3fd00000
 800bef0:	3fe00000 	.word	0x3fe00000
 800bef4:	408fffff 	.word	0x408fffff
 800bef8:	4ad3      	ldr	r2, [pc, #844]	@ (800c248 <__ieee754_pow+0x760>)
 800befa:	402a      	ands	r2, r5
 800befc:	2a00      	cmp	r2, #0
 800befe:	f040 817a 	bne.w	800c1f6 <__ieee754_pow+0x70e>
 800bf02:	4bd2      	ldr	r3, [pc, #840]	@ (800c24c <__ieee754_pow+0x764>)
 800bf04:	2200      	movs	r2, #0
 800bf06:	f7f4 fae7 	bl	80004d8 <__aeabi_dmul>
 800bf0a:	f06f 0434 	mvn.w	r4, #52	@ 0x34
 800bf0e:	460b      	mov	r3, r1
 800bf10:	151a      	asrs	r2, r3, #20
 800bf12:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800bf16:	4422      	add	r2, r4
 800bf18:	920a      	str	r2, [sp, #40]	@ 0x28
 800bf1a:	4acd      	ldr	r2, [pc, #820]	@ (800c250 <__ieee754_pow+0x768>)
 800bf1c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bf20:	f043 557f 	orr.w	r5, r3, #1069547520	@ 0x3fc00000
 800bf24:	4293      	cmp	r3, r2
 800bf26:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800bf2a:	dd08      	ble.n	800bf3e <__ieee754_pow+0x456>
 800bf2c:	4ac9      	ldr	r2, [pc, #804]	@ (800c254 <__ieee754_pow+0x76c>)
 800bf2e:	4293      	cmp	r3, r2
 800bf30:	f340 8163 	ble.w	800c1fa <__ieee754_pow+0x712>
 800bf34:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bf36:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 800bf3a:	3301      	adds	r3, #1
 800bf3c:	930a      	str	r3, [sp, #40]	@ 0x28
 800bf3e:	2600      	movs	r6, #0
 800bf40:	00f3      	lsls	r3, r6, #3
 800bf42:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bf44:	4bc4      	ldr	r3, [pc, #784]	@ (800c258 <__ieee754_pow+0x770>)
 800bf46:	4629      	mov	r1, r5
 800bf48:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800bf4c:	e9d3 3400 	ldrd	r3, r4, [r3]
 800bf50:	461a      	mov	r2, r3
 800bf52:	e9cd 3408 	strd	r3, r4, [sp, #32]
 800bf56:	4623      	mov	r3, r4
 800bf58:	4682      	mov	sl, r0
 800bf5a:	f7f4 f905 	bl	8000168 <__aeabi_dsub>
 800bf5e:	4652      	mov	r2, sl
 800bf60:	462b      	mov	r3, r5
 800bf62:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 800bf66:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800bf6a:	f7f4 f8ff 	bl	800016c <__adddf3>
 800bf6e:	4602      	mov	r2, r0
 800bf70:	460b      	mov	r3, r1
 800bf72:	2000      	movs	r0, #0
 800bf74:	49b9      	ldr	r1, [pc, #740]	@ (800c25c <__ieee754_pow+0x774>)
 800bf76:	f7f4 fbd9 	bl	800072c <__aeabi_ddiv>
 800bf7a:	4602      	mov	r2, r0
 800bf7c:	460b      	mov	r3, r1
 800bf7e:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800bf82:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bf86:	f7f4 faa7 	bl	80004d8 <__aeabi_dmul>
 800bf8a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800bf8e:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 800bf92:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800bf96:	2300      	movs	r3, #0
 800bf98:	2200      	movs	r2, #0
 800bf9a:	46ab      	mov	fp, r5
 800bf9c:	106d      	asrs	r5, r5, #1
 800bf9e:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 800bfa2:	9304      	str	r3, [sp, #16]
 800bfa4:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 800bfa8:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800bfac:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 800bfb0:	4640      	mov	r0, r8
 800bfb2:	4649      	mov	r1, r9
 800bfb4:	4614      	mov	r4, r2
 800bfb6:	461d      	mov	r5, r3
 800bfb8:	f7f4 fa8e 	bl	80004d8 <__aeabi_dmul>
 800bfbc:	4602      	mov	r2, r0
 800bfbe:	460b      	mov	r3, r1
 800bfc0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bfc4:	f7f4 f8d0 	bl	8000168 <__aeabi_dsub>
 800bfc8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800bfcc:	4606      	mov	r6, r0
 800bfce:	460f      	mov	r7, r1
 800bfd0:	4620      	mov	r0, r4
 800bfd2:	4629      	mov	r1, r5
 800bfd4:	f7f4 f8c8 	bl	8000168 <__aeabi_dsub>
 800bfd8:	4602      	mov	r2, r0
 800bfda:	460b      	mov	r3, r1
 800bfdc:	4650      	mov	r0, sl
 800bfde:	4659      	mov	r1, fp
 800bfe0:	f7f4 f8c2 	bl	8000168 <__aeabi_dsub>
 800bfe4:	4642      	mov	r2, r8
 800bfe6:	464b      	mov	r3, r9
 800bfe8:	f7f4 fa76 	bl	80004d8 <__aeabi_dmul>
 800bfec:	4602      	mov	r2, r0
 800bfee:	460b      	mov	r3, r1
 800bff0:	4630      	mov	r0, r6
 800bff2:	4639      	mov	r1, r7
 800bff4:	f7f4 f8b8 	bl	8000168 <__aeabi_dsub>
 800bff8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800bffc:	f7f4 fa6c 	bl	80004d8 <__aeabi_dmul>
 800c000:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c004:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800c008:	4610      	mov	r0, r2
 800c00a:	4619      	mov	r1, r3
 800c00c:	f7f4 fa64 	bl	80004d8 <__aeabi_dmul>
 800c010:	a37b      	add	r3, pc, #492	@ (adr r3, 800c200 <__ieee754_pow+0x718>)
 800c012:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c016:	4604      	mov	r4, r0
 800c018:	460d      	mov	r5, r1
 800c01a:	f7f4 fa5d 	bl	80004d8 <__aeabi_dmul>
 800c01e:	a37a      	add	r3, pc, #488	@ (adr r3, 800c208 <__ieee754_pow+0x720>)
 800c020:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c024:	f7f4 f8a2 	bl	800016c <__adddf3>
 800c028:	4622      	mov	r2, r4
 800c02a:	462b      	mov	r3, r5
 800c02c:	f7f4 fa54 	bl	80004d8 <__aeabi_dmul>
 800c030:	a377      	add	r3, pc, #476	@ (adr r3, 800c210 <__ieee754_pow+0x728>)
 800c032:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c036:	f7f4 f899 	bl	800016c <__adddf3>
 800c03a:	4622      	mov	r2, r4
 800c03c:	462b      	mov	r3, r5
 800c03e:	f7f4 fa4b 	bl	80004d8 <__aeabi_dmul>
 800c042:	a375      	add	r3, pc, #468	@ (adr r3, 800c218 <__ieee754_pow+0x730>)
 800c044:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c048:	f7f4 f890 	bl	800016c <__adddf3>
 800c04c:	4622      	mov	r2, r4
 800c04e:	462b      	mov	r3, r5
 800c050:	f7f4 fa42 	bl	80004d8 <__aeabi_dmul>
 800c054:	a372      	add	r3, pc, #456	@ (adr r3, 800c220 <__ieee754_pow+0x738>)
 800c056:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c05a:	f7f4 f887 	bl	800016c <__adddf3>
 800c05e:	4622      	mov	r2, r4
 800c060:	462b      	mov	r3, r5
 800c062:	f7f4 fa39 	bl	80004d8 <__aeabi_dmul>
 800c066:	a370      	add	r3, pc, #448	@ (adr r3, 800c228 <__ieee754_pow+0x740>)
 800c068:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c06c:	f7f4 f87e 	bl	800016c <__adddf3>
 800c070:	4622      	mov	r2, r4
 800c072:	4606      	mov	r6, r0
 800c074:	460f      	mov	r7, r1
 800c076:	462b      	mov	r3, r5
 800c078:	4620      	mov	r0, r4
 800c07a:	4629      	mov	r1, r5
 800c07c:	f7f4 fa2c 	bl	80004d8 <__aeabi_dmul>
 800c080:	4602      	mov	r2, r0
 800c082:	460b      	mov	r3, r1
 800c084:	4630      	mov	r0, r6
 800c086:	4639      	mov	r1, r7
 800c088:	f7f4 fa26 	bl	80004d8 <__aeabi_dmul>
 800c08c:	4604      	mov	r4, r0
 800c08e:	460d      	mov	r5, r1
 800c090:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c094:	4642      	mov	r2, r8
 800c096:	464b      	mov	r3, r9
 800c098:	f7f4 f868 	bl	800016c <__adddf3>
 800c09c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800c0a0:	f7f4 fa1a 	bl	80004d8 <__aeabi_dmul>
 800c0a4:	4622      	mov	r2, r4
 800c0a6:	462b      	mov	r3, r5
 800c0a8:	f7f4 f860 	bl	800016c <__adddf3>
 800c0ac:	4642      	mov	r2, r8
 800c0ae:	4682      	mov	sl, r0
 800c0b0:	468b      	mov	fp, r1
 800c0b2:	464b      	mov	r3, r9
 800c0b4:	4640      	mov	r0, r8
 800c0b6:	4649      	mov	r1, r9
 800c0b8:	f7f4 fa0e 	bl	80004d8 <__aeabi_dmul>
 800c0bc:	2200      	movs	r2, #0
 800c0be:	4b68      	ldr	r3, [pc, #416]	@ (800c260 <__ieee754_pow+0x778>)
 800c0c0:	4606      	mov	r6, r0
 800c0c2:	460f      	mov	r7, r1
 800c0c4:	f7f4 f852 	bl	800016c <__adddf3>
 800c0c8:	4652      	mov	r2, sl
 800c0ca:	465b      	mov	r3, fp
 800c0cc:	f7f4 f84e 	bl	800016c <__adddf3>
 800c0d0:	2400      	movs	r4, #0
 800c0d2:	460d      	mov	r5, r1
 800c0d4:	4622      	mov	r2, r4
 800c0d6:	460b      	mov	r3, r1
 800c0d8:	4640      	mov	r0, r8
 800c0da:	4649      	mov	r1, r9
 800c0dc:	f7f4 f9fc 	bl	80004d8 <__aeabi_dmul>
 800c0e0:	2200      	movs	r2, #0
 800c0e2:	4680      	mov	r8, r0
 800c0e4:	4689      	mov	r9, r1
 800c0e6:	4620      	mov	r0, r4
 800c0e8:	4629      	mov	r1, r5
 800c0ea:	4b5d      	ldr	r3, [pc, #372]	@ (800c260 <__ieee754_pow+0x778>)
 800c0ec:	f7f4 f83c 	bl	8000168 <__aeabi_dsub>
 800c0f0:	4632      	mov	r2, r6
 800c0f2:	463b      	mov	r3, r7
 800c0f4:	f7f4 f838 	bl	8000168 <__aeabi_dsub>
 800c0f8:	4602      	mov	r2, r0
 800c0fa:	460b      	mov	r3, r1
 800c0fc:	4650      	mov	r0, sl
 800c0fe:	4659      	mov	r1, fp
 800c100:	f7f4 f832 	bl	8000168 <__aeabi_dsub>
 800c104:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c108:	f7f4 f9e6 	bl	80004d8 <__aeabi_dmul>
 800c10c:	4622      	mov	r2, r4
 800c10e:	4606      	mov	r6, r0
 800c110:	460f      	mov	r7, r1
 800c112:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c116:	462b      	mov	r3, r5
 800c118:	f7f4 f9de 	bl	80004d8 <__aeabi_dmul>
 800c11c:	4602      	mov	r2, r0
 800c11e:	460b      	mov	r3, r1
 800c120:	4630      	mov	r0, r6
 800c122:	4639      	mov	r1, r7
 800c124:	f7f4 f822 	bl	800016c <__adddf3>
 800c128:	2400      	movs	r4, #0
 800c12a:	4606      	mov	r6, r0
 800c12c:	460f      	mov	r7, r1
 800c12e:	4602      	mov	r2, r0
 800c130:	460b      	mov	r3, r1
 800c132:	4640      	mov	r0, r8
 800c134:	4649      	mov	r1, r9
 800c136:	f7f4 f819 	bl	800016c <__adddf3>
 800c13a:	a33d      	add	r3, pc, #244	@ (adr r3, 800c230 <__ieee754_pow+0x748>)
 800c13c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c140:	4620      	mov	r0, r4
 800c142:	460d      	mov	r5, r1
 800c144:	f7f4 f9c8 	bl	80004d8 <__aeabi_dmul>
 800c148:	4642      	mov	r2, r8
 800c14a:	464b      	mov	r3, r9
 800c14c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800c150:	4620      	mov	r0, r4
 800c152:	4629      	mov	r1, r5
 800c154:	f7f4 f808 	bl	8000168 <__aeabi_dsub>
 800c158:	4602      	mov	r2, r0
 800c15a:	460b      	mov	r3, r1
 800c15c:	4630      	mov	r0, r6
 800c15e:	4639      	mov	r1, r7
 800c160:	f7f4 f802 	bl	8000168 <__aeabi_dsub>
 800c164:	a334      	add	r3, pc, #208	@ (adr r3, 800c238 <__ieee754_pow+0x750>)
 800c166:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c16a:	f7f4 f9b5 	bl	80004d8 <__aeabi_dmul>
 800c16e:	a334      	add	r3, pc, #208	@ (adr r3, 800c240 <__ieee754_pow+0x758>)
 800c170:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c174:	4606      	mov	r6, r0
 800c176:	460f      	mov	r7, r1
 800c178:	4620      	mov	r0, r4
 800c17a:	4629      	mov	r1, r5
 800c17c:	f7f4 f9ac 	bl	80004d8 <__aeabi_dmul>
 800c180:	4602      	mov	r2, r0
 800c182:	460b      	mov	r3, r1
 800c184:	4630      	mov	r0, r6
 800c186:	4639      	mov	r1, r7
 800c188:	f7f3 fff0 	bl	800016c <__adddf3>
 800c18c:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800c18e:	4b35      	ldr	r3, [pc, #212]	@ (800c264 <__ieee754_pow+0x77c>)
 800c190:	2400      	movs	r4, #0
 800c192:	4413      	add	r3, r2
 800c194:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c198:	f7f3 ffe8 	bl	800016c <__adddf3>
 800c19c:	4682      	mov	sl, r0
 800c19e:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800c1a0:	468b      	mov	fp, r1
 800c1a2:	f7f4 f92f 	bl	8000404 <__aeabi_i2d>
 800c1a6:	4606      	mov	r6, r0
 800c1a8:	460f      	mov	r7, r1
 800c1aa:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800c1ac:	4b2e      	ldr	r3, [pc, #184]	@ (800c268 <__ieee754_pow+0x780>)
 800c1ae:	4413      	add	r3, r2
 800c1b0:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c1b4:	4652      	mov	r2, sl
 800c1b6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c1ba:	465b      	mov	r3, fp
 800c1bc:	f7f3 ffd6 	bl	800016c <__adddf3>
 800c1c0:	4642      	mov	r2, r8
 800c1c2:	464b      	mov	r3, r9
 800c1c4:	f7f3 ffd2 	bl	800016c <__adddf3>
 800c1c8:	4632      	mov	r2, r6
 800c1ca:	463b      	mov	r3, r7
 800c1cc:	f7f3 ffce 	bl	800016c <__adddf3>
 800c1d0:	4632      	mov	r2, r6
 800c1d2:	463b      	mov	r3, r7
 800c1d4:	4620      	mov	r0, r4
 800c1d6:	460d      	mov	r5, r1
 800c1d8:	f7f3 ffc6 	bl	8000168 <__aeabi_dsub>
 800c1dc:	4642      	mov	r2, r8
 800c1de:	464b      	mov	r3, r9
 800c1e0:	f7f3 ffc2 	bl	8000168 <__aeabi_dsub>
 800c1e4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c1e8:	f7f3 ffbe 	bl	8000168 <__aeabi_dsub>
 800c1ec:	4602      	mov	r2, r0
 800c1ee:	460b      	mov	r3, r1
 800c1f0:	4650      	mov	r0, sl
 800c1f2:	4659      	mov	r1, fp
 800c1f4:	e618      	b.n	800be28 <__ieee754_pow+0x340>
 800c1f6:	2400      	movs	r4, #0
 800c1f8:	e68a      	b.n	800bf10 <__ieee754_pow+0x428>
 800c1fa:	2601      	movs	r6, #1
 800c1fc:	e6a0      	b.n	800bf40 <__ieee754_pow+0x458>
 800c1fe:	bf00      	nop
 800c200:	4a454eef 	.word	0x4a454eef
 800c204:	3fca7e28 	.word	0x3fca7e28
 800c208:	93c9db65 	.word	0x93c9db65
 800c20c:	3fcd864a 	.word	0x3fcd864a
 800c210:	a91d4101 	.word	0xa91d4101
 800c214:	3fd17460 	.word	0x3fd17460
 800c218:	518f264d 	.word	0x518f264d
 800c21c:	3fd55555 	.word	0x3fd55555
 800c220:	db6fabff 	.word	0xdb6fabff
 800c224:	3fdb6db6 	.word	0x3fdb6db6
 800c228:	33333303 	.word	0x33333303
 800c22c:	3fe33333 	.word	0x3fe33333
 800c230:	e0000000 	.word	0xe0000000
 800c234:	3feec709 	.word	0x3feec709
 800c238:	dc3a03fd 	.word	0xdc3a03fd
 800c23c:	3feec709 	.word	0x3feec709
 800c240:	145b01f5 	.word	0x145b01f5
 800c244:	be3e2fe0 	.word	0xbe3e2fe0
 800c248:	7ff00000 	.word	0x7ff00000
 800c24c:	43400000 	.word	0x43400000
 800c250:	0003988e 	.word	0x0003988e
 800c254:	000bb679 	.word	0x000bb679
 800c258:	0800cf00 	.word	0x0800cf00
 800c25c:	3ff00000 	.word	0x3ff00000
 800c260:	40080000 	.word	0x40080000
 800c264:	0800cee0 	.word	0x0800cee0
 800c268:	0800cef0 	.word	0x0800cef0
 800c26c:	a39a      	add	r3, pc, #616	@ (adr r3, 800c4d8 <__ieee754_pow+0x9f0>)
 800c26e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c272:	4630      	mov	r0, r6
 800c274:	4639      	mov	r1, r7
 800c276:	f7f3 ff79 	bl	800016c <__adddf3>
 800c27a:	4642      	mov	r2, r8
 800c27c:	e9cd 0100 	strd	r0, r1, [sp]
 800c280:	464b      	mov	r3, r9
 800c282:	4620      	mov	r0, r4
 800c284:	4629      	mov	r1, r5
 800c286:	f7f3 ff6f 	bl	8000168 <__aeabi_dsub>
 800c28a:	4602      	mov	r2, r0
 800c28c:	460b      	mov	r3, r1
 800c28e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c292:	f7f4 fbb1 	bl	80009f8 <__aeabi_dcmpgt>
 800c296:	2800      	cmp	r0, #0
 800c298:	f47f ae09 	bne.w	800beae <__ieee754_pow+0x3c6>
 800c29c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800c2a0:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 800c2a4:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 800c2a8:	fa43 fa0a 	asr.w	sl, r3, sl
 800c2ac:	44da      	add	sl, fp
 800c2ae:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800c2b2:	489b      	ldr	r0, [pc, #620]	@ (800c520 <__ieee754_pow+0xa38>)
 800c2b4:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 800c2b8:	4108      	asrs	r0, r1
 800c2ba:	ea00 030a 	and.w	r3, r0, sl
 800c2be:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800c2c2:	f1c1 0114 	rsb	r1, r1, #20
 800c2c6:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 800c2ca:	4640      	mov	r0, r8
 800c2cc:	fa4a fa01 	asr.w	sl, sl, r1
 800c2d0:	f1bb 0f00 	cmp.w	fp, #0
 800c2d4:	4649      	mov	r1, r9
 800c2d6:	f04f 0200 	mov.w	r2, #0
 800c2da:	bfb8      	it	lt
 800c2dc:	f1ca 0a00 	rsblt	sl, sl, #0
 800c2e0:	f7f3 ff42 	bl	8000168 <__aeabi_dsub>
 800c2e4:	4680      	mov	r8, r0
 800c2e6:	4689      	mov	r9, r1
 800c2e8:	2400      	movs	r4, #0
 800c2ea:	4632      	mov	r2, r6
 800c2ec:	463b      	mov	r3, r7
 800c2ee:	4640      	mov	r0, r8
 800c2f0:	4649      	mov	r1, r9
 800c2f2:	f7f3 ff3b 	bl	800016c <__adddf3>
 800c2f6:	a37a      	add	r3, pc, #488	@ (adr r3, 800c4e0 <__ieee754_pow+0x9f8>)
 800c2f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2fc:	4620      	mov	r0, r4
 800c2fe:	460d      	mov	r5, r1
 800c300:	f7f4 f8ea 	bl	80004d8 <__aeabi_dmul>
 800c304:	4642      	mov	r2, r8
 800c306:	464b      	mov	r3, r9
 800c308:	e9cd 0100 	strd	r0, r1, [sp]
 800c30c:	4620      	mov	r0, r4
 800c30e:	4629      	mov	r1, r5
 800c310:	f7f3 ff2a 	bl	8000168 <__aeabi_dsub>
 800c314:	4602      	mov	r2, r0
 800c316:	460b      	mov	r3, r1
 800c318:	4630      	mov	r0, r6
 800c31a:	4639      	mov	r1, r7
 800c31c:	f7f3 ff24 	bl	8000168 <__aeabi_dsub>
 800c320:	a371      	add	r3, pc, #452	@ (adr r3, 800c4e8 <__ieee754_pow+0xa00>)
 800c322:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c326:	f7f4 f8d7 	bl	80004d8 <__aeabi_dmul>
 800c32a:	a371      	add	r3, pc, #452	@ (adr r3, 800c4f0 <__ieee754_pow+0xa08>)
 800c32c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c330:	4680      	mov	r8, r0
 800c332:	4689      	mov	r9, r1
 800c334:	4620      	mov	r0, r4
 800c336:	4629      	mov	r1, r5
 800c338:	f7f4 f8ce 	bl	80004d8 <__aeabi_dmul>
 800c33c:	4602      	mov	r2, r0
 800c33e:	460b      	mov	r3, r1
 800c340:	4640      	mov	r0, r8
 800c342:	4649      	mov	r1, r9
 800c344:	f7f3 ff12 	bl	800016c <__adddf3>
 800c348:	4604      	mov	r4, r0
 800c34a:	460d      	mov	r5, r1
 800c34c:	4602      	mov	r2, r0
 800c34e:	460b      	mov	r3, r1
 800c350:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c354:	f7f3 ff0a 	bl	800016c <__adddf3>
 800c358:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c35c:	4680      	mov	r8, r0
 800c35e:	4689      	mov	r9, r1
 800c360:	f7f3 ff02 	bl	8000168 <__aeabi_dsub>
 800c364:	4602      	mov	r2, r0
 800c366:	460b      	mov	r3, r1
 800c368:	4620      	mov	r0, r4
 800c36a:	4629      	mov	r1, r5
 800c36c:	f7f3 fefc 	bl	8000168 <__aeabi_dsub>
 800c370:	4642      	mov	r2, r8
 800c372:	4606      	mov	r6, r0
 800c374:	460f      	mov	r7, r1
 800c376:	464b      	mov	r3, r9
 800c378:	4640      	mov	r0, r8
 800c37a:	4649      	mov	r1, r9
 800c37c:	f7f4 f8ac 	bl	80004d8 <__aeabi_dmul>
 800c380:	a35d      	add	r3, pc, #372	@ (adr r3, 800c4f8 <__ieee754_pow+0xa10>)
 800c382:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c386:	4604      	mov	r4, r0
 800c388:	460d      	mov	r5, r1
 800c38a:	f7f4 f8a5 	bl	80004d8 <__aeabi_dmul>
 800c38e:	a35c      	add	r3, pc, #368	@ (adr r3, 800c500 <__ieee754_pow+0xa18>)
 800c390:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c394:	f7f3 fee8 	bl	8000168 <__aeabi_dsub>
 800c398:	4622      	mov	r2, r4
 800c39a:	462b      	mov	r3, r5
 800c39c:	f7f4 f89c 	bl	80004d8 <__aeabi_dmul>
 800c3a0:	a359      	add	r3, pc, #356	@ (adr r3, 800c508 <__ieee754_pow+0xa20>)
 800c3a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3a6:	f7f3 fee1 	bl	800016c <__adddf3>
 800c3aa:	4622      	mov	r2, r4
 800c3ac:	462b      	mov	r3, r5
 800c3ae:	f7f4 f893 	bl	80004d8 <__aeabi_dmul>
 800c3b2:	a357      	add	r3, pc, #348	@ (adr r3, 800c510 <__ieee754_pow+0xa28>)
 800c3b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3b8:	f7f3 fed6 	bl	8000168 <__aeabi_dsub>
 800c3bc:	4622      	mov	r2, r4
 800c3be:	462b      	mov	r3, r5
 800c3c0:	f7f4 f88a 	bl	80004d8 <__aeabi_dmul>
 800c3c4:	a354      	add	r3, pc, #336	@ (adr r3, 800c518 <__ieee754_pow+0xa30>)
 800c3c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3ca:	f7f3 fecf 	bl	800016c <__adddf3>
 800c3ce:	4622      	mov	r2, r4
 800c3d0:	462b      	mov	r3, r5
 800c3d2:	f7f4 f881 	bl	80004d8 <__aeabi_dmul>
 800c3d6:	4602      	mov	r2, r0
 800c3d8:	460b      	mov	r3, r1
 800c3da:	4640      	mov	r0, r8
 800c3dc:	4649      	mov	r1, r9
 800c3de:	f7f3 fec3 	bl	8000168 <__aeabi_dsub>
 800c3e2:	4604      	mov	r4, r0
 800c3e4:	460d      	mov	r5, r1
 800c3e6:	4602      	mov	r2, r0
 800c3e8:	460b      	mov	r3, r1
 800c3ea:	4640      	mov	r0, r8
 800c3ec:	4649      	mov	r1, r9
 800c3ee:	f7f4 f873 	bl	80004d8 <__aeabi_dmul>
 800c3f2:	2200      	movs	r2, #0
 800c3f4:	e9cd 0100 	strd	r0, r1, [sp]
 800c3f8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800c3fc:	4620      	mov	r0, r4
 800c3fe:	4629      	mov	r1, r5
 800c400:	f7f3 feb2 	bl	8000168 <__aeabi_dsub>
 800c404:	4602      	mov	r2, r0
 800c406:	460b      	mov	r3, r1
 800c408:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c40c:	f7f4 f98e 	bl	800072c <__aeabi_ddiv>
 800c410:	4632      	mov	r2, r6
 800c412:	4604      	mov	r4, r0
 800c414:	460d      	mov	r5, r1
 800c416:	463b      	mov	r3, r7
 800c418:	4640      	mov	r0, r8
 800c41a:	4649      	mov	r1, r9
 800c41c:	f7f4 f85c 	bl	80004d8 <__aeabi_dmul>
 800c420:	4632      	mov	r2, r6
 800c422:	463b      	mov	r3, r7
 800c424:	f7f3 fea2 	bl	800016c <__adddf3>
 800c428:	4602      	mov	r2, r0
 800c42a:	460b      	mov	r3, r1
 800c42c:	4620      	mov	r0, r4
 800c42e:	4629      	mov	r1, r5
 800c430:	f7f3 fe9a 	bl	8000168 <__aeabi_dsub>
 800c434:	4642      	mov	r2, r8
 800c436:	464b      	mov	r3, r9
 800c438:	f7f3 fe96 	bl	8000168 <__aeabi_dsub>
 800c43c:	4602      	mov	r2, r0
 800c43e:	460b      	mov	r3, r1
 800c440:	2000      	movs	r0, #0
 800c442:	4938      	ldr	r1, [pc, #224]	@ (800c524 <__ieee754_pow+0xa3c>)
 800c444:	f7f3 fe90 	bl	8000168 <__aeabi_dsub>
 800c448:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800c44c:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
 800c450:	da2e      	bge.n	800c4b0 <__ieee754_pow+0x9c8>
 800c452:	4652      	mov	r2, sl
 800c454:	f000 f874 	bl	800c540 <scalbn>
 800c458:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c45c:	f7ff bbed 	b.w	800bc3a <__ieee754_pow+0x152>
 800c460:	4c31      	ldr	r4, [pc, #196]	@ (800c528 <__ieee754_pow+0xa40>)
 800c462:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800c466:	42a3      	cmp	r3, r4
 800c468:	d91a      	bls.n	800c4a0 <__ieee754_pow+0x9b8>
 800c46a:	4b30      	ldr	r3, [pc, #192]	@ (800c52c <__ieee754_pow+0xa44>)
 800c46c:	440b      	add	r3, r1
 800c46e:	4303      	orrs	r3, r0
 800c470:	d009      	beq.n	800c486 <__ieee754_pow+0x99e>
 800c472:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c476:	2200      	movs	r2, #0
 800c478:	2300      	movs	r3, #0
 800c47a:	f7f4 fa9f 	bl	80009bc <__aeabi_dcmplt>
 800c47e:	3800      	subs	r0, #0
 800c480:	bf18      	it	ne
 800c482:	2001      	movne	r0, #1
 800c484:	e444      	b.n	800bd10 <__ieee754_pow+0x228>
 800c486:	4642      	mov	r2, r8
 800c488:	464b      	mov	r3, r9
 800c48a:	f7f3 fe6d 	bl	8000168 <__aeabi_dsub>
 800c48e:	4632      	mov	r2, r6
 800c490:	463b      	mov	r3, r7
 800c492:	f7f4 faa7 	bl	80009e4 <__aeabi_dcmpge>
 800c496:	2800      	cmp	r0, #0
 800c498:	d1eb      	bne.n	800c472 <__ieee754_pow+0x98a>
 800c49a:	f8df a094 	ldr.w	sl, [pc, #148]	@ 800c530 <__ieee754_pow+0xa48>
 800c49e:	e6fd      	b.n	800c29c <__ieee754_pow+0x7b4>
 800c4a0:	469a      	mov	sl, r3
 800c4a2:	4b24      	ldr	r3, [pc, #144]	@ (800c534 <__ieee754_pow+0xa4c>)
 800c4a4:	459a      	cmp	sl, r3
 800c4a6:	f63f aef9 	bhi.w	800c29c <__ieee754_pow+0x7b4>
 800c4aa:	f8dd a010 	ldr.w	sl, [sp, #16]
 800c4ae:	e71b      	b.n	800c2e8 <__ieee754_pow+0x800>
 800c4b0:	4621      	mov	r1, r4
 800c4b2:	e7d1      	b.n	800c458 <__ieee754_pow+0x970>
 800c4b4:	2000      	movs	r0, #0
 800c4b6:	491b      	ldr	r1, [pc, #108]	@ (800c524 <__ieee754_pow+0xa3c>)
 800c4b8:	f7ff bb34 	b.w	800bb24 <__ieee754_pow+0x3c>
 800c4bc:	2000      	movs	r0, #0
 800c4be:	2100      	movs	r1, #0
 800c4c0:	f7ff bb30 	b.w	800bb24 <__ieee754_pow+0x3c>
 800c4c4:	4650      	mov	r0, sl
 800c4c6:	4659      	mov	r1, fp
 800c4c8:	f7ff bb2c 	b.w	800bb24 <__ieee754_pow+0x3c>
 800c4cc:	460c      	mov	r4, r1
 800c4ce:	f7ff bb79 	b.w	800bbc4 <__ieee754_pow+0xdc>
 800c4d2:	2400      	movs	r4, #0
 800c4d4:	f7ff bb64 	b.w	800bba0 <__ieee754_pow+0xb8>
 800c4d8:	652b82fe 	.word	0x652b82fe
 800c4dc:	3c971547 	.word	0x3c971547
 800c4e0:	00000000 	.word	0x00000000
 800c4e4:	3fe62e43 	.word	0x3fe62e43
 800c4e8:	fefa39ef 	.word	0xfefa39ef
 800c4ec:	3fe62e42 	.word	0x3fe62e42
 800c4f0:	0ca86c39 	.word	0x0ca86c39
 800c4f4:	be205c61 	.word	0xbe205c61
 800c4f8:	72bea4d0 	.word	0x72bea4d0
 800c4fc:	3e663769 	.word	0x3e663769
 800c500:	c5d26bf1 	.word	0xc5d26bf1
 800c504:	3ebbbd41 	.word	0x3ebbbd41
 800c508:	af25de2c 	.word	0xaf25de2c
 800c50c:	3f11566a 	.word	0x3f11566a
 800c510:	16bebd93 	.word	0x16bebd93
 800c514:	3f66c16c 	.word	0x3f66c16c
 800c518:	5555553e 	.word	0x5555553e
 800c51c:	3fc55555 	.word	0x3fc55555
 800c520:	fff00000 	.word	0xfff00000
 800c524:	3ff00000 	.word	0x3ff00000
 800c528:	4090cbff 	.word	0x4090cbff
 800c52c:	3f6f3400 	.word	0x3f6f3400
 800c530:	4090cc00 	.word	0x4090cc00
 800c534:	3fe00000 	.word	0x3fe00000

0800c538 <fabs>:
 800c538:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800c53c:	4619      	mov	r1, r3
 800c53e:	4770      	bx	lr

0800c540 <scalbn>:
 800c540:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 800c544:	4616      	mov	r6, r2
 800c546:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800c54a:	4683      	mov	fp, r0
 800c54c:	468c      	mov	ip, r1
 800c54e:	460b      	mov	r3, r1
 800c550:	b982      	cbnz	r2, 800c574 <scalbn+0x34>
 800c552:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800c556:	4303      	orrs	r3, r0
 800c558:	d039      	beq.n	800c5ce <scalbn+0x8e>
 800c55a:	4b2f      	ldr	r3, [pc, #188]	@ (800c618 <scalbn+0xd8>)
 800c55c:	2200      	movs	r2, #0
 800c55e:	f7f3 ffbb 	bl	80004d8 <__aeabi_dmul>
 800c562:	4b2e      	ldr	r3, [pc, #184]	@ (800c61c <scalbn+0xdc>)
 800c564:	4683      	mov	fp, r0
 800c566:	429e      	cmp	r6, r3
 800c568:	468c      	mov	ip, r1
 800c56a:	da0d      	bge.n	800c588 <scalbn+0x48>
 800c56c:	a326      	add	r3, pc, #152	@ (adr r3, 800c608 <scalbn+0xc8>)
 800c56e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c572:	e01b      	b.n	800c5ac <scalbn+0x6c>
 800c574:	f240 77ff 	movw	r7, #2047	@ 0x7ff
 800c578:	42ba      	cmp	r2, r7
 800c57a:	d109      	bne.n	800c590 <scalbn+0x50>
 800c57c:	4602      	mov	r2, r0
 800c57e:	f7f3 fdf5 	bl	800016c <__adddf3>
 800c582:	4683      	mov	fp, r0
 800c584:	468c      	mov	ip, r1
 800c586:	e022      	b.n	800c5ce <scalbn+0x8e>
 800c588:	460b      	mov	r3, r1
 800c58a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800c58e:	3a36      	subs	r2, #54	@ 0x36
 800c590:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800c594:	428e      	cmp	r6, r1
 800c596:	dd0c      	ble.n	800c5b2 <scalbn+0x72>
 800c598:	a31d      	add	r3, pc, #116	@ (adr r3, 800c610 <scalbn+0xd0>)
 800c59a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c59e:	461c      	mov	r4, r3
 800c5a0:	ea4f 71dc 	mov.w	r1, ip, lsr #31
 800c5a4:	f361 74df 	bfi	r4, r1, #31, #1
 800c5a8:	4621      	mov	r1, r4
 800c5aa:	481d      	ldr	r0, [pc, #116]	@ (800c620 <scalbn+0xe0>)
 800c5ac:	f7f3 ff94 	bl	80004d8 <__aeabi_dmul>
 800c5b0:	e7e7      	b.n	800c582 <scalbn+0x42>
 800c5b2:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800c5b6:	4432      	add	r2, r6
 800c5b8:	428a      	cmp	r2, r1
 800c5ba:	dced      	bgt.n	800c598 <scalbn+0x58>
 800c5bc:	2a00      	cmp	r2, #0
 800c5be:	dd0a      	ble.n	800c5d6 <scalbn+0x96>
 800c5c0:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800c5c4:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800c5c8:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800c5cc:	46ac      	mov	ip, r5
 800c5ce:	4658      	mov	r0, fp
 800c5d0:	4661      	mov	r1, ip
 800c5d2:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 800c5d6:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800c5da:	da09      	bge.n	800c5f0 <scalbn+0xb0>
 800c5dc:	f00c 4300 	and.w	r3, ip, #2147483648	@ 0x80000000
 800c5e0:	f043 71d2 	orr.w	r1, r3, #27525120	@ 0x1a40000
 800c5e4:	f441 31b7 	orr.w	r1, r1, #93696	@ 0x16e00
 800c5e8:	480e      	ldr	r0, [pc, #56]	@ (800c624 <scalbn+0xe4>)
 800c5ea:	f041 011f 	orr.w	r1, r1, #31
 800c5ee:	e7bd      	b.n	800c56c <scalbn+0x2c>
 800c5f0:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800c5f4:	3236      	adds	r2, #54	@ 0x36
 800c5f6:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800c5fa:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800c5fe:	4658      	mov	r0, fp
 800c600:	4629      	mov	r1, r5
 800c602:	2200      	movs	r2, #0
 800c604:	4b08      	ldr	r3, [pc, #32]	@ (800c628 <scalbn+0xe8>)
 800c606:	e7d1      	b.n	800c5ac <scalbn+0x6c>
 800c608:	c2f8f359 	.word	0xc2f8f359
 800c60c:	01a56e1f 	.word	0x01a56e1f
 800c610:	8800759c 	.word	0x8800759c
 800c614:	7e37e43c 	.word	0x7e37e43c
 800c618:	43500000 	.word	0x43500000
 800c61c:	ffff3cb0 	.word	0xffff3cb0
 800c620:	8800759c 	.word	0x8800759c
 800c624:	c2f8f359 	.word	0xc2f8f359
 800c628:	3c900000 	.word	0x3c900000

0800c62c <with_errno>:
 800c62c:	b570      	push	{r4, r5, r6, lr}
 800c62e:	4604      	mov	r4, r0
 800c630:	460d      	mov	r5, r1
 800c632:	4616      	mov	r6, r2
 800c634:	f7fb fa76 	bl	8007b24 <__errno>
 800c638:	4629      	mov	r1, r5
 800c63a:	6006      	str	r6, [r0, #0]
 800c63c:	4620      	mov	r0, r4
 800c63e:	bd70      	pop	{r4, r5, r6, pc}

0800c640 <xflow>:
 800c640:	b513      	push	{r0, r1, r4, lr}
 800c642:	4604      	mov	r4, r0
 800c644:	4619      	mov	r1, r3
 800c646:	4610      	mov	r0, r2
 800c648:	b10c      	cbz	r4, 800c64e <xflow+0xe>
 800c64a:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800c64e:	e9cd 2300 	strd	r2, r3, [sp]
 800c652:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c656:	f7f3 ff3f 	bl	80004d8 <__aeabi_dmul>
 800c65a:	2222      	movs	r2, #34	@ 0x22
 800c65c:	b002      	add	sp, #8
 800c65e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c662:	f7ff bfe3 	b.w	800c62c <with_errno>

0800c666 <__math_uflow>:
 800c666:	2200      	movs	r2, #0
 800c668:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800c66c:	f7ff bfe8 	b.w	800c640 <xflow>

0800c670 <__math_oflow>:
 800c670:	2200      	movs	r2, #0
 800c672:	f04f 43e0 	mov.w	r3, #1879048192	@ 0x70000000
 800c676:	f7ff bfe3 	b.w	800c640 <xflow>
	...

0800c67c <__ieee754_sqrt>:
 800c67c:	4a67      	ldr	r2, [pc, #412]	@ (800c81c <__ieee754_sqrt+0x1a0>)
 800c67e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c682:	438a      	bics	r2, r1
 800c684:	4606      	mov	r6, r0
 800c686:	460f      	mov	r7, r1
 800c688:	460b      	mov	r3, r1
 800c68a:	4604      	mov	r4, r0
 800c68c:	d10e      	bne.n	800c6ac <__ieee754_sqrt+0x30>
 800c68e:	4602      	mov	r2, r0
 800c690:	f7f3 ff22 	bl	80004d8 <__aeabi_dmul>
 800c694:	4602      	mov	r2, r0
 800c696:	460b      	mov	r3, r1
 800c698:	4630      	mov	r0, r6
 800c69a:	4639      	mov	r1, r7
 800c69c:	f7f3 fd66 	bl	800016c <__adddf3>
 800c6a0:	4606      	mov	r6, r0
 800c6a2:	460f      	mov	r7, r1
 800c6a4:	4630      	mov	r0, r6
 800c6a6:	4639      	mov	r1, r7
 800c6a8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c6ac:	2900      	cmp	r1, #0
 800c6ae:	dc0c      	bgt.n	800c6ca <__ieee754_sqrt+0x4e>
 800c6b0:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 800c6b4:	4302      	orrs	r2, r0
 800c6b6:	d0f5      	beq.n	800c6a4 <__ieee754_sqrt+0x28>
 800c6b8:	b189      	cbz	r1, 800c6de <__ieee754_sqrt+0x62>
 800c6ba:	4602      	mov	r2, r0
 800c6bc:	f7f3 fd54 	bl	8000168 <__aeabi_dsub>
 800c6c0:	4602      	mov	r2, r0
 800c6c2:	460b      	mov	r3, r1
 800c6c4:	f7f4 f832 	bl	800072c <__aeabi_ddiv>
 800c6c8:	e7ea      	b.n	800c6a0 <__ieee754_sqrt+0x24>
 800c6ca:	150a      	asrs	r2, r1, #20
 800c6cc:	d115      	bne.n	800c6fa <__ieee754_sqrt+0x7e>
 800c6ce:	2100      	movs	r1, #0
 800c6d0:	e009      	b.n	800c6e6 <__ieee754_sqrt+0x6a>
 800c6d2:	0ae3      	lsrs	r3, r4, #11
 800c6d4:	3a15      	subs	r2, #21
 800c6d6:	0564      	lsls	r4, r4, #21
 800c6d8:	2b00      	cmp	r3, #0
 800c6da:	d0fa      	beq.n	800c6d2 <__ieee754_sqrt+0x56>
 800c6dc:	e7f7      	b.n	800c6ce <__ieee754_sqrt+0x52>
 800c6de:	460a      	mov	r2, r1
 800c6e0:	e7fa      	b.n	800c6d8 <__ieee754_sqrt+0x5c>
 800c6e2:	005b      	lsls	r3, r3, #1
 800c6e4:	3101      	adds	r1, #1
 800c6e6:	02d8      	lsls	r0, r3, #11
 800c6e8:	d5fb      	bpl.n	800c6e2 <__ieee754_sqrt+0x66>
 800c6ea:	1e48      	subs	r0, r1, #1
 800c6ec:	1a12      	subs	r2, r2, r0
 800c6ee:	f1c1 0020 	rsb	r0, r1, #32
 800c6f2:	fa24 f000 	lsr.w	r0, r4, r0
 800c6f6:	4303      	orrs	r3, r0
 800c6f8:	408c      	lsls	r4, r1
 800c6fa:	2600      	movs	r6, #0
 800c6fc:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 800c700:	2116      	movs	r1, #22
 800c702:	07d2      	lsls	r2, r2, #31
 800c704:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 800c708:	4632      	mov	r2, r6
 800c70a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c70e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c712:	bf5c      	itt	pl
 800c714:	005b      	lslpl	r3, r3, #1
 800c716:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 800c71a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800c71e:	bf58      	it	pl
 800c720:	0064      	lslpl	r4, r4, #1
 800c722:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 800c726:	107f      	asrs	r7, r7, #1
 800c728:	0064      	lsls	r4, r4, #1
 800c72a:	1815      	adds	r5, r2, r0
 800c72c:	429d      	cmp	r5, r3
 800c72e:	bfde      	ittt	le
 800c730:	182a      	addle	r2, r5, r0
 800c732:	1b5b      	suble	r3, r3, r5
 800c734:	1836      	addle	r6, r6, r0
 800c736:	0fe5      	lsrs	r5, r4, #31
 800c738:	3901      	subs	r1, #1
 800c73a:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 800c73e:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800c742:	ea4f 0050 	mov.w	r0, r0, lsr #1
 800c746:	d1f0      	bne.n	800c72a <__ieee754_sqrt+0xae>
 800c748:	460d      	mov	r5, r1
 800c74a:	f04f 0a20 	mov.w	sl, #32
 800c74e:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 800c752:	429a      	cmp	r2, r3
 800c754:	eb01 0c00 	add.w	ip, r1, r0
 800c758:	db02      	blt.n	800c760 <__ieee754_sqrt+0xe4>
 800c75a:	d113      	bne.n	800c784 <__ieee754_sqrt+0x108>
 800c75c:	45a4      	cmp	ip, r4
 800c75e:	d811      	bhi.n	800c784 <__ieee754_sqrt+0x108>
 800c760:	f1bc 0f00 	cmp.w	ip, #0
 800c764:	eb0c 0100 	add.w	r1, ip, r0
 800c768:	da42      	bge.n	800c7f0 <__ieee754_sqrt+0x174>
 800c76a:	2900      	cmp	r1, #0
 800c76c:	db40      	blt.n	800c7f0 <__ieee754_sqrt+0x174>
 800c76e:	f102 0e01 	add.w	lr, r2, #1
 800c772:	1a9b      	subs	r3, r3, r2
 800c774:	4672      	mov	r2, lr
 800c776:	45a4      	cmp	ip, r4
 800c778:	bf88      	it	hi
 800c77a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800c77e:	eba4 040c 	sub.w	r4, r4, ip
 800c782:	4405      	add	r5, r0
 800c784:	ea4f 7cd4 	mov.w	ip, r4, lsr #31
 800c788:	f1ba 0a01 	subs.w	sl, sl, #1
 800c78c:	eb0c 0343 	add.w	r3, ip, r3, lsl #1
 800c790:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800c794:	ea4f 0050 	mov.w	r0, r0, lsr #1
 800c798:	d1db      	bne.n	800c752 <__ieee754_sqrt+0xd6>
 800c79a:	431c      	orrs	r4, r3
 800c79c:	d01a      	beq.n	800c7d4 <__ieee754_sqrt+0x158>
 800c79e:	4c20      	ldr	r4, [pc, #128]	@ (800c820 <__ieee754_sqrt+0x1a4>)
 800c7a0:	f8df b080 	ldr.w	fp, [pc, #128]	@ 800c824 <__ieee754_sqrt+0x1a8>
 800c7a4:	e9d4 0100 	ldrd	r0, r1, [r4]
 800c7a8:	e9db 2300 	ldrd	r2, r3, [fp]
 800c7ac:	f7f3 fcdc 	bl	8000168 <__aeabi_dsub>
 800c7b0:	e9d4 8900 	ldrd	r8, r9, [r4]
 800c7b4:	4602      	mov	r2, r0
 800c7b6:	460b      	mov	r3, r1
 800c7b8:	4640      	mov	r0, r8
 800c7ba:	4649      	mov	r1, r9
 800c7bc:	f7f4 f908 	bl	80009d0 <__aeabi_dcmple>
 800c7c0:	b140      	cbz	r0, 800c7d4 <__ieee754_sqrt+0x158>
 800c7c2:	e9d4 0100 	ldrd	r0, r1, [r4]
 800c7c6:	e9db 2300 	ldrd	r2, r3, [fp]
 800c7ca:	f1b5 3fff 	cmp.w	r5, #4294967295
 800c7ce:	d111      	bne.n	800c7f4 <__ieee754_sqrt+0x178>
 800c7d0:	4655      	mov	r5, sl
 800c7d2:	3601      	adds	r6, #1
 800c7d4:	1072      	asrs	r2, r6, #1
 800c7d6:	086b      	lsrs	r3, r5, #1
 800c7d8:	07f1      	lsls	r1, r6, #31
 800c7da:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800c7de:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800c7e2:	bf48      	it	mi
 800c7e4:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800c7e8:	4618      	mov	r0, r3
 800c7ea:	eb02 5107 	add.w	r1, r2, r7, lsl #20
 800c7ee:	e757      	b.n	800c6a0 <__ieee754_sqrt+0x24>
 800c7f0:	4696      	mov	lr, r2
 800c7f2:	e7be      	b.n	800c772 <__ieee754_sqrt+0xf6>
 800c7f4:	f7f3 fcba 	bl	800016c <__adddf3>
 800c7f8:	e9d4 8900 	ldrd	r8, r9, [r4]
 800c7fc:	4602      	mov	r2, r0
 800c7fe:	460b      	mov	r3, r1
 800c800:	4640      	mov	r0, r8
 800c802:	4649      	mov	r1, r9
 800c804:	f7f4 f8da 	bl	80009bc <__aeabi_dcmplt>
 800c808:	b120      	cbz	r0, 800c814 <__ieee754_sqrt+0x198>
 800c80a:	1ca8      	adds	r0, r5, #2
 800c80c:	bf08      	it	eq
 800c80e:	3601      	addeq	r6, #1
 800c810:	3502      	adds	r5, #2
 800c812:	e7df      	b.n	800c7d4 <__ieee754_sqrt+0x158>
 800c814:	1c6b      	adds	r3, r5, #1
 800c816:	f023 0501 	bic.w	r5, r3, #1
 800c81a:	e7db      	b.n	800c7d4 <__ieee754_sqrt+0x158>
 800c81c:	7ff00000 	.word	0x7ff00000
 800c820:	200001e0 	.word	0x200001e0
 800c824:	200001d8 	.word	0x200001d8

0800c828 <_init>:
 800c828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c82a:	bf00      	nop
 800c82c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c82e:	bc08      	pop	{r3}
 800c830:	469e      	mov	lr, r3
 800c832:	4770      	bx	lr

0800c834 <_fini>:
 800c834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c836:	bf00      	nop
 800c838:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c83a:	bc08      	pop	{r3}
 800c83c:	469e      	mov	lr, r3
 800c83e:	4770      	bx	lr
